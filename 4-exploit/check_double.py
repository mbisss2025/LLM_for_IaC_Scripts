import pandas as pd
from IPython.display import display  # Pour l'affichage amélioré dans Jupyter

def detecter_doublons(fichier_entree, colonnes_a_verifier=None):
    """
    Détecte les doublons et sauvegarde les entrées uniques dans un fichier Excel.
    
    Args:
        fichier_entree (str): Chemin vers le fichier Excel
        colonnes_a_verifier (list): Liste des colonnes pour identifier les doublons
                                   Si None, vérifie par défaut ['filepath', 'line', 'code_snippet']
    """
    # Charger le fichier
    try:
        df = pd.read_excel(fichier_entree)
    except Exception as e:
        print(f"Erreur lors de la lecture du fichier : {e}")
        return
    
    # Colonnes par défaut si non spécifiées
    if colonnes_a_verifier is None:
        colonnes_a_verifier = ['filepath', 'line', 'code_snippet']
    
    # Vérifier que les colonnes existent
    colonnes_disponibles = df.columns.tolist()
    colonnes_manquantes = [col for col in colonnes_a_verifier if col not in colonnes_disponibles]
    
    if colonnes_manquantes:
        print(f"Attention : Colonnes manquantes dans le fichier - {colonnes_manquantes}")
        print(f"Colonnes disponibles : {colonnes_disponibles}")
        return
    
    # Création du dataframe des entrées uniques
    entrees_uniques = df.drop_duplicates(subset=colonnes_a_verifier, keep='first')
    
    # Détection des doublons (pour les stats seulement)
    doublons = df[df.duplicated(subset=colonnes_a_verifier, keep=False)]
    nb_doublons = len(df) - len(entrees_uniques)
    
    # Affichage des résultats
    print(f"\n=== Analyse des doublons ===")
    print(f"Fichier analysé : {fichier_entree}")
    print(f"Colonnes vérifiées : {colonnes_a_verifier}")
    print(f"Total entrées : {len(df)}")
    print(f"Entrées uniques : {len(entrees_uniques)}")
    print(f"Entrées en double : {nb_doublons}")
    
    if nb_doublons > 0:
        print("\nExemples de doublons trouvés :")
        display(doublons.sort_values(colonnes_a_verifier).head(10))
    else:
        print("\nAucun doublon trouvé avec ces critères.")
    
    # Sauvegarde des entrées uniques
    nom_base = fichier_entree.split('.xlsx')[0]
    output_path = f"{nom_base}_uniques_{'_'.join(colonnes_a_verifier)}.xlsx"
    entrees_uniques.to_excel(output_path, index=False)
    print(f"\nLes entrées uniques ont été sauvegardées dans : {output_path}")

# Exemple d'utilisation
if __name__ == "__main__":
    fichier = input("Entrez le chemin du fichier Excel à analyser : ")
    
    # Options de vérification (modifiable selon vos besoins)
    options_verification = [
        ['filepath', 'line'],  # Unicité fichier + ligne
        ['filepath', 'line', 'code_snippet'],
        ['commit_url', 'filepath', 'line', 'code_snippet'],  # Unicité complète
        ['commit_url', 'filepath', 'line'],
        ['filepath'],  # Unicité par fichier
        ['commit_url']  # Unicité par URL de commit
    ]
    
    print("\nOptions de détection disponibles :")
    for i, option in enumerate(options_verification, 1):
        print(f"{i}. {option}")
    
    choix = input("\nChoisissez le type de vérification (numéro) ou 'tous' : ")
    
    if choix.lower() == 'tous':
        for option in options_verification:
            detecter_doublons(fichier, option)
    elif choix.isdigit() and 0 < int(choix) <= len(options_verification):
        detecter_doublons(fichier, options_verification[int(choix)-1])
    else:
        print("Option invalide. Utilisation des paramètres par défaut.")
        detecter_doublons(fichier)