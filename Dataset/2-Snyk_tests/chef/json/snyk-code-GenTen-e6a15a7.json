{
  "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "SnykCode",
          "semanticVersion": "1.0.0",
          "version": "1.0.0",
          "rules": [
            {
              "id": "cpp/DoubleFree/test",
              "name": "DoubleFree/test",
              "shortDescription": {
                "text": "Double Free"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "\n## Details\n\nThe same memory address is released more than once, (ie - `free()` or `delete` is called on the same value multiple times).\n\nThis can corrupt the program's memory management data structures, and subsequently cause the program to crash, or lead to undefined behaviour, such as allowing two separate calls to `malloc()` to return the same address.\n\nThis in turn can lead to buffer overflow vulnerabilities, as well as undefined behaviour.\n\n## Best practices for prevention\n* Store a new value in pointers immediately after `free()`\n  * The new value can be:\n    * a constant that can be checked (ie, `NULL`), or\n    * a reference to another valid object.\n\n\n## References\n\n* [CERT MEM01-C](https://wiki.sei.cmu.edu/confluence/pages/viewpage.action?pageId=87152148)",
                "text": ""
              },
              "properties": {
                "tags": [
                  "cpp",
                  "DoubleFree",
                  "Security",
                  "InTest",
                  "FreeResource"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/ElektraInitiative/libelektra/commit/e6edbaec27d9752248be7638aed92f666e7b15bc?diff=split#diff-961d573cf3f4b1faa46e6461a1a0827faec87503c558a4c238c5f612f0873695L-1",
                    "lines": [
                      {
                        "line": "\t\t\tfree (value);\n",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tkeyDel (read);\n",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\treturn -1;\n",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t// TODO: check for null keys\n",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tkeySetString(read, value);\n",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tksAppendKey (returned, read);\n",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfree(value);\n",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tlen=0;\n",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 66,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/cvxgrp/qcml/commit/148b45fbab9f797b3679506dbd156059d015e546?diff=split#diff-73f629e733c4fe4ae4aa9228e87de2e9c994e46da7967e5d034db487a21227caL-1",
                    "lines": [
                      {
                        "line": "if (data->Ai) free(data->Ai);\n",
                        "lineNumber": 11,
                        "lineChange": "removed"
                      },
                      {
                        "line": "if (data->Ax) free(data->Ax);\n",
                        "lineNumber": 11,
                        "lineChange": "added"
                      },
                      {
                        "line": "if (data->Ap) free(data->Ap);\n",
                        "lineNumber": 12,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (data->Ai) free(data->Ai);\n",
                        "lineNumber": 13,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/hturner08/pystructures/commit/045533563d1d2cf533f71cd3c4a8fc8e24208661?diff=split#diff-626f2ad883e97e722829bc18581b68f8f1a394e5ec5a1c72b5e28f55f0870026L-1",
                    "lines": [
                      {
                        "line": "free(stack);\r\n",
                        "lineNumber": 11,
                        "lineChange": "removed"
                      },
                      {
                        "line": "free(tree);\r\n",
                        "lineNumber": 12,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 37,
                "cwe": [
                  "CWE-415"
                ]
              }
            },
            {
              "id": "cpp/MemoryLeak/test",
              "name": "MemoryLeak/test",
              "shortDescription": {
                "text": "Missing Release of Memory after Effective Lifetime"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "\n## Details\n\nHeap allocated memory is not sufficiently tracked and released after it is has been used, which slowly consumes remaining memory.\n\n\n## Best practices for Prevention\n* Allocate and free memory in the same module, at the same level of abstraction, [see example](https://wiki.sei.cmu.edu/confluence/display/c/MEM00-C.+Allocate+and+free+memory+in+the+same+module%2C+at+the+same+level+of+abstraction)\n\n\n## References\n* [CERT MEM00-C](https://wiki.sei.cmu.edu/confluence/display/c/MEM00-C.+Allocate+and+free+memory+in+the+same+module%2C+at+the+same+level+of+abstraction)",
                "text": ""
              },
              "properties": {
                "tags": [
                  "cpp",
                  "MemoryLeak",
                  "Security",
                  "InTest"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/luohaha/CSpider/commit/16cfb833cc993dc4a70a485737ae58990847f0aa?diff=split#diff-73ac80300bd77b06962065e0f2b544ff11b545899c989846a9b78cf07406d4e2L-1",
                    "lines": [
                      {
                        "line": "char *buf = (char*)malloc(sizeof(char));\n",
                        "lineNumber": 19,
                        "lineChange": "none"
                      },
                      {
                        "line": "node->data = &buf;\n",
                        "lineNumber": 20,
                        "lineChange": "removed"
                      },
                      {
                        "line": "node->data = buf;\n",
                        "lineNumber": 20,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/BergerLab/CAST/commit/b5c9257229b30604b30b5e363e816bcfe433ee21?diff=split#diff-40aa21688f1ac58ddf8ef5f0f4e472e6075411f5c4f75b9c1d512b7e03a2cbabL-1",
                    "lines": [
                      {
                        "line": "    int *indices = malloc((len+1)*sizeof(*indices));\n",
                        "lineNumber": 148,
                        "lineChange": "none"
                      },
                      {
                        "line": "    assert(indices);\n",
                        "lineNumber": 149,
                        "lineChange": "none"
                      },
                      {
                        "line": "    \n",
                        "lineNumber": 150,
                        "lineChange": "none"
                      },
                      {
                        "line": "    for (int i = 0; i <= len; i++) {\n",
                        "lineNumber": 151,
                        "lineChange": "none"
                      },
                      {
                        "line": "        l = w;\n",
                        "lineNumber": 152,
                        "lineChange": "none"
                      },
                      {
                        "line": "        w = line[i] != '\\t' && line[i] != '\\0';\n",
                        "lineNumber": 153,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if (w != l || (l && i == len) || i == 0)\n",
                        "lineNumber": 154,
                        "lineChange": "none"
                      },
                      {
                        "line": "            indices[num_sections++] = i;\n",
                        "lineNumber": 155,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }\n",
                        "lineNumber": 156,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 157,
                        "lineChange": "none"
                      },
                      {
                        "line": "    char **words = malloc((num_sections/2+1)*sizeof(*words));\n",
                        "lineNumber": 158,
                        "lineChange": "none"
                      },
                      {
                        "line": "    assert(words);\n",
                        "lineNumber": 159,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 160,
                        "lineChange": "none"
                      },
                      {
                        "line": "    words[num_sections/2] = NULL;\n",
                        "lineNumber": 161,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 162,
                        "lineChange": "none"
                      },
                      {
                        "line": "    for (int i = 0; i < num_sections-1; i++)\n",
                        "lineNumber": 163,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if (i % 2 != m) {\n",
                        "lineNumber": 164,
                        "lineChange": "none"
                      },
                      {
                        "line": "            words[i/2] = malloc((indices[i+1]-indices[i]+1)*sizeof(*words));\n",
                        "lineNumber": 165,
                        "lineChange": "none"
                      },
                      {
                        "line": "            assert(words[i/2]);\n",
                        "lineNumber": 166,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 167,
                        "lineChange": "none"
                      },
                      {
                        "line": "            strncpy(words[i/2], line+indices[i], indices[i+1]-indices[i]);\n",
                        "lineNumber": 168,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 169,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 170,
                        "lineChange": "none"
                      },
                      {
                        "line": "    free(indices);\n",
                        "lineNumber": 171,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 172,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/stanfordnlp/spinn/commit/b3575456973332425d9ce4339ca50a7514461795?diff=split#diff-64540c38ca1b79e4e84eecff13ce24011cc4e92689e96ddf84ffa904a5c4456dL-1",
                    "lines": [
                      {
                        "line": "  float *ret = (float *) malloc(N * sizeof(float));\n",
                        "lineNumber": 3,
                        "lineChange": "none"
                      },
                      {
                        "line": "  ifstream file(filename);\n",
                        "lineNumber": 4,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 5,
                        "lineChange": "none"
                      },
                      {
                        "line": "  float x;\n",
                        "lineNumber": 6,
                        "lineChange": "none"
                      },
                      {
                        "line": "  for (int i = 0; i < N; i++) {\n",
                        "lineNumber": 7,
                        "lineChange": "none"
                      },
                      {
                        "line": "    file >> x;\n",
                        "lineNumber": 8,
                        "lineChange": "none"
                      },
                      {
                        "line": "    cout << x << endl;\n",
                        "lineNumber": 9,
                        "lineChange": "none"
                      },
                      {
                        "line": "    ret[i] = x;\n",
                        "lineNumber": 10,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 11,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 12,
                        "lineChange": "added"
                      },
                      {
                        "line": "  return ret;\n",
                        "lineNumber": 13,
                        "lineChange": "added"
                      },
                      {
                        "line": "}\n",
                        "lineNumber": 14,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 15,
                        "lineChange": "none"
                      },
                      {
                        "line": "float *load_weights_cuda(string filename, int N) {\n",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": "  float *h_weights = load_weights(filename, N);\n",
                        "lineNumber": 17,
                        "lineChange": "none"
                      },
                      {
                        "line": "  float *d_weights;\n",
                        "lineNumber": 18,
                        "lineChange": "none"
                      },
                      {
                        "line": "  cudaMalloc(&d_weights, N * sizeof(float));\n",
                        "lineNumber": 19,
                        "lineChange": "none"
                      },
                      {
                        "line": "  cudaMemcpy(d_weights, h_weights, N * sizeof(float),\n",
                        "lineNumber": 20,
                        "lineChange": "none"
                      },
                      {
                        "line": "      cudaMemcpyHostToDevice);\n",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "  free(h_weights);\n",
                        "lineNumber": 22,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 35,
                "cwe": [
                  "CWE-401"
                ]
              }
            },
            {
              "id": "cpp/MemsetMayBeOptimizedAway/test",
              "name": "MemsetMayBeOptimizedAway/test",
              "shortDescription": {
                "text": "An optimizing compiler may remove memset non-zero leaving data in memory"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "\n## Details\n\nIf a pointer to an object is passed to memset and not used after the call, an optimizing compiler might remove this call. This can prevent the desired memory from being zeroed.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "cpp",
                  "MemsetMayBeOptimizedAway",
                  "Security",
                  "InTest"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/stella-emu/stella/commit/354d5aa35ae08e04e54ee258cc62811d2ed0536f?diff=split#diff-e5c5dae8df3c6d32f27484c6d5be7a995ef1d9a396db4e5f64bd336495f3868bL-1",
                    "lines": [
                      {
                        "line": "    memset(myCount, 0, sizeof(myCount));\n",
                        "lineNumber": 36,
                        "lineChange": "removed"
                      },
                      {
                        "line": "      myCount.fill(0);\n",
                        "lineNumber": 36,
                        "lineChange": "added"
                      },
                      {
                        "line": "    myInitialized = true;\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "void clearAll() { myInitialized = false; memset(myCount, 0, sizeof(myCount)); }\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "    bool isInitialized() const { return myInitialized; }\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "  private:\n",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "    // The actual counts\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "  uInt8 myCount[0x10000];\n",
                        "lineNumber": 45,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    std::array<uInt8, 0x10000> myCount;\n",
                        "lineNumber": 45,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/cwida/duckdb/commit/91a0ec5b53bebd8df50610161f9129785f1a2b51?diff=split#diff-1a1cf2ccc26b1d669f12dbd5e60edd8a2f7b948576422222a7b83551cb1237d4L-1",
                    "lines": [
                      {
                        "line": "\tuint8_t childIndex[256];\n",
                        "lineNumber": 15,
                        "lineChange": "none"
                      },
                      {
                        "line": "    unique_ptr<Node> child[48];\n",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 17,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tNode48(uint8_t maxPrefixLength) : Node(NodeType::N48, maxPrefixLength) {\n",
                        "lineNumber": 18,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tmemset(childIndex, 48, sizeof(childIndex));\n",
                        "lineNumber": 19,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tmemset(child, 0, sizeof(child));\n",
                        "lineNumber": 20,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t    for(uint64_t i = 0; i < 256; i++) {\n",
                        "lineNumber": 19,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t        childIndex[i] = 48;\n",
                        "lineNumber": 20,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t    }\n",
                        "lineNumber": 21,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/TortoiseGit/tortoisesvn/commit/dbde9991b3cc2564fc08beb990b7fa6aa60804cc?diff=split#diff-3a11af48eaaf17baacbab536d79b84d97fe3f459c10275da71e26ac80f059eeaL-1",
                    "lines": [
                      {
                        "line": "memset(szHelpPath, 0, sizeof(szHelpPath));\n",
                        "lineNumber": 140,
                        "lineChange": "removed"
                      },
                      {
                        "line": "memset(szIcon, 0, sizeof(szIcon));\n",
                        "lineNumber": 141,
                        "lineChange": "removed"
                      },
                      {
                        "line": "memset(szCustomButtons, 0, sizeof(szCustomButtons));\n",
                        "lineNumber": 142,
                        "lineChange": "removed"
                      },
                      {
                        "line": "memset(szReportButtonCaption, 0, sizeof(szReportButtonCaption));\n",
                        "lineNumber": 143,
                        "lineChange": "removed"
                      },
                      {
                        "line": "memset(szCompanyName, 0, sizeof(szCompanyName));\n",
                        "lineNumber": 144,
                        "lineChange": "removed"
                      },
                      {
                        "line": "memset(&UserDefinedButtonCaptions, 0, sizeof(UserDefinedButtonCaptions));   //+++1.5\n",
                        "lineNumber": 145,
                        "lineChange": "removed"
                      },
                      {
                        "line": "SecureZeroMemory(szHelpPath, sizeof(szHelpPath));\n",
                        "lineNumber": 140,
                        "lineChange": "added"
                      },
                      {
                        "line": "SecureZeroMemory(szIcon, sizeof(szIcon));\n",
                        "lineNumber": 141,
                        "lineChange": "added"
                      },
                      {
                        "line": "SecureZeroMemory(szCustomButtons, sizeof(szCustomButtons));\n",
                        "lineNumber": 142,
                        "lineChange": "added"
                      },
                      {
                        "line": "SecureZeroMemory(szReportButtonCaption, sizeof(szReportButtonCaption));\n",
                        "lineNumber": 143,
                        "lineChange": "added"
                      },
                      {
                        "line": "SecureZeroMemory(szCompanyName, sizeof(szCompanyName));\n",
                        "lineNumber": 144,
                        "lineChange": "added"
                      },
                      {
                        "line": "SecureZeroMemory(&UserDefinedButtonCaptions, sizeof(UserDefinedButtonCaptions));   //+++1.5\n",
                        "lineNumber": 145,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 66,
                "cwe": [
                  "CWE-1330"
                ]
              }
            },
            {
              "id": "cpp/UseAfterFree/test",
              "name": "UseAfterFree/test",
              "shortDescription": {
                "text": "Use After Free"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "\n## Details\n\nMemory allocated on the heap is released, and then subsequently referenced. This can cause a program to crash, use unexpected values, or execute code.\n\n\n## Best practices for prevention\n* Store a new value in pointers immediately after `free()`\n  * The new value can be:\n    * a constant that can be checked (ie, `NULL`), or\n    * a reference to another valid object.\n\n\n## References\n\n* [CERT MEM01-C](https://wiki.sei.cmu.edu/confluence/pages/viewpage.action?pageId=87152148)",
                "text": ""
              },
              "properties": {
                "tags": [
                  "cpp",
                  "UseAfterFree",
                  "Security",
                  "InTest"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/jlmucb/cloudproxy/commit/4437ebf34a64c0ddadfbcdf834964c1f7680678b?diff=split#diff-fd44eb004baf0c6cd208492e38bd37d52740af1725f131e3058575d98686b723L-1",
                    "lines": [
                      {
                        "line": "out->assign((const char*)buf, n);\n",
                        "lineNumber": 73,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/feiskyer/linux-perf-examples/commit/5c167c49f2fa8b11d7d4229f1d7de703472280de?diff=split#diff-4ac62d0e3e70045c820c45da8b94803e9a4ad44b254a604acfda40354db4a6aeL-1",
                    "lines": [
                      {
                        "line": "n1 = *v;\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "free(v);\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "printf(\"%dth => %lld\\n\", n, *v);\n",
                        "lineNumber": 24,
                        "lineChange": "removed"
                      },
                      {
                        "line": "printf(\"%dth => %lld\\n\", n, n1);\n",
                        "lineNumber": 24,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/asfadmin/ASF_MapReady/commit/9eb2f300779a07e77127389e43421a6ca58a092c?diff=split#diff-6f0d067854363ef95657748d5a96a50d5130d0cfe620351ab6c8ae1a17933b32L-1",
                    "lines": [
                      {
                        "line": "FREE(out_file);\n",
                        "lineNumber": 2686,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 104,
                "cwe": [
                  "CWE-416"
                ]
              }
            },
            {
              "id": "python/InsecureXmlParser/test",
              "name": "InsecureXmlParser/test",
              "shortDescription": {
                "text": "Insecure Xml Parser"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "\n## Details\n\nFor convenience, XML documents can use system identifiers to enable access to stored content, whether local or remote. The XML processor then uses the system identifier to access the resource rather than using the URI. When this weakness exists, the application permits user-supplied data, which could include the address of an XML external identity, to be passed directly to the XML parser. The application will then attempt to retrieve documents from outside of secure, controlled areas.\n\nAttackers can exploit this weakness to expose sensitive data, execute port scanning on the server side, or launch a denial-of-service attack (DoS) such as Billion Laughs.\n\n## Best practices for prevention\n* Avoid using vulnerable APIs\n* When possible, disable loading of data from external entities. The method of doing this will vary based on the language and XML parser being used.\n* Use a local, static document type definitions (DTDs) and ensure that external DTDs are disallowed entirely.\n* If user input cannot be avoided, perform validation against an allowlist of possible data sources. However, as long as external DTDs are allowed, XML code remains inherently vulnerable to attacks exploiting this weakness.\n\n\n## References\n* [XML vulnerabilities](https://docs.python.org/3/library/xml.html#xml-vulnerabilities)",
                "text": ""
              },
              "properties": {
                "tags": [
                  "python",
                  "InsecureXmlParser",
                  "Security",
                  "InTest"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/DefectDojo/django-DefectDojo/commit/3bb6173ce1db621ebd99a1cb361e7da7cbaf1925?diff=split#diff-ef1e087c75390ecb8efe1b3990802470d172cb27c62e76392ba87bdae855ca2cL-1",
                    "lines": [
                      {
                        "line": "from xml.dom import NamespaceErr\n",
                        "lineNumber": 2,
                        "lineChange": "removed"
                      },
                      {
                        "line": "from xml.etree import ElementTree\n",
                        "lineNumber": 3,
                        "lineChange": "removed"
                      },
                      {
                        "line": "from defusedxml.dom import NamespaceErr\n",
                        "lineNumber": 2,
                        "lineChange": "added"
                      },
                      {
                        "line": "from defusedxml.etree import ElementTree\n",
                        "lineNumber": 3,
                        "lineChange": "added"
                      },
                      {
                        "line": "from datetime import datetime\n",
                        "lineNumber": 4,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 5,
                        "lineChange": "none"
                      },
                      {
                        "line": "from dojo.models import Finding\n",
                        "lineNumber": 6,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 7,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 8,
                        "lineChange": "none"
                      },
                      {
                        "line": "class CheckmarxXMLParser(object):\n",
                        "lineNumber": 9,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def __init__(self, filename, test):\n",
                        "lineNumber": 10,
                        "lineChange": "none"
                      },
                      {
                        "line": "        cxscan = ElementTree.parse(filename)\n",
                        "lineNumber": 11,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/tableau/server-client-python/commit/921d554e550cb494d71424750459dbc1348e6b13?diff=split#diff-1817d191ee3dba3576772719ed5f6fdf9dac5891ad290947042b6c496b544214L-1",
                    "lines": [
                      {
                        "line": "import xml.etree.ElementTree as ET\n",
                        "lineNumber": 0,
                        "lineChange": "removed"
                      },
                      {
                        "line": "from defusedxml.ElementTree import fromstring\n",
                        "lineNumber": 0,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 1,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 2,
                        "lineChange": "none"
                      },
                      {
                        "line": "class TagItem(object):\n",
                        "lineNumber": 3,
                        "lineChange": "none"
                      },
                      {
                        "line": "    @classmethod\n",
                        "lineNumber": 4,
                        "lineChange": "none"
                      },
                      {
                        "line": "    def from_response(cls, resp, ns):\n",
                        "lineNumber": 5,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return cls.from_xml_element(ET.fromstring(resp), ns)\n",
                        "lineNumber": 6,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        return cls.from_xml_element(fromstring(resp), ns)\n",
                        "lineNumber": 6,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/GeoNode/geonode/commit/084bbf0b44a3be4e7e97f8ec02c3b350163fc620?diff=split#diff-709ba0472e42f6d983a47dce6d65992b594de32b9db5ffeb056f5045bde5c8ffL-1",
                    "lines": [
                      {
                        "line": "                import xml.etree.ElementTree as ET\n",
                        "lineNumber": 473,
                        "lineChange": "removed"
                      },
                      {
                        "line": "                from defusedxml import lxml as dlxml\n",
                        "lineNumber": 473,
                        "lineChange": "added"
                      },
                      {
                        "line": "                namespaces = {'wms': 'http://www.opengis.net/wms',\n",
                        "lineNumber": 474,
                        "lineChange": "none"
                      },
                      {
                        "line": "                              'xlink': 'http://www.w3.org/1999/xlink',\n",
                        "lineNumber": 475,
                        "lineChange": "none"
                      },
                      {
                        "line": "                              'xsi': 'http://www.w3.org/2001/XMLSchema-instance'}\n",
                        "lineNumber": 476,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 477,
                        "lineChange": "none"
                      },
                      {
                        "line": "                e = ET.fromstring(wms_capabilities)\n",
                        "lineNumber": 478,
                        "lineChange": "removed"
                      },
                      {
                        "line": "                e = dlxml.fromstring(wms_capabilities)\n",
                        "lineNumber": 478,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 52,
                "cwe": [
                  "CWE-611"
                ]
              }
            }
          ]
        }
      },
      "results": [
        {
          "ruleId": "cpp/DoubleFree/test",
          "ruleIndex": 0,
          "level": "note",
          "message": {
            "text": "Potential double delete expression. c may have already been freed by delete expression.",
            "markdown": "Potential double {0}. {1} may have already been freed by {2}.",
            "arguments": [
              "[delete expression](0)",
              "[c](1)",
              "[delete expression](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "googlemock/test/gmock-actions_test.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1730,
                  "endLine": 1730,
                  "startColumn": 10,
                  "endColumn": 11
                }
              }
            }
          ],
          "fingerprints": {
            "0": "c8d300f227c17d2a04a9934b71cb53c2506d8f2b47acd86600dd7474bd4251d2",
            "1": "57664a44.8be50dd5.98501263.f51f8eb6.88319c03.0f7854e9.1e451703.cde67692.57664a44.a5b374ad.065d2069.f51f8eb6.88319c03.6a274ab8.30ad82ea.bc08ab76"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-actions_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1730,
                            "endLine": 1730,
                            "startColumn": 10,
                            "endColumn": 11
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-actions_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1730,
                            "endLine": 1730,
                            "startColumn": 10,
                            "endColumn": 11
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-actions_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1730,
                            "endLine": 1730,
                            "startColumn": 10,
                            "endColumn": 11
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 413,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": true
          }
        },
        {
          "ruleId": "cpp/DoubleFree/test",
          "ruleIndex": 0,
          "level": "note",
          "message": {
            "text": "Potential double delete expression. c may have already been freed by delete expression.",
            "markdown": "Potential double {0}. {1} may have already been freed by {2}.",
            "arguments": [
              "[delete expression](0)",
              "[c](1)",
              "[delete expression](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "googlemock/test/gmock-actions_test.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1738,
                  "endLine": 1738,
                  "startColumn": 10,
                  "endColumn": 11
                }
              }
            }
          ],
          "fingerprints": {
            "0": "f70b6f4a03dca7029b5bb65c42743ebf70d14c2788cb24f7bb04b16ff472028a",
            "1": "57664a44.8be50dd5.98501263.f51f8eb6.88319c03.0f7854e9.d005d6b3.cde67692.57664a44.8be50dd5.065d2069.f51f8eb6.88319c03.0f7854e9.d005d6b3.bc08ab76"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-actions_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1738,
                            "endLine": 1738,
                            "startColumn": 10,
                            "endColumn": 11
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-actions_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1738,
                            "endLine": 1738,
                            "startColumn": 10,
                            "endColumn": 11
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-actions_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1738,
                            "endLine": 1738,
                            "startColumn": 10,
                            "endColumn": 11
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 413,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": true
          }
        },
        {
          "ruleId": "cpp/DoubleFree/test",
          "ruleIndex": 0,
          "level": "note",
          "message": {
            "text": "Potential double delete expression. c may have already been freed by delete expression.",
            "markdown": "Potential double {0}. {1} may have already been freed by {2}.",
            "arguments": [
              "[delete expression](0)",
              "[c](1)",
              "[delete expression](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "googlemock/test/gmock-actions_test.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1756,
                  "endLine": 1756,
                  "startColumn": 10,
                  "endColumn": 11
                }
              }
            }
          ],
          "fingerprints": {
            "0": "987a76527265c05522a73f115a94e595b088dbb400eeb71e29a30bd0538cbe4f",
            "1": "57664a44.8be50dd5.98501263.f51f8eb6.88319c03.0f7854e9.d005d6b3.cde67692.57664a44.8be50dd5.125b465b.f51f8eb6.88319c03.9c0f6d34.61ba315c.cde67692"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-actions_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1756,
                            "endLine": 1756,
                            "startColumn": 10,
                            "endColumn": 11
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-actions_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1756,
                            "endLine": 1756,
                            "startColumn": 10,
                            "endColumn": 11
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-actions_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1756,
                            "endLine": 1756,
                            "startColumn": 10,
                            "endColumn": 11
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 413,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": true
          }
        },
        {
          "ruleId": "cpp/DoubleFree/test",
          "ruleIndex": 0,
          "level": "note",
          "message": {
            "text": "Potential double delete expression. a may have already been freed by delete expression.",
            "markdown": "Potential double {0}. {1} may have already been freed by {2}.",
            "arguments": [
              "[delete expression](0)",
              "[a](1)",
              "[delete expression](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "googlemock/test/gmock-spec-builders_test.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1763,
                  "endLine": 1763,
                  "startColumn": 10,
                  "endColumn": 11
                }
              }
            }
          ],
          "fingerprints": {
            "0": "c31855681c70c849a919e48337a8bf2bd252f2d4e218d7c38cbcc944111ff2eb",
            "1": "57664a44.8be50dd5.98501263.8ab4267b.4d8a2df1.2f4e1548.1e451703.c0d33555.08aab1a4.8be50dd5.66e58c8d.8ab4267b.d09c4f04.2f4e1548.6a6cb5a6.c0d33555"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1763,
                            "endLine": 1763,
                            "startColumn": 10,
                            "endColumn": 11
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1763,
                            "endLine": 1763,
                            "startColumn": 10,
                            "endColumn": 11
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1763,
                            "endLine": 1763,
                            "startColumn": 10,
                            "endColumn": 11
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 413,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": true
          }
        },
        {
          "ruleId": "cpp/DoubleFree/test",
          "ruleIndex": 0,
          "level": "note",
          "message": {
            "text": "Potential double delete expression. a may have already been freed by delete expression.",
            "markdown": "Potential double {0}. {1} may have already been freed by {2}.",
            "arguments": [
              "[delete expression](0)",
              "[a](1)",
              "[delete expression](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "googlemock/test/gmock-spec-builders_test.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1805,
                  "endLine": 1805,
                  "startColumn": 10,
                  "endColumn": 11
                }
              }
            }
          ],
          "fingerprints": {
            "0": "830c634a72b8bba95c34f4a04a713fd6a79d8eaa3366e9d3f6cc3c8a237ee938",
            "1": "57664a44.8be50dd5.98501263.8ab4267b.4d8a2df1.2f4e1548.1e451703.c0d33555.57664a44.568e8847.66e58c8d.8ab4267b.d09c4f04.89c494d2.6a6cb5a6.c0d33555"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1805,
                            "endLine": 1805,
                            "startColumn": 10,
                            "endColumn": 11
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1805,
                            "endLine": 1805,
                            "startColumn": 10,
                            "endColumn": 11
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1805,
                            "endLine": 1805,
                            "startColumn": 10,
                            "endColumn": 11
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 413,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": true
          }
        },
        {
          "ruleId": "cpp/DoubleFree/test",
          "ruleIndex": 0,
          "level": "note",
          "message": {
            "text": "Potential double delete expression. a may have already been freed by delete expression.",
            "markdown": "Potential double {0}. {1} may have already been freed by {2}.",
            "arguments": [
              "[delete expression](0)",
              "[a](1)",
              "[delete expression](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "googlemock/test/gmock-spec-builders_test.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1828,
                  "endLine": 1828,
                  "startColumn": 10,
                  "endColumn": 11
                }
              }
            }
          ],
          "fingerprints": {
            "0": "a3e71ed22e3e3bba69a43374c496841566c81a4d376ef2151447c6e37fe55558",
            "1": "08aab1a4.8be50dd5.8591c2e7.8ab4267b.4d8a2df1.2f4e1548.1e451703.c0d33555.08aab1a4.8be50dd5.66e58c8d.8ab4267b.e05f7676.e723426a.6a6cb5a6.c0d33555"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1828,
                            "endLine": 1828,
                            "startColumn": 10,
                            "endColumn": 11
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1828,
                            "endLine": 1828,
                            "startColumn": 10,
                            "endColumn": 11
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1828,
                            "endLine": 1828,
                            "startColumn": 10,
                            "endColumn": 11
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 413,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": true
          }
        },
        {
          "ruleId": "cpp/DoubleFree/test",
          "ruleIndex": 0,
          "level": "note",
          "message": {
            "text": "Potential double delete expression. a may have already been freed by delete expression.",
            "markdown": "Potential double {0}. {1} may have already been freed by {2}.",
            "arguments": [
              "[delete expression](0)",
              "[a](1)",
              "[delete expression](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "googlemock/test/gmock-spec-builders_test.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1866,
                  "endLine": 1866,
                  "startColumn": 34,
                  "endColumn": 35
                }
              }
            }
          ],
          "fingerprints": {
            "0": "f9eaafbdbcd5b83c8026506035296c9472078b3d7fccac0d55103b0febb5c6c7",
            "1": "73e5bd6e.e3ddb628.98501263.f51f8eb6.40c0080d.2f4e1548.df7e59ba.f5dc69e2.73e5bd6e.4b4a38e1.66e58c8d.8ab4267b.d09c4f04.2f4e1548.1e451703.c0d33555"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1866,
                            "endLine": 1866,
                            "startColumn": 34,
                            "endColumn": 35
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1866,
                            "endLine": 1866,
                            "startColumn": 34,
                            "endColumn": 35
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1866,
                            "endLine": 1866,
                            "startColumn": 34,
                            "endColumn": 35
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 413,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": true
          }
        },
        {
          "ruleId": "cpp/MemoryLeak/test",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "Leaking memory. testing::StrictMock<testing::gmock_nice_strict_test::MockFoo> is allocated on the heap and never freed",
            "markdown": "Leaking memory. {0} is allocated on the heap and never freed",
            "arguments": [
              "[testing::StrictMock<testing::gmock_nice_strict_test::MockFoo>](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "googlemock/test/gmock-nice-strict_test.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 474,
                  "endLine": 474,
                  "startColumn": 41,
                  "endColumn": 66
                }
              }
            }
          ],
          "fingerprints": {
            "0": "bfce1cd2d501cdc462eed1de6e0d6a9b5c8c3bba349b205a52f5989cc44c9924",
            "1": "e7f9270c.af3279be.f01ead7c.f707ef08.cae4170d.6a274ab8.30ad82ea.acd45df7.a74905da.af3279be.95e2bc00.f707ef08.cae4170d.5bf37441.30ad82ea.acd45df7"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-nice-strict_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 474,
                            "endLine": 474,
                            "startColumn": 47,
                            "endColumn": 66
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 432,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": true
          }
        },
        {
          "ruleId": "cpp/MemoryLeak/test",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "Leaking memory. testing::StrictMock<testing::gmock_nice_strict_test::MockFoo> is allocated on the heap and never freed",
            "markdown": "Leaking memory. {0} is allocated on the heap and never freed",
            "arguments": [
              "[testing::StrictMock<testing::gmock_nice_strict_test::MockFoo>](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "googlemock/test/gmock-nice-strict_test.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 505,
                  "endLine": 505,
                  "startColumn": 31,
                  "endColumn": 56
                }
              }
            }
          ],
          "fingerprints": {
            "0": "8121654080a0e0a9c12dc7190631dd368e8a6fab14ccf919884b42d8f53e69be",
            "1": "980e24bd.5ead4928.79ce1c7f.f707ef08.cae4170d.6a274ab8.30ad82ea.acd45df7.980e24bd.5ead4928.95e2bc00.f707ef08.cae4170d.5bf37441.30ad82ea.acd45df7"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-nice-strict_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 505,
                            "endLine": 505,
                            "startColumn": 37,
                            "endColumn": 56
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 432,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": true
          }
        },
        {
          "ruleId": "cpp/MemoryLeak/test",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "Leaking memory. testing::MockB is allocated on the heap and never freed",
            "markdown": "Leaking memory. {0} is allocated on the heap and never freed",
            "arguments": [
              "[testing::MockB](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "googlemock/test/gmock-spec-builders_test.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1727,
                  "endLine": 1727,
                  "startColumn": 19,
                  "endColumn": 30
                }
              }
            }
          ],
          "fingerprints": {
            "0": "2f7f3d1d61b9e0fc1c0930223089691f3a477a383c5a8dd8f10250120b4a3bba",
            "1": "e7f9270c.5615a4ea.a29fa316.1bd0bc43.c1fa3711.6a274ab8.30ad82ea.acd45df7.af472234.5615a4ea.a29fa316.1bd0bc43.10982d71.7c9ad2ae.30ad82ea.acd45df7"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1727,
                            "endLine": 1727,
                            "startColumn": 25,
                            "endColumn": 30
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 432,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": true
          }
        },
        {
          "ruleId": "cpp/MemoryLeak/test",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "Leaking memory. testing::MockB is allocated on the heap and never freed",
            "markdown": "Leaking memory. {0} is allocated on the heap and never freed",
            "arguments": [
              "[testing::MockB](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "googlemock/test/gmock-spec-builders_test.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1752,
                  "endLine": 1752,
                  "startColumn": 19,
                  "endColumn": 30
                }
              }
            }
          ],
          "fingerprints": {
            "0": "6f9d9426530dab33eb36dbe1f5f9c89723485d4f8e3ff9f9a466117f2dbdac3f",
            "1": "e7f9270c.5615a4ea.a29fa316.1bd0bc43.c1fa3711.6a274ab8.30ad82ea.acd45df7.af472234.5615a4ea.a29fa316.1bd0bc43.10982d71.7c9ad2ae.30ad82ea.acd45df7"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1752,
                            "endLine": 1752,
                            "startColumn": 25,
                            "endColumn": 30
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 432,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": true
          }
        },
        {
          "ruleId": "cpp/MemoryLeak/test",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "Leaking memory. testing::MockB is allocated on the heap and never freed",
            "markdown": "Leaking memory. {0} is allocated on the heap and never freed",
            "arguments": [
              "[testing::MockB](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "googlemock/test/gmock-spec-builders_test.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1754,
                  "endLine": 1754,
                  "startColumn": 19,
                  "endColumn": 30
                }
              }
            }
          ],
          "fingerprints": {
            "0": "09844acec7996f4fa3560f0deed0f3d5e772a29e61e1046e06942bb0270bec21",
            "1": "e7f9270c.5615a4ea.c63f1e69.1bd0bc43.eabbd88b.6a274ab8.30ad82ea.acd45df7.af472234.5615a4ea.c010c69f.1bd0bc43.eabbd88b.6a274ab8.30ad82ea.acd45df7"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1754,
                            "endLine": 1754,
                            "startColumn": 25,
                            "endColumn": 30
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 432,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": true
          }
        },
        {
          "ruleId": "cpp/MemoryLeak/test",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "Leaking memory. testing::MockB is allocated on the heap and never freed",
            "markdown": "Leaking memory. {0} is allocated on the heap and never freed",
            "arguments": [
              "[testing::MockB](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "googlemock/test/gmock-spec-builders_test.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1794,
                  "endLine": 1794,
                  "startColumn": 19,
                  "endColumn": 30
                }
              }
            }
          ],
          "fingerprints": {
            "0": "fe779595f9fce12e425272d78f142236afb6ebe9b834ae8243d9dd1d89ea061c",
            "1": "e7f9270c.5615a4ea.a29fa316.1bd0bc43.c1fa3711.6a274ab8.30ad82ea.acd45df7.af472234.5615a4ea.a29fa316.1bd0bc43.10982d71.7c9ad2ae.30ad82ea.acd45df7"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1794,
                            "endLine": 1794,
                            "startColumn": 25,
                            "endColumn": 30
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 432,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": true
          }
        },
        {
          "ruleId": "cpp/MemoryLeak/test",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "Leaking memory. testing::MockB is allocated on the heap and never freed",
            "markdown": "Leaking memory. {0} is allocated on the heap and never freed",
            "arguments": [
              "[testing::MockB](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "googlemock/test/gmock-spec-builders_test.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1796,
                  "endLine": 1796,
                  "startColumn": 19,
                  "endColumn": 30
                }
              }
            }
          ],
          "fingerprints": {
            "0": "01bb49b61b5a20098d3625665138e105e706adf3ae3031216cccf6f858929f7e",
            "1": "e7f9270c.5615a4ea.c63f1e69.1bd0bc43.eabbd88b.6a274ab8.30ad82ea.acd45df7.af472234.5615a4ea.c010c69f.1bd0bc43.eabbd88b.6a274ab8.30ad82ea.acd45df7"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1796,
                            "endLine": 1796,
                            "startColumn": 25,
                            "endColumn": 30
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 432,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": true
          }
        },
        {
          "ruleId": "cpp/MemoryLeak/test",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "Leaking memory. testing::MockB is allocated on the heap and never freed",
            "markdown": "Leaking memory. {0} is allocated on the heap and never freed",
            "arguments": [
              "[testing::MockB](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "googlemock/test/gmock-spec-builders_test.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1814,
                  "endLine": 1814,
                  "startColumn": 19,
                  "endColumn": 30
                }
              }
            }
          ],
          "fingerprints": {
            "0": "0c4e3384a5f1ee4bb992e3a1743f834e9178a923b2c5fcadcd0c08599933c46f",
            "1": "e7f9270c.5615a4ea.a29fa316.1bd0bc43.c1fa3711.6a274ab8.30ad82ea.acd45df7.af472234.5615a4ea.a29fa316.1bd0bc43.10982d71.7c9ad2ae.30ad82ea.acd45df7"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1814,
                            "endLine": 1814,
                            "startColumn": 25,
                            "endColumn": 30
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 432,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": true
          }
        },
        {
          "ruleId": "cpp/MemoryLeak/test",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "Leaking memory. testing::MockB is allocated on the heap and never freed",
            "markdown": "Leaking memory. {0} is allocated on the heap and never freed",
            "arguments": [
              "[testing::MockB](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "googlemock/test/gmock-spec-builders_test.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1816,
                  "endLine": 1816,
                  "startColumn": 19,
                  "endColumn": 30
                }
              }
            }
          ],
          "fingerprints": {
            "0": "e6ac046a3d5a2ad0f2e7d77a7dd179610850fae8064c96d89640247469b97a00",
            "1": "e7f9270c.5615a4ea.c63f1e69.1bd0bc43.eabbd88b.6a274ab8.30ad82ea.acd45df7.af472234.5615a4ea.c010c69f.1bd0bc43.eabbd88b.6a274ab8.30ad82ea.acd45df7"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1816,
                            "endLine": 1816,
                            "startColumn": 25,
                            "endColumn": 30
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 432,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": true
          }
        },
        {
          "ruleId": "cpp/MemoryLeak/test",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "Leaking memory. testing::MockA is allocated on the heap and never freed",
            "markdown": "Leaking memory. {0} is allocated on the heap and never freed",
            "arguments": [
              "[testing::MockA](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "googlemock/test/gmock-spec-builders_test.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1728,
                  "endLine": 1728,
                  "startColumn": 18,
                  "endColumn": 29
                }
              }
            }
          ],
          "fingerprints": {
            "0": "890f34b7231787a53d4ddabc758d0444158c3d073a6b97267c5e312d02813b66",
            "1": "e7f9270c.5615a4ea.a29fa316.1bd0bc43.5aef5e31.6a274ab8.30ad82ea.2439b47e.e7f9270c.5615a4ea.6e910727.6b457aa1.5aef5e31.d0b43484.30ad82ea.2439b47e"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1728,
                            "endLine": 1728,
                            "startColumn": 24,
                            "endColumn": 29
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 432,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": true
          }
        },
        {
          "ruleId": "cpp/MemoryLeak/test",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "Leaking memory. testing::MockA is allocated on the heap and never freed",
            "markdown": "Leaking memory. {0} is allocated on the heap and never freed",
            "arguments": [
              "[testing::MockA](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "googlemock/test/gmock-spec-builders_test.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1753,
                  "endLine": 1753,
                  "startColumn": 18,
                  "endColumn": 29
                }
              }
            }
          ],
          "fingerprints": {
            "0": "9b7c94684b7605102c4975f767fa31396d71c8b507427dc763e94aab7aaec9d9",
            "1": "e7f9270c.5615a4ea.a29fa316.1bd0bc43.5aef5e31.6a274ab8.30ad82ea.2439b47e.e7f9270c.5615a4ea.6e910727.6b457aa1.5aef5e31.d0b43484.30ad82ea.2439b47e"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1753,
                            "endLine": 1753,
                            "startColumn": 24,
                            "endColumn": 29
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 432,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": true
          }
        },
        {
          "ruleId": "cpp/MemoryLeak/test",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "Leaking memory. testing::MockA is allocated on the heap and never freed",
            "markdown": "Leaking memory. {0} is allocated on the heap and never freed",
            "arguments": [
              "[testing::MockA](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "googlemock/test/gmock-spec-builders_test.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1787,
                  "endLine": 1787,
                  "startColumn": 18,
                  "endColumn": 29
                }
              }
            }
          ],
          "fingerprints": {
            "0": "b9b8f153177fcc2235e90d252215583286fc6362a4f9444ccb60eafb57cf26ad",
            "1": "e7f9270c.5615a4ea.a29fa316.1bd0bc43.5aef5e31.6a274ab8.30ad82ea.2439b47e.e7f9270c.5615a4ea.6e910727.6b457aa1.5aef5e31.d0b43484.30ad82ea.2439b47e"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1787,
                            "endLine": 1787,
                            "startColumn": 24,
                            "endColumn": 29
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 432,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": true
          }
        },
        {
          "ruleId": "cpp/MemoryLeak/test",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "Leaking memory. testing::MockA is allocated on the heap and never freed",
            "markdown": "Leaking memory. {0} is allocated on the heap and never freed",
            "arguments": [
              "[testing::MockA](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "googlemock/test/gmock-spec-builders_test.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1795,
                  "endLine": 1795,
                  "startColumn": 18,
                  "endColumn": 29
                }
              }
            }
          ],
          "fingerprints": {
            "0": "4b208d9209445bb52bb1bd9d5bfb3e9b4451e45e4254eaf80c6c80ce12930f24",
            "1": "e7f9270c.5615a4ea.a29fa316.1bd0bc43.5aef5e31.6a274ab8.30ad82ea.2439b47e.e7f9270c.5615a4ea.6e910727.6b457aa1.5aef5e31.d0b43484.30ad82ea.2439b47e"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1795,
                            "endLine": 1795,
                            "startColumn": 24,
                            "endColumn": 29
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 432,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": true
          }
        },
        {
          "ruleId": "cpp/MemoryLeak/test",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "Leaking memory. testing::MockA is allocated on the heap and never freed",
            "markdown": "Leaking memory. {0} is allocated on the heap and never freed",
            "arguments": [
              "[testing::MockA](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "googlemock/test/gmock-spec-builders_test.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1815,
                  "endLine": 1815,
                  "startColumn": 18,
                  "endColumn": 29
                }
              }
            }
          ],
          "fingerprints": {
            "0": "0ae5e189472f4283d67308a6e86ee2f1fa5a9cdd9412b1fccef85ba6d4af10b2",
            "1": "e7f9270c.5615a4ea.a29fa316.1bd0bc43.5aef5e31.6a274ab8.30ad82ea.2439b47e.e7f9270c.5615a4ea.6e910727.6b457aa1.5aef5e31.d0b43484.30ad82ea.2439b47e"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1815,
                            "endLine": 1815,
                            "startColumn": 24,
                            "endColumn": 29
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 432,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": true
          }
        },
        {
          "ruleId": "cpp/MemoryLeak/test",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "Leaking memory. testing::MockA is allocated on the heap and never freed",
            "markdown": "Leaking memory. {0} is allocated on the heap and never freed",
            "arguments": [
              "[testing::MockA](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "googlemock/test/gmock-spec-builders_test.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1856,
                  "endLine": 1856,
                  "startColumn": 12,
                  "endColumn": 23
                }
              }
            }
          ],
          "fingerprints": {
            "0": "7866b6311a6bc50e862f9929b762634e8be4a3df5db370ab6537c0e05a7809b5",
            "1": "e7f9270c.5615a4ea.a29fa316.1bd0bc43.5aef5e31.6a274ab8.30ad82ea.2439b47e.e7f9270c.5615a4ea.6e910727.6b457aa1.5aef5e31.d0b43484.30ad82ea.2439b47e"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1856,
                            "endLine": 1856,
                            "startColumn": 18,
                            "endColumn": 23
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 432,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": true
          }
        },
        {
          "ruleId": "cpp/MemoryLeak/test",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "Leaking memory. testing::MockA is allocated on the heap and never freed",
            "markdown": "Leaking memory. {0} is allocated on the heap and never freed",
            "arguments": [
              "[testing::MockA](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "googlemock/test/gmock-spec-builders_test.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 2160,
                  "endLine": 2160,
                  "startColumn": 12,
                  "endColumn": 23
                }
              }
            }
          ],
          "fingerprints": {
            "0": "35b98c29db18ceb606938e3f8979ae8622ab42a3a5050061b974275ad35f8b78",
            "1": "e7f9270c.5615a4ea.a29fa316.1bd0bc43.5aef5e31.6a274ab8.30ad82ea.2439b47e.e7f9270c.5615a4ea.6e910727.6b457aa1.5aef5e31.d0b43484.30ad82ea.2439b47e"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2160,
                            "endLine": 2160,
                            "startColumn": 18,
                            "endColumn": 23
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 432,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": true
          }
        },
        {
          "ruleId": "cpp/MemoryLeak/test",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "Leaking memory. testing::MockA is allocated on the heap and never freed",
            "markdown": "Leaking memory. {0} is allocated on the heap and never freed",
            "arguments": [
              "[testing::MockA](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "googlemock/test/gmock-spec-builders_test.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 2165,
                  "endLine": 2165,
                  "startColumn": 12,
                  "endColumn": 23
                }
              }
            }
          ],
          "fingerprints": {
            "0": "866683b5bcc3d935e10e78ff346969fff7cb558022b0cd29a21590df6233e191",
            "1": "e7f9270c.5615a4ea.a29fa316.1bd0bc43.5aef5e31.6a274ab8.30ad82ea.2439b47e.e7f9270c.5615a4ea.6e910727.6b457aa1.5aef5e31.d0b43484.30ad82ea.2439b47e"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2165,
                            "endLine": 2165,
                            "startColumn": 18,
                            "endColumn": 23
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 432,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": true
          }
        },
        {
          "ruleId": "cpp/MemoryLeak/test",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "Leaking memory. testing::MockA is allocated on the heap and never freed",
            "markdown": "Leaking memory. {0} is allocated on the heap and never freed",
            "arguments": [
              "[testing::MockA](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "googlemock/test/gmock-spec-builders_test.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 2172,
                  "endLine": 2172,
                  "startColumn": 12,
                  "endColumn": 23
                }
              }
            }
          ],
          "fingerprints": {
            "0": "23a7b2e54aed243799021aade1fc8375a71b4b95561f8c83c8906b1a4af518e8",
            "1": "e7f9270c.5615a4ea.a29fa316.1bd0bc43.5aef5e31.6a274ab8.30ad82ea.2439b47e.e7f9270c.5615a4ea.6e910727.6b457aa1.5aef5e31.d0b43484.30ad82ea.2439b47e"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2172,
                            "endLine": 2172,
                            "startColumn": 18,
                            "endColumn": 23
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 432,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": true
          }
        },
        {
          "ruleId": "cpp/MemoryLeak/test",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "Leaking memory. testing::MockA is allocated on the heap and never freed",
            "markdown": "Leaking memory. {0} is allocated on the heap and never freed",
            "arguments": [
              "[testing::MockA](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "googlemock/test/gmock-spec-builders_test.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 2178,
                  "endLine": 2178,
                  "startColumn": 12,
                  "endColumn": 23
                }
              }
            }
          ],
          "fingerprints": {
            "0": "148409050d5acfb62c75c11a225da0e0a8654a1fe088eb4976594b0618e0fe90",
            "1": "e7f9270c.5615a4ea.a29fa316.1bd0bc43.5aef5e31.6a274ab8.30ad82ea.2439b47e.e7f9270c.5615a4ea.6e910727.6b457aa1.5aef5e31.d0b43484.30ad82ea.2439b47e"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2178,
                            "endLine": 2178,
                            "startColumn": 18,
                            "endColumn": 23
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 432,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": true
          }
        },
        {
          "ruleId": "cpp/MemoryLeak/test",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "Leaking memory. testing::MockA is allocated on the heap and never freed",
            "markdown": "Leaking memory. {0} is allocated on the heap and never freed",
            "arguments": [
              "[testing::MockA](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "googlemock/test/gmock-spec-builders_test.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 2185,
                  "endLine": 2185,
                  "startColumn": 12,
                  "endColumn": 23
                }
              }
            }
          ],
          "fingerprints": {
            "0": "d1b650dfb1c038816f86a7a37d98a7a07712bf1a83a9a0044eceeee5890c5be4",
            "1": "e7f9270c.5615a4ea.a29fa316.1bd0bc43.5aef5e31.6a274ab8.30ad82ea.2439b47e.e7f9270c.5615a4ea.6e910727.6b457aa1.5aef5e31.d0b43484.30ad82ea.2439b47e"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2185,
                            "endLine": 2185,
                            "startColumn": 18,
                            "endColumn": 23
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 432,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": true
          }
        },
        {
          "ruleId": "cpp/MemoryLeak/test",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "Leaking memory. testing::MockA is allocated on the heap and never freed",
            "markdown": "Leaking memory. {0} is allocated on the heap and never freed",
            "arguments": [
              "[testing::MockA](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "googlemock/test/gmock-spec-builders_test.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 2191,
                  "endLine": 2191,
                  "startColumn": 12,
                  "endColumn": 23
                }
              }
            }
          ],
          "fingerprints": {
            "0": "a4904b4f4491346fb871e50d14693c8d8f0dff74b214a57f87daeb893e8dc85b",
            "1": "e7f9270c.5615a4ea.a29fa316.1bd0bc43.5aef5e31.6a274ab8.30ad82ea.2439b47e.e7f9270c.5615a4ea.6e910727.6b457aa1.5aef5e31.d0b43484.30ad82ea.2439b47e"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2191,
                            "endLine": 2191,
                            "startColumn": 18,
                            "endColumn": 23
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 432,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": true
          }
        },
        {
          "ruleId": "cpp/MemoryLeak/test",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "Leaking memory. MockFoo is allocated on the heap and never freed",
            "markdown": "Leaking memory. {0} is allocated on the heap and never freed",
            "arguments": [
              "[MockFoo](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "googlemock/test/gmock_leak_test_.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 59,
                  "endLine": 59,
                  "startColumn": 16,
                  "endColumn": 29
                }
              }
            }
          ],
          "fingerprints": {
            "0": "a462269d5bc8b1d15a84e0dcb76d687ef8d2be0c70acbd224d3cfbad6a7bda51",
            "1": "a74905da.9f041b6a.95e2bc00.8ab4267b.6af39224.5bf37441.30ad82ea.acd45df7.a74905da.c91b49f3.95e2bc00.8ab4267b.6af39224.5bf37441.30ad82ea.acd45df7"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock_leak_test_.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 59,
                            "endLine": 59,
                            "startColumn": 22,
                            "endColumn": 29
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 432,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": true
          }
        },
        {
          "ruleId": "cpp/MemoryLeak/test",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "Leaking memory. MockFoo is allocated on the heap and never freed",
            "markdown": "Leaking memory. {0} is allocated on the heap and never freed",
            "arguments": [
              "[MockFoo](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "googlemock/test/gmock_leak_test_.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 72,
                  "endLine": 72,
                  "startColumn": 16,
                  "endColumn": 29
                }
              }
            }
          ],
          "fingerprints": {
            "0": "a006898ea3d7bfb1b5b80f3d3b03d915b8eade66b1d02e7c6d3da20d8cf4870e",
            "1": "a74905da.9f041b6a.95e2bc00.1bd0bc43.6af39224.5bf37441.30ad82ea.acd45df7.a74905da.c91b49f3.95e2bc00.1bd0bc43.6af39224.5bf37441.30ad82ea.acd45df7"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock_leak_test_.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 72,
                            "endLine": 72,
                            "startColumn": 22,
                            "endColumn": 29
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 432,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": true
          }
        },
        {
          "ruleId": "cpp/MemoryLeak/test",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "Leaking memory. MockFoo is allocated on the heap and never freed",
            "markdown": "Leaking memory. {0} is allocated on the heap and never freed",
            "arguments": [
              "[MockFoo](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "googlemock/test/gmock_leak_test_.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 84,
                  "endLine": 84,
                  "startColumn": 17,
                  "endColumn": 30
                }
              }
            }
          ],
          "fingerprints": {
            "0": "6bdedc9d65dafdee397bed52a4090fd1a2bfc2488e5fc16537038a379e8fb3a4",
            "1": "a74905da.5615a4ea.95e2bc00.8ab4267b.6af39224.5bf37441.30ad82ea.acd45df7.4ab1855d.f182587e.95e2bc00.8ab4267b.6af39224.5bf37441.30ad82ea.acd45df7"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock_leak_test_.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 84,
                            "endLine": 84,
                            "startColumn": 23,
                            "endColumn": 30
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 432,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": true
          }
        },
        {
          "ruleId": "cpp/MemoryLeak/test",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "Leaking memory. MockFoo is allocated on the heap and never freed",
            "markdown": "Leaking memory. {0} is allocated on the heap and never freed",
            "arguments": [
              "[MockFoo](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "googlemock/test/gmock_leak_test_.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 85,
                  "endLine": 85,
                  "startColumn": 17,
                  "endColumn": 30
                }
              }
            }
          ],
          "fingerprints": {
            "0": "cd7d7c2dfd1b22d1ae5dbf914c35d92848b970440a75afed5f5af6f54a9a0f87",
            "1": "a74905da.5615a4ea.95e2bc00.8ab4267b.6af39224.5bf37441.30ad82ea.acd45df7.a74905da.55fead7e.95e2bc00.8ab4267b.6af39224.5bf37441.30ad82ea.acd45df7"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock_leak_test_.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 85,
                            "endLine": 85,
                            "startColumn": 23,
                            "endColumn": 30
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 432,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": true
          }
        },
        {
          "ruleId": "cpp/MemoryLeak/test",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "Leaking memory. MockFoo is allocated on the heap and never freed",
            "markdown": "Leaking memory. {0} is allocated on the heap and never freed",
            "arguments": [
              "[MockFoo](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "googlemock/test/gmock_output_test_.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 240,
                  "endLine": 240,
                  "startColumn": 17,
                  "endColumn": 30
                }
              }
            }
          ],
          "fingerprints": {
            "0": "11b8e445d80c311555ee60a185a66e9f69b284fc9903be320e0be0edbe8ecdd0",
            "1": "a74905da.5615a4ea.95e2bc00.8ab4267b.6af39224.5bf37441.30ad82ea.acd45df7.4ab1855d.f182587e.95e2bc00.8ab4267b.6af39224.5bf37441.30ad82ea.acd45df7"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock_output_test_.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 240,
                            "endLine": 240,
                            "startColumn": 23,
                            "endColumn": 30
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 432,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": true
          }
        },
        {
          "ruleId": "cpp/MemoryLeak/test",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "Leaking memory. MockFoo is allocated on the heap and never freed",
            "markdown": "Leaking memory. {0} is allocated on the heap and never freed",
            "arguments": [
              "[MockFoo](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "googlemock/test/gmock_output_test_.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 241,
                  "endLine": 241,
                  "startColumn": 17,
                  "endColumn": 30
                }
              }
            }
          ],
          "fingerprints": {
            "0": "61e45eafb8b64ffbf3c7c88c0dbfd49949a0ca7bca1d1e923db9442d4d1b2dbe",
            "1": "a74905da.5615a4ea.95e2bc00.8ab4267b.6af39224.5bf37441.30ad82ea.acd45df7.1e13ae3e.4b4a38e1.95e2bc00.8ab4267b.6af39224.5bf37441.30ad82ea.acd45df7"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock_output_test_.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 241,
                            "endLine": 241,
                            "startColumn": 23,
                            "endColumn": 30
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 432,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": true
          }
        },
        {
          "ruleId": "cpp/MemoryLeak/test",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "Leaking memory. MockFoo is allocated on the heap and never freed",
            "markdown": "Leaking memory. {0} is allocated on the heap and never freed",
            "arguments": [
              "[MockFoo](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "googlemock/test/gmock_output_test_.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 266,
                  "endLine": 266,
                  "startColumn": 16,
                  "endColumn": 29
                }
              }
            }
          ],
          "fingerprints": {
            "0": "e3441678d37b5f223cd5e54d8639bdc80034167e6cf6bdb1beab4c408896b1cb",
            "1": "a74905da.9f041b6a.95e2bc00.8ab4267b.6af39224.5bf37441.30ad82ea.acd45df7.1e13ae3e.c91b49f3.95e2bc00.8ab4267b.6af39224.5bf37441.30ad82ea.acd45df7"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock_output_test_.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 266,
                            "endLine": 266,
                            "startColumn": 22,
                            "endColumn": 29
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 432,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": true
          }
        },
        {
          "ruleId": "cpp/MemoryLeak/test",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "Leaking memory. [Element] is allocated on the heap and never freed",
            "markdown": "Leaking memory. {0} is allocated on the heap and never freed",
            "arguments": [
              "[[Element]](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "googletest/include/gtest/internal/gtest-internal.h",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1121,
                  "endLine": 1121,
                  "startColumn": 25,
                  "endColumn": 46
                }
              }
            }
          ],
          "fingerprints": {
            "0": "33f08fb86b470e47edb478a591c8578219dee9c14a8dbb120ddf47923ce98970",
            "1": "34915628.83d4bb89.8774ed5e.45dfee07.00d5dd4d.6a274ab8.30ad82ea.acd45df7.fe050e65.90848b5a.a1780f56.93cc8d4d.60d3594b.e11f9d36.50e07b35.5b6cf5fb"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googletest/include/gtest/internal/gtest-internal.h",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1121,
                            "endLine": 1121,
                            "startColumn": 31,
                            "endColumn": 46
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 382,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": true
          }
        },
        {
          "ruleId": "cpp/MemoryLeak/test",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "Leaking memory. Water is allocated on the heap and never freed",
            "markdown": "Leaking memory. {0} is allocated on the heap and never freed",
            "arguments": [
              "[Water](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "googletest/samples/sample10_unittest.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 100,
                  "endLine": 100,
                  "startColumn": 16,
                  "endColumn": 27
                }
              }
            }
          ],
          "fingerprints": {
            "0": "4caa0ab4a972322cfd8e100b5fc5b33ab4738265f4bc3de3d6b7c90d1d3cf66e",
            "1": "e7f9270c.5615a4ea.a29fa316.2204593a.eb289871.6a274ab8.30ad82ea.acd45df7.e7f9270c.5615a4ea.a29fa316.2204593a.eb289871.6a274ab8.30ad82ea.acd45df7"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googletest/samples/sample10_unittest.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 100,
                            "endLine": 100,
                            "startColumn": 22,
                            "endColumn": 27
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 382,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": true
          }
        },
        {
          "ruleId": "cpp/MemoryLeak/test",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "Leaking memory. testing::internal::WatcherThreadParams is allocated on the heap and never freed",
            "markdown": "Leaking memory. {0} is allocated on the heap and never freed",
            "arguments": [
              "[testing::internal::WatcherThreadParams](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "googletest/src/gtest-port.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 603,
                  "endLine": 603,
                  "startColumn": 48,
                  "endColumn": 73
                }
              }
            }
          ],
          "fingerprints": {
            "0": "586043a2ae59b6a46c0c8d9c7b495b833861586f8248ce7ff934e3fa528d09e0",
            "1": "e7f9270c.5615a4ea.49826859.1bd0bc43.f7060c3b.6a274ab8.30ad82ea.acd45df7.303ea50f.0ed6522c.66e58c8d.1bd0bc43.7d5ff53b.6a274ab8.c08dd55c.acd45df7"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googletest/src/gtest-port.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 603,
                            "endLine": 603,
                            "startColumn": 54,
                            "endColumn": 73
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 382,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": true
          }
        },
        {
          "ruleId": "cpp/MemoryLeak/test",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "Leaking memory. TestListener is allocated on the heap and never freed",
            "markdown": "Leaking memory. {0} is allocated on the heap and never freed",
            "arguments": [
              "[TestListener](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "googletest/test/gtest_unittest.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 6977,
                  "endLine": 6977,
                  "startColumn": 26,
                  "endColumn": 78
                }
              }
            }
          ],
          "fingerprints": {
            "0": "56cb1d7694895e5ee8eb136e7bee6a91971dff8df13130056d37440ca0362bc4",
            "1": "8fb0c14d.4155ad7d.c3402d11.1bd0bc43.a8281649.6a274ab8.30ad82ea.5b6cf5fb.8fb0c14d.4155ad7d.c3402d11.1bd0bc43.10982d71.6a274ab8.30ad82ea.5b6cf5fb"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googletest/test/gtest_unittest.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 6977,
                            "endLine": 6977,
                            "startColumn": 32,
                            "endColumn": 44
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 432,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": true
          }
        },
        {
          "ruleId": "cpp/MemoryLeak/test",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "Leaking memory. TestListener is allocated on the heap and never freed",
            "markdown": "Leaking memory. {0} is allocated on the heap and never freed",
            "arguments": [
              "[TestListener](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "googletest/test/gtest_unittest.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 6994,
                  "endLine": 6994,
                  "startColumn": 26,
                  "endColumn": 72
                }
              }
            }
          ],
          "fingerprints": {
            "0": "c413785b5aa9a5966691a96a75aa92bdcc834eb86016f942bf313b4c0e4349a1",
            "1": "8fb0c14d.4155ad7d.c3402d11.1bd0bc43.a8281649.6a274ab8.30ad82ea.5b6cf5fb.8fb0c14d.4155ad7d.c3402d11.1bd0bc43.10982d71.6a274ab8.30ad82ea.5b6cf5fb"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googletest/test/gtest_unittest.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 6994,
                            "endLine": 6994,
                            "startColumn": 32,
                            "endColumn": 44
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 432,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": true
          }
        },
        {
          "ruleId": "cpp/MemoryLeak/test",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "Leaking memory. TestListener is allocated on the heap and never freed",
            "markdown": "Leaking memory. {0} is allocated on the heap and never freed",
            "arguments": [
              "[TestListener](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "googletest/test/gtest_unittest.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7024,
                  "endLine": 7024,
                  "startColumn": 26,
                  "endColumn": 78
                }
              }
            }
          ],
          "fingerprints": {
            "0": "881a728e4e0faf11a4d848f9d5db45ec619ac637c5f8d3d74d17e897b1b7c301",
            "1": "8fb0c14d.4155ad7d.c3402d11.1bd0bc43.a8281649.6a274ab8.30ad82ea.5b6cf5fb.8fb0c14d.4155ad7d.c3402d11.1bd0bc43.10982d71.6a274ab8.30ad82ea.5b6cf5fb"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googletest/test/gtest_unittest.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 7024,
                            "endLine": 7024,
                            "startColumn": 32,
                            "endColumn": 44
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 432,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": true
          }
        },
        {
          "ruleId": "cpp/MemoryLeak/test",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "Leaking memory. TestListener is allocated on the heap and never freed",
            "markdown": "Leaking memory. {0} is allocated on the heap and never freed",
            "arguments": [
              "[TestListener](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "googletest/test/gtest_unittest.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7058,
                  "endLine": 7058,
                  "startColumn": 26,
                  "endColumn": 78
                }
              }
            }
          ],
          "fingerprints": {
            "0": "3f721e266338614a3d2930ae90f3c13da895147909dac1eb7c8bc233a6941847",
            "1": "8fb0c14d.4155ad7d.c3402d11.1bd0bc43.a8281649.6a274ab8.30ad82ea.5b6cf5fb.8fb0c14d.4155ad7d.c3402d11.1bd0bc43.10982d71.6a274ab8.30ad82ea.5b6cf5fb"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googletest/test/gtest_unittest.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 7058,
                            "endLine": 7058,
                            "startColumn": 32,
                            "endColumn": 44
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 432,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": true
          }
        },
        {
          "ruleId": "cpp/MemoryLeak/test",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "Leaking memory. TestListener is allocated on the heap and never freed",
            "markdown": "Leaking memory. {0} is allocated on the heap and never freed",
            "arguments": [
              "[TestListener](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "googletest/test/gtest_unittest.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7083,
                  "endLine": 7083,
                  "startColumn": 26,
                  "endColumn": 78
                }
              }
            }
          ],
          "fingerprints": {
            "0": "1c47d39b5f39e3e2a2c0020c16abf73e2033db6d5c65713cab5a1ffb0980a644",
            "1": "8fb0c14d.4155ad7d.c3402d11.1bd0bc43.a8281649.6a274ab8.30ad82ea.5b6cf5fb.8fb0c14d.4155ad7d.c3402d11.1bd0bc43.10982d71.6a274ab8.30ad82ea.5b6cf5fb"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googletest/test/gtest_unittest.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 7083,
                            "endLine": 7083,
                            "startColumn": 32,
                            "endColumn": 44
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 432,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": true
          }
        },
        {
          "ruleId": "cpp/MemoryLeak/test",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "Leaking memory. TestListener is allocated on the heap and never freed",
            "markdown": "Leaking memory. {0} is allocated on the heap and never freed",
            "arguments": [
              "[TestListener](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "googletest/test/gtest_unittest.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7117,
                  "endLine": 7117,
                  "startColumn": 26,
                  "endColumn": 78
                }
              }
            }
          ],
          "fingerprints": {
            "0": "b08d10dca3b8042d7adcf6318f97fdae11791c5ffa96f0b93fa6bda22f96acc2",
            "1": "8fb0c14d.4155ad7d.c3402d11.1bd0bc43.a8281649.6a274ab8.30ad82ea.5b6cf5fb.8fb0c14d.4155ad7d.c3402d11.1bd0bc43.10982d71.6a274ab8.30ad82ea.5b6cf5fb"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googletest/test/gtest_unittest.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 7117,
                            "endLine": 7117,
                            "startColumn": 32,
                            "endColumn": 44
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 432,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": true
          }
        },
        {
          "ruleId": "cpp/MemoryLeak/test",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "Leaking memory. [Array] is allocated on the heap and never freed",
            "markdown": "Leaking memory. {0} is allocated on the heap and never freed",
            "arguments": [
              "[[Array]](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "googletest/test/gtest_unittest.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7432,
                  "endLine": 7432,
                  "startColumn": 12,
                  "endColumn": 26
                }
              }
            }
          ],
          "fingerprints": {
            "0": "262e48ae88bc1682b7dda9f685c656ef5cdaa002c15d0250681fa929f9c6747d",
            "1": "34915628.e0f813c7.66441f6e.1bd0bc43.45a62fe4.6a274ab8.30ad82ea.acd45df7.34915628.e0f813c7.66441f6e.6b457aa1.45a62fe4.d0b43484.30ad82ea.acd45df7"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googletest/test/gtest_unittest.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 7432,
                            "endLine": 7432,
                            "startColumn": 18,
                            "endColumn": 26
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 432,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": true
          }
        },
        {
          "ruleId": "cpp/MemsetMayBeOptimizedAway/test",
          "ruleIndex": 2,
          "level": "note",
          "message": {
            "text": "Be aware that an optimizing compiler might be removing this call to memset, since this array array does not seem to be used after the call to memset.",
            "markdown": "Be aware that an optimizing compiler might be removing this call to {0}, since {1} does not seem to be used after the call to {2}.",
            "arguments": [
              "[memset](0)",
              "[this array array](1)",
              "[memset](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "googletest/test/googletest-printers-test.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1325,
                  "endLine": 1325,
                  "startColumn": 21,
                  "endColumn": 26
                }
              }
            }
          ],
          "fingerprints": {
            "0": "1be6e27b1782faa083b4ad3075de9748bc02afe7efe438524d5808a2c8686f18",
            "1": "57664a44.fb58fc14.a1780f56.d9c92da3.60d3594b.e11f9d36.30ad82ea.f9581283.ecbdd152.fb58fc14.a1780f56.d9c92da3.60d3594b.e11f9d36.30ad82ea.d6ee7112"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googletest/test/googletest-printers-test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1325,
                            "endLine": 1325,
                            "startColumn": 14,
                            "endColumn": 20
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googletest/test/googletest-printers-test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1326,
                            "endLine": 1327,
                            "startColumn": 6,
                            "endColumn": 3
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googletest/test/googletest-printers-test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1325,
                            "endLine": 1325,
                            "startColumn": 14,
                            "endColumn": 20
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 351,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": true
          }
        },
        {
          "ruleId": "cpp/DoubleFree/test",
          "ruleIndex": 0,
          "level": "note",
          "message": {
            "text": "Potential double delete expression. b1 may have already been freed by delete expression.",
            "markdown": "Potential double {0}. {1} may have already been freed by {2}.",
            "arguments": [
              "[delete expression](0)",
              "[b1](1)",
              "[delete expression](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "googlemock/test/gmock-spec-builders_test.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1766,
                  "endLine": 1766,
                  "startColumn": 10,
                  "endColumn": 12
                }
              }
            }
          ],
          "fingerprints": {
            "0": "abf97b5ab34cfdc866a461f4c8bc843758f6449bb53b9900098e869e2aa998bc",
            "1": "57664a44.5bf04aa4.98501263.8ab4267b.4d8a2df1.2f4e1548.1e451703.c0d33555.57664a44.5bf04aa4.66e58c8d.8ab4267b.d09c4f04.2f4e1548.6a6cb5a6.c0d33555"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1766,
                            "endLine": 1766,
                            "startColumn": 10,
                            "endColumn": 12
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1766,
                            "endLine": 1766,
                            "startColumn": 10,
                            "endColumn": 12
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1766,
                            "endLine": 1766,
                            "startColumn": 10,
                            "endColumn": 12
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 413,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": true
          }
        },
        {
          "ruleId": "cpp/DoubleFree/test",
          "ruleIndex": 0,
          "level": "note",
          "message": {
            "text": "Potential double delete expression. b1 may have already been freed by delete expression.",
            "markdown": "Potential double {0}. {1} may have already been freed by {2}.",
            "arguments": [
              "[delete expression](0)",
              "[b1](1)",
              "[delete expression](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "googlemock/test/gmock-spec-builders_test.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1808,
                  "endLine": 1808,
                  "startColumn": 10,
                  "endColumn": 12
                }
              }
            }
          ],
          "fingerprints": {
            "0": "3a81abe305b88b3f5cdb809e21ee88d47f73781e054d5341c2c389361256c2a3",
            "1": "57664a44.5bf04aa4.98501263.8ab4267b.4d8a2df1.2f4e1548.1e451703.c0d33555.57664a44.5bf04aa4.66e58c8d.8ab4267b.d09c4f04.2f4e1548.6a6cb5a6.c0d33555"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1808,
                            "endLine": 1808,
                            "startColumn": 10,
                            "endColumn": 12
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1808,
                            "endLine": 1808,
                            "startColumn": 10,
                            "endColumn": 12
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1808,
                            "endLine": 1808,
                            "startColumn": 10,
                            "endColumn": 12
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 413,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": true
          }
        },
        {
          "ruleId": "cpp/DoubleFree/test",
          "ruleIndex": 0,
          "level": "note",
          "message": {
            "text": "Potential double delete expression. b1 may have already been freed by delete expression.",
            "markdown": "Potential double {0}. {1} may have already been freed by {2}.",
            "arguments": [
              "[delete expression](0)",
              "[b1](1)",
              "[delete expression](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "googlemock/test/gmock-spec-builders_test.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1825,
                  "endLine": 1825,
                  "startColumn": 34,
                  "endColumn": 36
                }
              }
            }
          ],
          "fingerprints": {
            "0": "8e26283e58060749ac8ededa48801693cd42ab132de6ba270465a41e14fe335f",
            "1": "176bacc3.f182587e.66e58c8d.8ab4267b.4d8a2df1.2f4e1548.df7e59ba.c0d33555.57664a44.5bf04aa4.66e58c8d.8ab4267b.d09c4f04.2f4e1548.1e451703.c0d33555"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1825,
                            "endLine": 1825,
                            "startColumn": 34,
                            "endColumn": 36
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1825,
                            "endLine": 1825,
                            "startColumn": 34,
                            "endColumn": 36
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1825,
                            "endLine": 1825,
                            "startColumn": 34,
                            "endColumn": 36
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 413,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": true
          }
        },
        {
          "ruleId": "cpp/UseAfterFree/test",
          "ruleIndex": 3,
          "level": "note",
          "message": {
            "text": "Use after free. b1 is used in _ after it may already have been freed with delete expression.",
            "markdown": "Use after free. {0} is used in {1} after it may already have been freed with {2}.",
            "arguments": [
              "[b1](0)",
              "[_](1)",
              "[delete expression](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "googlemock/test/gmock-spec-builders_test.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1758,
                  "endLine": 1758,
                  "startColumn": 18,
                  "endColumn": 20
                }
              }
            }
          ],
          "fingerprints": {
            "0": "df26d2ba5c7422d33ddb30d4ef875443cf5869ed3445dd44eb3944d8d66045d4",
            "1": "176bacc3.5bf04aa4.66e58c8d.8ab4267b.d09c4f04.2f4e1548.df7e59ba.c0d33555.325ac7cb.5bf04aa4.66e58c8d.8ab4267b.d09c4f04.7c9ad2ae.30ad82ea.c0d33555"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1758,
                            "endLine": 1758,
                            "startColumn": 18,
                            "endColumn": 20
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1758,
                            "endLine": 1758,
                            "startColumn": 17,
                            "endColumn": 20
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1741,
                            "endLine": 1741,
                            "startColumn": 10,
                            "endColumn": 12
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 452,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": true
          }
        },
        {
          "ruleId": "cpp/UseAfterFree/test",
          "ruleIndex": 3,
          "level": "note",
          "message": {
            "text": "Use after free. b1 is used in _ after it may already have been freed with delete expression.",
            "markdown": "Use after free. {0} is used in {1} after it may already have been freed with {2}.",
            "arguments": [
              "[b1](0)",
              "[_](1)",
              "[delete expression](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "googlemock/test/gmock-spec-builders_test.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1800,
                  "endLine": 1800,
                  "startColumn": 18,
                  "endColumn": 20
                }
              }
            }
          ],
          "fingerprints": {
            "0": "a21b0974ca64ed3b6287dd9bd8fb6f08e59d31cd083f6d5ee5bbb4867bbc4644",
            "1": "176bacc3.5bf04aa4.66e58c8d.8ab4267b.d09c4f04.2f4e1548.df7e59ba.c0d33555.325ac7cb.5bf04aa4.66e58c8d.8ab4267b.d09c4f04.7c9ad2ae.30ad82ea.c0d33555"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1800,
                            "endLine": 1800,
                            "startColumn": 18,
                            "endColumn": 20
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1800,
                            "endLine": 1800,
                            "startColumn": 17,
                            "endColumn": 20
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1766,
                            "endLine": 1766,
                            "startColumn": 10,
                            "endColumn": 12
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 452,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": true
          }
        },
        {
          "ruleId": "cpp/UseAfterFree/test",
          "ruleIndex": 3,
          "level": "note",
          "message": {
            "text": "Use after free. b1 is used in _ after it may already have been freed with delete expression.",
            "markdown": "Use after free. {0} is used in {1} after it may already have been freed with {2}.",
            "arguments": [
              "[b1](0)",
              "[_](1)",
              "[delete expression](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "googlemock/test/gmock-spec-builders_test.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1820,
                  "endLine": 1820,
                  "startColumn": 18,
                  "endColumn": 20
                }
              }
            }
          ],
          "fingerprints": {
            "0": "0a1f69a688be99743a75b9c328ed7a4eda18a9839425ff8c5c83321015dbde84",
            "1": "176bacc3.5bf04aa4.98501263.8ab4267b.d09c4f04.2f4e1548.df7e59ba.c0d33555.325ac7cb.5bf04aa4.66e58c8d.8ab4267b.d09c4f04.7c9ad2ae.30ad82ea.c0d33555"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1820,
                            "endLine": 1820,
                            "startColumn": 18,
                            "endColumn": 20
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1820,
                            "endLine": 1820,
                            "startColumn": 17,
                            "endColumn": 20
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1808,
                            "endLine": 1808,
                            "startColumn": 10,
                            "endColumn": 12
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 452,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": true
          }
        },
        {
          "ruleId": "cpp/UseAfterFree/test",
          "ruleIndex": 3,
          "level": "note",
          "message": {
            "text": "Use after free. a is used in _ after it may already have been freed with delete expression.",
            "markdown": "Use after free. {0} is used in {1} after it may already have been freed with {2}.",
            "arguments": [
              "[a](0)",
              "[_](1)",
              "[delete expression](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "googlemock/test/gmock-spec-builders_test.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1759,
                  "endLine": 1759,
                  "startColumn": 18,
                  "endColumn": 19
                }
              }
            }
          ],
          "fingerprints": {
            "0": "5253c71ff87f9b4960ea00f4aa830dbf8056a1a8db59a6e9525113fe9e05d1b8",
            "1": "08aab1a4.cf6d45df.66e58c8d.8ab4267b.d09c4f04.2f4e1548.df7e59ba.c0d33555.08aab1a4.f182587e.66e58c8d.6b457aa1.d09c4f04.d0b43484.30ad82ea.c0d33555"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1759,
                            "endLine": 1759,
                            "startColumn": 18,
                            "endColumn": 19
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1759,
                            "endLine": 1759,
                            "startColumn": 17,
                            "endColumn": 19
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1747,
                            "endLine": 1747,
                            "startColumn": 10,
                            "endColumn": 11
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 452,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": true
          }
        },
        {
          "ruleId": "cpp/UseAfterFree/test",
          "ruleIndex": 3,
          "level": "note",
          "message": {
            "text": "Use after free. a is used in _ after it may already have been freed with delete expression.",
            "markdown": "Use after free. {0} is used in {1} after it may already have been freed with {2}.",
            "arguments": [
              "[a](0)",
              "[_](1)",
              "[delete expression](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "googlemock/test/gmock-spec-builders_test.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1788,
                  "endLine": 1788,
                  "startColumn": 16,
                  "endColumn": 17
                }
              }
            }
          ],
          "fingerprints": {
            "0": "80a945eba29ae78beb33dce6bbc799878dd20ecc4f146e979446c8e3c6c0c27b",
            "1": "176bacc3.cf6d45df.66e58c8d.8ab4267b.d09c4f04.2f4e1548.df7e59ba.c0d33555.08aab1a4.f182587e.66e58c8d.6b457aa1.d09c4f04.d0b43484.30ad82ea.c0d33555"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1788,
                            "endLine": 1788,
                            "startColumn": 16,
                            "endColumn": 17
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1788,
                            "endLine": 1788,
                            "startColumn": 15,
                            "endColumn": 17
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1763,
                            "endLine": 1763,
                            "startColumn": 10,
                            "endColumn": 11
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 452,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": true
          }
        },
        {
          "ruleId": "cpp/UseAfterFree/test",
          "ruleIndex": 3,
          "level": "note",
          "message": {
            "text": "Use after free. a is used in _ after it may already have been freed with delete expression.",
            "markdown": "Use after free. {0} is used in {1} after it may already have been freed with {2}.",
            "arguments": [
              "[a](0)",
              "[_](1)",
              "[delete expression](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "googlemock/test/gmock-spec-builders_test.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1801,
                  "endLine": 1801,
                  "startColumn": 18,
                  "endColumn": 19
                }
              }
            }
          ],
          "fingerprints": {
            "0": "6d3fda254ccfb6fe8232d36bc46a49f9b32ce0627ed6fa02e774ad8f657c922e",
            "1": "5760c2c5.cf6d45df.66e58c8d.8ab4267b.d09c4f04.89c494d2.df7e59ba.c0d33555.08aab1a4.568e8847.66e58c8d.6b457aa1.d09c4f04.89c494d2.30ad82ea.c0d33555"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1801,
                            "endLine": 1801,
                            "startColumn": 18,
                            "endColumn": 19
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1801,
                            "endLine": 1801,
                            "startColumn": 17,
                            "endColumn": 19
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1763,
                            "endLine": 1763,
                            "startColumn": 10,
                            "endColumn": 11
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 452,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": true
          }
        },
        {
          "ruleId": "cpp/UseAfterFree/test",
          "ruleIndex": 3,
          "level": "note",
          "message": {
            "text": "Use after free. a is used in _ after it may already have been freed with delete expression.",
            "markdown": "Use after free. {0} is used in {1} after it may already have been freed with {2}.",
            "arguments": [
              "[a](0)",
              "[_](1)",
              "[delete expression](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "googlemock/test/gmock-spec-builders_test.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1821,
                  "endLine": 1821,
                  "startColumn": 18,
                  "endColumn": 19
                }
              }
            }
          ],
          "fingerprints": {
            "0": "54bffe7843165b33ca7202dfcab7af5daacf47b3eeb81f516fcecd0d4aadfeba",
            "1": "08aab1a4.cf6d45df.66e58c8d.8ab4267b.d09c4f04.2f4e1548.df7e59ba.c0d33555.08aab1a4.f182587e.66e58c8d.6b457aa1.e05f7676.89c494d2.30ad82ea.c0d33555"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1821,
                            "endLine": 1821,
                            "startColumn": 18,
                            "endColumn": 19
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1821,
                            "endLine": 1821,
                            "startColumn": 17,
                            "endColumn": 19
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1805,
                            "endLine": 1805,
                            "startColumn": 10,
                            "endColumn": 11
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 452,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": true
          }
        },
        {
          "ruleId": "cpp/UseAfterFree/test",
          "ruleIndex": 3,
          "level": "note",
          "message": {
            "text": "Use after free. a is used in _ after it may already have been freed with delete expression.",
            "markdown": "Use after free. {0} is used in {1} after it may already have been freed with {2}.",
            "arguments": [
              "[a](0)",
              "[_](1)",
              "[delete expression](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "googlemock/test/gmock-spec-builders_test.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1859,
                  "endLine": 1859,
                  "startColumn": 16,
                  "endColumn": 17
                }
              }
            }
          ],
          "fingerprints": {
            "0": "bf532ee31de5a74a5bba3dc182d629cb404117aacd6b4d0ee7a62e8f0b9f12af",
            "1": "08aab1a4.cf6d45df.66e58c8d.8ab4267b.d09c4f04.2f4e1548.df7e59ba.c0d33555.08aab1a4.f182587e.66e58c8d.6b457aa1.e05f7676.d0b43484.30ad82ea.c0d33555"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1859,
                            "endLine": 1859,
                            "startColumn": 16,
                            "endColumn": 17
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1859,
                            "endLine": 1859,
                            "startColumn": 15,
                            "endColumn": 17
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1828,
                            "endLine": 1828,
                            "startColumn": 10,
                            "endColumn": 11
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 452,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": true
          }
        },
        {
          "ruleId": "cpp/UseAfterFree/test",
          "ruleIndex": 3,
          "level": "note",
          "message": {
            "text": "Use after free. a is used in _ after it may already have been freed with delete expression.",
            "markdown": "Use after free. {0} is used in {1} after it may already have been freed with {2}.",
            "arguments": [
              "[a](0)",
              "[_](1)",
              "[delete expression](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "googlemock/test/gmock-spec-builders_test.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1860,
                  "endLine": 1860,
                  "startColumn": 16,
                  "endColumn": 17
                }
              }
            }
          ],
          "fingerprints": {
            "0": "cc353f871c86022be3d546b19bd36bb50657985daccfc05156fe94d303f9b446",
            "1": "176bacc3.cf6d45df.66e58c8d.8ab4267b.d09c4f04.2f4e1548.df7e59ba.c0d33555.08aab1a4.f182587e.66e58c8d.6b457aa1.d09c4f04.d0b43484.30ad82ea.c0d33555"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1860,
                            "endLine": 1860,
                            "startColumn": 16,
                            "endColumn": 17
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1860,
                            "endLine": 1860,
                            "startColumn": 15,
                            "endColumn": 17
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1828,
                            "endLine": 1828,
                            "startColumn": 10,
                            "endColumn": 11
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 452,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": true
          }
        },
        {
          "ruleId": "cpp/UseAfterFree/test",
          "ruleIndex": 3,
          "level": "note",
          "message": {
            "text": "Use after free. a is used in _ after it may already have been freed with delete expression.",
            "markdown": "Use after free. {0} is used in {1} after it may already have been freed with {2}.",
            "arguments": [
              "[a](0)",
              "[_](1)",
              "[delete expression](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "googlemock/test/gmock-spec-builders_test.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1861,
                  "endLine": 1861,
                  "startColumn": 16,
                  "endColumn": 17
                }
              }
            }
          ],
          "fingerprints": {
            "0": "7727169e4e876588a4871c8018da5190899a3485bbbd6604accdc8fe25a223a4",
            "1": "176bacc3.d3d94f49.66e58c8d.8ab4267b.d09c4f04.2f4e1548.df7e59ba.c0d33555.176bacc3.f182587e.66e58c8d.6b457aa1.d09c4f04.d0b43484.30ad82ea.c0d33555"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1861,
                            "endLine": 1861,
                            "startColumn": 16,
                            "endColumn": 17
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1861,
                            "endLine": 1861,
                            "startColumn": 15,
                            "endColumn": 17
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1828,
                            "endLine": 1828,
                            "startColumn": 10,
                            "endColumn": 11
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 452,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": true
          }
        },
        {
          "ruleId": "cpp/UseAfterFree/test",
          "ruleIndex": 3,
          "level": "note",
          "message": {
            "text": "Use after free. a is used in _ after it may already have been freed with delete expression.",
            "markdown": "Use after free. {0} is used in {1} after it may already have been freed with {2}.",
            "arguments": [
              "[a](0)",
              "[_](1)",
              "[delete expression](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "googlemock/test/gmock-spec-builders_test.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 2167,
                  "endLine": 2167,
                  "startColumn": 12,
                  "endColumn": 13
                }
              }
            }
          ],
          "fingerprints": {
            "0": "df29673b6a81d4165ab08bf5e1744cbf3a3ab22d2cc2d5625f75e2b4379d93d5",
            "1": "73e5bd6e.f182587e.66e58c8d.8ab4267b.4d8a2df1.2f4e1548.df7e59ba.c0d33555.73e5bd6e.f182587e.66e58c8d.6b457aa1.e05f7676.d0b43484.30ad82ea.c0d33555"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2167,
                            "endLine": 2167,
                            "startColumn": 12,
                            "endColumn": 13
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2167,
                            "endLine": 2167,
                            "startColumn": 11,
                            "endColumn": 13
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1866,
                            "endLine": 1866,
                            "startColumn": 34,
                            "endColumn": 35
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 452,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": true
          }
        },
        {
          "ruleId": "cpp/UseAfterFree/test",
          "ruleIndex": 3,
          "level": "note",
          "message": {
            "text": "Use after free. a is used in _ after it may already have been freed with delete expression.",
            "markdown": "Use after free. {0} is used in {1} after it may already have been freed with {2}.",
            "arguments": [
              "[a](0)",
              "[_](1)",
              "[delete expression](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "googlemock/test/gmock-spec-builders_test.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 2173,
                  "endLine": 2173,
                  "startColumn": 12,
                  "endColumn": 13
                }
              }
            }
          ],
          "fingerprints": {
            "0": "110aa248f78fa5b0c8013491900a72a24e1a08b5b4cc3e9773f7e20294792b9a",
            "1": "73e5bd6e.f182587e.66e58c8d.8ab4267b.4d8a2df1.2f4e1548.df7e59ba.c0d33555.73e5bd6e.f182587e.66e58c8d.6b457aa1.e05f7676.d0b43484.30ad82ea.c0d33555"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2173,
                            "endLine": 2173,
                            "startColumn": 12,
                            "endColumn": 13
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2173,
                            "endLine": 2173,
                            "startColumn": 11,
                            "endColumn": 13
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1866,
                            "endLine": 1866,
                            "startColumn": 34,
                            "endColumn": 35
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 452,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": true
          }
        },
        {
          "ruleId": "cpp/UseAfterFree/test",
          "ruleIndex": 3,
          "level": "note",
          "message": {
            "text": "Use after free. a is used in _ after it may already have been freed with delete expression.",
            "markdown": "Use after free. {0} is used in {1} after it may already have been freed with {2}.",
            "arguments": [
              "[a](0)",
              "[_](1)",
              "[delete expression](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "googlemock/test/gmock-spec-builders_test.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 2180,
                  "endLine": 2180,
                  "startColumn": 16,
                  "endColumn": 17
                }
              }
            }
          ],
          "fingerprints": {
            "0": "7b33ddb5468db4ca61c29d057f78bd90dd8aea13f40e8f183ce47fb340e056ae",
            "1": "73e5bd6e.d3d94f49.98501263.8ab4267b.d09c4f04.2f4e1548.df7e59ba.c0d33555.73e5bd6e.f182587e.2fbb3d0c.6b457aa1.e05f7676.d0b43484.30ad82ea.c0d33555"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2180,
                            "endLine": 2180,
                            "startColumn": 16,
                            "endColumn": 17
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2180,
                            "endLine": 2180,
                            "startColumn": 15,
                            "endColumn": 17
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1866,
                            "endLine": 1866,
                            "startColumn": 34,
                            "endColumn": 35
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 452,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": true
          }
        },
        {
          "ruleId": "cpp/UseAfterFree/test",
          "ruleIndex": 3,
          "level": "note",
          "message": {
            "text": "Use after free. a is used in _ after it may already have been freed with delete expression.",
            "markdown": "Use after free. {0} is used in {1} after it may already have been freed with {2}.",
            "arguments": [
              "[a](0)",
              "[_](1)",
              "[delete expression](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "googlemock/test/gmock-spec-builders_test.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 2186,
                  "endLine": 2186,
                  "startColumn": 16,
                  "endColumn": 17
                }
              }
            }
          ],
          "fingerprints": {
            "0": "d2dcccdb23a85116529944d28296a0e06ddf5f3e961f195278676ba23b4f2100",
            "1": "73e5bd6e.d3d94f49.66e58c8d.8ab4267b.d09c4f04.2f4e1548.df7e59ba.c0d33555.73e5bd6e.f182587e.66e58c8d.6b457aa1.e05f7676.d0b43484.30ad82ea.c0d33555"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2186,
                            "endLine": 2186,
                            "startColumn": 16,
                            "endColumn": 17
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2186,
                            "endLine": 2186,
                            "startColumn": 15,
                            "endColumn": 17
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1866,
                            "endLine": 1866,
                            "startColumn": 34,
                            "endColumn": 35
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 452,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": true
          }
        },
        {
          "ruleId": "cpp/UseAfterFree/test",
          "ruleIndex": 3,
          "level": "note",
          "message": {
            "text": "Use after free. a is used in _ after it may already have been freed with delete expression.",
            "markdown": "Use after free. {0} is used in {1} after it may already have been freed with {2}.",
            "arguments": [
              "[a](0)",
              "[_](1)",
              "[delete expression](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "googlemock/test/gmock-spec-builders_test.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 2192,
                  "endLine": 2192,
                  "startColumn": 12,
                  "endColumn": 13
                }
              }
            }
          ],
          "fingerprints": {
            "0": "773d8d2c8bcc5d67a47fd99282bfe142e1d72ecc5e3666780264813de2526af7",
            "1": "73e5bd6e.f182587e.66e58c8d.8ab4267b.4d8a2df1.2f4e1548.df7e59ba.c0d33555.73e5bd6e.f182587e.66e58c8d.6b457aa1.d09c4f04.d0b43484.30ad82ea.c0d33555"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2192,
                            "endLine": 2192,
                            "startColumn": 12,
                            "endColumn": 13
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2192,
                            "endLine": 2192,
                            "startColumn": 11,
                            "endColumn": 13
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1866,
                            "endLine": 1866,
                            "startColumn": 34,
                            "endColumn": 35
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 452,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": true
          }
        },
        {
          "ruleId": "cpp/UseAfterFree/test",
          "ruleIndex": 3,
          "level": "note",
          "message": {
            "text": "Use after free. a is used in _ after it may already have been freed with delete expression.",
            "markdown": "Use after free. {0} is used in {1} after it may already have been freed with {2}.",
            "arguments": [
              "[a](0)",
              "[_](1)",
              "[delete expression](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "googlemock/test/gmock-spec-builders_test.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 2193,
                  "endLine": 2193,
                  "startColumn": 16,
                  "endColumn": 17
                }
              }
            }
          ],
          "fingerprints": {
            "0": "a1d558129bb7ebd76a2eed8a206291b8692e0fd74809b054f69123ad13507f91",
            "1": "73e5bd6e.e0e5ff6d.66e58c8d.8ab4267b.d09c4f04.2f4e1548.df7e59ba.c0d33555.73e5bd6e.f182587e.66e58c8d.6b457aa1.d09c4f04.d0b43484.30ad82ea.c0d33555"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2193,
                            "endLine": 2193,
                            "startColumn": 16,
                            "endColumn": 17
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2193,
                            "endLine": 2193,
                            "startColumn": 15,
                            "endColumn": 17
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1866,
                            "endLine": 1866,
                            "startColumn": 34,
                            "endColumn": 35
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 452,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": true
          }
        },
        {
          "ruleId": "cpp/UseAfterFree/test",
          "ruleIndex": 3,
          "level": "note",
          "message": {
            "text": "Use after free. b2 is used in _ after it may already have been freed with delete expression.",
            "markdown": "Use after free. {0} is used in {1} after it may already have been freed with {2}.",
            "arguments": [
              "[b2](0)",
              "[_](1)",
              "[delete expression](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "googlemock/test/gmock-spec-builders_test.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1760,
                  "endLine": 1760,
                  "startColumn": 18,
                  "endColumn": 20
                }
              }
            }
          ],
          "fingerprints": {
            "0": "9cb4c97ed4d1a112445ea1fecc8951548ffe8b56826689acffe58b24e9c38473",
            "1": "176bacc3.5bf04aa4.66e58c8d.8ab4267b.eabbd88b.2f4e1548.df7e59ba.c0d33555.176bacc3.5bf04aa4.66e58c8d.8ab4267b.eabbd88b.32a37dd9.30ad82ea.acd45df7"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1760,
                            "endLine": 1760,
                            "startColumn": 18,
                            "endColumn": 20
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1760,
                            "endLine": 1760,
                            "startColumn": 17,
                            "endColumn": 20
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1744,
                            "endLine": 1744,
                            "startColumn": 10,
                            "endColumn": 12
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 452,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": true
          }
        },
        {
          "ruleId": "cpp/UseAfterFree/test",
          "ruleIndex": 3,
          "level": "note",
          "message": {
            "text": "Use after free. b2 is used in _ after it may already have been freed with delete expression.",
            "markdown": "Use after free. {0} is used in {1} after it may already have been freed with {2}.",
            "arguments": [
              "[b2](0)",
              "[_](1)",
              "[delete expression](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "googlemock/test/gmock-spec-builders_test.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1802,
                  "endLine": 1802,
                  "startColumn": 18,
                  "endColumn": 20
                }
              }
            }
          ],
          "fingerprints": {
            "0": "6090a78568e00df64d5008d857d279599f1375b74d9ad2878d6201e9244c51cb",
            "1": "176bacc3.5bf04aa4.66e58c8d.8ab4267b.eabbd88b.2f4e1548.df7e59ba.c0d33555.176bacc3.5bf04aa4.66e58c8d.8ab4267b.eabbd88b.32a37dd9.30ad82ea.acd45df7"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1802,
                            "endLine": 1802,
                            "startColumn": 18,
                            "endColumn": 20
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1802,
                            "endLine": 1802,
                            "startColumn": 17,
                            "endColumn": 20
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1767,
                            "endLine": 1767,
                            "startColumn": 10,
                            "endColumn": 12
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 452,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": true
          }
        },
        {
          "ruleId": "cpp/UseAfterFree/test",
          "ruleIndex": 3,
          "level": "note",
          "message": {
            "text": "Use after free. b2 is used in _ after it may already have been freed with delete expression.",
            "markdown": "Use after free. {0} is used in {1} after it may already have been freed with {2}.",
            "arguments": [
              "[b2](0)",
              "[_](1)",
              "[delete expression](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "googlemock/test/gmock-spec-builders_test.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1822,
                  "endLine": 1822,
                  "startColumn": 18,
                  "endColumn": 20
                }
              }
            }
          ],
          "fingerprints": {
            "0": "3124313a1b267a85614adb98abeaef7a58202208b291ed86d06d5aad2625f8b0",
            "1": "176bacc3.5bf04aa4.66e58c8d.8ab4267b.eabbd88b.2f4e1548.df7e59ba.c0d33555.75feee71.5bf04aa4.66e58c8d.8ab4267b.eabbd88b.32a37dd9.30ad82ea.acd45df7"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1822,
                            "endLine": 1822,
                            "startColumn": 18,
                            "endColumn": 20
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1822,
                            "endLine": 1822,
                            "startColumn": 17,
                            "endColumn": 20
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1809,
                            "endLine": 1809,
                            "startColumn": 10,
                            "endColumn": 12
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 452,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": true
          }
        },
        {
          "ruleId": "cpp/UseAfterFree/test",
          "ruleIndex": 3,
          "level": "note",
          "message": {
            "text": "Use after free. a is used in Delete after it may already have been freed with delete expression.",
            "markdown": "Use after free. {0} is used in {1} after it may already have been freed with {2}.",
            "arguments": [
              "[a](0)",
              "[Delete](1)",
              "[delete expression](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "googlemock/test/gmock-spec-builders_test.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1788,
                  "endLine": 1788,
                  "startColumn": 58,
                  "endColumn": 59
                }
              }
            }
          ],
          "fingerprints": {
            "0": "80a945eba29ae78beb33dce6bbc799878dd20ecc4f146e979446c8e3c6c0c27b",
            "1": "5760c2c5.cf6d45df.bfc69114.8ab4267b.b0a67a85.89c494d2.df7e59ba.c0d33555.5760c2c5.cf6d45df.66e58c8d.8ab4267b.b0a67a85.89c494d2.df7e59ba.c0d33555"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1788,
                            "endLine": 1788,
                            "startColumn": 58,
                            "endColumn": 59
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1788,
                            "endLine": 1788,
                            "startColumn": 51,
                            "endColumn": 57
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1763,
                            "endLine": 1763,
                            "startColumn": 10,
                            "endColumn": 11
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 452,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": true
          }
        },
        {
          "ruleId": "cpp/UseAfterFree/test",
          "ruleIndex": 3,
          "level": "note",
          "message": {
            "text": "Use after free. a is used in Mock::AllowLeak after it may already have been freed with delete expression.",
            "markdown": "Use after free. {0} is used in {1} after it may already have been freed with {2}.",
            "arguments": [
              "[a](0)",
              "[Mock::AllowLeak](1)",
              "[delete expression](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "googlemock/test/gmock-spec-builders_test.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 2161,
                  "endLine": 2161,
                  "startColumn": 19,
                  "endColumn": 20
                }
              }
            }
          ],
          "fingerprints": {
            "0": "56552db28f3600bc911995529721df6175b32100c17f080515a2c330b480e812",
            "1": "73e5bd6e.b4aece19.f81c8b22.8ab4267b.3c8ce606.ee01b815.1e451703.c0d33555.73e5bd6e.b4aece19.78116e51.664b1195.38b50422.ee01b815.6a6cb5a6.c0d33555"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2161,
                            "endLine": 2161,
                            "startColumn": 19,
                            "endColumn": 20
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2161,
                            "endLine": 2161,
                            "startColumn": 3,
                            "endColumn": 18
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1866,
                            "endLine": 1866,
                            "startColumn": 34,
                            "endColumn": 35
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 452,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": true
          }
        },
        {
          "ruleId": "cpp/UseAfterFree/test",
          "ruleIndex": 3,
          "level": "note",
          "message": {
            "text": "Use after free. a is used in Mock::AllowLeak after it may already have been freed with delete expression.",
            "markdown": "Use after free. {0} is used in {1} after it may already have been freed with {2}.",
            "arguments": [
              "[a](0)",
              "[Mock::AllowLeak](1)",
              "[delete expression](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "googlemock/test/gmock-spec-builders_test.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 2166,
                  "endLine": 2166,
                  "startColumn": 19,
                  "endColumn": 20
                }
              }
            }
          ],
          "fingerprints": {
            "0": "5401e36826c49663db8d65b80235dbaf637b42971e757c6fb212440388728cdb",
            "1": "73e5bd6e.b4aece19.f81c8b22.8ab4267b.3c8ce606.ee01b815.1e451703.c0d33555.73e5bd6e.b4aece19.78116e51.664b1195.38b50422.ee01b815.6a6cb5a6.c0d33555"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2166,
                            "endLine": 2166,
                            "startColumn": 19,
                            "endColumn": 20
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2166,
                            "endLine": 2166,
                            "startColumn": 3,
                            "endColumn": 18
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1866,
                            "endLine": 1866,
                            "startColumn": 34,
                            "endColumn": 35
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 452,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": true
          }
        },
        {
          "ruleId": "cpp/UseAfterFree/test",
          "ruleIndex": 3,
          "level": "note",
          "message": {
            "text": "Use after free. a is used in Mock::AllowLeak after it may already have been freed with delete expression.",
            "markdown": "Use after free. {0} is used in {1} after it may already have been freed with {2}.",
            "arguments": [
              "[a](0)",
              "[Mock::AllowLeak](1)",
              "[delete expression](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "googlemock/test/gmock-spec-builders_test.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 2174,
                  "endLine": 2174,
                  "startColumn": 19,
                  "endColumn": 20
                }
              }
            }
          ],
          "fingerprints": {
            "0": "a974f70bcc04f7d74a100a2740b53ee2d748683fd3cb4207e5a9d1a5026db0ad",
            "1": "73e5bd6e.b4aece19.f81c8b22.8ab4267b.3c8ce606.ee01b815.1e451703.c0d33555.73e5bd6e.b4aece19.78116e51.664b1195.e05f7676.e723426a.6a6cb5a6.c0d33555"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2174,
                            "endLine": 2174,
                            "startColumn": 19,
                            "endColumn": 20
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2174,
                            "endLine": 2174,
                            "startColumn": 3,
                            "endColumn": 18
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1866,
                            "endLine": 1866,
                            "startColumn": 34,
                            "endColumn": 35
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 452,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": true
          }
        },
        {
          "ruleId": "cpp/UseAfterFree/test",
          "ruleIndex": 3,
          "level": "note",
          "message": {
            "text": "Use after free. a is used in Mock::AllowLeak after it may already have been freed with delete expression.",
            "markdown": "Use after free. {0} is used in {1} after it may already have been freed with {2}.",
            "arguments": [
              "[a](0)",
              "[Mock::AllowLeak](1)",
              "[delete expression](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "googlemock/test/gmock-spec-builders_test.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 2179,
                  "endLine": 2179,
                  "startColumn": 19,
                  "endColumn": 20
                }
              }
            }
          ],
          "fingerprints": {
            "0": "57740d67d094bf510ae61a6be62e8abb81fe5cfea9d080044b574aa718538131",
            "1": "73e5bd6e.b4aece19.f81c8b22.8ab4267b.3c8ce606.ee01b815.1e451703.c0d33555.73e5bd6e.b4aece19.78116e51.664b1195.38b50422.ee01b815.6a6cb5a6.c0d33555"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2179,
                            "endLine": 2179,
                            "startColumn": 19,
                            "endColumn": 20
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2179,
                            "endLine": 2179,
                            "startColumn": 3,
                            "endColumn": 18
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1866,
                            "endLine": 1866,
                            "startColumn": 34,
                            "endColumn": 35
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 452,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": true
          }
        },
        {
          "ruleId": "cpp/UseAfterFree/test",
          "ruleIndex": 3,
          "level": "note",
          "message": {
            "text": "Use after free. a is used in Mock::AllowLeak after it may already have been freed with delete expression.",
            "markdown": "Use after free. {0} is used in {1} after it may already have been freed with {2}.",
            "arguments": [
              "[a](0)",
              "[Mock::AllowLeak](1)",
              "[delete expression](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "googlemock/test/gmock-spec-builders_test.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 2187,
                  "endLine": 2187,
                  "startColumn": 19,
                  "endColumn": 20
                }
              }
            }
          ],
          "fingerprints": {
            "0": "798447d29c6d6bfd30123fcaa79bd5ca64955aa06451cf669304ce4e6c391684",
            "1": "73e5bd6e.b4aece19.f81c8b22.8ab4267b.3c8ce606.ee01b815.1e451703.c0d33555.73e5bd6e.b4aece19.78116e51.664b1195.e05f7676.e723426a.6a6cb5a6.c0d33555"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2187,
                            "endLine": 2187,
                            "startColumn": 19,
                            "endColumn": 20
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2187,
                            "endLine": 2187,
                            "startColumn": 3,
                            "endColumn": 18
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1866,
                            "endLine": 1866,
                            "startColumn": 34,
                            "endColumn": 35
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 452,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": true
          }
        },
        {
          "ruleId": "cpp/UseAfterFree/test",
          "ruleIndex": 3,
          "level": "note",
          "message": {
            "text": "Use after free. a is used in Mock::AllowLeak after it may already have been freed with delete expression.",
            "markdown": "Use after free. {0} is used in {1} after it may already have been freed with {2}.",
            "arguments": [
              "[a](0)",
              "[Mock::AllowLeak](1)",
              "[delete expression](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "googlemock/test/gmock-spec-builders_test.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 2194,
                  "endLine": 2194,
                  "startColumn": 19,
                  "endColumn": 20
                }
              }
            }
          ],
          "fingerprints": {
            "0": "dd97f4da4390b69b4fcd2d17bb773b423de3e6b6d051ddc4a111ccefb6437d43",
            "1": "73e5bd6e.b4aece19.66e58c8d.8ab4267b.3c8ce606.ee01b815.1e451703.c0d33555.73e5bd6e.b4aece19.78116e51.664b1195.d09c4f04.ee01b815.6a6cb5a6.c0d33555"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2194,
                            "endLine": 2194,
                            "startColumn": 19,
                            "endColumn": 20
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2194,
                            "endLine": 2194,
                            "startColumn": 3,
                            "endColumn": 18
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1866,
                            "endLine": 1866,
                            "startColumn": 34,
                            "endColumn": 35
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 452,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": true
          }
        },
        {
          "ruleId": "cpp/UseAfterFree/test",
          "ruleIndex": 3,
          "level": "note",
          "message": {
            "text": "Use after free. a is used in ON_CALL after it may already have been freed with delete expression.",
            "markdown": "Use after free. {0} is used in {1} after it may already have been freed with {2}.",
            "arguments": [
              "[a](0)",
              "[ON_CALL](1)",
              "[delete expression](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "googlemock/test/gmock-spec-builders_test.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 2437,
                  "endLine": 2437,
                  "startColumn": 11,
                  "endColumn": 12
                }
              }
            }
          ],
          "fingerprints": {
            "0": "901a602aea0406e4ad3bba397a41be2ac074323c6d336a8b771f94263ee7ea9a",
            "1": "73e5bd6e.f182587e.66e58c8d.8ab4267b.d09c4f04.2f4e1548.df7e59ba.c0d33555.73e5bd6e.251902a6.66e58c8d.8ab4267b.6432a006.2f4e1548.5f6bd8ff.c0d33555"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2437,
                            "endLine": 2437,
                            "startColumn": 11,
                            "endColumn": 12
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2437,
                            "endLine": 2437,
                            "startColumn": 3,
                            "endColumn": 10
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1866,
                            "endLine": 1866,
                            "startColumn": 34,
                            "endColumn": 35
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 452,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": true
          }
        },
        {
          "ruleId": "cpp/UseAfterFree/test",
          "ruleIndex": 3,
          "level": "note",
          "message": {
            "text": "Use after free. a is used in ON_CALL after it may already have been freed with delete expression.",
            "markdown": "Use after free. {0} is used in {1} after it may already have been freed with {2}.",
            "arguments": [
              "[a](0)",
              "[ON_CALL](1)",
              "[delete expression](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "googlemock/test/gmock-spec-builders_test.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 2505,
                  "endLine": 2505,
                  "startColumn": 11,
                  "endColumn": 12
                }
              }
            }
          ],
          "fingerprints": {
            "0": "0e8a551f7cea1c4cc733429759df96965afc8f44c954aa9cce05735586a14caf",
            "1": "4e488ef6.f182587e.66e58c8d.2015d42e.d09c4f04.2f4e1548.df7e59ba.a0d9fe3a.4e488ef6.251902a6.66e58c8d.2015d42e.6432a006.2f4e1548.5f6bd8ff.a0d9fe3a"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2505,
                            "endLine": 2505,
                            "startColumn": 11,
                            "endColumn": 12
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2505,
                            "endLine": 2505,
                            "startColumn": 3,
                            "endColumn": 10
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1866,
                            "endLine": 1866,
                            "startColumn": 34,
                            "endColumn": 35
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 452,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": true
          }
        },
        {
          "ruleId": "cpp/UseAfterFree/test",
          "ruleIndex": 3,
          "level": "note",
          "message": {
            "text": "Use after free. a is used in ON_CALL after it may already have been freed with delete expression.",
            "markdown": "Use after free. {0} is used in {1} after it may already have been freed with {2}.",
            "arguments": [
              "[a](0)",
              "[ON_CALL](1)",
              "[delete expression](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "googlemock/test/gmock-spec-builders_test.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 2523,
                  "endLine": 2523,
                  "startColumn": 11,
                  "endColumn": 12
                }
              }
            }
          ],
          "fingerprints": {
            "0": "fbb270c9872e8713dc9881bff5e86dd8d8a01cc3c13a8820002c91a078eb1a49",
            "1": "4e488ef6.f182587e.66e58c8d.2015d42e.5b68209e.2f4e1548.df7e59ba.5b6cf5fb.4e488ef6.251902a6.66e58c8d.2015d42e.f5fd3da5.2f4e1548.df7e59ba.5b6cf5fb"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2523,
                            "endLine": 2523,
                            "startColumn": 11,
                            "endColumn": 12
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2523,
                            "endLine": 2523,
                            "startColumn": 3,
                            "endColumn": 10
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1866,
                            "endLine": 1866,
                            "startColumn": 34,
                            "endColumn": 35
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 452,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": true
          }
        },
        {
          "ruleId": "cpp/UseAfterFree/test",
          "ruleIndex": 3,
          "level": "note",
          "message": {
            "text": "Use after free. a is used in ON_CALL after it may already have been freed with delete expression.",
            "markdown": "Use after free. {0} is used in {1} after it may already have been freed with {2}.",
            "arguments": [
              "[a](0)",
              "[ON_CALL](1)",
              "[delete expression](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "googlemock/test/gmock-spec-builders_test.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 2525,
                  "endLine": 2525,
                  "startColumn": 11,
                  "endColumn": 12
                }
              }
            }
          ],
          "fingerprints": {
            "0": "6a922eb569915c286c00c7d6b6a92a2fecfcf0038f4d78b5c6d0ed4c4724050c",
            "1": "4e488ef6.f182587e.66e58c8d.2015d42e.5b68209e.2f4e1548.df7e59ba.e85946e0.4e488ef6.251902a6.66e58c8d.2015d42e.f5fd3da5.2f4e1548.df7e59ba.e85946e0"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2525,
                            "endLine": 2525,
                            "startColumn": 11,
                            "endColumn": 12
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2525,
                            "endLine": 2525,
                            "startColumn": 3,
                            "endColumn": 10
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1866,
                            "endLine": 1866,
                            "startColumn": 34,
                            "endColumn": 35
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 452,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": true
          }
        },
        {
          "ruleId": "cpp/UseAfterFree/test",
          "ruleIndex": 3,
          "level": "note",
          "message": {
            "text": "Use after free. a is used in ON_CALL after it may already have been freed with delete expression.",
            "markdown": "Use after free. {0} is used in {1} after it may already have been freed with {2}.",
            "arguments": [
              "[a](0)",
              "[ON_CALL](1)",
              "[delete expression](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "googlemock/test/gmock-spec-builders_test.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 2534,
                  "endLine": 2534,
                  "startColumn": 11,
                  "endColumn": 12
                }
              }
            }
          ],
          "fingerprints": {
            "0": "6a5fb4017b554d4bee295a502a4b126113605171f98c67520490e1ac63058f0d",
            "1": "4e488ef6.f182587e.66e58c8d.2015d42e.5b68209e.2f4e1548.df7e59ba.e85946e0.08aab1a4.251902a6.66e58c8d.2015d42e.f5fd3da5.2f4e1548.df7e59ba.e85946e0"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2534,
                            "endLine": 2534,
                            "startColumn": 11,
                            "endColumn": 12
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2534,
                            "endLine": 2534,
                            "startColumn": 3,
                            "endColumn": 10
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1866,
                            "endLine": 1866,
                            "startColumn": 34,
                            "endColumn": 35
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 452,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": true
          }
        },
        {
          "ruleId": "cpp/UseAfterFree/test",
          "ruleIndex": 3,
          "level": "note",
          "message": {
            "text": "Use after free. a is used in ON_CALL after it may already have been freed with delete expression.",
            "markdown": "Use after free. {0} is used in {1} after it may already have been freed with {2}.",
            "arguments": [
              "[a](0)",
              "[ON_CALL](1)",
              "[delete expression](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "googlemock/test/gmock-spec-builders_test.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 2535,
                  "endLine": 2535,
                  "startColumn": 11,
                  "endColumn": 12
                }
              }
            }
          ],
          "fingerprints": {
            "0": "92b4e14b14f3c7a7ab8cdf742d3b8b93f384db37137e8b4d1397347dcd40047c",
            "1": "08aab1a4.f182587e.66e58c8d.2015d42e.5b68209e.2f4e1548.df7e59ba.e85946e0.08aab1a4.251902a6.66e58c8d.2015d42e.6432a006.2f4e1548.5f6bd8ff.e85946e0"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2535,
                            "endLine": 2535,
                            "startColumn": 11,
                            "endColumn": 12
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2535,
                            "endLine": 2535,
                            "startColumn": 3,
                            "endColumn": 10
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1866,
                            "endLine": 1866,
                            "startColumn": 34,
                            "endColumn": 35
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 452,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": true
          }
        },
        {
          "ruleId": "cpp/UseAfterFree/test",
          "ruleIndex": 3,
          "level": "note",
          "message": {
            "text": "Use after free. a is used in EXPECT_CALL after it may already have been freed with delete expression.",
            "markdown": "Use after free. {0} is used in {1} after it may already have been freed with {2}.",
            "arguments": [
              "[a](0)",
              "[EXPECT_CALL](1)",
              "[delete expression](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "googlemock/test/gmock-spec-builders_test.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 2438,
                  "endLine": 2438,
                  "startColumn": 15,
                  "endColumn": 16
                }
              }
            }
          ],
          "fingerprints": {
            "0": "ed6acc687bdef8b06e6225fe40c9e525cd4b15798288df0b12a5546e4915d597",
            "1": "08aab1a4.f182587e.66e58c8d.2015d42e.d09c4f04.2f4e1548.df7e59ba.e85946e0.08aab1a4.334f5458.66e58c8d.2015d42e.6432a006.d03f2811.5f6bd8ff.e85946e0"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2438,
                            "endLine": 2438,
                            "startColumn": 15,
                            "endColumn": 16
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2438,
                            "endLine": 2438,
                            "startColumn": 3,
                            "endColumn": 14
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1866,
                            "endLine": 1866,
                            "startColumn": 34,
                            "endColumn": 35
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 452,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": true
          }
        },
        {
          "ruleId": "cpp/UseAfterFree/test",
          "ruleIndex": 3,
          "level": "note",
          "message": {
            "text": "Use after free. a is used in EXPECT_CALL after it may already have been freed with delete expression.",
            "markdown": "Use after free. {0} is used in {1} after it may already have been freed with {2}.",
            "arguments": [
              "[a](0)",
              "[EXPECT_CALL](1)",
              "[delete expression](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "googlemock/test/gmock-spec-builders_test.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 2507,
                  "endLine": 2507,
                  "startColumn": 15,
                  "endColumn": 16
                }
              }
            }
          ],
          "fingerprints": {
            "0": "7283f1cf2eb8ed92a659d63a5f62a96a6800d0e8b912503d517bef5a798348ae",
            "1": "57664a44.f182587e.66e58c8d.2015d42e.d09c4f04.2f4e1548.1e451703.5b6cf5fb.57664a44.334f5458.66e58c8d.2bdb2425.11c88aa7.d03f2811.6a6cb5a6.5b6cf5fb"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2507,
                            "endLine": 2507,
                            "startColumn": 15,
                            "endColumn": 16
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2507,
                            "endLine": 2507,
                            "startColumn": 3,
                            "endColumn": 14
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1866,
                            "endLine": 1866,
                            "startColumn": 34,
                            "endColumn": 35
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 452,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": true
          }
        },
        {
          "ruleId": "cpp/UseAfterFree/test",
          "ruleIndex": 3,
          "level": "note",
          "message": {
            "text": "Use after free. a is used in EXPECT_CALL after it may already have been freed with delete expression.",
            "markdown": "Use after free. {0} is used in {1} after it may already have been freed with {2}.",
            "arguments": [
              "[a](0)",
              "[EXPECT_CALL](1)",
              "[delete expression](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "googlemock/test/gmock-spec-builders_test.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 2508,
                  "endLine": 2508,
                  "startColumn": 15,
                  "endColumn": 16
                }
              }
            }
          ],
          "fingerprints": {
            "0": "32fed56a3c90feca6f0e66c6fecc3f13e449dab5372fac6c2894e30427abd50d",
            "1": "4e488ef6.e0e5ff6d.66e58c8d.2015d42e.d09c4f04.2f4e1548.df7e59ba.5b6cf5fb.75feee71.334f5458.66e58c8d.2015d42e.11c88aa7.d03f2811.df7e59ba.5b6cf5fb"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2508,
                            "endLine": 2508,
                            "startColumn": 15,
                            "endColumn": 16
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2508,
                            "endLine": 2508,
                            "startColumn": 3,
                            "endColumn": 14
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1866,
                            "endLine": 1866,
                            "startColumn": 34,
                            "endColumn": 35
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 452,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": true
          }
        },
        {
          "ruleId": "cpp/UseAfterFree/test",
          "ruleIndex": 3,
          "level": "note",
          "message": {
            "text": "Use after free. b1 is used in ON_CALL after it may already have been freed with delete expression.",
            "markdown": "Use after free. {0} is used in {1} after it may already have been freed with {2}.",
            "arguments": [
              "[b1](0)",
              "[ON_CALL](1)",
              "[delete expression](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "googlemock/test/gmock-spec-builders_test.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 2440,
                  "endLine": 2440,
                  "startColumn": 11,
                  "endColumn": 13
                }
              }
            }
          ],
          "fingerprints": {
            "0": "30385c05585c78cc9af3337e941261a9bed4b7f4866f3495dc28ba5156e5448d",
            "1": "176bacc3.f182587e.66e58c8d.8ab4267b.d09c4f04.2f4e1548.df7e59ba.c0d33555.176bacc3.5bf04aa4.66e58c8d.8ab4267b.d09c4f04.2f4e1548.df7e59ba.c0d33555"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2440,
                            "endLine": 2440,
                            "startColumn": 11,
                            "endColumn": 13
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2440,
                            "endLine": 2440,
                            "startColumn": 3,
                            "endColumn": 10
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1825,
                            "endLine": 1825,
                            "startColumn": 34,
                            "endColumn": 36
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 452,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": true
          }
        },
        {
          "ruleId": "cpp/UseAfterFree/test",
          "ruleIndex": 3,
          "level": "note",
          "message": {
            "text": "Use after free. b1 is used in EXPECT_CALL after it may already have been freed with delete expression.",
            "markdown": "Use after free. {0} is used in {1} after it may already have been freed with {2}.",
            "arguments": [
              "[b1](0)",
              "[EXPECT_CALL](1)",
              "[delete expression](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "googlemock/test/gmock-spec-builders_test.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 2441,
                  "endLine": 2441,
                  "startColumn": 15,
                  "endColumn": 17
                }
              }
            }
          ],
          "fingerprints": {
            "0": "bca23a7f4016559f621f58706731ffba81fb387cf9f9732c983c194e525616f6",
            "1": "4e488ef6.5bf04aa4.66e58c8d.f51f8eb6.d09c4f04.2f4e1548.df7e59ba.e85946e0.176bacc3.5bf04aa4.66e58c8d.8ab4267b.6432a006.d03f2811.5f6bd8ff.c0d33555"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2441,
                            "endLine": 2441,
                            "startColumn": 15,
                            "endColumn": 17
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2441,
                            "endLine": 2441,
                            "startColumn": 3,
                            "endColumn": 14
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1825,
                            "endLine": 1825,
                            "startColumn": 34,
                            "endColumn": 36
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 452,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": true
          }
        },
        {
          "ruleId": "cpp/UseAfterFree/test",
          "ruleIndex": 3,
          "level": "note",
          "message": {
            "text": "Use after free. b2 is used in ON_CALL after it may already have been freed with delete expression.",
            "markdown": "Use after free. {0} is used in {1} after it may already have been freed with {2}.",
            "arguments": [
              "[b2](0)",
              "[ON_CALL](1)",
              "[delete expression](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "googlemock/test/gmock-spec-builders_test.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 2443,
                  "endLine": 2443,
                  "startColumn": 11,
                  "endColumn": 13
                }
              }
            }
          ],
          "fingerprints": {
            "0": "527b845fcbaf6ffa40210ddb938e586c89226b82ba73e029252a9100d72f66b7",
            "1": "6020fdb6.f182587e.66e58c8d.f51f8eb6.eabbd88b.2f4e1548.df7e59ba.e85946e0.6020fdb6.5bf04aa4.66e58c8d.f51f8eb6.eabbd88b.2f4e1548.df7e59ba.e85946e0"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2443,
                            "endLine": 2443,
                            "startColumn": 11,
                            "endColumn": 13
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2443,
                            "endLine": 2443,
                            "startColumn": 3,
                            "endColumn": 10
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1829,
                            "endLine": 1829,
                            "startColumn": 10,
                            "endColumn": 12
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 452,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": true
          }
        },
        {
          "ruleId": "cpp/DoubleFree/test",
          "ruleIndex": 0,
          "level": "note",
          "message": {
            "text": "Potential double delete expression. b2 may have already been freed by delete expression.",
            "markdown": "Potential double {0}. {1} may have already been freed by {2}.",
            "arguments": [
              "[delete expression](0)",
              "[b2](1)",
              "[delete expression](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "googlemock/test/gmock-spec-builders_test.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1767,
                  "endLine": 1767,
                  "startColumn": 10,
                  "endColumn": 12
                }
              }
            }
          ],
          "fingerprints": {
            "0": "c977d07286b0e88f82bd9593d80b0dd272db351fe5e8b69951b6e5b59a2855c4",
            "1": "57664a44.5bf04aa4.c63f1e69.8ab4267b.eabbd88b.2f4e1548.1e451703.c0d33555.57664a44.5bf04aa4.66e58c8d.8ab4267b.eabbd88b.6a274ab8.30ad82ea.c0d33555"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1767,
                            "endLine": 1767,
                            "startColumn": 10,
                            "endColumn": 12
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1767,
                            "endLine": 1767,
                            "startColumn": 10,
                            "endColumn": 12
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1767,
                            "endLine": 1767,
                            "startColumn": 10,
                            "endColumn": 12
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 413,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": true
          }
        },
        {
          "ruleId": "cpp/DoubleFree/test",
          "ruleIndex": 0,
          "level": "note",
          "message": {
            "text": "Potential double delete expression. b2 may have already been freed by delete expression.",
            "markdown": "Potential double {0}. {1} may have already been freed by {2}.",
            "arguments": [
              "[delete expression](0)",
              "[b2](1)",
              "[delete expression](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "googlemock/test/gmock-spec-builders_test.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1809,
                  "endLine": 1809,
                  "startColumn": 10,
                  "endColumn": 12
                }
              }
            }
          ],
          "fingerprints": {
            "0": "a0ca96508ee95fb0a3d634bedca4b5c8263303c89ccf582a487008ed2a0689ed",
            "1": "57664a44.5bf04aa4.c63f1e69.8ab4267b.eabbd88b.2f4e1548.1e451703.c0d33555.57664a44.5bf04aa4.66e58c8d.8ab4267b.eabbd88b.2f4e1548.6a6cb5a6.c0d33555"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1809,
                            "endLine": 1809,
                            "startColumn": 10,
                            "endColumn": 12
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1809,
                            "endLine": 1809,
                            "startColumn": 10,
                            "endColumn": 12
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1809,
                            "endLine": 1809,
                            "startColumn": 10,
                            "endColumn": 12
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 413,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": true
          }
        },
        {
          "ruleId": "cpp/DoubleFree/test",
          "ruleIndex": 0,
          "level": "note",
          "message": {
            "text": "Potential double delete expression. b2 may have already been freed by delete expression.",
            "markdown": "Potential double {0}. {1} may have already been freed by {2}.",
            "arguments": [
              "[delete expression](0)",
              "[b2](1)",
              "[delete expression](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "googlemock/test/gmock-spec-builders_test.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1829,
                  "endLine": 1829,
                  "startColumn": 10,
                  "endColumn": 12
                }
              }
            }
          ],
          "fingerprints": {
            "0": "6c9dfc711cc60c3b2057a79beb753c435627a0d34199bb1ff656dfb357c7e40d",
            "1": "57664a44.5bf04aa4.66e58c8d.8ab4267b.eabbd88b.2f4e1548.1e451703.c0d33555.57664a44.5bf04aa4.66e58c8d.8ab4267b.eabbd88b.2f4e1548.6a6cb5a6.c0d33555"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1829,
                            "endLine": 1829,
                            "startColumn": 10,
                            "endColumn": 12
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1829,
                            "endLine": 1829,
                            "startColumn": 10,
                            "endColumn": 12
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1829,
                            "endLine": 1829,
                            "startColumn": 10,
                            "endColumn": 12
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 413,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": true
          }
        },
        {
          "ruleId": "cpp/UseAfterFree/test",
          "ruleIndex": 3,
          "level": "note",
          "message": {
            "text": "Use after free. b2 is used in EXPECT_CALL after it may already have been freed with delete expression.",
            "markdown": "Use after free. {0} is used in {1} after it may already have been freed with {2}.",
            "arguments": [
              "[b2](0)",
              "[EXPECT_CALL](1)",
              "[delete expression](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "googlemock/test/gmock-spec-builders_test.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 2444,
                  "endLine": 2444,
                  "startColumn": 15,
                  "endColumn": 17
                }
              }
            }
          ],
          "fingerprints": {
            "0": "bcc96a875ec7576ee39f9ebbc2904f27a1344d40bf5b5cc76fe5f4d3ce6eb228",
            "1": "57664a44.5bf04aa4.66e58c8d.f51f8eb6.eabbd88b.2f4e1548.1e451703.5b6cf5fb.57664a44.5bf04aa4.66e58c8d.8ab4267b.6432a006.d03f2811.6a6cb5a6.5b6cf5fb"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2444,
                            "endLine": 2444,
                            "startColumn": 15,
                            "endColumn": 17
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2444,
                            "endLine": 2444,
                            "startColumn": 3,
                            "endColumn": 14
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1829,
                            "endLine": 1829,
                            "startColumn": 10,
                            "endColumn": 12
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 452,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": true
          }
        },
        {
          "ruleId": "cpp/UseAfterFree/test",
          "ruleIndex": 3,
          "level": "note",
          "message": {
            "text": "Use after free. b2 is used in DoB after it may already have been freed with delete expression.",
            "markdown": "Use after free. {0} is used in {1} after it may already have been freed with {2}.",
            "arguments": [
              "[b2](0)",
              "[DoB](1)",
              "[delete expression](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "googlemock/test/gmock-spec-builders_test.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 2446,
                  "endLine": 2446,
                  "startColumn": 3,
                  "endColumn": 5
                }
              }
            }
          ],
          "fingerprints": {
            "0": "9a3387a7b41720142ed6b78c870c4290ced4d15c97f647136f277bc2d429fb9a",
            "1": "6020fdb6.5bf04aa4.66e58c8d.f302f8c2.eabbd88b.e723426a.46bd7d50.5b6cf5fb.f488c5cb.5bf04aa4.66e58c8d.f51f8eb6.eabbd88b.e723426a.6a6cb5a6.5b6cf5fb"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2446,
                            "endLine": 2446,
                            "startColumn": 3,
                            "endColumn": 5
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2446,
                            "endLine": 2446,
                            "startColumn": 3,
                            "endColumn": 9
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1829,
                            "endLine": 1829,
                            "startColumn": 10,
                            "endColumn": 12
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 452,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": true
          }
        },
        {
          "ruleId": "cpp/UseAfterFree/test",
          "ruleIndex": 3,
          "level": "note",
          "message": {
            "text": "Use after free. a is used in Binary after it may already have been freed with delete expression.",
            "markdown": "Use after free. {0} is used in {1} after it may already have been freed with {2}.",
            "arguments": [
              "[a](0)",
              "[Binary](1)",
              "[delete expression](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "googlemock/test/gmock-spec-builders_test.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 2451,
                  "endLine": 2451,
                  "startColumn": 15,
                  "endColumn": 16
                }
              }
            }
          ],
          "fingerprints": {
            "0": "abad8e65311ce0b089ea3d483dfa8882ff41b516f653ad6b73d8c250b708a7ff",
            "1": "08aab1a4.198346d8.66e58c8d.2015d42e.e05f7676.e723426a.46bd7d50.13dd92b8.08aab1a4.8be50dd5.66e58c8d.2015d42e.e05f7676.e723426a.dde12bc3.ce8c7a52"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2451,
                            "endLine": 2451,
                            "startColumn": 15,
                            "endColumn": 16
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2451,
                            "endLine": 2451,
                            "startColumn": 15,
                            "endColumn": 23
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1866,
                            "endLine": 1866,
                            "startColumn": 34,
                            "endColumn": 35
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 452,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": true
          }
        },
        {
          "ruleId": "cpp/UseAfterFree/test",
          "ruleIndex": 3,
          "level": "note",
          "message": {
            "text": "Use after free. a is used in Binary after it may already have been freed with delete expression.",
            "markdown": "Use after free. {0} is used in {1} after it may already have been freed with {2}.",
            "arguments": [
              "[a](0)",
              "[Binary](1)",
              "[delete expression](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "googlemock/test/gmock-spec-builders_test.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 2452,
                  "endLine": 2452,
                  "startColumn": 16,
                  "endColumn": 17
                }
              }
            }
          ],
          "fingerprints": {
            "0": "3672498b7ffe75cb6e96d128a17798468254d35447bfd76249d6c93edca5a1fd",
            "1": "08aab1a4.1bf1f614.66e58c8d.e151b9b9.e05f7676.e723426a.46bd7d50.d6f7082d.08aab1a4.1bf1f614.66e58c8d.e151b9b9.e05f7676.e723426a.dde12bc3.b059c1d2"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2452,
                            "endLine": 2452,
                            "startColumn": 16,
                            "endColumn": 17
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2452,
                            "endLine": 2452,
                            "startColumn": 16,
                            "endColumn": 24
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1866,
                            "endLine": 1866,
                            "startColumn": 34,
                            "endColumn": 35
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 452,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": true
          }
        },
        {
          "ruleId": "cpp/UseAfterFree/test",
          "ruleIndex": 3,
          "level": "note",
          "message": {
            "text": "Use after free. a is used in Binary after it may already have been freed with delete expression.",
            "markdown": "Use after free. {0} is used in {1} after it may already have been freed with {2}.",
            "arguments": [
              "[a](0)",
              "[Binary](1)",
              "[delete expression](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "googlemock/test/gmock-spec-builders_test.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 2536,
                  "endLine": 2536,
                  "startColumn": 15,
                  "endColumn": 16
                }
              }
            }
          ],
          "fingerprints": {
            "0": "e3a34ee1711b332cffd43b19810f6bbae21874e8f3fd08e51adea2a192ea1863",
            "1": "08aab1a4.f182587e.66e58c8d.2015d42e.a2b1b4fd.24dcd476.0ea6ce33.e85946e0.08aab1a4.1198d097.66e58c8d.ac17aaa9.a2b1b4fd.2f4e1548.dde12bc3.e85946e0"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2536,
                            "endLine": 2536,
                            "startColumn": 15,
                            "endColumn": 16
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2536,
                            "endLine": 2536,
                            "startColumn": 15,
                            "endColumn": 23
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1866,
                            "endLine": 1866,
                            "startColumn": 34,
                            "endColumn": 35
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 452,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": true
          }
        },
        {
          "ruleId": "cpp/UseAfterFree/test",
          "ruleIndex": 3,
          "level": "note",
          "message": {
            "text": "Use after free. a is used in Binary after it may already have been freed with delete expression.",
            "markdown": "Use after free. {0} is used in {1} after it may already have been freed with {2}.",
            "arguments": [
              "[a](0)",
              "[Binary](1)",
              "[delete expression](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "googlemock/test/gmock-spec-builders_test.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 2537,
                  "endLine": 2537,
                  "startColumn": 15,
                  "endColumn": 16
                }
              }
            }
          ],
          "fingerprints": {
            "0": "04ee4778e57ce674579d7c032c5a79179db373f5e9ce263b1f97ac46119bca88",
            "1": "08aab1a4.019b94ed.66e58c8d.ac17aaa9.5b68209e.24dcd476.0ea6ce33.c515f1d8.08aab1a4.1198d097.66e58c8d.ac17aaa9.a2b1b4fd.24dcd476.dde12bc3.e85946e0"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2537,
                            "endLine": 2537,
                            "startColumn": 15,
                            "endColumn": 16
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2537,
                            "endLine": 2537,
                            "startColumn": 15,
                            "endColumn": 23
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1866,
                            "endLine": 1866,
                            "startColumn": 34,
                            "endColumn": 35
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 452,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": true
          }
        },
        {
          "ruleId": "cpp/UseAfterFree/test",
          "ruleIndex": 3,
          "level": "note",
          "message": {
            "text": "Use after free. b1 is used in DoB after it may already have been freed with delete expression.",
            "markdown": "Use after free. {0} is used in {1} after it may already have been freed with {2}.",
            "arguments": [
              "[b1](0)",
              "[DoB](1)",
              "[delete expression](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "googlemock/test/gmock-spec-builders_test.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 2454,
                  "endLine": 2454,
                  "startColumn": 16,
                  "endColumn": 18
                }
              }
            }
          ],
          "fingerprints": {
            "0": "617bd0deb654baab6cb667f4f61d67e89038a605ea74e1d8ed48c37e033d2073",
            "1": "4e488ef6.5bf04aa4.66e58c8d.3e2830cb.d09c4f04.24dcd476.0ea6ce33.13dd92b8.f488c5cb.5bf04aa4.66e58c8d.f51f8eb6.d09c4f04.2f4e1548.1e451703.e85946e0"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2454,
                            "endLine": 2454,
                            "startColumn": 16,
                            "endColumn": 18
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2454,
                            "endLine": 2454,
                            "startColumn": 16,
                            "endColumn": 22
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1825,
                            "endLine": 1825,
                            "startColumn": 34,
                            "endColumn": 36
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 452,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": true
          }
        },
        {
          "ruleId": "cpp/UseAfterFree/test",
          "ruleIndex": 3,
          "level": "note",
          "message": {
            "text": "Use after free. b1 is used in DoB after it may already have been freed with delete expression.",
            "markdown": "Use after free. {0} is used in {1} after it may already have been freed with {2}.",
            "arguments": [
              "[b1](0)",
              "[DoB](1)",
              "[delete expression](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "googlemock/test/gmock-spec-builders_test.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 2455,
                  "endLine": 2455,
                  "startColumn": 16,
                  "endColumn": 18
                }
              }
            }
          ],
          "fingerprints": {
            "0": "127663346a4f77785aeaab152b7c98750a5b70cfd92fc92264332acf8ef123f8",
            "1": "4e488ef6.5bf04aa4.66e58c8d.3e2830cb.e05f7676.e723426a.46bd7d50.3fa477c5.f488c5cb.5bf04aa4.66e58c8d.c63d60c2.e05f7676.e723426a.1e451703.13dd92b8"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2455,
                            "endLine": 2455,
                            "startColumn": 16,
                            "endColumn": 18
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2455,
                            "endLine": 2455,
                            "startColumn": 16,
                            "endColumn": 22
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1825,
                            "endLine": 1825,
                            "startColumn": 34,
                            "endColumn": 36
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 452,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": true
          }
        },
        {
          "ruleId": "cpp/UseAfterFree/test",
          "ruleIndex": 3,
          "level": "note",
          "message": {
            "text": "Use after free. a is used in SetArgPointee after it may already have been freed with delete expression.",
            "markdown": "Use after free. {0} is used in {1} after it may already have been freed with {2}.",
            "arguments": [
              "[a](0)",
              "[SetArgPointee](1)",
              "[delete expression](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "googlemock/test/gmock-spec-builders_test.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 2465,
                  "endLine": 2465,
                  "startColumn": 40,
                  "endColumn": 41
                }
              }
            }
          ],
          "fingerprints": {
            "0": "149ca7cc0cca575d5ddaa608337978abb2d5d704328624419b6bd0fb740a911f",
            "1": "08aab1a4.1bf1f614.66e58c8d.e151b9b9.e05f7676.e723426a.df7e59ba.a0d9fe3a.08aab1a4.7c9d6e59.66e58c8d.e151b9b9.e05f7676.e723426a.7a0742aa.a0d9fe3a"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2465,
                            "endLine": 2465,
                            "startColumn": 40,
                            "endColumn": 41
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2465,
                            "endLine": 2465,
                            "startColumn": 23,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1866,
                            "endLine": 1866,
                            "startColumn": 34,
                            "endColumn": 35
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 452,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": true
          }
        },
        {
          "ruleId": "cpp/UseAfterFree/test",
          "ruleIndex": 3,
          "level": "note",
          "message": {
            "text": "Use after free. a is used in SetArgPointee after it may already have been freed with delete expression.",
            "markdown": "Use after free. {0} is used in {1} after it may already have been freed with {2}.",
            "arguments": [
              "[a](0)",
              "[SetArgPointee](1)",
              "[delete expression](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "googlemock/test/gmock-spec-builders_test.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 2484,
                  "endLine": 2484,
                  "startColumn": 73,
                  "endColumn": 74
                }
              }
            }
          ],
          "fingerprints": {
            "0": "4da849e3756a2ba20a5e132abaa17bf2886b8d092e325650c6b141b233708327",
            "1": "4e488ef6.1bf1f614.66e58c8d.e151b9b9.e05f7676.e723426a.df7e59ba.a0d9fe3a.57664a44.1bf1f614.66e58c8d.e151b9b9.e05f7676.e723426a.7a0742aa.a0d9fe3a"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2484,
                            "endLine": 2484,
                            "startColumn": 73,
                            "endColumn": 74
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2484,
                            "endLine": 2484,
                            "startColumn": 56,
                            "endColumn": 72
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1866,
                            "endLine": 1866,
                            "startColumn": 34,
                            "endColumn": 35
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 452,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": true
          }
        },
        {
          "ruleId": "cpp/UseAfterFree/test",
          "ruleIndex": 3,
          "level": "note",
          "message": {
            "text": "Use after free. a is used in reset after it may already have been freed with delete expression.",
            "markdown": "Use after free. {0} is used in {1} after it may already have been freed with {2}.",
            "arguments": [
              "[a](0)",
              "[reset](1)",
              "[delete expression](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "googlemock/test/gmock-spec-builders_test.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 2469,
                  "endLine": 2469,
                  "startColumn": 3,
                  "endColumn": 4
                }
              }
            }
          ],
          "fingerprints": {
            "0": "784182de44c5b224ee5b74475dd0347eb79d9eff23af7b64b53ea1ae97671631",
            "1": "4e488ef6.1bf1f614.66e58c8d.e151b9b9.5bd95651.24dcd476.6977003a.a0d9fe3a.73e5bd6e.b4aece19.66e58c8d.8ab4267b.9ccdf169.e723426a.6a6cb5a6.a0d9fe3a"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2469,
                            "endLine": 2469,
                            "startColumn": 3,
                            "endColumn": 4
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2469,
                            "endLine": 2469,
                            "startColumn": 3,
                            "endColumn": 10
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1866,
                            "endLine": 1866,
                            "startColumn": 34,
                            "endColumn": 35
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 452,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": true
          }
        },
        {
          "ruleId": "cpp/UseAfterFree/test",
          "ruleIndex": 3,
          "level": "note",
          "message": {
            "text": "Use after free. a is used in reset after it may already have been freed with delete expression.",
            "markdown": "Use after free. {0} is used in {1} after it may already have been freed with {2}.",
            "arguments": [
              "[a](0)",
              "[reset](1)",
              "[delete expression](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "googlemock/test/gmock-spec-builders_test.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 2488,
                  "endLine": 2488,
                  "startColumn": 3,
                  "endColumn": 4
                }
              }
            }
          ],
          "fingerprints": {
            "0": "25abe147ae3edf02a189dc0e762d92bd095664cbe0eb1f725178290024688e31",
            "1": "4e488ef6.f182587e.66e58c8d.e151b9b9.5bd95651.24dcd476.6977003a.a0d9fe3a.57664a44.d4fc7c95.66e58c8d.2bdb2425.9ccdf169.e723426a.6a6cb5a6.a0d9fe3a"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2488,
                            "endLine": 2488,
                            "startColumn": 3,
                            "endColumn": 4
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2488,
                            "endLine": 2488,
                            "startColumn": 3,
                            "endColumn": 10
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1866,
                            "endLine": 1866,
                            "startColumn": 34,
                            "endColumn": 35
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 452,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": true
          }
        },
        {
          "ruleId": "cpp/UseAfterFree/test",
          "ruleIndex": 3,
          "level": "note",
          "message": {
            "text": "Use after free. a is used in DoA after it may already have been freed with delete expression.",
            "markdown": "Use after free. {0} is used in {1} after it may already have been freed with {2}.",
            "arguments": [
              "[a](0)",
              "[DoA](1)",
              "[delete expression](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "googlemock/test/gmock-spec-builders_test.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 2513,
                  "endLine": 2513,
                  "startColumn": 3,
                  "endColumn": 4
                }
              }
            }
          ],
          "fingerprints": {
            "0": "087446ab8bf1803d10d7acf9970f8f065cb22054b32031314abbee991f154ad1",
            "1": "75feee71.f182587e.66e58c8d.2015d42e.f5fd3da5.24dcd476.6977003a.5b6cf5fb.57664a44.2461320e.66e58c8d.2bdb2425.10f2a03d.af07c387.6a6cb5a6.5b6cf5fb"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2513,
                            "endLine": 2513,
                            "startColumn": 3,
                            "endColumn": 4
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2513,
                            "endLine": 2513,
                            "startColumn": 3,
                            "endColumn": 8
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1866,
                            "endLine": 1866,
                            "startColumn": 34,
                            "endColumn": 35
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 452,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": true
          }
        },
        {
          "ruleId": "cpp/UseAfterFree/test",
          "ruleIndex": 3,
          "level": "note",
          "message": {
            "text": "Use after free. a is used in DoA after it may already have been freed with delete expression.",
            "markdown": "Use after free. {0} is used in {1} after it may already have been freed with {2}.",
            "arguments": [
              "[a](0)",
              "[DoA](1)",
              "[delete expression](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "googlemock/test/gmock-spec-builders_test.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 2527,
                  "endLine": 2527,
                  "startColumn": 3,
                  "endColumn": 4
                }
              }
            }
          ],
          "fingerprints": {
            "0": "4a2fd1e57cee323e96fbead2c5f1fcbecdc163c08be1f2529b3112abb9a9e0fd",
            "1": "8171d400.f182587e.66e58c8d.ac17aaa9.f5fd3da5.24dcd476.6977003a.e85946e0.57664a44.f182587e.66e58c8d.ac17aaa9.f5fd3da5.af07c387.6a6cb5a6.5b6cf5fb"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2527,
                            "endLine": 2527,
                            "startColumn": 3,
                            "endColumn": 4
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2527,
                            "endLine": 2527,
                            "startColumn": 3,
                            "endColumn": 8
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1866,
                            "endLine": 1866,
                            "startColumn": 34,
                            "endColumn": 35
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 452,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": true
          }
        },
        {
          "ruleId": "cpp/UseAfterFree/test",
          "ruleIndex": 3,
          "level": "note",
          "message": {
            "text": "Use after free. a is used in DoA after it may already have been freed with delete expression.",
            "markdown": "Use after free. {0} is used in {1} after it may already have been freed with {2}.",
            "arguments": [
              "[a](0)",
              "[DoA](1)",
              "[delete expression](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "googlemock/test/gmock-spec-builders_test.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 2530,
                  "endLine": 2530,
                  "startColumn": 3,
                  "endColumn": 4
                }
              }
            }
          ],
          "fingerprints": {
            "0": "1e5f756ce060a1339f498330570ebea4bccc42e01f75556a525298667f15dffd",
            "1": "4e488ef6.f182587e.66e58c8d.2015d42e.f5fd3da5.24dcd476.6977003a.e85946e0.57664a44.f182587e.66e58c8d.ac17aaa9.f5fd3da5.af07c387.6a6cb5a6.e85946e0"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2530,
                            "endLine": 2530,
                            "startColumn": 3,
                            "endColumn": 4
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2530,
                            "endLine": 2530,
                            "startColumn": 3,
                            "endColumn": 8
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-spec-builders_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1866,
                            "endLine": 1866,
                            "startColumn": 34,
                            "endColumn": 35
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 452,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": true
          }
        },
        {
          "ruleId": "cpp/UseAfterFree/test",
          "ruleIndex": 3,
          "level": "note",
          "message": {
            "text": "Use after free. ansi is used in EXPECT_STREQ after it may already have been freed with delete expression.",
            "markdown": "Use after free. {0} is used in {1} after it may already have been freed with {2}.",
            "arguments": [
              "[ansi](0)",
              "[EXPECT_STREQ](1)",
              "[delete expression](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "googletest/test/gtest_unittest.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1135,
                  "endLine": 1135,
                  "startColumn": 29,
                  "endColumn": 33
                }
              }
            }
          ],
          "fingerprints": {
            "0": "31ff0cbc1e508985f1d5ddd5f2e1e2108e96316a0f8c5742b1d838721be10bbf",
            "1": "5bdab820.8be50dd5.d6d43ee0.6483b32f.f5fd3da5.77f1363e.1e451703.924970e3.5bdab820.8be50dd5.125b465b.2bdb2425.f5fd3da5.77f1363e.6a6cb5a6.924970e3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googletest/test/gtest_unittest.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1135,
                            "endLine": 1135,
                            "startColumn": 29,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googletest/test/gtest_unittest.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1135,
                            "endLine": 1135,
                            "startColumn": 3,
                            "endColumn": 15
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googletest/test/gtest_unittest.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1127,
                            "endLine": 1127,
                            "startColumn": 12,
                            "endColumn": 16
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 452,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": true
          }
        },
        {
          "ruleId": "cpp/UseAfterFree/test",
          "ruleIndex": 3,
          "level": "note",
          "message": {
            "text": "Use after free. utf16 is used in wcsncmp after it may already have been freed with delete expression.",
            "markdown": "Use after free. {0} is used in {1} after it may already have been freed with {2}.",
            "arguments": [
              "[utf16](0)",
              "[wcsncmp](1)",
              "[delete expression](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "googletest/test/gtest_unittest.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1138,
                  "endLine": 1138,
                  "startColumn": 38,
                  "endColumn": 43
                }
              }
            }
          ],
          "fingerprints": {
            "0": "67e78c2339b1663c5229cb44213e83388b60282b584a47725f35360ccc129fc8",
            "1": "009b425d.3bdf44ba.bd1b25b9.5b3f2949.41876faf.e723426a.46bd7d50.545e9171.0e795ca8.3bdf44ba.bd1b25b9.5b3f2949.41876faf.e723426a.1e451703.545e9171"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googletest/test/gtest_unittest.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1138,
                            "endLine": 1138,
                            "startColumn": 38,
                            "endColumn": 43
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googletest/test/gtest_unittest.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1138,
                            "endLine": 1138,
                            "startColumn": 16,
                            "endColumn": 23
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googletest/test/gtest_unittest.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1130,
                            "endLine": 1130,
                            "startColumn": 12,
                            "endColumn": 17
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 452,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": true
          }
        },
        {
          "ruleId": "cpp/UseAfterFree/test",
          "ruleIndex": 3,
          "level": "note",
          "message": {
            "text": "Use after free. listener is used in Append after it may already have been freed with delete expression.",
            "markdown": "Use after free. {0} is used in {1} after it may already have been freed with {2}.",
            "arguments": [
              "[listener](0)",
              "[Append](1)",
              "[delete expression](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "googletest/test/gtest_unittest.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 6997,
                  "endLine": 6997,
                  "startColumn": 20,
                  "endColumn": 28
                }
              }
            }
          ],
          "fingerprints": {
            "0": "86bac7ea48cf43c19eebcd4ebf25b4fc2b55f7210784ee53c25d70ee4c771651",
            "1": "73e5bd6e.4155ad7d.66e58c8d.f51f8eb6.2dcfd828.66e6c400.1e451703.5b6cf5fb.73e5bd6e.4155ad7d.66e58c8d.f51f8eb6.2dcfd828.66e6c400.6a6cb5a6.5b6cf5fb"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googletest/test/gtest_unittest.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 6997,
                            "endLine": 6997,
                            "startColumn": 20,
                            "endColumn": 28
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googletest/test/gtest_unittest.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 6997,
                            "endLine": 6997,
                            "startColumn": 3,
                            "endColumn": 19
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googletest/test/gtest_unittest.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 6988,
                            "endLine": 6988,
                            "startColumn": 10,
                            "endColumn": 18
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 452,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": true
          }
        },
        {
          "ruleId": "cpp/DoubleFree/test",
          "ruleIndex": 0,
          "level": "note",
          "message": {
            "text": "Potential double delete expression. ansi may have already been freed by delete expression.",
            "markdown": "Potential double {0}. {1} may have already been freed by {2}.",
            "arguments": [
              "[delete expression](0)",
              "[ansi](1)",
              "[delete expression](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "googletest/test/gtest_unittest.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1136,
                  "endLine": 1136,
                  "startColumn": 12,
                  "endColumn": 16
                }
              }
            }
          ],
          "fingerprints": {
            "0": "12dea5ed5e7b2eac36603350aaf34f2225b62d42c4df5ebd709243aebdcd9975",
            "1": "5bdab820.8be50dd5.d6d43ee0.1409790a.f5fd3da5.77f1363e.1e451703.924970e3.5bdab820.a5b374ad.125b465b.2bdb2425.f5fd3da5.f959f8f5.30ad82ea.924970e3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googletest/test/gtest_unittest.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1136,
                            "endLine": 1136,
                            "startColumn": 12,
                            "endColumn": 16
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googletest/test/gtest_unittest.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1136,
                            "endLine": 1136,
                            "startColumn": 12,
                            "endColumn": 16
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googletest/test/gtest_unittest.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1136,
                            "endLine": 1136,
                            "startColumn": 12,
                            "endColumn": 16
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 413,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": true
          }
        },
        {
          "ruleId": "cpp/UseAfterFree/test",
          "ruleIndex": 3,
          "level": "note",
          "message": {
            "text": "Use after free. listener is used in TestEventListenersAccessor::SetDefaultResultPrinter after it may already have been freed with delete expression.",
            "markdown": "Use after free. {0} is used in {1} after it may already have been freed with {2}.",
            "arguments": [
              "[listener](0)",
              "[TestEventListenersAccessor::SetDefaultResultPrinter](1)",
              "[delete expression](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "googletest/test/gtest_unittest.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7027,
                  "endLine": 7027,
                  "startColumn": 67,
                  "endColumn": 75
                }
              }
            }
          ],
          "fingerprints": {
            "0": "4b4ddc1642e9471e4ff60921c510df564644acf435fe8e78e981a4a40ce89928",
            "1": "73e5bd6e.4155ad7d.66e58c8d.f51f8eb6.2dcfd828.66e6c400.1e451703.5b6cf5fb.73e5bd6e.4155ad7d.66e58c8d.f51f8eb6.2dcfd828.66e6c400.6a6cb5a6.5b6cf5fb"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googletest/test/gtest_unittest.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 7027,
                            "endLine": 7027,
                            "startColumn": 67,
                            "endColumn": 75
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googletest/test/gtest_unittest.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 7027,
                            "endLine": 7027,
                            "startColumn": 3,
                            "endColumn": 54
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googletest/test/gtest_unittest.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 6988,
                            "endLine": 6988,
                            "startColumn": 10,
                            "endColumn": 18
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 452,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": true
          }
        },
        {
          "ruleId": "cpp/UseAfterFree/test",
          "ruleIndex": 3,
          "level": "note",
          "message": {
            "text": "Use after free. listener is used in TestEventListenersAccessor::SetDefaultResultPrinter after it may already have been freed with delete expression.",
            "markdown": "Use after free. {0} is used in {1} after it may already have been freed with {2}.",
            "arguments": [
              "[listener](0)",
              "[TestEventListenersAccessor::SetDefaultResultPrinter](1)",
              "[delete expression](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "googletest/test/gtest_unittest.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7061,
                  "endLine": 7061,
                  "startColumn": 69,
                  "endColumn": 77
                }
              }
            }
          ],
          "fingerprints": {
            "0": "7a3917c3537258a2918fd3c49554d0a1b27b6f4cb7eb7fd0de1425fcde1db61a",
            "1": "73e5bd6e.4155ad7d.66e58c8d.6ac3b10d.2dcfd828.66e6c400.1e451703.5b6cf5fb.73e5bd6e.4155ad7d.66e58c8d.6ac3b10d.2dcfd828.66e6c400.6a6cb5a6.5b6cf5fb"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googletest/test/gtest_unittest.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 7061,
                            "endLine": 7061,
                            "startColumn": 69,
                            "endColumn": 77
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googletest/test/gtest_unittest.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 7061,
                            "endLine": 7061,
                            "startColumn": 5,
                            "endColumn": 56
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googletest/test/gtest_unittest.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 6988,
                            "endLine": 6988,
                            "startColumn": 10,
                            "endColumn": 18
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 452,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": true
          }
        },
        {
          "ruleId": "cpp/UseAfterFree/test",
          "ruleIndex": 3,
          "level": "note",
          "message": {
            "text": "Use after free. listener is used in EXPECT_EQ after it may already have been freed with delete expression.",
            "markdown": "Use after free. {0} is used in {1} after it may already have been freed with {2}.",
            "arguments": [
              "[listener](0)",
              "[EXPECT_EQ](1)",
              "[delete expression](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "googletest/test/gtest_unittest.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7029,
                  "endLine": 7029,
                  "startColumn": 13,
                  "endColumn": 21
                }
              }
            }
          ],
          "fingerprints": {
            "0": "eb2aca7f6f523101ca3088374704135de1d47fa78364ee9bea32f70fce741de3",
            "1": "73e5bd6e.4155ad7d.98501263.6ac3b10d.0cbf22a6.2f4e1548.1e451703.5b6cf5fb.73e5bd6e.4155ad7d.66e58c8d.2bdb2425.2dcfd828.66e6c400.6a6cb5a6.5b6cf5fb"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googletest/test/gtest_unittest.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 7029,
                            "endLine": 7029,
                            "startColumn": 13,
                            "endColumn": 21
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googletest/test/gtest_unittest.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 7029,
                            "endLine": 7029,
                            "startColumn": 3,
                            "endColumn": 12
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googletest/test/gtest_unittest.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 6988,
                            "endLine": 6988,
                            "startColumn": 10,
                            "endColumn": 18
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 452,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": true
          }
        },
        {
          "ruleId": "cpp/UseAfterFree/test",
          "ruleIndex": 3,
          "level": "note",
          "message": {
            "text": "Use after free. listener is used in EXPECT_EQ after it may already have been freed with delete expression.",
            "markdown": "Use after free. {0} is used in {1} after it may already have been freed with {2}.",
            "arguments": [
              "[listener](0)",
              "[EXPECT_EQ](1)",
              "[delete expression](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "googletest/test/gtest_unittest.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7063,
                  "endLine": 7063,
                  "startColumn": 15,
                  "endColumn": 23
                }
              }
            }
          ],
          "fingerprints": {
            "0": "338d814448e63c39e1c93146d66a075b83729ac63532a8fa7e476f4922209982",
            "1": "57664a44.4155ad7d.66e58c8d.f51f8eb6.0cbf22a6.2f4e1548.1e451703.1e001583.57664a44.4155ad7d.66e58c8d.f51f8eb6.2dcfd828.66e6c400.6a6cb5a6.1e001583"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googletest/test/gtest_unittest.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 7063,
                            "endLine": 7063,
                            "startColumn": 15,
                            "endColumn": 23
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googletest/test/gtest_unittest.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 7063,
                            "endLine": 7063,
                            "startColumn": 5,
                            "endColumn": 14
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googletest/test/gtest_unittest.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 6988,
                            "endLine": 6988,
                            "startColumn": 10,
                            "endColumn": 18
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 452,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": true
          }
        },
        {
          "ruleId": "cpp/UseAfterFree/test",
          "ruleIndex": 3,
          "level": "note",
          "message": {
            "text": "Use after free. listener is used in EXPECT_EQ after it may already have been freed with delete expression.",
            "markdown": "Use after free. {0} is used in {1} after it may already have been freed with {2}.",
            "arguments": [
              "[listener](0)",
              "[EXPECT_EQ](1)",
              "[delete expression](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "googletest/test/gtest_unittest.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7088,
                  "endLine": 7088,
                  "startColumn": 13,
                  "endColumn": 21
                }
              }
            }
          ],
          "fingerprints": {
            "0": "bf5beb66acaaa9078612c13c0e2b914977ccd30088f04d1a75d05244b9c154b5",
            "1": "73e5bd6e.4155ad7d.98501263.f51f8eb6.0cbf22a6.2f4e1548.1e451703.5b6cf5fb.73e5bd6e.4155ad7d.66e58c8d.f51f8eb6.2dcfd828.66e6c400.6a6cb5a6.5b6cf5fb"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googletest/test/gtest_unittest.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 7088,
                            "endLine": 7088,
                            "startColumn": 13,
                            "endColumn": 21
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googletest/test/gtest_unittest.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 7088,
                            "endLine": 7088,
                            "startColumn": 3,
                            "endColumn": 12
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googletest/test/gtest_unittest.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 7074,
                            "endLine": 7074,
                            "startColumn": 10,
                            "endColumn": 18
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 452,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": true
          }
        },
        {
          "ruleId": "cpp/UseAfterFree/test",
          "ruleIndex": 3,
          "level": "note",
          "message": {
            "text": "Use after free. listener is used in EXPECT_EQ after it may already have been freed with delete expression.",
            "markdown": "Use after free. {0} is used in {1} after it may already have been freed with {2}.",
            "arguments": [
              "[listener](0)",
              "[EXPECT_EQ](1)",
              "[delete expression](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "googletest/test/gtest_unittest.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7122,
                  "endLine": 7122,
                  "startColumn": 15,
                  "endColumn": 23
                }
              }
            }
          ],
          "fingerprints": {
            "0": "22577afdf8a5598b238861547edafe53e05b58da14baf6ddc8e58d99fb1eedbe",
            "1": "57664a44.4155ad7d.66e58c8d.f51f8eb6.0cbf22a6.2f4e1548.1e451703.1e001583.57664a44.4155ad7d.66e58c8d.f51f8eb6.2dcfd828.66e6c400.6a6cb5a6.1e001583"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googletest/test/gtest_unittest.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 7122,
                            "endLine": 7122,
                            "startColumn": 15,
                            "endColumn": 23
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googletest/test/gtest_unittest.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 7122,
                            "endLine": 7122,
                            "startColumn": 5,
                            "endColumn": 14
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googletest/test/gtest_unittest.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 7074,
                            "endLine": 7074,
                            "startColumn": 10,
                            "endColumn": 18
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 452,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": true
          }
        },
        {
          "ruleId": "cpp/UseAfterFree/test",
          "ruleIndex": 3,
          "level": "note",
          "message": {
            "text": "Use after free. listener is used in Release after it may already have been freed with delete expression.",
            "markdown": "Use after free. {0} is used in {1} after it may already have been freed with {2}.",
            "arguments": [
              "[listener](0)",
              "[Release](1)",
              "[delete expression](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "googletest/test/gtest_unittest.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7063,
                  "endLine": 7063,
                  "startColumn": 43,
                  "endColumn": 51
                }
              }
            }
          ],
          "fingerprints": {
            "0": "338d814448e63c39e1c93146d66a075b83729ac63532a8fa7e476f4922209982",
            "1": "73e5bd6e.4155ad7d.66e58c8d.f51f8eb6.2dcfd828.66e6c400.df7e59ba.5b6cf5fb.73e5bd6e.4155ad7d.66e58c8d.f51f8eb6.2dcfd828.66e6c400.518fcf37.5b6cf5fb"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googletest/test/gtest_unittest.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 7063,
                            "endLine": 7063,
                            "startColumn": 43,
                            "endColumn": 51
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googletest/test/gtest_unittest.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 7063,
                            "endLine": 7063,
                            "startColumn": 25,
                            "endColumn": 42
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googletest/test/gtest_unittest.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 6988,
                            "endLine": 6988,
                            "startColumn": 10,
                            "endColumn": 18
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 452,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": true
          }
        },
        {
          "ruleId": "cpp/UseAfterFree/test",
          "ruleIndex": 3,
          "level": "note",
          "message": {
            "text": "Use after free. listener is used in Release after it may already have been freed with delete expression.",
            "markdown": "Use after free. {0} is used in {1} after it may already have been freed with {2}.",
            "arguments": [
              "[listener](0)",
              "[Release](1)",
              "[delete expression](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "googletest/test/gtest_unittest.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7122,
                  "endLine": 7122,
                  "startColumn": 43,
                  "endColumn": 51
                }
              }
            }
          ],
          "fingerprints": {
            "0": "22577afdf8a5598b238861547edafe53e05b58da14baf6ddc8e58d99fb1eedbe",
            "1": "73e5bd6e.4155ad7d.66e58c8d.f51f8eb6.2dcfd828.66e6c400.df7e59ba.5b6cf5fb.73e5bd6e.4155ad7d.66e58c8d.f51f8eb6.2dcfd828.66e6c400.518fcf37.5b6cf5fb"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googletest/test/gtest_unittest.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 7122,
                            "endLine": 7122,
                            "startColumn": 43,
                            "endColumn": 51
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googletest/test/gtest_unittest.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 7122,
                            "endLine": 7122,
                            "startColumn": 25,
                            "endColumn": 42
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googletest/test/gtest_unittest.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 7074,
                            "endLine": 7074,
                            "startColumn": 10,
                            "endColumn": 18
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 452,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": true
          }
        },
        {
          "ruleId": "cpp/UseAfterFree/test",
          "ruleIndex": 3,
          "level": "note",
          "message": {
            "text": "Use after free. listener is used in TestEventListenersAccessor::SetDefaultXmlGenerator after it may already have been freed with delete expression.",
            "markdown": "Use after free. {0} is used in {1} after it may already have been freed with {2}.",
            "arguments": [
              "[listener](0)",
              "[TestEventListenersAccessor::SetDefaultXmlGenerator](1)",
              "[delete expression](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "googletest/test/gtest_unittest.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7086,
                  "endLine": 7086,
                  "startColumn": 66,
                  "endColumn": 74
                }
              }
            }
          ],
          "fingerprints": {
            "0": "9b91997e5b21f7cf57d2d3a82264f486d65d189e2e23ce0bba9ead0419dd50c1",
            "1": "73e5bd6e.4155ad7d.98501263.f51f8eb6.2dcfd828.66e6c400.1e451703.5b6cf5fb.73e5bd6e.4155ad7d.125b465b.f51f8eb6.2dcfd828.5f305166.3bac315e.5b6cf5fb"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googletest/test/gtest_unittest.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 7086,
                            "endLine": 7086,
                            "startColumn": 66,
                            "endColumn": 74
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googletest/test/gtest_unittest.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 7086,
                            "endLine": 7086,
                            "startColumn": 3,
                            "endColumn": 53
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googletest/test/gtest_unittest.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 7074,
                            "endLine": 7074,
                            "startColumn": 10,
                            "endColumn": 18
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 452,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": true
          }
        },
        {
          "ruleId": "cpp/UseAfterFree/test",
          "ruleIndex": 3,
          "level": "note",
          "message": {
            "text": "Use after free. listener is used in TestEventListenersAccessor::SetDefaultXmlGenerator after it may already have been freed with delete expression.",
            "markdown": "Use after free. {0} is used in {1} after it may already have been freed with {2}.",
            "arguments": [
              "[listener](0)",
              "[TestEventListenersAccessor::SetDefaultXmlGenerator](1)",
              "[delete expression](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "googletest/test/gtest_unittest.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7120,
                  "endLine": 7120,
                  "startColumn": 68,
                  "endColumn": 76
                }
              }
            }
          ],
          "fingerprints": {
            "0": "36fb30e8de30cadcf48c7983c52fb856cd27637f509184a23a1b24b3c8a77fc3",
            "1": "73e5bd6e.4155ad7d.66e58c8d.6ac3b10d.2dcfd828.66e6c400.1e451703.5b6cf5fb.73e5bd6e.4155ad7d.66e58c8d.6ac3b10d.2dcfd828.5f305166.3bac315e.5b6cf5fb"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googletest/test/gtest_unittest.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 7120,
                            "endLine": 7120,
                            "startColumn": 68,
                            "endColumn": 76
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googletest/test/gtest_unittest.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 7120,
                            "endLine": 7120,
                            "startColumn": 5,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googletest/test/gtest_unittest.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 7074,
                            "endLine": 7074,
                            "startColumn": 10,
                            "endColumn": 18
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 452,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": true
          }
        },
        {
          "ruleId": "cpp/UseAfterFree/test",
          "ruleIndex": 3,
          "level": "note",
          "message": {
            "text": "Use after free. a is used in EXPECT_EQ after it may already have been freed with delete expression.",
            "markdown": "Use after free. {0} is used in {1} after it may already have been freed with {2}.",
            "arguments": [
              "[a](0)",
              "[EXPECT_EQ](1)",
              "[delete expression](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "googletest/test/gtest_unittest.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7483,
                  "endLine": 7483,
                  "startColumn": 13,
                  "endColumn": 14
                }
              }
            }
          ],
          "fingerprints": {
            "0": "1ba074d70e7a8abfb303350dd8ce458c8ef035f33479f9eec14c5b74dd93ab55",
            "1": "57664a44.4b4a38e1.98501263.2015d42e.f5fd3da5.2f4e1548.1e451703.a1baabc4.57664a44.dc836d95.66e58c8d.8ab4267b.4d8a2df1.77f1363e.30ad82ea.c0d33555"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googletest/test/gtest_unittest.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 7483,
                            "endLine": 7483,
                            "startColumn": 13,
                            "endColumn": 14
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googletest/test/gtest_unittest.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 7483,
                            "endLine": 7483,
                            "startColumn": 3,
                            "endColumn": 12
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googletest/test/gtest_unittest.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 7437,
                            "endLine": 7437,
                            "startColumn": 12,
                            "endColumn": 13
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 452,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": true
          }
        },
        {
          "ruleId": "python/InsecureXmlParser/test",
          "ruleIndex": 4,
          "level": "note",
          "message": {
            "text": "xml.dom.minidom.parseString is considered insecure. Use an analog from the defusedxml package.",
            "markdown": "{0} is considered insecure. Use an analog from the defusedxml package.",
            "arguments": [
              "[xml.dom.minidom.parseString](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "googletest/test/gtest_xml_outfiles_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 134,
                  "endLine": 134,
                  "startColumn": 16,
                  "endColumn": 35
                }
              }
            }
          ],
          "fingerprints": {
            "0": "2d89da31b0e51ad28e1afefa3be1212f68403a738cbc15c2f08f95465c30b26c",
            "1": "dc14caf2.e416641f.3cf35b1d.139c59a8.d8b6e1a2.2b012511.be7f1a4e.8b1be798.dc14caf2.e416641f.3cf35b1d.139c59a8.d8b6e1a2.2b012511.be7f1a4e.8b1be798"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googletest/test/gtest_xml_outfiles_test.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 134,
                            "endLine": 134,
                            "startColumn": 16,
                            "endColumn": 35
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 404,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": true
          }
        },
        {
          "ruleId": "python/InsecureXmlParser/test",
          "ruleIndex": 4,
          "level": "note",
          "message": {
            "text": "xml.dom.minidom.parseString is considered insecure. Use an analog from the defusedxml package.",
            "markdown": "{0} is considered insecure. Use an analog from the defusedxml package.",
            "arguments": [
              "[xml.dom.minidom.parseString](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "googletest/test/gtest_xml_output_unittest.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 463,
                  "endLine": 463,
                  "startColumn": 16,
                  "endColumn": 35
                }
              }
            }
          ],
          "fingerprints": {
            "0": "1e087929d125fb5a9fbe05673a2754f0f957823dd420bd5eb2030892e7d263f6",
            "1": "4cedbfe7.eb71e550.3cf35b1d.031ee9cb.5d45d3a9.1c0aa529.be7f1a4e.8b1be798.4cedbfe7.eb71e550.3cf35b1d.031ee9cb.5d45d3a9.1c0aa529.be7f1a4e.8b1be798"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googletest/test/gtest_xml_output_unittest.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 463,
                            "endLine": 463,
                            "startColumn": 16,
                            "endColumn": 35
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 404,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": true
          }
        },
        {
          "ruleId": "python/InsecureXmlParser/test",
          "ruleIndex": 4,
          "level": "note",
          "message": {
            "text": "xml.dom.minidom.parse is considered insecure. Use an analog from the defusedxml package.",
            "markdown": "{0} is considered insecure. Use an analog from the defusedxml package.",
            "arguments": [
              "[xml.dom.minidom.parse](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "googletest/test/gtest_xml_outfiles_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 136,
                  "endLine": 136,
                  "startColumn": 16,
                  "endColumn": 29
                }
              }
            }
          ],
          "fingerprints": {
            "0": "f0d0383b5ab44a5d7ecfd110522f47961571e8e6714f8c672c20944dca2375cd",
            "1": "4cedbfe7.4f5bc1f5.5ebedaa6.1a161f10.1d07cee4.ba14daf2.be7f1a4e.cf6dda23.4cedbfe7.4f5bc1f5.5ebedaa6.1a161f10.1d07cee4.ba14daf2.be7f1a4e.cf6dda23"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googletest/test/gtest_xml_outfiles_test.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 136,
                            "endLine": 136,
                            "startColumn": 16,
                            "endColumn": 29
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 404,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": true
          }
        },
        {
          "ruleId": "python/InsecureXmlParser/test",
          "ruleIndex": 4,
          "level": "note",
          "message": {
            "text": "xml.dom.minidom.parse is considered insecure. Use an analog from the defusedxml package.",
            "markdown": "{0} is considered insecure. Use an analog from the defusedxml package.",
            "arguments": [
              "[xml.dom.minidom.parse](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "googletest/test/gtest_xml_outfiles_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 138,
                  "endLine": 138,
                  "startColumn": 16,
                  "endColumn": 29
                }
              }
            }
          ],
          "fingerprints": {
            "0": "8355d68bc5b6d3c3915f33d6e20c51980e4b9ee3bc1d4eca5cf2e965a8cfc78c",
            "1": "4cedbfe7.4f5bc1f5.5ebedaa6.1a161f10.1d07cee4.ba14daf2.be7f1a4e.7949d7a0.4cedbfe7.4f5bc1f5.5ebedaa6.1a161f10.1d07cee4.ba14daf2.be7f1a4e.7949d7a0"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googletest/test/gtest_xml_outfiles_test.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 138,
                            "endLine": 138,
                            "startColumn": 16,
                            "endColumn": 29
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 404,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": true
          }
        },
        {
          "ruleId": "python/InsecureXmlParser/test",
          "ruleIndex": 4,
          "level": "note",
          "message": {
            "text": "xml.dom.minidom.parse is considered insecure. Use an analog from the defusedxml package.",
            "markdown": "{0} is considered insecure. Use an analog from the defusedxml package.",
            "arguments": [
              "[xml.dom.minidom.parse](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "googletest/test/gtest_xml_output_unittest.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 434,
                  "endLine": 434,
                  "startColumn": 14,
                  "endColumn": 27
                }
              }
            }
          ],
          "fingerprints": {
            "0": "089f270c202f8a81c081580f643187aeae91e78764eba6d4f07f1ebc0b0555ad",
            "1": "4cedbfe7.4f5bc1f5.5ebedaa6.1a161f10.f570993b.ba14daf2.0a7337bb.0990edd8.4cedbfe7.4f5bc1f5.5ebedaa6.1a161f10.f570993b.ba14daf2.0a7337bb.0990edd8"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googletest/test/gtest_xml_output_unittest.py",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 434,
                            "endLine": 434,
                            "startColumn": 14,
                            "endColumn": 27
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 404,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": true
          }
        },
        {
          "ruleId": "cpp/DoubleFree/test",
          "ruleIndex": 0,
          "level": "note",
          "message": {
            "text": "Potential double delete expression. utf16 may have already been freed by delete expression.",
            "markdown": "Potential double {0}. {1} may have already been freed by {2}.",
            "arguments": [
              "[delete expression](0)",
              "[utf16](1)",
              "[delete expression](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "googletest/test/gtest_unittest.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1139,
                  "endLine": 1139,
                  "startColumn": 12,
                  "endColumn": 17
                }
              }
            }
          ],
          "fingerprints": {
            "0": "d90512073efe9d7688aed7af288024a8a42b925f2d3cabf0f3a49a44b5f03f77",
            "1": "009b425d.3bdf44ba.bd1b25b9.5b3f2949.41876faf.77f1363e.1e451703.9980fbae.009b425d.a5b374ad.bd1b25b9.2bdb2425.41876faf.e723426a.30ad82ea.563bcf16"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googletest/test/gtest_unittest.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1139,
                            "endLine": 1139,
                            "startColumn": 12,
                            "endColumn": 17
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googletest/test/gtest_unittest.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1139,
                            "endLine": 1139,
                            "startColumn": 12,
                            "endColumn": 17
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googletest/test/gtest_unittest.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1139,
                            "endLine": 1139,
                            "startColumn": 12,
                            "endColumn": 17
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 413,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": true
          }
        },
        {
          "ruleId": "cpp/DoubleFree/test",
          "ruleIndex": 0,
          "level": "note",
          "message": {
            "text": "Potential double delete expression. listener may have already been freed by delete expression.",
            "markdown": "Potential double {0}. {1} may have already been freed by {2}.",
            "arguments": [
              "[delete expression](0)",
              "[listener](1)",
              "[delete expression](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "googletest/test/gtest_unittest.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7074,
                  "endLine": 7074,
                  "startColumn": 10,
                  "endColumn": 18
                }
              }
            }
          ],
          "fingerprints": {
            "0": "4d61b0d764089e2e9e09a7670e4556a9741abc230e36ae797b3bc4315ce2004a",
            "1": "73e5bd6e.4155ad7d.98501263.f51f8eb6.0cbf22a6.2f4e1548.1e451703.5b6cf5fb.73e5bd6e.4155ad7d.66e58c8d.f51f8eb6.baf5e6ff.66e6c400.6a6cb5a6.5b6cf5fb"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googletest/test/gtest_unittest.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 7074,
                            "endLine": 7074,
                            "startColumn": 10,
                            "endColumn": 18
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googletest/test/gtest_unittest.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 7074,
                            "endLine": 7074,
                            "startColumn": 10,
                            "endColumn": 18
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googletest/test/gtest_unittest.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 7074,
                            "endLine": 7074,
                            "startColumn": 10,
                            "endColumn": 18
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 413,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": true
          }
        },
        {
          "ruleId": "cpp/DoubleFree/test",
          "ruleIndex": 0,
          "level": "note",
          "message": {
            "text": "Potential double delete expression. listener may have already been freed by delete expression.",
            "markdown": "Potential double {0}. {1} may have already been freed by {2}.",
            "arguments": [
              "[delete expression](0)",
              "[listener](1)",
              "[delete expression](2)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "googletest/test/gtest_unittest.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7133,
                  "endLine": 7133,
                  "startColumn": 10,
                  "endColumn": 18
                }
              }
            }
          ],
          "fingerprints": {
            "0": "ae559cec329673401765427032b172b123c076855025eb9adaee05efe926f7a9",
            "1": "57664a44.4155ad7d.98501263.f51f8eb6.0cbf22a6.2f4e1548.1e451703.1e001583.73e5bd6e.4155ad7d.66e58c8d.f51f8eb6.2dcfd828.66e6c400.6a6cb5a6.5b6cf5fb"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googletest/test/gtest_unittest.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 7133,
                            "endLine": 7133,
                            "startColumn": 10,
                            "endColumn": 18
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googletest/test/gtest_unittest.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 7133,
                            "endLine": 7133,
                            "startColumn": 10,
                            "endColumn": 18
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googletest/test/gtest_unittest.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 7133,
                            "endLine": 7133,
                            "startColumn": 10,
                            "endColumn": 18
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 413,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": true
          }
        },
        {
          "ruleId": "cpp/MemoryLeak/test",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "Leaking memory. testing::Derived is allocated on the heap and never freed",
            "markdown": "Leaking memory. {0} is allocated on the heap and never freed",
            "arguments": [
              "[testing::Derived](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "googlemock/test/gmock-actions_test.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1773,
                  "endLine": 1773,
                  "startColumn": 14,
                  "endColumn": 27
                }
              }
            }
          ],
          "fingerprints": {
            "0": "43172af608987683a8bc485f0dd1f855e48c7167b0df7315a2369613dfbdb025",
            "1": "e7f9270c.6107a487.9bd862c8.4fa4f6af.23e0d070.6a274ab8.30ad82ea.acd45df7.191d13ad.6107a487.9bd862c8.4fa4f6af.73e0d103.6a274ab8.30ad82ea.acd45df7"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-actions_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 1773,
                            "endLine": 1773,
                            "startColumn": 20,
                            "endColumn": 27
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 432,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": true
          }
        },
        {
          "ruleId": "cpp/MemoryLeak/test",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "Leaking memory. testing::NiceMock<testing::gmock_nice_strict_test::MockFoo> is allocated on the heap and never freed",
            "markdown": "Leaking memory. {0} is allocated on the heap and never freed",
            "arguments": [
              "[testing::NiceMock<testing::gmock_nice_strict_test::MockFoo>](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "googlemock/test/gmock-nice-strict_test.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 213,
                  "endLine": 213,
                  "startColumn": 37,
                  "endColumn": 60
                }
              }
            }
          ],
          "fingerprints": {
            "0": "6fb48d349e2ed5643dcc63f30a88815913a537085a48c7fcf1508fef294ae557",
            "1": "81c33c38.1e9aa2ea.06e35d3c.238a8322.ed1395f5.6a274ab8.30ad82ea.acd45df7.81c33c38.1e9aa2ea.95e2bc00.238a8322.6af39224.5bf37441.30ad82ea.acd45df7"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-nice-strict_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 213,
                            "endLine": 213,
                            "startColumn": 43,
                            "endColumn": 60
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 432,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": true
          }
        },
        {
          "ruleId": "cpp/MemoryLeak/test",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "Leaking memory. testing::NaggyMock<testing::gmock_nice_strict_test::MockFoo> is allocated on the heap and never freed",
            "markdown": "Leaking memory. {0} is allocated on the heap and never freed",
            "arguments": [
              "[testing::NaggyMock<testing::gmock_nice_strict_test::MockFoo>](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "googlemock/test/gmock-nice-strict_test.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 405,
                  "endLine": 405,
                  "startColumn": 30,
                  "endColumn": 54
                }
              }
            }
          ],
          "fingerprints": {
            "0": "ee8f15227f4eec6a344a74bda877939b495215a8ab86ea80e279760f7aa1e9e5",
            "1": "3a70c4d1.ca1d8bc8.79ce1c7f.1bd0bc43.23e0d070.6a274ab8.30ad82ea.acd45df7.3a70c4d1.ca1d8bc8.95e2bc00.1bd0bc43.6af39224.5bf37441.30ad82ea.acd45df7"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "googlemock/test/gmock-nice-strict_test.cc",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 405,
                            "endLine": 405,
                            "startColumn": 36,
                            "endColumn": 54
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 432,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": true
          }
        }
      ],
      "properties": {
        "coverage": [
          {
            "isSupported": true,
            "lang": "C++",
            "files": 148,
            "type": "SUPPORTED"
          },
          {
            "isSupported": true,
            "lang": "HTML",
            "files": 1,
            "type": "SUPPORTED"
          },
          {
            "isSupported": true,
            "lang": "Python",
            "files": 30,
            "type": "SUPPORTED"
          },
          {
            "isSupported": false,
            "lang": "C++",
            "files": 7,
            "type": "FAILED_PARSING"
          }
        ]
      }
    }
  ]
}