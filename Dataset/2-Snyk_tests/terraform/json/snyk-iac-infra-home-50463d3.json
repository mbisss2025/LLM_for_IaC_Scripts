[
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false,
        "autoApproveIgnores": false
      },
      "org": "mbisss2025",
      "orgPublicId": "32dffbe1-779c-4e43-91cc-5faf2c10977a",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "nginx.yaml",
    "projectName": "infra-home",
    "org": "mbisss2025",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/gitclone_terraform/infra-home/nginx.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/gitclone_terraform/infra-home",
    "projectType": "k8sconfig",
    "ok": false,
    "infrastructureAsCodeIssues": [
      {
        "id": "SNYK-CC-K8S-8",
        "title": "Container is running with writable root filesystem",
        "severity": "low",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-8",
        "isGeneratedByCustomRule": false,
        "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
        "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
          "terraform": "Set `security_context.read_only_root_filesystem` to `true`"
        },
        "lineNumber": 18,
        "iacDescription": {
          "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
          "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`"
        },
        "publicId": "SNYK-CC-K8S-8",
        "msg": "spec.template.spec.containers[nginx].securityContext.readOnlyRootFilesystem",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "containers[nginx]",
          "securityContext",
          "readOnlyRootFilesystem"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-6",
        "title": "Container does not drop all default capabilities",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-6",
        "isGeneratedByCustomRule": false,
        "issue": "All default capabilities are not explicitly dropped",
        "impact": "Containers are running with potentially unnecessary privileges",
        "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
        "remediation": {
          "kubernetes": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
          "terraform": "Add `ALL` to `spec.container.security_context.capabilities.drop` list, and add only required capabilities to `spec.container.security_context.capabilities.add`, ensuring it also does not contain `ALL`"
        },
        "lineNumber": 18,
        "iacDescription": {
          "issue": "All default capabilities are not explicitly dropped",
          "impact": "Containers are running with potentially unnecessary privileges",
          "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`"
        },
        "publicId": "SNYK-CC-K8S-6",
        "msg": "input.spec.template.spec.containers[nginx].securityContext.capabilities.drop",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
          "https://linux-audit.com/linux-capabilities-hardening-linux-binaries-by-removing-setuid/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[nginx]",
          "securityContext",
          "capabilities",
          "drop"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-11",
        "title": "Container's or Pod's  UID could clash with host's UID",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-11",
        "isGeneratedByCustomRule": false,
        "issue": "`runAsUser` value is set to low UID",
        "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
        "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
          "terraform": "Set `security_context.run_as_user` value to greater or equal than 10'000"
        },
        "lineNumber": 18,
        "iacDescription": {
          "issue": "`runAsUser` value is set to low UID",
          "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
          "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence"
        },
        "publicId": "SNYK-CC-K8S-11",
        "msg": "input.spec.template.spec.containers[nginx].securityContext.runAsUser",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container",
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod",
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[nginx]",
          "securityContext",
          "runAsUser"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-5",
        "title": "Container has no CPU limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-5",
        "isGeneratedByCustomRule": false,
        "issue": "Container has no CPU limit",
        "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
        "resolve": "Add `resources.limits.cpu` field with required CPU limit value",
        "remediation": {
          "kubernetes": "Add `resources.limits.cpu` field with required CPU limit value",
          "terraform": "Add `spec.container.resources.limits.cpu` field with required CPU limit value"
        },
        "lineNumber": 18,
        "iacDescription": {
          "issue": "Container has no CPU limit",
          "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
          "resolve": "Add `resources.limits.cpu` field with required CPU limit value"
        },
        "publicId": "SNYK-CC-K8S-5",
        "msg": "input.spec.template.spec.containers[nginx].resources.limits.cpu",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-cpu-resource/",
          "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/cpu-default-namespace/",
          "https://github.com/kubernetes/design-proposals-archive/blob/8da1442ea29adccea40693357d04727127e045ed/node/resource-qos.md#compressible-resource-guaranteess"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[nginx]",
          "resources",
          "limits",
          "cpu"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-42",
        "title": "Container could be running with outdated image",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-42",
        "isGeneratedByCustomRule": false,
        "issue": "The image policy does not prevent image reuse",
        "impact": "The container may run with outdated or unauthorized image",
        "resolve": "Set `imagePullPolicy` attribute to `Always`",
        "remediation": {
          "kubernetes": "Set `imagePullPolicy` attribute to `Always`",
          "terraform": "Set `image_pull_policy` attribute to `Always"
        },
        "lineNumber": 18,
        "iacDescription": {
          "issue": "The image policy does not prevent image reuse",
          "impact": "The container may run with outdated or unauthorized image",
          "resolve": "Set `imagePullPolicy` attribute to `Always`"
        },
        "publicId": "SNYK-CC-K8S-42",
        "msg": "spec.template.spec.containers[nginx].imagePullPolicy",
        "references": [
          "https://kubernetes.io/docs/concepts/containers/images/",
          "https://kubernetes.io/docs/concepts/configuration/overview/#container-images"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "containers[nginx]",
          "imagePullPolicy"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-10",
        "title": "Container or Pod is running without root user control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-10",
        "isGeneratedByCustomRule": false,
        "issue": "Container or Pod is running without root user control",
        "impact": "Container or Pod could be running with full administrative privileges",
        "resolve": "Set `securityContext.runAsNonRoot` to `true`",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsNonRoot` to `true`",
          "terraform": "Set `security_context.run_as_non_root` to `true`"
        },
        "lineNumber": 18,
        "iacDescription": {
          "issue": "Container or Pod is running without root user control",
          "impact": "Container or Pod could be running with full administrative privileges",
          "resolve": "Set `securityContext.runAsNonRoot` to `true`"
        },
        "publicId": "SNYK-CC-K8S-10",
        "msg": "input.spec.template.spec.containers[nginx].securityContext.runAsNonRoot",
        "description": "",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[nginx]",
          "securityContext",
          "runAsNonRoot"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-9",
        "title": "Container is running without privilege escalation control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-9",
        "isGeneratedByCustomRule": false,
        "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
        "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
          "terraform": "Set `spec.container.security_context.allow_privilege_escalation` to `false`"
        },
        "lineNumber": 18,
        "iacDescription": {
          "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
          "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`"
        },
        "publicId": "SNYK-CC-K8S-9",
        "msg": "spec.template.spec.containers[nginx].securityContext.allowPrivilegeEscalation",
        "references": [
          "https://www.kernel.org/doc/html/latest/userspace-api/no_new_privs.html"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "containers[nginx]",
          "securityContext",
          "allowPrivilegeEscalation"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-41",
        "title": "Container is running without liveness probe",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-41",
        "isGeneratedByCustomRule": false,
        "issue": "Liveness probe is not defined",
        "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
        "resolve": "Add `livenessProbe` attribute",
        "remediation": {
          "kubernetes": "Add `livenessProbe` attribute",
          "terraform": "Add `liveness_probe` attribute"
        },
        "lineNumber": 18,
        "iacDescription": {
          "issue": "Liveness probe is not defined",
          "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
          "resolve": "Add `livenessProbe` attribute"
        },
        "publicId": "SNYK-CC-K8S-41",
        "msg": "spec.template.spec.containers[nginx].livenessProbe",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/",
          "https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/",
          "https://cloud.google.com/blog/products/gcp/kubernetes-best-practices-setting-up-health-checks-with-readiness-and-liveness-probes"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "containers[nginx]",
          "livenessProbe"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-4",
        "title": "Container is running without memory limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-4",
        "isGeneratedByCustomRule": false,
        "issue": "Memory limit is not defined",
        "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
        "resolve": "Set `resources.limits.memory` value",
        "remediation": {
          "kubernetes": "Set `resources.limits.memory` value",
          "terraform": "Set `resources.limits.memory` value"
        },
        "lineNumber": 18,
        "iacDescription": {
          "issue": "Memory limit is not defined",
          "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
          "resolve": "Set `resources.limits.memory` value"
        },
        "publicId": "SNYK-CC-K8S-4",
        "msg": "input.spec.template.spec.containers[nginx].resources.limits.memory",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/memory-default-namespace/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[nginx]",
          "resources",
          "limits",
          "memory"
        ],
        "compliance": []
      }
    ]
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false,
        "autoApproveIgnores": false
      },
      "org": "mbisss2025",
      "orgPublicId": "32dffbe1-779c-4e43-91cc-5faf2c10977a",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "Notes/001-cilium/blackhole-cilium-balancerpool.yaml",
    "projectName": "infra-home",
    "org": "mbisss2025",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/gitclone_terraform/infra-home/Notes/001-cilium/blackhole-cilium-balancerpool.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/gitclone_terraform/infra-home",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false,
        "autoApproveIgnores": false
      },
      "org": "mbisss2025",
      "orgPublicId": "32dffbe1-779c-4e43-91cc-5faf2c10977a",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "Notes/001-cilium/blackhole-cilium-gateway-api.yaml",
    "projectName": "infra-home",
    "org": "mbisss2025",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/gitclone_terraform/infra-home/Notes/001-cilium/blackhole-cilium-gateway-api.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/gitclone_terraform/infra-home",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false,
        "autoApproveIgnores": false
      },
      "org": "mbisss2025",
      "orgPublicId": "32dffbe1-779c-4e43-91cc-5faf2c10977a",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "Notes/001-cilium/cilium-balancerpool.yaml",
    "projectName": "infra-home",
    "org": "mbisss2025",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/gitclone_terraform/infra-home/Notes/001-cilium/cilium-balancerpool.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/gitclone_terraform/infra-home",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false,
        "autoApproveIgnores": false
      },
      "org": "mbisss2025",
      "orgPublicId": "32dffbe1-779c-4e43-91cc-5faf2c10977a",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "Notes/001-cilium/cilium-gateway-api.yaml",
    "projectName": "infra-home",
    "org": "mbisss2025",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/gitclone_terraform/infra-home/Notes/001-cilium/cilium-gateway-api.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/gitclone_terraform/infra-home",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false,
        "autoApproveIgnores": false
      },
      "org": "mbisss2025",
      "orgPublicId": "32dffbe1-779c-4e43-91cc-5faf2c10977a",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "Notes/001-cilium/cilium-ingress.yaml",
    "projectName": "infra-home",
    "org": "mbisss2025",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/gitclone_terraform/infra-home/Notes/001-cilium/cilium-ingress.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/gitclone_terraform/infra-home",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false,
        "autoApproveIgnores": false
      },
      "org": "mbisss2025",
      "orgPublicId": "32dffbe1-779c-4e43-91cc-5faf2c10977a",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "Notes/003-longhorn/cilium-ingress-lh.yaml",
    "projectName": "infra-home",
    "org": "mbisss2025",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/gitclone_terraform/infra-home/Notes/003-longhorn/cilium-ingress-lh.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/gitclone_terraform/infra-home",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false,
        "autoApproveIgnores": false
      },
      "org": "mbisss2025",
      "orgPublicId": "32dffbe1-779c-4e43-91cc-5faf2c10977a",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "Notes/003-longhorn/cilium-ingress-svc.yaml",
    "projectName": "infra-home",
    "org": "mbisss2025",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/gitclone_terraform/infra-home/Notes/003-longhorn/cilium-ingress-svc.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/gitclone_terraform/infra-home",
    "projectType": "k8sconfig",
    "ok": false,
    "infrastructureAsCodeIssues": [
      {
        "id": "SNYK-CC-K8S-15",
        "title": "Service does not restrict ingress sources",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Service",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-15",
        "isGeneratedByCustomRule": false,
        "issue": "Defining a Load balancer Service without setting the loadBalancerSourceRanges property will use the default value of 0.0.0.0/0.",
        "impact": "This allows access to any traffic to the Node Security Group(s), potentially meaning everyone can access your service.",
        "resolve": "Set `loadBalancerSourceRanges` attribute value to specific IP addresses",
        "remediation": {
          "kubernetes": "Set `loadBalancerSourceRanges` attribute value to specific IP addresses",
          "terraform": "Set `load_balancer_source_ranges` attribute value to specific IP addresses"
        },
        "lineNumber": 16,
        "iacDescription": {
          "issue": "Defining a Load balancer Service without setting the loadBalancerSourceRanges property will use the default value of 0.0.0.0/0.",
          "impact": "This allows access to any traffic to the Node Security Group(s), potentially meaning everyone can access your service.",
          "resolve": "Set `loadBalancerSourceRanges` attribute value to specific IP addresses"
        },
        "publicId": "SNYK-CC-K8S-15",
        "msg": "input.spec.loadBalancerSourceRanges",
        "description": "",
        "references": [
          "https://kubernetes.io/docs/concepts/services-networking/service/",
          "https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "loadBalancerSourceRanges"
        ],
        "compliance": []
      }
    ]
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false,
        "autoApproveIgnores": false
      },
      "org": "mbisss2025",
      "orgPublicId": "32dffbe1-779c-4e43-91cc-5faf2c10977a",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "Notes/003-longhorn/certs/cm-le-lh-spitfire-secret.yaml",
    "projectName": "infra-home",
    "org": "mbisss2025",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/gitclone_terraform/infra-home/Notes/003-longhorn/certs/cm-le-lh-spitfire-secret.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/gitclone_terraform/infra-home",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false,
        "autoApproveIgnores": false
      },
      "org": "mbisss2025",
      "orgPublicId": "32dffbe1-779c-4e43-91cc-5faf2c10977a",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "Notes/003-longhorn/certs/cm-le-prod-issuer.yaml",
    "projectName": "infra-home",
    "org": "mbisss2025",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/gitclone_terraform/infra-home/Notes/003-longhorn/certs/cm-le-prod-issuer.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/gitclone_terraform/infra-home",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false,
        "autoApproveIgnores": false
      },
      "org": "mbisss2025",
      "orgPublicId": "32dffbe1-779c-4e43-91cc-5faf2c10977a",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "Notes/003-longhorn/certs/cm-le-staging-issuer.yaml",
    "projectName": "infra-home",
    "org": "mbisss2025",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/gitclone_terraform/infra-home/Notes/003-longhorn/certs/cm-le-staging-issuer.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/gitclone_terraform/infra-home",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false,
        "autoApproveIgnores": false
      },
      "org": "mbisss2025",
      "orgPublicId": "32dffbe1-779c-4e43-91cc-5faf2c10977a",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "Notes/003-longhorn/example/podclaim.yaml",
    "projectName": "infra-home",
    "org": "mbisss2025",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/gitclone_terraform/infra-home/Notes/003-longhorn/example/podclaim.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/gitclone_terraform/infra-home",
    "projectType": "k8sconfig",
    "ok": false,
    "infrastructureAsCodeIssues": [
      {
        "id": "SNYK-CC-K8S-11",
        "title": "Container's or Pod's  UID could clash with host's UID",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-11",
        "isGeneratedByCustomRule": false,
        "issue": "`runAsUser` value is set to low UID",
        "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
        "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
          "terraform": "Set `security_context.run_as_user` value to greater or equal than 10'000"
        },
        "lineNumber": 7,
        "iacDescription": {
          "issue": "`runAsUser` value is set to low UID",
          "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
          "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence"
        },
        "publicId": "SNYK-CC-K8S-11",
        "msg": "input.spec.containers[test].securityContext.runAsUser",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container",
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod",
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "containers[test]",
          "securityContext",
          "runAsUser"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-8",
        "title": "Container is running with writable root filesystem",
        "severity": "low",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-8",
        "isGeneratedByCustomRule": false,
        "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
        "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
          "terraform": "Set `security_context.read_only_root_filesystem` to `true`"
        },
        "lineNumber": 7,
        "iacDescription": {
          "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
          "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`"
        },
        "publicId": "SNYK-CC-K8S-8",
        "msg": "spec.containers[test].securityContext.readOnlyRootFilesystem",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "containers[test]",
          "securityContext",
          "readOnlyRootFilesystem"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-5",
        "title": "Container has no CPU limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-5",
        "isGeneratedByCustomRule": false,
        "issue": "Container has no CPU limit",
        "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
        "resolve": "Add `resources.limits.cpu` field with required CPU limit value",
        "remediation": {
          "kubernetes": "Add `resources.limits.cpu` field with required CPU limit value",
          "terraform": "Add `spec.container.resources.limits.cpu` field with required CPU limit value"
        },
        "lineNumber": 7,
        "iacDescription": {
          "issue": "Container has no CPU limit",
          "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
          "resolve": "Add `resources.limits.cpu` field with required CPU limit value"
        },
        "publicId": "SNYK-CC-K8S-5",
        "msg": "input.spec.containers[test].resources.limits.cpu",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-cpu-resource/",
          "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/cpu-default-namespace/",
          "https://github.com/kubernetes/design-proposals-archive/blob/8da1442ea29adccea40693357d04727127e045ed/node/resource-qos.md#compressible-resource-guaranteess"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "containers[test]",
          "resources",
          "limits",
          "cpu"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-41",
        "title": "Container is running without liveness probe",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-41",
        "isGeneratedByCustomRule": false,
        "issue": "Liveness probe is not defined",
        "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
        "resolve": "Add `livenessProbe` attribute",
        "remediation": {
          "kubernetes": "Add `livenessProbe` attribute",
          "terraform": "Add `liveness_probe` attribute"
        },
        "lineNumber": 7,
        "iacDescription": {
          "issue": "Liveness probe is not defined",
          "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
          "resolve": "Add `livenessProbe` attribute"
        },
        "publicId": "SNYK-CC-K8S-41",
        "msg": "spec.containers[test].livenessProbe",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/",
          "https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/",
          "https://cloud.google.com/blog/products/gcp/kubernetes-best-practices-setting-up-health-checks-with-readiness-and-liveness-probes"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "containers[test]",
          "livenessProbe"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-9",
        "title": "Container is running without privilege escalation control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-9",
        "isGeneratedByCustomRule": false,
        "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
        "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
          "terraform": "Set `spec.container.security_context.allow_privilege_escalation` to `false`"
        },
        "lineNumber": 7,
        "iacDescription": {
          "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
          "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`"
        },
        "publicId": "SNYK-CC-K8S-9",
        "msg": "spec.containers[test].securityContext.allowPrivilegeEscalation",
        "references": [
          "https://www.kernel.org/doc/html/latest/userspace-api/no_new_privs.html"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "containers[test]",
          "securityContext",
          "allowPrivilegeEscalation"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-6",
        "title": "Container does not drop all default capabilities",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-6",
        "isGeneratedByCustomRule": false,
        "issue": "All default capabilities are not explicitly dropped",
        "impact": "Containers are running with potentially unnecessary privileges",
        "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
        "remediation": {
          "kubernetes": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
          "terraform": "Add `ALL` to `spec.container.security_context.capabilities.drop` list, and add only required capabilities to `spec.container.security_context.capabilities.add`, ensuring it also does not contain `ALL`"
        },
        "lineNumber": 7,
        "iacDescription": {
          "issue": "All default capabilities are not explicitly dropped",
          "impact": "Containers are running with potentially unnecessary privileges",
          "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`"
        },
        "publicId": "SNYK-CC-K8S-6",
        "msg": "input.spec.containers[test].securityContext.capabilities.drop",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
          "https://linux-audit.com/linux-capabilities-hardening-linux-binaries-by-removing-setuid/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "containers[test]",
          "securityContext",
          "capabilities",
          "drop"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-4",
        "title": "Container is running without memory limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-4",
        "isGeneratedByCustomRule": false,
        "issue": "Memory limit is not defined",
        "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
        "resolve": "Set `resources.limits.memory` value",
        "remediation": {
          "kubernetes": "Set `resources.limits.memory` value",
          "terraform": "Set `resources.limits.memory` value"
        },
        "lineNumber": 7,
        "iacDescription": {
          "issue": "Memory limit is not defined",
          "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
          "resolve": "Set `resources.limits.memory` value"
        },
        "publicId": "SNYK-CC-K8S-4",
        "msg": "input.spec.containers[test].resources.limits.memory",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/memory-default-namespace/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "containers[test]",
          "resources",
          "limits",
          "memory"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-42",
        "title": "Container could be running with outdated image",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-42",
        "isGeneratedByCustomRule": false,
        "issue": "The image policy does not prevent image reuse",
        "impact": "The container may run with outdated or unauthorized image",
        "resolve": "Set `imagePullPolicy` attribute to `Always`",
        "remediation": {
          "kubernetes": "Set `imagePullPolicy` attribute to `Always`",
          "terraform": "Set `image_pull_policy` attribute to `Always"
        },
        "lineNumber": 7,
        "iacDescription": {
          "issue": "The image policy does not prevent image reuse",
          "impact": "The container may run with outdated or unauthorized image",
          "resolve": "Set `imagePullPolicy` attribute to `Always`"
        },
        "publicId": "SNYK-CC-K8S-42",
        "msg": "spec.containers[test].imagePullPolicy",
        "references": [
          "https://kubernetes.io/docs/concepts/containers/images/",
          "https://kubernetes.io/docs/concepts/configuration/overview/#container-images"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "containers[test]",
          "imagePullPolicy"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-10",
        "title": "Container or Pod is running without root user control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-10",
        "isGeneratedByCustomRule": false,
        "issue": "Container or Pod is running without root user control",
        "impact": "Container or Pod could be running with full administrative privileges",
        "resolve": "Set `securityContext.runAsNonRoot` to `true`",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsNonRoot` to `true`",
          "terraform": "Set `security_context.run_as_non_root` to `true`"
        },
        "lineNumber": 7,
        "iacDescription": {
          "issue": "Container or Pod is running without root user control",
          "impact": "Container or Pod could be running with full administrative privileges",
          "resolve": "Set `securityContext.runAsNonRoot` to `true`"
        },
        "publicId": "SNYK-CC-K8S-10",
        "msg": "input.spec.containers[test].securityContext.runAsNonRoot",
        "description": "",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "containers[test]",
          "securityContext",
          "runAsNonRoot"
        ],
        "compliance": []
      }
    ]
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false,
        "autoApproveIgnores": false
      },
      "org": "mbisss2025",
      "orgPublicId": "32dffbe1-779c-4e43-91cc-5faf2c10977a",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "Notes/003-longhorn/example/pvc.yaml",
    "projectName": "infra-home",
    "org": "mbisss2025",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/gitclone_terraform/infra-home/Notes/003-longhorn/example/pvc.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/gitclone_terraform/infra-home",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false,
        "autoApproveIgnores": false
      },
      "org": "mbisss2025",
      "orgPublicId": "32dffbe1-779c-4e43-91cc-5faf2c10977a",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "Notes/003-longhorn/storj/backup-secret.yaml",
    "projectName": "infra-home",
    "org": "mbisss2025",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/gitclone_terraform/infra-home/Notes/003-longhorn/storj/backup-secret.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/gitclone_terraform/infra-home",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false,
        "autoApproveIgnores": false
      },
      "org": "mbisss2025",
      "orgPublicId": "32dffbe1-779c-4e43-91cc-5faf2c10977a",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "clusters/darkstar/main.tf",
    "projectName": "infra-home",
    "org": "mbisss2025",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/gitclone_terraform/infra-home/clusters/darkstar/main.tf",
    "packageManager": "terraformconfig",
    "path": "/home/mbissine/gitclone_terraform/infra-home",
    "projectType": "terraformconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false,
        "autoApproveIgnores": false
      },
      "org": "mbisss2025",
      "orgPublicId": "32dffbe1-779c-4e43-91cc-5faf2c10977a",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "clusters/darkstar/providers.tf",
    "projectName": "infra-home",
    "org": "mbisss2025",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/gitclone_terraform/infra-home/clusters/darkstar/providers.tf",
    "packageManager": "terraformconfig",
    "path": "/home/mbissine/gitclone_terraform/infra-home",
    "projectType": "terraformconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false,
        "autoApproveIgnores": false
      },
      "org": "mbisss2025",
      "orgPublicId": "32dffbe1-779c-4e43-91cc-5faf2c10977a",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "clusters/darkstar/terraform.tf",
    "projectName": "infra-home",
    "org": "mbisss2025",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/gitclone_terraform/infra-home/clusters/darkstar/terraform.tf",
    "packageManager": "terraformconfig",
    "path": "/home/mbissine/gitclone_terraform/infra-home",
    "projectType": "terraformconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false,
        "autoApproveIgnores": false
      },
      "org": "mbisss2025",
      "orgPublicId": "32dffbe1-779c-4e43-91cc-5faf2c10977a",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "clusters/darkstar/variables.tf",
    "projectName": "infra-home",
    "org": "mbisss2025",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/gitclone_terraform/infra-home/clusters/darkstar/variables.tf",
    "packageManager": "terraformconfig",
    "path": "/home/mbissine/gitclone_terraform/infra-home",
    "projectType": "terraformconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false,
        "autoApproveIgnores": false
      },
      "org": "mbisss2025",
      "orgPublicId": "32dffbe1-779c-4e43-91cc-5faf2c10977a",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "clusters/darkstar/cfg/cilium/cilium-balancerpool.yaml",
    "projectName": "infra-home",
    "org": "mbisss2025",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/gitclone_terraform/infra-home/clusters/darkstar/cfg/cilium/cilium-balancerpool.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/gitclone_terraform/infra-home",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false,
        "autoApproveIgnores": false
      },
      "org": "mbisss2025",
      "orgPublicId": "32dffbe1-779c-4e43-91cc-5faf2c10977a",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "clusters/darkstar/cfg/cilium/cilium-gateway-api.yaml",
    "projectName": "infra-home",
    "org": "mbisss2025",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/gitclone_terraform/infra-home/clusters/darkstar/cfg/cilium/cilium-gateway-api.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/gitclone_terraform/infra-home",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false,
        "autoApproveIgnores": false
      },
      "org": "mbisss2025",
      "orgPublicId": "32dffbe1-779c-4e43-91cc-5faf2c10977a",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "clusters/darkstar/cfg/cilium/cilium-ingress.yaml",
    "projectName": "infra-home",
    "org": "mbisss2025",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/gitclone_terraform/infra-home/clusters/darkstar/cfg/cilium/cilium-ingress.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/gitclone_terraform/infra-home",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false,
        "autoApproveIgnores": false
      },
      "org": "mbisss2025",
      "orgPublicId": "32dffbe1-779c-4e43-91cc-5faf2c10977a",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "clusters/disabled/aws/main.tf",
    "projectName": "infra-home",
    "org": "mbisss2025",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/gitclone_terraform/infra-home/clusters/disabled/aws/main.tf",
    "packageManager": "terraformconfig",
    "path": "/home/mbissine/gitclone_terraform/infra-home",
    "projectType": "terraformconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false,
        "autoApproveIgnores": false
      },
      "org": "mbisss2025",
      "orgPublicId": "32dffbe1-779c-4e43-91cc-5faf2c10977a",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "clusters/disabled/aws/variables.tf",
    "projectName": "infra-home",
    "org": "mbisss2025",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/gitclone_terraform/infra-home/clusters/disabled/aws/variables.tf",
    "packageManager": "terraformconfig",
    "path": "/home/mbissine/gitclone_terraform/infra-home",
    "projectType": "terraformconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false,
        "autoApproveIgnores": false
      },
      "org": "mbisss2025",
      "orgPublicId": "32dffbe1-779c-4e43-91cc-5faf2c10977a",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "clusters/disabled/blackhole/main.tf",
    "projectName": "infra-home",
    "org": "mbisss2025",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/gitclone_terraform/infra-home/clusters/disabled/blackhole/main.tf",
    "packageManager": "terraformconfig",
    "path": "/home/mbissine/gitclone_terraform/infra-home",
    "projectType": "terraformconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false,
        "autoApproveIgnores": false
      },
      "org": "mbisss2025",
      "orgPublicId": "32dffbe1-779c-4e43-91cc-5faf2c10977a",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "clusters/disabled/blackhole/providers.tf",
    "projectName": "infra-home",
    "org": "mbisss2025",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/gitclone_terraform/infra-home/clusters/disabled/blackhole/providers.tf",
    "packageManager": "terraformconfig",
    "path": "/home/mbissine/gitclone_terraform/infra-home",
    "projectType": "terraformconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false,
        "autoApproveIgnores": false
      },
      "org": "mbisss2025",
      "orgPublicId": "32dffbe1-779c-4e43-91cc-5faf2c10977a",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "clusters/disabled/blackhole/terraform.tf",
    "projectName": "infra-home",
    "org": "mbisss2025",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/gitclone_terraform/infra-home/clusters/disabled/blackhole/terraform.tf",
    "packageManager": "terraformconfig",
    "path": "/home/mbissine/gitclone_terraform/infra-home",
    "projectType": "terraformconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false,
        "autoApproveIgnores": false
      },
      "org": "mbisss2025",
      "orgPublicId": "32dffbe1-779c-4e43-91cc-5faf2c10977a",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "clusters/disabled/blackhole/variables.tf",
    "projectName": "infra-home",
    "org": "mbisss2025",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/gitclone_terraform/infra-home/clusters/disabled/blackhole/variables.tf",
    "packageManager": "terraformconfig",
    "path": "/home/mbissine/gitclone_terraform/infra-home",
    "projectType": "terraformconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false,
        "autoApproveIgnores": false
      },
      "org": "mbisss2025",
      "orgPublicId": "32dffbe1-779c-4e43-91cc-5faf2c10977a",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "clusters/disabled/spitfire/main.tf",
    "projectName": "infra-home",
    "org": "mbisss2025",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/gitclone_terraform/infra-home/clusters/disabled/spitfire/main.tf",
    "packageManager": "terraformconfig",
    "path": "/home/mbissine/gitclone_terraform/infra-home",
    "projectType": "terraformconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false,
        "autoApproveIgnores": false
      },
      "org": "mbisss2025",
      "orgPublicId": "32dffbe1-779c-4e43-91cc-5faf2c10977a",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "clusters/disabled/spitfire/providers.tf",
    "projectName": "infra-home",
    "org": "mbisss2025",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/gitclone_terraform/infra-home/clusters/disabled/spitfire/providers.tf",
    "packageManager": "terraformconfig",
    "path": "/home/mbissine/gitclone_terraform/infra-home",
    "projectType": "terraformconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false,
        "autoApproveIgnores": false
      },
      "org": "mbisss2025",
      "orgPublicId": "32dffbe1-779c-4e43-91cc-5faf2c10977a",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "clusters/disabled/spitfire/terraform.tf",
    "projectName": "infra-home",
    "org": "mbisss2025",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/gitclone_terraform/infra-home/clusters/disabled/spitfire/terraform.tf",
    "packageManager": "terraformconfig",
    "path": "/home/mbissine/gitclone_terraform/infra-home",
    "projectType": "terraformconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false,
        "autoApproveIgnores": false
      },
      "org": "mbisss2025",
      "orgPublicId": "32dffbe1-779c-4e43-91cc-5faf2c10977a",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "clusters/disabled/spitfire/variables.tf",
    "projectName": "infra-home",
    "org": "mbisss2025",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/gitclone_terraform/infra-home/clusters/disabled/spitfire/variables.tf",
    "packageManager": "terraformconfig",
    "path": "/home/mbissine/gitclone_terraform/infra-home",
    "projectType": "terraformconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false,
        "autoApproveIgnores": false
      },
      "org": "mbisss2025",
      "orgPublicId": "32dffbe1-779c-4e43-91cc-5faf2c10977a",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "servers/kolide/terraform/main.tf",
    "projectName": "infra-home",
    "org": "mbisss2025",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/gitclone_terraform/infra-home/servers/kolide/terraform/main.tf",
    "packageManager": "terraformconfig",
    "path": "/home/mbissine/gitclone_terraform/infra-home",
    "projectType": "terraformconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false,
        "autoApproveIgnores": false
      },
      "org": "mbisss2025",
      "orgPublicId": "32dffbe1-779c-4e43-91cc-5faf2c10977a",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "servers/kolide/terraform/providers.tf",
    "projectName": "infra-home",
    "org": "mbisss2025",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/gitclone_terraform/infra-home/servers/kolide/terraform/providers.tf",
    "packageManager": "terraformconfig",
    "path": "/home/mbissine/gitclone_terraform/infra-home",
    "projectType": "terraformconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false,
        "autoApproveIgnores": false
      },
      "org": "mbisss2025",
      "orgPublicId": "32dffbe1-779c-4e43-91cc-5faf2c10977a",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "servers/kolide/terraform/terraform.tf",
    "projectName": "infra-home",
    "org": "mbisss2025",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/gitclone_terraform/infra-home/servers/kolide/terraform/terraform.tf",
    "packageManager": "terraformconfig",
    "path": "/home/mbissine/gitclone_terraform/infra-home",
    "projectType": "terraformconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false,
        "autoApproveIgnores": false
      },
      "org": "mbisss2025",
      "orgPublicId": "32dffbe1-779c-4e43-91cc-5faf2c10977a",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "servers/kolide/terraform/variables.tf",
    "projectName": "infra-home",
    "org": "mbisss2025",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/gitclone_terraform/infra-home/servers/kolide/terraform/variables.tf",
    "packageManager": "terraformconfig",
    "path": "/home/mbissine/gitclone_terraform/infra-home",
    "projectType": "terraformconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false,
        "autoApproveIgnores": false
      },
      "org": "mbisss2025",
      "orgPublicId": "32dffbe1-779c-4e43-91cc-5faf2c10977a",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "terraform/other/talos-tf-on-aws/aws.tf",
    "projectName": "infra-home",
    "org": "mbisss2025",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/gitclone_terraform/infra-home/terraform/other/talos-tf-on-aws/aws.tf",
    "packageManager": "terraformconfig",
    "path": "/home/mbissine/gitclone_terraform/infra-home",
    "projectType": "terraformconfig",
    "ok": false,
    "infrastructureAsCodeIssues": [
      {
        "id": "SNYK-CC-TF-73",
        "title": "AWS Security Group allows open egress",
        "severity": "low",
        "isIgnored": false,
        "subType": "VPC",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-TF-73",
        "isGeneratedByCustomRule": false,
        "issue": "The inline security group rule allows open egress",
        "impact": "Open egress can be used to exfiltrate data to unauthorized destinations, and enable access to potentially malicious resources",
        "resolve": "Set `egress.cidr_blocks` attribute to specific ranges e.g. `192.168.1.0/24`",
        "remediation": {
          "cloudformation": "Set `Properties.SecurityGroupEgress.CidrIp` attribute to specific ranges e.g. `192.168.1.0/24`",
          "terraform": "Set `egress.cidr_blocks` attribute to specific ranges e.g. `192.168.1.0/24`"
        },
        "lineNumber": 18,
        "iacDescription": {
          "issue": "The inline security group rule allows open egress",
          "impact": "Open egress can be used to exfiltrate data to unauthorized destinations, and enable access to potentially malicious resources",
          "resolve": "Set `egress.cidr_blocks` attribute to specific ranges e.g. `192.168.1.0/24`"
        },
        "publicId": "SNYK-CC-TF-73",
        "msg": "resource.aws_security_group[security_group].egress",
        "references": [
          "https://docs.aws.amazon.com/vpc/latest/userguide/VPC_SecurityGroups.html",
          "https://docs.aws.amazon.com/vpc/latest/userguide/vpc-security-best-practices.html"
        ],
        "path": [
          "resource",
          "aws_security_group[security_group]",
          "egress"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-TF-1",
        "title": "Security Group allows open ingress",
        "severity": "medium",
        "isIgnored": false,
        "subType": "VPC",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-TF-1",
        "isGeneratedByCustomRule": false,
        "issue": "That inbound traffic is allowed to a resource from any source instead of a restricted range",
        "impact": "That potentially everyone can access your resource",
        "resolve": "Set `cidr_block` attribute with a more restrictive IP, for example `192.16.0.0/24`",
        "remediation": {
          "cloudformation": "Set `Properties.SecurityGroupIngress.CidrIp` attribute with a more restrictive IP, for example `192.16.0.0/24`",
          "terraform": "Set `cidr_block` attribute with a more restrictive IP, for example `192.16.0.0/24`"
        },
        "lineNumber": 25,
        "iacDescription": {
          "issue": "That inbound traffic is allowed to a resource from any source instead of a restricted range",
          "impact": "That potentially everyone can access your resource",
          "resolve": "Set `cidr_block` attribute with a more restrictive IP, for example `192.16.0.0/24`"
        },
        "publicId": "SNYK-CC-TF-1",
        "msg": "input.resource.aws_security_group[security_group].ingress",
        "references": [
          "https://docs.aws.amazon.com/vpc/latest/userguide/VPC_SecurityGroups.html"
        ],
        "path": [
          "input",
          "resource",
          "aws_security_group[security_group]",
          "ingress"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-AWS-426",
        "title": "EC2 API termination protection is not enabled",
        "severity": "low",
        "isIgnored": false,
        "subType": "EC2",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-AWS-426",
        "isGeneratedByCustomRule": false,
        "issue": "To prevent instance from being accidentally terminated using Amazon EC2, you can enable termination protection for the instance",
        "impact": "Without this setting enabled the instances can be terminated by accident. This setting should only be used for instances with high availability requirements. Enabling this may prevent IaC workflows from updating the instance, for example terraform will not be able to terminate the instance to update instance type",
        "resolve": "Set `disable_api_termination` attribute  with value `true`",
        "remediation": {
          "cloudformation": "Set `DisableApiTermination` attribute with value `true`",
          "terraform": "Set `disable_api_termination` attribute  with value `true`"
        },
        "lineNumber": 47,
        "iacDescription": {
          "issue": "To prevent instance from being accidentally terminated using Amazon EC2, you can enable termination protection for the instance",
          "impact": "Without this setting enabled the instances can be terminated by accident. This setting should only be used for instances with high availability requirements. Enabling this may prevent IaC workflows from updating the instance, for example terraform will not be able to terminate the instance to update instance type",
          "resolve": "Set `disable_api_termination` attribute  with value `true`"
        },
        "publicId": "SNYK-CC-AWS-426",
        "msg": "resource.aws_instance[ec2].disable_api_termination",
        "references": [
          "https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/terminating-instances.html#Using_ChangingDisableAPITermination"
        ],
        "path": [
          "resource",
          "aws_instance[ec2]",
          "disable_api_termination"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-TF-130",
        "title": "EC2 instance accepts IMDSv1",
        "severity": "low",
        "isIgnored": false,
        "subType": "EC2",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-TF-130",
        "isGeneratedByCustomRule": false,
        "issue": "Instance Metadata Service v2 is not enforced",
        "impact": "Metadata service may be vulnerable to reverse proxy/open firewall misconfigurations and server side request forgery attacks",
        "resolve": "Set `metadata_options.http_tokens` attribute to `required`",
        "remediation": {
          "cloudformation": "Set `MetadataOptions.HttpTokens` attribute to `required` in `AWS::EC2::LaunchTemplate`",
          "terraform": "Set `metadata_options.http_tokens` attribute to `required`"
        },
        "lineNumber": 47,
        "iacDescription": {
          "issue": "Instance Metadata Service v2 is not enforced",
          "impact": "Metadata service may be vulnerable to reverse proxy/open firewall misconfigurations and server side request forgery attacks",
          "resolve": "Set `metadata_options.http_tokens` attribute to `required`"
        },
        "publicId": "SNYK-CC-TF-130",
        "msg": "resource.aws_instance[ec2].metadata_options",
        "references": [
          "https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/configuring-instance-metadata-service.html",
          "https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html",
          "https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instancedata-data-retrieval.html",
          "https://aws.amazon.com/blogs/security/defense-in-depth-open-firewalls-reverse-proxies-ssrf-vulnerabilities-ec2-instance-metadata-service/"
        ],
        "path": [
          "resource",
          "aws_instance[ec2]",
          "metadata_options"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-TF-53",
        "title": "Non-Encrypted root block device",
        "severity": "medium",
        "isIgnored": false,
        "subType": "EC2",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-TF-53",
        "isGeneratedByCustomRule": false,
        "issue": "The root block device for ec2 instance is not encrypted",
        "impact": "That should someone gain unauthorized access to the data they would be able to read the contents.",
        "resolve": "Set `root_block_device.encrypted` attribute to `true`",
        "remediation": {
          "cloudformation": "Set `BlockDeviceMappings.Encrypted` attribute of root device to `true`",
          "terraform": "Set `root_block_device.encrypted` attribute to `true`"
        },
        "lineNumber": 47,
        "iacDescription": {
          "issue": "The root block device for ec2 instance is not encrypted",
          "impact": "That should someone gain unauthorized access to the data they would be able to read the contents.",
          "resolve": "Set `root_block_device.encrypted` attribute to `true`"
        },
        "publicId": "SNYK-CC-TF-53",
        "msg": "resource.aws_instance[ec2].root_block_device.encrypted",
        "references": [
          "https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/RootDeviceStorage.html",
          "https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html",
          "https://aws.amazon.com/premiumsupport/knowledge-center/cloudformation-root-volume-property/",
          "https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/device_naming.html"
        ],
        "path": [
          "resource",
          "aws_instance[ec2]",
          "root_block_device",
          "encrypted"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-TF-56",
        "title": "Security group description is missing",
        "severity": "low",
        "isIgnored": false,
        "subType": "VPC",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-TF-56",
        "isGeneratedByCustomRule": false,
        "issue": "The description field is missing in the security group",
        "impact": "Increases the security management overhead",
        "resolve": "Set `description` attribute to meaningful statement",
        "remediation": {
          "terraform": "Set `description` attribute to meaningful statement"
        },
        "lineNumber": 16,
        "iacDescription": {
          "issue": "The description field is missing in the security group",
          "impact": "Increases the security management overhead",
          "resolve": "Set `description` attribute to meaningful statement"
        },
        "publicId": "SNYK-CC-TF-56",
        "msg": "resource.aws_security_group[security_group].description",
        "references": [
          "https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-security-groups.html"
        ],
        "path": [
          "resource",
          "aws_security_group[security_group]",
          "description"
        ],
        "compliance": []
      }
    ]
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false,
        "autoApproveIgnores": false
      },
      "org": "mbisss2025",
      "orgPublicId": "32dffbe1-779c-4e43-91cc-5faf2c10977a",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "terraform/other/talos-tf-on-aws/output.tf",
    "projectName": "infra-home",
    "org": "mbisss2025",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/gitclone_terraform/infra-home/terraform/other/talos-tf-on-aws/output.tf",
    "packageManager": "terraformconfig",
    "path": "/home/mbissine/gitclone_terraform/infra-home",
    "projectType": "terraformconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false,
        "autoApproveIgnores": false
      },
      "org": "mbisss2025",
      "orgPublicId": "32dffbe1-779c-4e43-91cc-5faf2c10977a",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "terraform/other/talos-tf-on-aws/providers.tf",
    "projectName": "infra-home",
    "org": "mbisss2025",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/gitclone_terraform/infra-home/terraform/other/talos-tf-on-aws/providers.tf",
    "packageManager": "terraformconfig",
    "path": "/home/mbissine/gitclone_terraform/infra-home",
    "projectType": "terraformconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false,
        "autoApproveIgnores": false
      },
      "org": "mbisss2025",
      "orgPublicId": "32dffbe1-779c-4e43-91cc-5faf2c10977a",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "terraform/other/talos-tf-on-aws/talos-config.tf",
    "projectName": "infra-home",
    "org": "mbisss2025",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/gitclone_terraform/infra-home/terraform/other/talos-tf-on-aws/talos-config.tf",
    "packageManager": "terraformconfig",
    "path": "/home/mbissine/gitclone_terraform/infra-home",
    "projectType": "terraformconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false,
        "autoApproveIgnores": false
      },
      "org": "mbisss2025",
      "orgPublicId": "32dffbe1-779c-4e43-91cc-5faf2c10977a",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "terraform/other/talos-tf-on-aws/variables.tf",
    "projectName": "infra-home",
    "org": "mbisss2025",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/gitclone_terraform/infra-home/terraform/other/talos-tf-on-aws/variables.tf",
    "packageManager": "terraformconfig",
    "path": "/home/mbissine/gitclone_terraform/infra-home",
    "projectType": "terraformconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false,
        "autoApproveIgnores": false
      },
      "org": "mbisss2025",
      "orgPublicId": "32dffbe1-779c-4e43-91cc-5faf2c10977a",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "terraform/other/talos-tf-on-aws/versions.tf",
    "projectName": "infra-home",
    "org": "mbisss2025",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/gitclone_terraform/infra-home/terraform/other/talos-tf-on-aws/versions.tf",
    "packageManager": "terraformconfig",
    "path": "/home/mbissine/gitclone_terraform/infra-home",
    "projectType": "terraformconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  }
]