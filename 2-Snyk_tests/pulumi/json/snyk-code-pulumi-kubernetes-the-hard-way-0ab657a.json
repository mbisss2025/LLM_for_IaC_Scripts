{
  "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "SnykCode",
          "semanticVersion": "1.0.0",
          "version": "1.0.0",
          "rules": [
            {
              "id": "go/HardcodedPassword/test",
              "name": "HardcodedPassword/test",
              "shortDescription": {
                "text": "Use of Hardcoded Passwords"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "\n## Details\n\nDevelopers may use hardcoded passwords during development to streamline setup or simplify authentication while testing. Although these passwords are intended to be removed before deployment, they are sometimes inadvertently left in the code. This introduces serious security risks, especially if the password grants elevated privileges or is reused across multiple systems.\n\nAn attacker who discovers a hardcoded password can potentially gain unauthorized access, escalate privileges, exfiltrate sensitive data, or disrupt service availability. If the password is reused across different environments or applications, the compromise can spread quickly and broadly.\n\n## Best practices for prevention\n* Plan software architecture such that keys and passwords are always stored outside the code, wherever possible.\n* Plan encryption into software architecture for all credential information and ensure proper handling of keys, credentials, and passwords.\n* Prompt for a secure password on first login rather than hard-code a default password.\n* If a hardcoded password or credential must be used, limit its use, for example, to system console users rather than via the network.\n* Use strong hashes for inbound password authentication, ideally with randomly assigned salts to increase the difficulty level in case of brute-force attack.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "go",
                  "HardcodedPassword",
                  "Security",
                  "InTest"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/biningo/note-gin/commit/42791cf29b4b86e2d1f4c384a940591a47e13219?diff=split#diff-ca713ed723a0edf86b651d90157af74fd9d9e739b791097a4b13e697e5699253L-1",
                    "lines": [
                      {
                        "line": "func GetToken() string {\n",
                        "lineNumber": 7,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\taccessKey := \"WdlLw-oFN1mbj-0vngrbQ8Si39u0dgackq0v9L4T\"\n",
                        "lineNumber": 8,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tsecretKey := \"HoKZLcwE1BtYWe9ze__jmwWsfqPeAcbHURN48t9A\"\n",
                        "lineNumber": 9,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tbucket := \"note-gin\"\n",
                        "lineNumber": 10,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tputPolicy := storage.PutPolicy{\n",
                        "lineNumber": 11,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\tScope: bucket,\n",
                        "lineNumber": 12,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 13,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tmac := qbox.NewMac(accessKey, secretKey)\n",
                        "lineNumber": 14,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tupToken := putPolicy.UploadToken(mac)\n",
                        "lineNumber": 15,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\treturn upToken\n",
                        "lineNumber": 16,
                        "lineChange": "removed"
                      },
                      {
                        "line": "var QiniuAccessKey string\n",
                        "lineNumber": 4,
                        "lineChange": "added"
                      },
                      {
                        "line": "var QiniuSecretKey string\n",
                        "lineNumber": 5,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 6,
                        "lineChange": "added"
                      },
                      {
                        "line": "func SetUp() {\n",
                        "lineNumber": 7,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tQiniuAccessKey = config.Conf.AppConfig.QiniuAccessKey\n",
                        "lineNumber": 8,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tQiniuSecretKey = config.Conf.AppConfig.QiniuSecretKey\n",
                        "lineNumber": 9,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/weibocom/opendcp/commit/ec5209d39b8ce28a67bf10f0fe6379f6c65ec454?diff=split#diff-d842348011b17bb4526453c3a207e6032219a4a6cafdf5f0e2c9b3d0da2fae8cL-1",
                    "lines": [
                      {
                        "line": "IdentityEndpoint: \"http://10.39.59.27:5000/v3\",\n",
                        "lineNumber": 124,
                        "lineChange": "removed"
                      },
                      {
                        "line": "Username: \"admin\",\n",
                        "lineNumber": 125,
                        "lineChange": "removed"
                      },
                      {
                        "line": "Password: \"ZYGL32NDG7JS8IGC\",\n",
                        "lineNumber": 126,
                        "lineChange": "removed"
                      },
                      {
                        "line": "IdentityEndpoint: url,\n",
                        "lineNumber": 127,
                        "lineChange": "added"
                      },
                      {
                        "line": "Username: conf.Config.OpUserName,\n",
                        "lineNumber": 128,
                        "lineChange": "added"
                      },
                      {
                        "line": "Password: conf.Config.OpPassWord,\n",
                        "lineNumber": 129,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/jointwt/twtxt/commit/14e86ea4b5ef71df46297a8ffccc8f259a677fb5?diff=split#diff-0c6fb9f312dbfbfed47d840e0d73f6ba10291681cf8b70ad10979fa20b6aa350L-1",
                    "lines": [
                      {
                        "line": "\t// InvalidConfigValue is the constant value for invalid config values\n",
                        "lineNumber": 9,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t// which must be changed for production configurations before successful\n",
                        "lineNumber": 10,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t// startup\n",
                        "lineNumber": 11,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tInvalidConfigValue = \"INVALID CONFIG VALUE - PLEASE CHANGE THIS VALUE\"\n",
                        "lineNumber": 12,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 13,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t// DebugMode is the default debug mode\n",
                        "lineNumber": 14,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultDebug = false\n",
                        "lineNumber": 15,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// DefaultData is the default data directory for storage\n",
                        "lineNumber": 17,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultData = \"./data\"\n",
                        "lineNumber": 18,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 19,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// DefaultStore is the default data store used for accounts, sessions, etc\n",
                        "lineNumber": 20,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultStore = \"bitcask://twtxt.db\"\n",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// DefaultBaseURL is the default Base URL for the app used to construct feed URLs\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultBaseURL = \"http://0.0.0.0:8000\"\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// DefaultAdminXXX is the default admin user / pod operator\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultAdminUser  = \"admin\"\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultAdminName  = \"Administrator\"\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultAdminEmail = \"support@twt.social\"\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// DefaultName is the default instance name\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultName = \"twtxt.net\"\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// DefaultMetaxxx are the default set of <meta> tags used on non-specific views\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultMetaTitle       = \"\"\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultMetaAuthor      = \"twtxt.net / twt.social\"\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultMetaKeywords    = \"twtxt, twt, blog, micro-blogging, social, media, decentralised, pod\"\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultMetaDescription = \"\ud83d\udcd5 twtxt is a Self-Hosted, Twitter\u2122-like Decentralised microBlogging platform. No ads, no tracking, your content, your data!\"\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// DefaultTheme is the default theme to use ('light' or 'dark')\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultTheme = \"dark\"\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// DefaultOpenRegistrations is the default for open user registrations\n",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultOpenRegistrations = false\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// DefaultRegisterMessage is the default message displayed when  registrations are disabled\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultRegisterMessage = \"\"\n",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// DefaultCookieSecret is the server's default cookie secret\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tDefaultCookieSecret = \"PLEASE_CHANGE_ME!!!\"\n",
                        "lineNumber": 45,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\tDefaultCookieSecret = InvalidConfigValue\n",
                        "lineNumber": 50,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 20,
                "cwe": [
                  "CWE-798",
                  "CWE-259"
                ]
              }
            },
            {
              "id": "go/NoHardcodedCredentials/test",
              "name": "NoHardcodedCredentials/test",
              "shortDescription": {
                "text": "Use of Hardcoded Credentials"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "\n## Details\n\nDevelopers may use hardcoded credentials for convenience when coding in order to simplify their workflow. While they are responsible for removing these before production, occasionally this task may fall through the cracks. This also becomes a maintenance challenge when credentials are re-used across multiple applications.\n\nOnce attackers gain access, they may take advantage of privilege level to remove or alter data, take down a site or app, or hold any of the above for ransom. The risk across multiple similar projects is even greater. If code containing the credentials is reused across multiple projects, they will all be compromised.\n\n## Best practices for prevention\n* Plan software architecture such that keys and passwords are always stored outside the code, wherever possible.\n* Plan encryption into software architecture for all credential information and ensure proper handling of keys, credentials, and passwords.\n* Prompt for a secure password on first login rather than hard-code a default password.\n* If a hardcoded password or credential must be used, limit its use, for example, to system console users rather than via the network.\n* Use strong hashes for inbound password authentication, ideally with randomly assigned salts to increase the difficulty level in case of brute-force attack.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "go",
                  "NoHardcodedCredentials",
                  "Security",
                  "InTest"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/fjukstad/kvik/commit/254d8dd1c34e017b1aac1493286a3f3b773ff40c?diff=split#diff-6a37a2c5ea8c5a951b2830b342cc07312e7cfa6eb69afdecc4b5bfce636f28e0L-1",
                    "lines": [
                      {
                        "line": "//addr := \"192.168.99.100:8004\"\n",
                        "lineNumber": 12,
                        "lineChange": "removed"
                      },
                      {
                        "line": "addr := \"public.opencpu.org\"\n",
                        "lineNumber": 13,
                        "lineChange": "removed"
                      },
                      {
                        "line": "username := \"user\"\n",
                        "lineNumber": 14,
                        "lineChange": "removed"
                      },
                      {
                        "line": "password := \"password\"\n",
                        "lineNumber": 15,
                        "lineChange": "removed"
                      },
                      {
                        "line": "addr := \"localhost:8181\"\n",
                        "lineNumber": 13,
                        "lineChange": "added"
                      },
                      {
                        "line": "//addr := \"public.opencpu.org\"\n",
                        "lineNumber": 14,
                        "lineChange": "added"
                      },
                      {
                        "line": "username := \"\"\n",
                        "lineNumber": 15,
                        "lineChange": "added"
                      },
                      {
                        "line": "password := \"\"\n",
                        "lineNumber": 16,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/k0kubun/sqldef/commit/5ac0feda25dfa3b4a3e2201c017425beec13a02d?diff=split#diff-ed17e21a49a7d3b117a41187ac6d384ef656de942120f74001fa9b057fde5688L-1",
                    "lines": [
                      {
                        "line": "user := \"postgres\"\n",
                        "lineNumber": 8,
                        "lineChange": "removed"
                      },
                      {
                        "line": "password := \"\"\n",
                        "lineNumber": 9,
                        "lineChange": "removed"
                      },
                      {
                        "line": "host := \"127.0.0.1:5432\"\n",
                        "lineNumber": 10,
                        "lineChange": "removed"
                      },
                      {
                        "line": "user := config.User\n",
                        "lineNumber": 8,
                        "lineChange": "added"
                      },
                      {
                        "line": "password := config.Password\n",
                        "lineNumber": 9,
                        "lineChange": "added"
                      },
                      {
                        "line": "host := fmt.Sprintf(\"%s:%d\", config.Host, config.Port)\n",
                        "lineNumber": 10,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/alfred-zhong/wserver/commit/bc7d33643368e16d9801ab88f7ba2dfdc49467af?diff=split#diff-005f9a0396b938d96245e8fc04dcd633d0716b5610fd4d90c09af361625fb74dL-1",
                    "lines": [
                      {
                        "line": "userID := \"476B40DD-DFE9-4CDE-AD4F-F0A53FE18FA5\"\n",
                        "lineNumber": 18,
                        "lineChange": "removed"
                      },
                      {
                        "line": "userID := uuid.New().String()\n",
                        "lineNumber": 19,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 71,
                "cwe": [
                  "CWE-798"
                ]
              }
            },
            {
              "id": "go/PT",
              "name": "PT",
              "shortDescription": {
                "text": "Path Traversal"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "help": {
                "markdown": "## Details\n\nA Directory Traversal attack (also known as path traversal) aims to access files and directories that are stored outside the intended folder. By manipulating files with \"dot-dot-slash (../)\" sequences and its variations, or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system, including application source code, configuration, and other critical system files.\n\nBeing able to access and manipulate an arbitrary path leads to vulnerabilities when a program is being run with privileges that the user providing the path should not have. A website with a path traversal vulnerability would allow users access to sensitive files on the server hosting it. CLI programs may also be vulnerable to path traversal if they are being ran with elevated privileges (such as with the setuid or setgid flags in Unix systems).\n\nDirectory Traversal vulnerabilities can be generally divided into two types:\n\n- **Information Disclosure**: Allows the attacker to gain information about the folder structure or read the contents of sensitive files on the system.\n\n`st` is a module for serving static files on web pages, and contains a [vulnerability of this type](https://snyk.io/vuln/npm:st:20140206). In our example, we will serve files from the `public` route.\n\nIf an attacker requests the following URL from our server, it will in turn leak the sensitive private key of the root user.\n\n```\ncurl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa\n```\n**Note** `%2e` is the URL encoded version of `.` (dot).\n\n- **Writing arbitrary files**: Allows the attacker to create or replace existing files. This type of vulnerability is also known as `Zip-Slip`.\n\nOne way to achieve this is by using a malicious `zip` archive that holds path traversal filenames. When each filename in the zip archive gets concatenated to the target extraction folder, without validation, the final path ends up outside of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.\n\nThe following is an example of a `zip` archive with one benign file and one malicious file. Extracting the malicious file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\n\n```\n2018-04-15 22:04:29 .....           19           19  good.txt\n2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys\n```",
                "text": ""
              },
              "properties": {
                "tags": [
                  "go",
                  "PT",
                  "Security",
                  "SourceNonServer",
                  "SourceLocalEnv",
                  "SourceCLI",
                  "Taint"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/uadmin/uadmin/commit/c0dfdd6a6dd0d3f3906dc1b001a154aa690b729c?diff=split#diff-36cbbf58d3f192b92e5424da449fbab3eb283ea0ee7a1b210615b6a1e096ef44L-1",
                    "lines": [
                      {
                        "line": "file, err := os.Open(\"./media/\" + r.URL.Path)\n",
                        "lineNumber": 17,
                        "lineChange": "removed"
                      },
                      {
                        "line": "file, err := os.Open(\"./media/\" + path.Clean(r.URL.Path))\n",
                        "lineNumber": 18,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/MohawkTSDB/mohawk/commit/e4a68407d6e1f9a3ccfa1f0a320c04d693afe2a6?diff=split#diff-ffb4b68b82d9234bcba450c7ca14d76b3ea0eed74198d1811d802889c58252e5L-1",
                    "lines": [
                      {
                        "line": "\t// Check for \"..\" in the url path,\n",
                        "lineNumber": 42,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t// if we find \"..\" in the path we will not serve static files\n",
                        "lineNumber": 43,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tif strings.Contains(path, \"..\") {\n",
                        "lineNumber": 44,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\ts.next.ServeHTTP(w, r)\n",
                        "lineNumber": 45,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\treturn\n",
                        "lineNumber": 46,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 47,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 48,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t// Add index.html to path if it ends with /\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif path[len(path)-1:] == \"/\" {\n",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tpath = path + \"index.html\"\n",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// Add /index.html to path if a directory\n",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif fi, err := os.Stat(path); err == nil && fi.IsDir() {\n",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tpath = path + \"/index.html\"\n",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}\n",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// If file exist serve it\n",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif file, err := ioutil.ReadFile(path); err == nil {\n",
                        "lineNumber": 60,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/hybridgroup/gocv/commit/56b2d918ff49aa835767b6dea2516f184549161c?diff=split#diff-56ad2b2d382898787e7d2fbc2e25b66ebdcc2015e370934fc0882530c07f5719L-1",
                    "lines": [
                      {
                        "line": "file, err := os.Open(path)\n",
                        "lineNumber": 132,
                        "lineChange": "removed"
                      },
                      {
                        "line": "file, err := os.Open(filepath.Clean(path))\n",
                        "lineNumber": 133,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 58,
                "cwe": [
                  "CWE-23"
                ]
              }
            }
          ]
        }
      },
      "results": [
        {
          "ruleId": "go/HardcodedPassword/test",
          "ruleIndex": 0,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded saved in password.",
            "markdown": "Do not hardcode passwords in code. Found {0} saved in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[password](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/examples_nodejs_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 41,
                  "endLine": 41,
                  "startColumn": 3,
                  "endColumn": 11
                }
              }
            }
          ],
          "fingerprints": {
            "0": "a6572844bbc4e439da577fe037134f75370b61f8c66e72d77b31847674bcbbd2",
            "1": "424eddda.0d9b46dd.45df3e14.79502f34.91b7c08c.63a86890.30910d28.1bff12d3.3a16cad1.776d1789.45df3e14.79502f34.91b7c08c.f2930542.30910d28.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/examples_nodejs_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 41,
                            "endLine": 41,
                            "startColumn": 14,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/examples_nodejs_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 41,
                            "endLine": 41,
                            "startColumn": 3,
                            "endColumn": 11
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 445,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedPassword/test",
          "ruleIndex": 0,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded saved in password.",
            "markdown": "Do not hardcode passwords in code. Found {0} saved in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[password](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/examples_nodejs_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 65,
                  "endLine": 65,
                  "startColumn": 17,
                  "endColumn": 25
                }
              }
            }
          ],
          "fingerprints": {
            "0": "a866a4eb15117091a40c58106b4d9dedf390b0db55cd3e9896073152fca2c26f",
            "1": "424eddda.98f0ff0f.45df3e14.bfac11f0.6ee851a6.67752288.30910d28.ff3d0695.3a16cad1.776d1789.45df3e14.79502f34.6ee851a6.f2930542.30910d28.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/examples_nodejs_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 41,
                            "endLine": 41,
                            "startColumn": 14,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/examples_nodejs_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 65,
                            "endLine": 65,
                            "startColumn": 17,
                            "endColumn": 25
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 445,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedPassword/test",
          "ruleIndex": 0,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded saved in password.",
            "markdown": "Do not hardcode passwords in code. Found {0} saved in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[password](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/examples_nodejs_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 78,
                  "endLine": 78,
                  "startColumn": 3,
                  "endColumn": 11
                }
              }
            }
          ],
          "fingerprints": {
            "0": "6b77f27d7cb4390630f6b17d294b3571f7f85f660a7cb9576c93f0b3146b7569",
            "1": "424eddda.0d9b46dd.45df3e14.79502f34.91b7c08c.63a86890.30910d28.1bff12d3.3a16cad1.776d1789.45df3e14.79502f34.91b7c08c.f2930542.30910d28.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/examples_nodejs_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 78,
                            "endLine": 78,
                            "startColumn": 14,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/examples_nodejs_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 78,
                            "endLine": 78,
                            "startColumn": 3,
                            "endColumn": 11
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 445,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/HardcodedPassword/test",
          "ruleIndex": 0,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded saved in password.",
            "markdown": "Do not hardcode passwords in code. Found {0} saved in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[password](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/examples_nodejs_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 108,
                  "endLine": 108,
                  "startColumn": 17,
                  "endColumn": 25
                }
              }
            }
          ],
          "fingerprints": {
            "0": "608beb68668b46abc786ae98f363fab514c53ed54a0de84563f00e99861b4f1d",
            "1": "424eddda.98f0ff0f.45df3e14.bfac11f0.6ee851a6.67752288.30910d28.ff3d0695.3a16cad1.776d1789.45df3e14.79502f34.6ee851a6.f2930542.30910d28.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/examples_nodejs_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 78,
                            "endLine": 78,
                            "startColumn": 14,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/examples_nodejs_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 108,
                            "endLine": 108,
                            "startColumn": 17,
                            "endColumn": 25
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 445,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/examples_nodejs_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 40,
                  "endLine": 40,
                  "startColumn": 3,
                  "endColumn": 11
                }
              }
            }
          ],
          "fingerprints": {
            "0": "4edad84a5c16f70441bd61caa559095e8b87bd82dd4fdbcd17496f24cabdb63e",
            "1": "424eddda.0291bc58.45df3e14.79502f34.7bd90b81.641d8dd7.84536798.1bff12d3.424eddda.0291bc58.45df3e14.79502f34.7bd90b81.641d8dd7.84536798.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/examples_nodejs_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 40,
                            "endLine": 40,
                            "startColumn": 14,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/examples_nodejs_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 40,
                            "endLine": 40,
                            "startColumn": 3,
                            "endColumn": 11
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 445,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/examples_nodejs_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 64,
                  "endLine": 64,
                  "startColumn": 17,
                  "endColumn": 25
                }
              }
            }
          ],
          "fingerprints": {
            "0": "a34d18d956ae2d21ac186f15353de535d7f83deaed9589aa57ac3e2af9155297",
            "1": "424eddda.98f0ff0f.45df3e14.bfac11f0.6ee851a6.641d8dd7.8ee950b3.a436cd0e.424eddda.98f0ff0f.45df3e14.79502f34.6ee851a6.641d8dd7.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/examples_nodejs_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 40,
                            "endLine": 40,
                            "startColumn": 14,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/examples_nodejs_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 64,
                            "endLine": 64,
                            "startColumn": 17,
                            "endColumn": 25
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 445,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/examples_nodejs_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 77,
                  "endLine": 77,
                  "startColumn": 3,
                  "endColumn": 11
                }
              }
            }
          ],
          "fingerprints": {
            "0": "05b3542d65a696d19e4b1694a2c65d05861406045c784e1af9026920d71a2950",
            "1": "424eddda.0291bc58.45df3e14.79502f34.7bd90b81.641d8dd7.84536798.1bff12d3.424eddda.0291bc58.45df3e14.79502f34.7bd90b81.641d8dd7.84536798.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/examples_nodejs_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 77,
                            "endLine": 77,
                            "startColumn": 14,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/examples_nodejs_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 77,
                            "endLine": 77,
                            "startColumn": 3,
                            "endColumn": 11
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 445,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/NoHardcodedCredentials/test",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in username.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[username](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/examples_nodejs_test.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 107,
                  "endLine": 107,
                  "startColumn": 17,
                  "endColumn": 25
                }
              }
            }
          ],
          "fingerprints": {
            "0": "b372c04d586c6c77478b6f6b74d1404e5b991e783a72f597e08ca87e9402ee45",
            "1": "424eddda.98f0ff0f.45df3e14.bfac11f0.6ee851a6.641d8dd7.8ee950b3.a436cd0e.424eddda.98f0ff0f.45df3e14.79502f34.6ee851a6.641d8dd7.8ee950b3.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/examples_nodejs_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 77,
                            "endLine": 77,
                            "startColumn": 14,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "examples/examples_nodejs_test.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 107,
                            "endLine": 107,
                            "startColumn": 17,
                            "endColumn": 25
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 445,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "go/PT",
          "ruleIndex": 2,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from a CLI argument flows into os.WriteFile, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to write arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to write arbitrary files.",
            "arguments": [
              "[a CLI argument](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(13),(14)",
              "[os.WriteFile](15)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "schemagen/cmd/pulumi-gen-kubernetes-the-hard-way/main.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 43,
                  "endLine": 43,
                  "startColumn": 9,
                  "endColumn": 21
                }
              }
            }
          ],
          "fingerprints": {
            "0": "6ba3754117c6cd10460b586655795bf7bd42d120a2b981dc0030c8a51be7ae53",
            "1": "3900f8ff.73eb5804.45df3e14.b9631cf3.84c49f13.995dab92.df7e59ba.e01cd24f.c8b400c0.348ddf12.45df3e14.9692a5c1.23ef7662.57f89f2f.83265159.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "schemagen/cmd/pulumi-gen-kubernetes-the-hard-way/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 19,
                            "endLine": 19,
                            "startColumn": 10,
                            "endColumn": 17
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "schemagen/cmd/pulumi-gen-kubernetes-the-hard-way/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 19,
                            "endLine": 19,
                            "startColumn": 10,
                            "endColumn": 17
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "schemagen/cmd/pulumi-gen-kubernetes-the-hard-way/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 19,
                            "endLine": 19,
                            "startColumn": 10,
                            "endColumn": 21
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "schemagen/cmd/pulumi-gen-kubernetes-the-hard-way/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 19,
                            "endLine": 19,
                            "startColumn": 2,
                            "endColumn": 6
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "schemagen/cmd/pulumi-gen-kubernetes-the-hard-way/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 25,
                            "endLine": 25,
                            "startColumn": 12,
                            "endColumn": 16
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "schemagen/cmd/pulumi-gen-kubernetes-the-hard-way/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 25,
                            "endLine": 25,
                            "startColumn": 12,
                            "endColumn": 19
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "schemagen/cmd/pulumi-gen-kubernetes-the-hard-way/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 25,
                            "endLine": 25,
                            "startColumn": 2,
                            "endColumn": 8
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "schemagen/cmd/pulumi-gen-kubernetes-the-hard-way/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 34,
                            "endLine": 34,
                            "startColumn": 30,
                            "endColumn": 36
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "schemagen/cmd/pulumi-gen-kubernetes-the-hard-way/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 49,
                            "endLine": 49,
                            "startColumn": 56,
                            "endColumn": 62
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "schemagen/cmd/pulumi-gen-kubernetes-the-hard-way/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 54,
                            "endLine": 54,
                            "startColumn": 16,
                            "endColumn": 22
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "schemagen/cmd/pulumi-gen-kubernetes-the-hard-way/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 37,
                            "endLine": 37,
                            "startColumn": 20,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "schemagen/cmd/pulumi-gen-kubernetes-the-hard-way/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 38,
                            "endLine": 38,
                            "startColumn": 27,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "schemagen/cmd/pulumi-gen-kubernetes-the-hard-way/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 38,
                            "endLine": 38,
                            "startColumn": 13,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 13,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "schemagen/cmd/pulumi-gen-kubernetes-the-hard-way/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 38,
                            "endLine": 38,
                            "startColumn": 2,
                            "endColumn": 9
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 14,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "schemagen/cmd/pulumi-gen-kubernetes-the-hard-way/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 43,
                            "endLine": 43,
                            "startColumn": 22,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 15,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "schemagen/cmd/pulumi-gen-kubernetes-the-hard-way/main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 43,
                            "endLine": 43,
                            "startColumn": 9,
                            "endColumn": 21
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 512,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        }
      ],
      "properties": {
        "coverage": [
          {
            "isSupported": true,
            "lang": "C#",
            "files": 63,
            "type": "SUPPORTED"
          },
          {
            "isSupported": true,
            "lang": "Go",
            "files": 62,
            "type": "SUPPORTED"
          },
          {
            "isSupported": true,
            "lang": "HTML",
            "files": 1,
            "type": "SUPPORTED"
          },
          {
            "isSupported": true,
            "lang": "Java",
            "files": 108,
            "type": "SUPPORTED"
          },
          {
            "isSupported": true,
            "lang": "Python",
            "files": 50,
            "type": "SUPPORTED"
          },
          {
            "isSupported": true,
            "lang": "TypeScript",
            "files": 97,
            "type": "SUPPORTED"
          }
        ]
      }
    }
  ]
}