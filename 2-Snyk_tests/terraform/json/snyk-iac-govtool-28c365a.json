[
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false,
        "autoApproveIgnores": false
      },
      "org": "mbisss2025",
      "orgPublicId": "32dffbe1-779c-4e43-91cc-5faf2c10977a",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "infra/terraform/main.tf",
    "projectName": "govtool",
    "org": "mbisss2025",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/gitclone_terraform/govtool/infra/terraform/main.tf",
    "packageManager": "terraformconfig",
    "path": "/home/mbissine/gitclone_terraform/govtool",
    "projectType": "terraformconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false,
        "autoApproveIgnores": false
      },
      "org": "mbisss2025",
      "orgPublicId": "32dffbe1-779c-4e43-91cc-5faf2c10977a",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "infra/terraform/versions.tf",
    "projectName": "govtool",
    "org": "mbisss2025",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/gitclone_terraform/govtool/infra/terraform/versions.tf",
    "packageManager": "terraformconfig",
    "path": "/home/mbissine/gitclone_terraform/govtool",
    "projectType": "terraformconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false,
        "autoApproveIgnores": false
      },
      "org": "mbisss2025",
      "orgPublicId": "32dffbe1-779c-4e43-91cc-5faf2c10977a",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "infra/terraform/vva_to_govtool_migration_20240212.tf",
    "projectName": "govtool",
    "org": "mbisss2025",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/gitclone_terraform/govtool/infra/terraform/vva_to_govtool_migration_20240212.tf",
    "packageManager": "terraformconfig",
    "path": "/home/mbissine/gitclone_terraform/govtool",
    "projectType": "terraformconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false,
        "autoApproveIgnores": false
      },
      "org": "mbisss2025",
      "orgPublicId": "32dffbe1-779c-4e43-91cc-5faf2c10977a",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "infra/terraform/modules/ecr/main.tf",
    "projectName": "govtool",
    "org": "mbisss2025",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/gitclone_terraform/govtool/infra/terraform/modules/ecr/main.tf",
    "packageManager": "terraformconfig",
    "path": "/home/mbissine/gitclone_terraform/govtool",
    "projectType": "terraformconfig",
    "ok": false,
    "infrastructureAsCodeIssues": [
      {
        "id": "SNYK-CC-TF-61",
        "title": "ECR image scanning is disabled",
        "severity": "low",
        "isIgnored": false,
        "subType": "ECR",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-TF-61",
        "isGeneratedByCustomRule": false,
        "issue": "The ECR image scan for known vulnerabilities is disabled",
        "impact": "The known vulnerabilities will not be automatically discovered",
        "resolve": "Set `image_scanning_configuration.scan_on_push` attribute to `true`",
        "remediation": {
          "cloudformation": "Set `Properties.ImageScanningConfiguration` attribute to `true`",
          "terraform": "Set `image_scanning_configuration.scan_on_push` attribute to `true`"
        },
        "lineNumber": 1,
        "iacDescription": {
          "issue": "The ECR image scan for known vulnerabilities is disabled",
          "impact": "The known vulnerabilities will not be automatically discovered",
          "resolve": "Set `image_scanning_configuration.scan_on_push` attribute to `true`"
        },
        "publicId": "SNYK-CC-TF-61",
        "msg": "resource.aws_ecr_repository[ecr_repo].image_scanning_configuration",
        "references": [
          "https://docs.aws.amazon.com/AmazonECR/latest/userguide/image-scanning.html"
        ],
        "path": [
          "resource",
          "aws_ecr_repository[ecr_repo]",
          "image_scanning_configuration"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-TF-126",
        "title": "ECR Registry allows mutable tags",
        "severity": "low",
        "isIgnored": false,
        "subType": "ECR",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-TF-126",
        "isGeneratedByCustomRule": false,
        "issue": "The AWS ECR registry does not enforce immutable tags",
        "impact": "Image tags can be modified post deployment",
        "resolve": "Set `image_tag_mutability` attribute to `IMMUTABLE`",
        "remediation": {
          "cloudformation": "Set `Properties.ImageTagMutability` attribute to `IMMUTABLE`",
          "terraform": "Set `image_tag_mutability` attribute to `IMMUTABLE`"
        },
        "lineNumber": 1,
        "iacDescription": {
          "issue": "The AWS ECR registry does not enforce immutable tags",
          "impact": "Image tags can be modified post deployment",
          "resolve": "Set `image_tag_mutability` attribute to `IMMUTABLE`"
        },
        "publicId": "SNYK-CC-TF-126",
        "msg": "resource.aws_ecr_repository[ecr_repo].image_tag_mutability",
        "references": [
          "https://docs.aws.amazon.com/AmazonECR/latest/userguide/image-tag-mutability.html"
        ],
        "path": [
          "resource",
          "aws_ecr_repository[ecr_repo]",
          "image_tag_mutability"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-AWS-418",
        "title": "ECR repository is not encrypted with customer managed key",
        "severity": "low",
        "isIgnored": false,
        "subType": "ECR",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-AWS-418",
        "isGeneratedByCustomRule": false,
        "issue": "ECR repository is not encrypted with customer managed key",
        "impact": "Scope of use of the key cannot be controlled via KMS/IAM policies",
        "resolve": "Set `encryption_configuration.kms_key` attribute to customer managed KMS key",
        "remediation": {
          "cloudformation": "Set `Properties.EncryptionConfiguration.KmsKey` attribute to customer managed KMS key",
          "terraform": "Set `encryption_configuration.kms_key` attribute to customer managed KMS key"
        },
        "lineNumber": 4,
        "iacDescription": {
          "issue": "ECR repository is not encrypted with customer managed key",
          "impact": "Scope of use of the key cannot be controlled via KMS/IAM policies",
          "resolve": "Set `encryption_configuration.kms_key` attribute to customer managed KMS key"
        },
        "publicId": "SNYK-CC-AWS-418",
        "msg": "resource.aws_ecr_repository[ecr_repo].encryption_configuration",
        "references": [
          "https://docs.aws.amazon.com/AmazonECR/latest/userguide/encryption-at-rest.html",
          "https://docs.aws.amazon.com/whitepapers/latest/kms-best-practices/aws-managed-and-customer-managed-cmks.html"
        ],
        "path": [
          "resource",
          "aws_ecr_repository[ecr_repo]",
          "encryption_configuration"
        ],
        "compliance": []
      }
    ]
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false,
        "autoApproveIgnores": false
      },
      "org": "mbisss2025",
      "orgPublicId": "32dffbe1-779c-4e43-91cc-5faf2c10977a",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "infra/terraform/modules/ecr/outputs.tf",
    "projectName": "govtool",
    "org": "mbisss2025",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/gitclone_terraform/govtool/infra/terraform/modules/ecr/outputs.tf",
    "packageManager": "terraformconfig",
    "path": "/home/mbissine/gitclone_terraform/govtool",
    "projectType": "terraformconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false,
        "autoApproveIgnores": false
      },
      "org": "mbisss2025",
      "orgPublicId": "32dffbe1-779c-4e43-91cc-5faf2c10977a",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "infra/terraform/modules/ecr/variables.tf",
    "projectName": "govtool",
    "org": "mbisss2025",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/gitclone_terraform/govtool/infra/terraform/modules/ecr/variables.tf",
    "packageManager": "terraformconfig",
    "path": "/home/mbissine/gitclone_terraform/govtool",
    "projectType": "terraformconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false,
        "autoApproveIgnores": false
      },
      "org": "mbisss2025",
      "orgPublicId": "32dffbe1-779c-4e43-91cc-5faf2c10977a",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "infra/terraform/modules/govtool-ec2/main.tf",
    "projectName": "govtool",
    "org": "mbisss2025",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/gitclone_terraform/govtool/infra/terraform/modules/govtool-ec2/main.tf",
    "packageManager": "terraformconfig",
    "path": "/home/mbissine/gitclone_terraform/govtool",
    "projectType": "terraformconfig",
    "ok": false,
    "infrastructureAsCodeIssues": [
      {
        "id": "SNYK-CC-AWS-426",
        "title": "EC2 API termination protection is not enabled",
        "severity": "low",
        "isIgnored": false,
        "subType": "EC2",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-AWS-426",
        "isGeneratedByCustomRule": false,
        "issue": "To prevent instance from being accidentally terminated using Amazon EC2, you can enable termination protection for the instance",
        "impact": "Without this setting enabled the instances can be terminated by accident. This setting should only be used for instances with high availability requirements. Enabling this may prevent IaC workflows from updating the instance, for example terraform will not be able to terminate the instance to update instance type",
        "resolve": "Set `disable_api_termination` attribute  with value `true`",
        "remediation": {
          "cloudformation": "Set `DisableApiTermination` attribute with value `true`",
          "terraform": "Set `disable_api_termination` attribute  with value `true`"
        },
        "lineNumber": 146,
        "iacDescription": {
          "issue": "To prevent instance from being accidentally terminated using Amazon EC2, you can enable termination protection for the instance",
          "impact": "Without this setting enabled the instances can be terminated by accident. This setting should only be used for instances with high availability requirements. Enabling this may prevent IaC workflows from updating the instance, for example terraform will not be able to terminate the instance to update instance type",
          "resolve": "Set `disable_api_termination` attribute  with value `true`"
        },
        "publicId": "SNYK-CC-AWS-426",
        "msg": "resource.aws_instance[govtool].disable_api_termination",
        "references": [
          "https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/terminating-instances.html#Using_ChangingDisableAPITermination"
        ],
        "path": [
          "resource",
          "aws_instance[govtool]",
          "disable_api_termination"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-TF-73",
        "title": "AWS Security Group allows open egress",
        "severity": "low",
        "isIgnored": false,
        "subType": "VPC",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-TF-73",
        "isGeneratedByCustomRule": false,
        "issue": "The inline security group rule allows open egress",
        "impact": "Open egress can be used to exfiltrate data to unauthorized destinations, and enable access to potentially malicious resources",
        "resolve": "Set `egress.cidr_blocks` attribute to specific ranges e.g. `192.168.1.0/24`",
        "remediation": {
          "cloudformation": "Set `Properties.SecurityGroupEgress.CidrIp` attribute to specific ranges e.g. `192.168.1.0/24`",
          "terraform": "Set `egress.cidr_blocks` attribute to specific ranges e.g. `192.168.1.0/24`"
        },
        "lineNumber": 64,
        "iacDescription": {
          "issue": "The inline security group rule allows open egress",
          "impact": "Open egress can be used to exfiltrate data to unauthorized destinations, and enable access to potentially malicious resources",
          "resolve": "Set `egress.cidr_blocks` attribute to specific ranges e.g. `192.168.1.0/24`"
        },
        "publicId": "SNYK-CC-TF-73",
        "msg": "resource.aws_security_group[out_sg].egress",
        "references": [
          "https://docs.aws.amazon.com/vpc/latest/userguide/VPC_SecurityGroups.html",
          "https://docs.aws.amazon.com/vpc/latest/userguide/vpc-security-best-practices.html"
        ],
        "path": [
          "resource",
          "aws_security_group[out_sg]",
          "egress"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-TF-1",
        "title": "Security Group allows open ingress",
        "severity": "medium",
        "isIgnored": false,
        "subType": "VPC",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-TF-1",
        "isGeneratedByCustomRule": false,
        "issue": "That inbound traffic is allowed to a resource from any source instead of a restricted range",
        "impact": "That potentially everyone can access your resource",
        "resolve": "Set `cidr_block` attribute with a more restrictive IP, for example `192.16.0.0/24`",
        "remediation": {
          "cloudformation": "Set `Properties.SecurityGroupIngress.CidrIp` attribute with a more restrictive IP, for example `192.16.0.0/24`",
          "terraform": "Set `cidr_block` attribute with a more restrictive IP, for example `192.16.0.0/24`"
        },
        "lineNumber": 118,
        "iacDescription": {
          "issue": "That inbound traffic is allowed to a resource from any source instead of a restricted range",
          "impact": "That potentially everyone can access your resource",
          "resolve": "Set `cidr_block` attribute with a more restrictive IP, for example `192.16.0.0/24`"
        },
        "publicId": "SNYK-CC-TF-1",
        "msg": "input.resource.aws_security_group[web_sg].ingress[0]",
        "references": [
          "https://docs.aws.amazon.com/vpc/latest/userguide/VPC_SecurityGroups.html"
        ],
        "path": [
          "input",
          "resource",
          "aws_security_group[web_sg]",
          "ingress[0]"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-TF-1",
        "title": "Security Group allows open ingress",
        "severity": "medium",
        "isIgnored": false,
        "subType": "VPC",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-TF-1",
        "isGeneratedByCustomRule": false,
        "issue": "That inbound traffic is allowed to a resource from any source instead of a restricted range",
        "impact": "That potentially everyone can access your resource",
        "resolve": "Set `cidr_block` attribute with a more restrictive IP, for example `192.16.0.0/24`",
        "remediation": {
          "cloudformation": "Set `Properties.SecurityGroupIngress.CidrIp` attribute with a more restrictive IP, for example `192.16.0.0/24`",
          "terraform": "Set `cidr_block` attribute with a more restrictive IP, for example `192.16.0.0/24`"
        },
        "lineNumber": 118,
        "iacDescription": {
          "issue": "That inbound traffic is allowed to a resource from any source instead of a restricted range",
          "impact": "That potentially everyone can access your resource",
          "resolve": "Set `cidr_block` attribute with a more restrictive IP, for example `192.16.0.0/24`"
        },
        "publicId": "SNYK-CC-TF-1",
        "msg": "input.resource.aws_security_group[web_sg].ingress[1]",
        "references": [
          "https://docs.aws.amazon.com/vpc/latest/userguide/VPC_SecurityGroups.html"
        ],
        "path": [
          "input",
          "resource",
          "aws_security_group[web_sg]",
          "ingress[1]"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-TF-130",
        "title": "EC2 instance accepts IMDSv1",
        "severity": "low",
        "isIgnored": false,
        "subType": "EC2",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-TF-130",
        "isGeneratedByCustomRule": false,
        "issue": "Instance Metadata Service v2 is not enforced",
        "impact": "Metadata service may be vulnerable to reverse proxy/open firewall misconfigurations and server side request forgery attacks",
        "resolve": "Set `metadata_options.http_tokens` attribute to `required`",
        "remediation": {
          "cloudformation": "Set `MetadataOptions.HttpTokens` attribute to `required` in `AWS::EC2::LaunchTemplate`",
          "terraform": "Set `metadata_options.http_tokens` attribute to `required`"
        },
        "lineNumber": 146,
        "iacDescription": {
          "issue": "Instance Metadata Service v2 is not enforced",
          "impact": "Metadata service may be vulnerable to reverse proxy/open firewall misconfigurations and server side request forgery attacks",
          "resolve": "Set `metadata_options.http_tokens` attribute to `required`"
        },
        "publicId": "SNYK-CC-TF-130",
        "msg": "resource.aws_instance[govtool].metadata_options",
        "references": [
          "https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/configuring-instance-metadata-service.html",
          "https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html",
          "https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instancedata-data-retrieval.html",
          "https://aws.amazon.com/blogs/security/defense-in-depth-open-firewalls-reverse-proxies-ssrf-vulnerabilities-ec2-instance-metadata-service/"
        ],
        "path": [
          "resource",
          "aws_instance[govtool]",
          "metadata_options"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-TF-1",
        "title": "Security Group allows open ingress",
        "severity": "medium",
        "isIgnored": false,
        "subType": "VPC",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-TF-1",
        "isGeneratedByCustomRule": false,
        "issue": "That inbound traffic is allowed to a resource from any source instead of a restricted range",
        "impact": "That potentially everyone can access your resource",
        "resolve": "Set `cidr_block` attribute with a more restrictive IP, for example `192.16.0.0/24`",
        "remediation": {
          "cloudformation": "Set `Properties.SecurityGroupIngress.CidrIp` attribute with a more restrictive IP, for example `192.16.0.0/24`",
          "terraform": "Set `cidr_block` attribute with a more restrictive IP, for example `192.16.0.0/24`"
        },
        "lineNumber": 80,
        "iacDescription": {
          "issue": "That inbound traffic is allowed to a resource from any source instead of a restricted range",
          "impact": "That potentially everyone can access your resource",
          "resolve": "Set `cidr_block` attribute with a more restrictive IP, for example `192.16.0.0/24`"
        },
        "publicId": "SNYK-CC-TF-1",
        "msg": "input.resource.aws_security_group[ssh_sg].ingress[2]",
        "references": [
          "https://docs.aws.amazon.com/vpc/latest/userguide/VPC_SecurityGroups.html"
        ],
        "path": [
          "input",
          "resource",
          "aws_security_group[ssh_sg]",
          "ingress[2]"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-TF-53",
        "title": "Non-Encrypted root block device",
        "severity": "medium",
        "isIgnored": false,
        "subType": "EC2",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-TF-53",
        "isGeneratedByCustomRule": false,
        "issue": "The root block device for ec2 instance is not encrypted",
        "impact": "That should someone gain unauthorized access to the data they would be able to read the contents.",
        "resolve": "Set `root_block_device.encrypted` attribute to `true`",
        "remediation": {
          "cloudformation": "Set `BlockDeviceMappings.Encrypted` attribute of root device to `true`",
          "terraform": "Set `root_block_device.encrypted` attribute to `true`"
        },
        "lineNumber": 150,
        "iacDescription": {
          "issue": "The root block device for ec2 instance is not encrypted",
          "impact": "That should someone gain unauthorized access to the data they would be able to read the contents.",
          "resolve": "Set `root_block_device.encrypted` attribute to `true`"
        },
        "publicId": "SNYK-CC-TF-53",
        "msg": "resource.aws_instance[govtool].root_block_device.encrypted",
        "references": [
          "https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/RootDeviceStorage.html",
          "https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html",
          "https://aws.amazon.com/premiumsupport/knowledge-center/cloudformation-root-volume-property/",
          "https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/device_naming.html"
        ],
        "path": [
          "resource",
          "aws_instance[govtool]",
          "root_block_device",
          "encrypted"
        ],
        "compliance": []
      }
    ]
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false,
        "autoApproveIgnores": false
      },
      "org": "mbisss2025",
      "orgPublicId": "32dffbe1-779c-4e43-91cc-5faf2c10977a",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "infra/terraform/modules/govtool-ec2/outputs.tf",
    "projectName": "govtool",
    "org": "mbisss2025",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/gitclone_terraform/govtool/infra/terraform/modules/govtool-ec2/outputs.tf",
    "packageManager": "terraformconfig",
    "path": "/home/mbissine/gitclone_terraform/govtool",
    "projectType": "terraformconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false,
        "autoApproveIgnores": false
      },
      "org": "mbisss2025",
      "orgPublicId": "32dffbe1-779c-4e43-91cc-5faf2c10977a",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "infra/terraform/modules/govtool-ec2/variables.tf",
    "projectName": "govtool",
    "org": "mbisss2025",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/gitclone_terraform/govtool/infra/terraform/modules/govtool-ec2/variables.tf",
    "packageManager": "terraformconfig",
    "path": "/home/mbissine/gitclone_terraform/govtool",
    "projectType": "terraformconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false,
        "autoApproveIgnores": false
      },
      "org": "mbisss2025",
      "orgPublicId": "32dffbe1-779c-4e43-91cc-5faf2c10977a",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "infra/terraform/modules/govtool-ec2/vva_to_govtool_migration_20240212.tf",
    "projectName": "govtool",
    "org": "mbisss2025",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/gitclone_terraform/govtool/infra/terraform/modules/govtool-ec2/vva_to_govtool_migration_20240212.tf",
    "packageManager": "terraformconfig",
    "path": "/home/mbissine/gitclone_terraform/govtool",
    "projectType": "terraformconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  }
]