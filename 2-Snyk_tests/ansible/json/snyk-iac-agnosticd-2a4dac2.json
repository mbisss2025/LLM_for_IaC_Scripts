[
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/configs/aro/files/oauth-htpasswd.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/configs/aro/files/oauth-htpasswd.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/configs/hands-on-with-openshift-virtualization/files/1_local_storage_operator.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/configs/hands-on-with-openshift-virtualization/files/1_local_storage_operator.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/configs/hands-on-with-openshift-virtualization/files/2_logical_volume.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/configs/hands-on-with-openshift-virtualization/files/2_logical_volume.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/configs/hands-on-with-openshift-virtualization/files/3_ocs_operator.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/configs/hands-on-with-openshift-virtualization/files/3_ocs_operator.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/configs/hands-on-with-openshift-virtualization/files/4_ocs_cluster.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/configs/hands-on-with-openshift-virtualization/files/4_ocs_cluster.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/configs/hands-on-with-openshift-virtualization/files/htpasswd.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/configs/hands-on-with-openshift-virtualization/files/htpasswd.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/configs/kni-osp/files/cluster-service-metal.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/configs/kni-osp/files/cluster-service-metal.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/configs/kni-osp/files/metal3-config.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/configs/kni-osp/files/metal3-config.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/configs/migrating-to-ocpvirt/files/htpasswd.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/configs/migrating-to-ocpvirt/files/htpasswd.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/configs/ocp-gpu-single-node/files/project-template.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/configs/ocp-gpu-single-node/files/project-template.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/configs/ocp4-cluster/files/kubelet-bootstrap-cred-manager-ds.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/configs/ocp4-cluster/files/kubelet-bootstrap-cred-manager-ds.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": false,
    "infrastructureAsCodeIssues": [
      {
        "id": "SNYK-CC-K8S-9",
        "title": "Container is running without privilege escalation control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-9",
        "isGeneratedByCustomRule": false,
        "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
        "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
          "terraform": "Set `spec.container.security_context.allow_privilege_escalation` to `false`"
        },
        "lineNumber": 72,
        "iacDescription": {
          "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
          "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`"
        },
        "publicId": "SNYK-CC-K8S-9",
        "msg": "spec.template.spec.containers[kubelet-bootstrap-cred-manager].securityContext.allowPrivilegeEscalation",
        "references": [
          "https://www.kernel.org/doc/html/latest/userspace-api/no_new_privs.html"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "containers[kubelet-bootstrap-cred-manager]",
          "securityContext",
          "allowPrivilegeEscalation"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-4",
        "title": "Container is running without memory limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-4",
        "isGeneratedByCustomRule": false,
        "issue": "Memory limit is not defined",
        "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
        "resolve": "Set `resources.limits.memory` value",
        "remediation": {
          "kubernetes": "Set `resources.limits.memory` value",
          "terraform": "Set `resources.limits.memory` value"
        },
        "lineNumber": 20,
        "iacDescription": {
          "issue": "Memory limit is not defined",
          "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
          "resolve": "Set `resources.limits.memory` value"
        },
        "publicId": "SNYK-CC-K8S-4",
        "msg": "input.spec.template.spec.containers[kubelet-bootstrap-cred-manager].resources.limits.memory",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/memory-default-namespace/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[kubelet-bootstrap-cred-manager]",
          "resources",
          "limits",
          "memory"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-10",
        "title": "Container or Pod is running without root user control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-10",
        "isGeneratedByCustomRule": false,
        "issue": "Container or Pod is running without root user control",
        "impact": "Container or Pod could be running with full administrative privileges",
        "resolve": "Set `securityContext.runAsNonRoot` to `true`",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsNonRoot` to `true`",
          "terraform": "Set `security_context.run_as_non_root` to `true`"
        },
        "lineNumber": 72,
        "iacDescription": {
          "issue": "Container or Pod is running without root user control",
          "impact": "Container or Pod could be running with full administrative privileges",
          "resolve": "Set `securityContext.runAsNonRoot` to `true`"
        },
        "publicId": "SNYK-CC-K8S-10",
        "msg": "input.spec.template.spec.containers[kubelet-bootstrap-cred-manager].securityContext.runAsNonRoot",
        "description": "",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[kubelet-bootstrap-cred-manager]",
          "securityContext",
          "runAsNonRoot"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-8",
        "title": "Container is running with writable root filesystem",
        "severity": "low",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-8",
        "isGeneratedByCustomRule": false,
        "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
        "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
          "terraform": "Set `security_context.read_only_root_filesystem` to `true`"
        },
        "lineNumber": 72,
        "iacDescription": {
          "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
          "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`"
        },
        "publicId": "SNYK-CC-K8S-8",
        "msg": "spec.template.spec.containers[kubelet-bootstrap-cred-manager].securityContext.readOnlyRootFilesystem",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "containers[kubelet-bootstrap-cred-manager]",
          "securityContext",
          "readOnlyRootFilesystem"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-37",
        "title": "Container is running with host path mount",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-37",
        "isGeneratedByCustomRule": false,
        "issue": "Host path has been mounted inside the pod",
        "impact": "Increases the attack surface, and can lead to privilege escalation",
        "resolve": "Remove `hostPath` volume mount",
        "remediation": {
          "kubernetes": "Remove `hostPath` volume mount",
          "terraform": "Remove `host_path` from `spec.volume` property"
        },
        "lineNumber": 97,
        "iacDescription": {
          "issue": "Host path has been mounted inside the pod",
          "impact": "Increases the attack surface, and can lead to privilege escalation",
          "resolve": "Remove `hostPath` volume mount"
        },
        "publicId": "SNYK-CC-K8S-37",
        "msg": "spec.template.spec.volumes[kubelet-dir].hostPath",
        "references": [
          "https://kubernetes.io/docs/concepts/storage/volumes/#hostpath"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "volumes[kubelet-dir]",
          "hostPath"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-5",
        "title": "Container has no CPU limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-5",
        "isGeneratedByCustomRule": false,
        "issue": "Container has no CPU limit",
        "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
        "resolve": "Add `resources.limits.cpu` field with required CPU limit value",
        "remediation": {
          "kubernetes": "Add `resources.limits.cpu` field with required CPU limit value",
          "terraform": "Add `spec.container.resources.limits.cpu` field with required CPU limit value"
        },
        "lineNumber": 20,
        "iacDescription": {
          "issue": "Container has no CPU limit",
          "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
          "resolve": "Add `resources.limits.cpu` field with required CPU limit value"
        },
        "publicId": "SNYK-CC-K8S-5",
        "msg": "input.spec.template.spec.containers[kubelet-bootstrap-cred-manager].resources.limits.cpu",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-cpu-resource/",
          "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/cpu-default-namespace/",
          "https://github.com/kubernetes/design-proposals-archive/blob/8da1442ea29adccea40693357d04727127e045ed/node/resource-qos.md#compressible-resource-guaranteess"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[kubelet-bootstrap-cred-manager]",
          "resources",
          "limits",
          "cpu"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-1",
        "title": "Privileged container",
        "severity": "high",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-1",
        "isGeneratedByCustomRule": false,
        "issue": "Container is running in privileged mode",
        "impact": "Compromised container could potentially modify the underlying host\u2019s kernel by loading unauthorized modules (i.e. drivers).",
        "resolve": "Remove `securityContext.privileged` attribute, or set value to `false`",
        "remediation": {
          "kubernetes": "Remove `securityContext.privileged` attribute, or set value to `false`",
          "terraform": "Remove `security_context.privileged` attribute, or set value to `false`"
        },
        "lineNumber": 73,
        "iacDescription": {
          "issue": "Container is running in privileged mode",
          "impact": "Compromised container could potentially modify the underlying host\u2019s kernel by loading unauthorized modules (i.e. drivers).",
          "resolve": "Remove `securityContext.privileged` attribute, or set value to `false`"
        },
        "publicId": "SNYK-CC-K8S-1",
        "msg": "input.spec.template.spec.containers[kubelet-bootstrap-cred-manager].securityContext.privileged",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[kubelet-bootstrap-cred-manager]",
          "securityContext",
          "privileged"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-11",
        "title": "Container's or Pod's  UID could clash with host's UID",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-11",
        "isGeneratedByCustomRule": false,
        "issue": "`runAsUser` value is set to low UID",
        "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
        "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
          "terraform": "Set `security_context.run_as_user` value to greater or equal than 10'000"
        },
        "lineNumber": 74,
        "iacDescription": {
          "issue": "`runAsUser` value is set to low UID",
          "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
          "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence"
        },
        "publicId": "SNYK-CC-K8S-11",
        "msg": "input.spec.template.spec.containers[kubelet-bootstrap-cred-manager].securityContext.runAsUser",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container",
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod",
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[kubelet-bootstrap-cred-manager]",
          "securityContext",
          "runAsUser"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-6",
        "title": "Container does not drop all default capabilities",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-6",
        "isGeneratedByCustomRule": false,
        "issue": "All default capabilities are not explicitly dropped",
        "impact": "Containers are running with potentially unnecessary privileges",
        "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
        "remediation": {
          "kubernetes": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
          "terraform": "Add `ALL` to `spec.container.security_context.capabilities.drop` list, and add only required capabilities to `spec.container.security_context.capabilities.add`, ensuring it also does not contain `ALL`"
        },
        "lineNumber": 72,
        "iacDescription": {
          "issue": "All default capabilities are not explicitly dropped",
          "impact": "Containers are running with potentially unnecessary privileges",
          "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`"
        },
        "publicId": "SNYK-CC-K8S-6",
        "msg": "input.spec.template.spec.containers[kubelet-bootstrap-cred-manager].securityContext.capabilities.drop",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
          "https://linux-audit.com/linux-capabilities-hardening-linux-binaries-by-removing-setuid/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[kubelet-bootstrap-cred-manager]",
          "securityContext",
          "capabilities",
          "drop"
        ],
        "compliance": []
      }
    ]
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/configs/ocp4-cluster/files/pvc-registry.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/configs/ocp4-cluster/files/pvc-registry.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/configs/ocp4-disconnected-osp-lab/files/99-scsi-device-detection-machineconfig.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/configs/ocp4-disconnected-osp-lab/files/99-scsi-device-detection-machineconfig.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/configs/ocp4-disconnected-osp-lab/files/pvc-registry.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/configs/ocp4-disconnected-osp-lab/files/pvc-registry.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/configs/ocp4-ha-lab/files/aws_upi_bootstrap_template.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/configs/ocp4-ha-lab/files/aws_upi_bootstrap_template.yaml",
    "packageManager": "cloudformationconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "cloudformationconfig",
    "ok": false,
    "infrastructureAsCodeIssues": [
      {
        "id": "SNYK-CC-AWS-426",
        "title": "EC2 API termination protection is not enabled",
        "severity": "low",
        "isIgnored": false,
        "subType": "EC2",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-AWS-426",
        "isGeneratedByCustomRule": false,
        "issue": "To prevent instance from being accidentally terminated using Amazon EC2, you can enable termination protection for the instance",
        "impact": "Without this setting enabled the instances can be terminated by accident. This setting should only be used for instances with high availability requirements. Enabling this may prevent IaC workflows from updating the instance, for example terraform will not be able to terminate the instance to update instance type",
        "resolve": "Set `DisableApiTermination` attribute with value `true`",
        "remediation": {
          "cloudformation": "Set `DisableApiTermination` attribute with value `true`",
          "terraform": "Set `disable_api_termination` attribute  with value `true`"
        },
        "lineNumber": -1,
        "iacDescription": {
          "issue": "To prevent instance from being accidentally terminated using Amazon EC2, you can enable termination protection for the instance",
          "impact": "Without this setting enabled the instances can be terminated by accident. This setting should only be used for instances with high availability requirements. Enabling this may prevent IaC workflows from updating the instance, for example terraform will not be able to terminate the instance to update instance type",
          "resolve": "Set `DisableApiTermination` attribute with value `true`"
        },
        "publicId": "SNYK-CC-AWS-426",
        "msg": "Resources[BootstrapInstance].Properties.DisableApiTermination",
        "references": [
          "https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/terminating-instances.html#Using_ChangingDisableAPITermination"
        ],
        "path": [
          "[DocId: 0]",
          "Resources[BootstrapInstance]",
          "Properties",
          "DisableApiTermination"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-TF-130",
        "title": "EC2 instance accepts IMDSv1",
        "severity": "low",
        "isIgnored": false,
        "subType": "EC2",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-TF-130",
        "isGeneratedByCustomRule": false,
        "issue": "Instance Metadata Service v2 is not enforced",
        "impact": "Metadata service may be vulnerable to reverse proxy/open firewall misconfigurations and server side request forgery attacks",
        "resolve": "Set `MetadataOptions.HttpTokens` attribute to `required` in `AWS::EC2::LaunchTemplate`",
        "remediation": {
          "cloudformation": "Set `MetadataOptions.HttpTokens` attribute to `required` in `AWS::EC2::LaunchTemplate`",
          "terraform": "Set `metadata_options.http_tokens` attribute to `required`"
        },
        "lineNumber": -1,
        "iacDescription": {
          "issue": "Instance Metadata Service v2 is not enforced",
          "impact": "Metadata service may be vulnerable to reverse proxy/open firewall misconfigurations and server side request forgery attacks",
          "resolve": "Set `MetadataOptions.HttpTokens` attribute to `required` in `AWS::EC2::LaunchTemplate`"
        },
        "publicId": "SNYK-CC-TF-130",
        "msg": "Resources[BootstrapInstance].MetadataOptions.HttpTokens",
        "references": [
          "https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/configuring-instance-metadata-service.html",
          "https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html",
          "https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instancedata-data-retrieval.html",
          "https://aws.amazon.com/blogs/security/defense-in-depth-open-firewalls-reverse-proxies-ssrf-vulnerabilities-ec2-instance-metadata-service/"
        ],
        "path": [
          "[DocId: 0]",
          "Resources[BootstrapInstance]",
          "MetadataOptions",
          "HttpTokens"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-TF-53",
        "title": "Non-Encrypted root block device",
        "severity": "medium",
        "isIgnored": false,
        "subType": "EC2",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-TF-53",
        "isGeneratedByCustomRule": false,
        "issue": "The root block device for ec2 instance is not encrypted",
        "impact": "That should someone gain unauthorized access to the data they would be able to read the contents.",
        "resolve": "Set `BlockDeviceMappings.Encrypted` attribute of root device to `true`",
        "remediation": {
          "cloudformation": "Set `BlockDeviceMappings.Encrypted` attribute of root device to `true`",
          "terraform": "Set `root_block_device.encrypted` attribute to `true`"
        },
        "lineNumber": 158,
        "iacDescription": {
          "issue": "The root block device for ec2 instance is not encrypted",
          "impact": "That should someone gain unauthorized access to the data they would be able to read the contents.",
          "resolve": "Set `BlockDeviceMappings.Encrypted` attribute of root device to `true`"
        },
        "publicId": "SNYK-CC-TF-53",
        "msg": "Resources.BootstrapInstance.Properties.BlockDeviceMappings",
        "references": [
          "https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/RootDeviceStorage.html",
          "https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html",
          "https://aws.amazon.com/premiumsupport/knowledge-center/cloudformation-root-volume-property/",
          "https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/device_naming.html"
        ],
        "path": [
          "[DocId: 0]",
          "Resources",
          "BootstrapInstance",
          "Properties",
          "BlockDeviceMappings"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-TF-1",
        "title": "Security Group allows open ingress",
        "severity": "medium",
        "isIgnored": false,
        "subType": "VPC",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-TF-1",
        "isGeneratedByCustomRule": false,
        "issue": "That inbound traffic is allowed to a resource from any source instead of a restricted range",
        "impact": "That potentially everyone can access your resource",
        "resolve": "Set `Properties.SecurityGroupIngress.CidrIp` attribute with a more restrictive IP, for example `192.16.0.0/24`",
        "remediation": {
          "cloudformation": "Set `Properties.SecurityGroupIngress.CidrIp` attribute with a more restrictive IP, for example `192.16.0.0/24`",
          "terraform": "Set `cidr_block` attribute with a more restrictive IP, for example `192.16.0.0/24`"
        },
        "lineNumber": 150,
        "iacDescription": {
          "issue": "That inbound traffic is allowed to a resource from any source instead of a restricted range",
          "impact": "That potentially everyone can access your resource",
          "resolve": "Set `Properties.SecurityGroupIngress.CidrIp` attribute with a more restrictive IP, for example `192.16.0.0/24`"
        },
        "publicId": "SNYK-CC-TF-1",
        "msg": "Resources.BootstrapSecurityGroup.Properties.SecurityGroupIngress[1]",
        "references": [
          "https://docs.aws.amazon.com/vpc/latest/userguide/VPC_SecurityGroups.html"
        ],
        "path": [
          "[DocId: 0]",
          "Resources",
          "BootstrapSecurityGroup",
          "Properties",
          "SecurityGroupIngress[1]"
        ],
        "compliance": []
      }
    ]
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/configs/ocp4-ha-lab/files/aws_upi_control_plane_template.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/configs/ocp4-ha-lab/files/aws_upi_control_plane_template.yaml",
    "packageManager": "cloudformationconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "cloudformationconfig",
    "ok": false,
    "infrastructureAsCodeIssues": [
      {
        "id": "SNYK-CC-AWS-426",
        "title": "EC2 API termination protection is not enabled",
        "severity": "low",
        "isIgnored": false,
        "subType": "EC2",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-AWS-426",
        "isGeneratedByCustomRule": false,
        "issue": "To prevent instance from being accidentally terminated using Amazon EC2, you can enable termination protection for the instance",
        "impact": "Without this setting enabled the instances can be terminated by accident. This setting should only be used for instances with high availability requirements. Enabling this may prevent IaC workflows from updating the instance, for example terraform will not be able to terminate the instance to update instance type",
        "resolve": "Set `DisableApiTermination` attribute with value `true`",
        "remediation": {
          "cloudformation": "Set `DisableApiTermination` attribute with value `true`",
          "terraform": "Set `disable_api_termination` attribute  with value `true`"
        },
        "lineNumber": -1,
        "iacDescription": {
          "issue": "To prevent instance from being accidentally terminated using Amazon EC2, you can enable termination protection for the instance",
          "impact": "Without this setting enabled the instances can be terminated by accident. This setting should only be used for instances with high availability requirements. Enabling this may prevent IaC workflows from updating the instance, for example terraform will not be able to terminate the instance to update instance type",
          "resolve": "Set `DisableApiTermination` attribute with value `true`"
        },
        "publicId": "SNYK-CC-AWS-426",
        "msg": "Resources[Master1].Properties.DisableApiTermination",
        "references": [
          "https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/terminating-instances.html#Using_ChangingDisableAPITermination"
        ],
        "path": [
          "[DocId: 0]",
          "Resources[Master1]",
          "Properties",
          "DisableApiTermination"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-TF-53",
        "title": "Non-Encrypted root block device",
        "severity": "medium",
        "isIgnored": false,
        "subType": "EC2",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-TF-53",
        "isGeneratedByCustomRule": false,
        "issue": "The root block device for ec2 instance is not encrypted",
        "impact": "That should someone gain unauthorized access to the data they would be able to read the contents.",
        "resolve": "Set `BlockDeviceMappings.Encrypted` attribute of root device to `true`",
        "remediation": {
          "cloudformation": "Set `BlockDeviceMappings.Encrypted` attribute of root device to `true`",
          "terraform": "Set `root_block_device.encrypted` attribute to `true`"
        },
        "lineNumber": -1,
        "iacDescription": {
          "issue": "The root block device for ec2 instance is not encrypted",
          "impact": "That should someone gain unauthorized access to the data they would be able to read the contents.",
          "resolve": "Set `BlockDeviceMappings.Encrypted` attribute of root device to `true`"
        },
        "publicId": "SNYK-CC-TF-53",
        "msg": "Resources.Master2.Properties.BlockDeviceMappings",
        "references": [
          "https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/RootDeviceStorage.html",
          "https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html",
          "https://aws.amazon.com/premiumsupport/knowledge-center/cloudformation-root-volume-property/",
          "https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/device_naming.html"
        ],
        "path": [
          "[DocId: 0]",
          "Resources",
          "Master2",
          "Properties",
          "BlockDeviceMappings"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-TF-53",
        "title": "Non-Encrypted root block device",
        "severity": "medium",
        "isIgnored": false,
        "subType": "EC2",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-TF-53",
        "isGeneratedByCustomRule": false,
        "issue": "The root block device for ec2 instance is not encrypted",
        "impact": "That should someone gain unauthorized access to the data they would be able to read the contents.",
        "resolve": "Set `BlockDeviceMappings.Encrypted` attribute of root device to `true`",
        "remediation": {
          "cloudformation": "Set `BlockDeviceMappings.Encrypted` attribute of root device to `true`",
          "terraform": "Set `root_block_device.encrypted` attribute to `true`"
        },
        "lineNumber": -1,
        "iacDescription": {
          "issue": "The root block device for ec2 instance is not encrypted",
          "impact": "That should someone gain unauthorized access to the data they would be able to read the contents.",
          "resolve": "Set `BlockDeviceMappings.Encrypted` attribute of root device to `true`"
        },
        "publicId": "SNYK-CC-TF-53",
        "msg": "Resources.Master1.Properties.BlockDeviceMappings",
        "references": [
          "https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/RootDeviceStorage.html",
          "https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html",
          "https://aws.amazon.com/premiumsupport/knowledge-center/cloudformation-root-volume-property/",
          "https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/device_naming.html"
        ],
        "path": [
          "[DocId: 0]",
          "Resources",
          "Master1",
          "Properties",
          "BlockDeviceMappings"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-TF-130",
        "title": "EC2 instance accepts IMDSv1",
        "severity": "low",
        "isIgnored": false,
        "subType": "EC2",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-TF-130",
        "isGeneratedByCustomRule": false,
        "issue": "Instance Metadata Service v2 is not enforced",
        "impact": "Metadata service may be vulnerable to reverse proxy/open firewall misconfigurations and server side request forgery attacks",
        "resolve": "Set `MetadataOptions.HttpTokens` attribute to `required` in `AWS::EC2::LaunchTemplate`",
        "remediation": {
          "cloudformation": "Set `MetadataOptions.HttpTokens` attribute to `required` in `AWS::EC2::LaunchTemplate`",
          "terraform": "Set `metadata_options.http_tokens` attribute to `required`"
        },
        "lineNumber": -1,
        "iacDescription": {
          "issue": "Instance Metadata Service v2 is not enforced",
          "impact": "Metadata service may be vulnerable to reverse proxy/open firewall misconfigurations and server side request forgery attacks",
          "resolve": "Set `MetadataOptions.HttpTokens` attribute to `required` in `AWS::EC2::LaunchTemplate`"
        },
        "publicId": "SNYK-CC-TF-130",
        "msg": "Resources[Master2].MetadataOptions.HttpTokens",
        "references": [
          "https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/configuring-instance-metadata-service.html",
          "https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html",
          "https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instancedata-data-retrieval.html",
          "https://aws.amazon.com/blogs/security/defense-in-depth-open-firewalls-reverse-proxies-ssrf-vulnerabilities-ec2-instance-metadata-service/"
        ],
        "path": [
          "[DocId: 0]",
          "Resources[Master2]",
          "MetadataOptions",
          "HttpTokens"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-TF-130",
        "title": "EC2 instance accepts IMDSv1",
        "severity": "low",
        "isIgnored": false,
        "subType": "EC2",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-TF-130",
        "isGeneratedByCustomRule": false,
        "issue": "Instance Metadata Service v2 is not enforced",
        "impact": "Metadata service may be vulnerable to reverse proxy/open firewall misconfigurations and server side request forgery attacks",
        "resolve": "Set `MetadataOptions.HttpTokens` attribute to `required` in `AWS::EC2::LaunchTemplate`",
        "remediation": {
          "cloudformation": "Set `MetadataOptions.HttpTokens` attribute to `required` in `AWS::EC2::LaunchTemplate`",
          "terraform": "Set `metadata_options.http_tokens` attribute to `required`"
        },
        "lineNumber": -1,
        "iacDescription": {
          "issue": "Instance Metadata Service v2 is not enforced",
          "impact": "Metadata service may be vulnerable to reverse proxy/open firewall misconfigurations and server side request forgery attacks",
          "resolve": "Set `MetadataOptions.HttpTokens` attribute to `required` in `AWS::EC2::LaunchTemplate`"
        },
        "publicId": "SNYK-CC-TF-130",
        "msg": "Resources[Master0].MetadataOptions.HttpTokens",
        "references": [
          "https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/configuring-instance-metadata-service.html",
          "https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html",
          "https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instancedata-data-retrieval.html",
          "https://aws.amazon.com/blogs/security/defense-in-depth-open-firewalls-reverse-proxies-ssrf-vulnerabilities-ec2-instance-metadata-service/"
        ],
        "path": [
          "[DocId: 0]",
          "Resources[Master0]",
          "MetadataOptions",
          "HttpTokens"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-TF-53",
        "title": "Non-Encrypted root block device",
        "severity": "medium",
        "isIgnored": false,
        "subType": "EC2",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-TF-53",
        "isGeneratedByCustomRule": false,
        "issue": "The root block device for ec2 instance is not encrypted",
        "impact": "That should someone gain unauthorized access to the data they would be able to read the contents.",
        "resolve": "Set `BlockDeviceMappings.Encrypted` attribute of root device to `true`",
        "remediation": {
          "cloudformation": "Set `BlockDeviceMappings.Encrypted` attribute of root device to `true`",
          "terraform": "Set `root_block_device.encrypted` attribute to `true`"
        },
        "lineNumber": -1,
        "iacDescription": {
          "issue": "The root block device for ec2 instance is not encrypted",
          "impact": "That should someone gain unauthorized access to the data they would be able to read the contents.",
          "resolve": "Set `BlockDeviceMappings.Encrypted` attribute of root device to `true`"
        },
        "publicId": "SNYK-CC-TF-53",
        "msg": "Resources.Master0.Properties.BlockDeviceMappings",
        "references": [
          "https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/RootDeviceStorage.html",
          "https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html",
          "https://aws.amazon.com/premiumsupport/knowledge-center/cloudformation-root-volume-property/",
          "https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/device_naming.html"
        ],
        "path": [
          "[DocId: 0]",
          "Resources",
          "Master0",
          "Properties",
          "BlockDeviceMappings"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-AWS-426",
        "title": "EC2 API termination protection is not enabled",
        "severity": "low",
        "isIgnored": false,
        "subType": "EC2",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-AWS-426",
        "isGeneratedByCustomRule": false,
        "issue": "To prevent instance from being accidentally terminated using Amazon EC2, you can enable termination protection for the instance",
        "impact": "Without this setting enabled the instances can be terminated by accident. This setting should only be used for instances with high availability requirements. Enabling this may prevent IaC workflows from updating the instance, for example terraform will not be able to terminate the instance to update instance type",
        "resolve": "Set `DisableApiTermination` attribute with value `true`",
        "remediation": {
          "cloudformation": "Set `DisableApiTermination` attribute with value `true`",
          "terraform": "Set `disable_api_termination` attribute  with value `true`"
        },
        "lineNumber": -1,
        "iacDescription": {
          "issue": "To prevent instance from being accidentally terminated using Amazon EC2, you can enable termination protection for the instance",
          "impact": "Without this setting enabled the instances can be terminated by accident. This setting should only be used for instances with high availability requirements. Enabling this may prevent IaC workflows from updating the instance, for example terraform will not be able to terminate the instance to update instance type",
          "resolve": "Set `DisableApiTermination` attribute with value `true`"
        },
        "publicId": "SNYK-CC-AWS-426",
        "msg": "Resources[Master2].Properties.DisableApiTermination",
        "references": [
          "https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/terminating-instances.html#Using_ChangingDisableAPITermination"
        ],
        "path": [
          "[DocId: 0]",
          "Resources[Master2]",
          "Properties",
          "DisableApiTermination"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-TF-130",
        "title": "EC2 instance accepts IMDSv1",
        "severity": "low",
        "isIgnored": false,
        "subType": "EC2",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-TF-130",
        "isGeneratedByCustomRule": false,
        "issue": "Instance Metadata Service v2 is not enforced",
        "impact": "Metadata service may be vulnerable to reverse proxy/open firewall misconfigurations and server side request forgery attacks",
        "resolve": "Set `MetadataOptions.HttpTokens` attribute to `required` in `AWS::EC2::LaunchTemplate`",
        "remediation": {
          "cloudformation": "Set `MetadataOptions.HttpTokens` attribute to `required` in `AWS::EC2::LaunchTemplate`",
          "terraform": "Set `metadata_options.http_tokens` attribute to `required`"
        },
        "lineNumber": -1,
        "iacDescription": {
          "issue": "Instance Metadata Service v2 is not enforced",
          "impact": "Metadata service may be vulnerable to reverse proxy/open firewall misconfigurations and server side request forgery attacks",
          "resolve": "Set `MetadataOptions.HttpTokens` attribute to `required` in `AWS::EC2::LaunchTemplate`"
        },
        "publicId": "SNYK-CC-TF-130",
        "msg": "Resources[Master1].MetadataOptions.HttpTokens",
        "references": [
          "https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/configuring-instance-metadata-service.html",
          "https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html",
          "https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instancedata-data-retrieval.html",
          "https://aws.amazon.com/blogs/security/defense-in-depth-open-firewalls-reverse-proxies-ssrf-vulnerabilities-ec2-instance-metadata-service/"
        ],
        "path": [
          "[DocId: 0]",
          "Resources[Master1]",
          "MetadataOptions",
          "HttpTokens"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-AWS-426",
        "title": "EC2 API termination protection is not enabled",
        "severity": "low",
        "isIgnored": false,
        "subType": "EC2",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-AWS-426",
        "isGeneratedByCustomRule": false,
        "issue": "To prevent instance from being accidentally terminated using Amazon EC2, you can enable termination protection for the instance",
        "impact": "Without this setting enabled the instances can be terminated by accident. This setting should only be used for instances with high availability requirements. Enabling this may prevent IaC workflows from updating the instance, for example terraform will not be able to terminate the instance to update instance type",
        "resolve": "Set `DisableApiTermination` attribute with value `true`",
        "remediation": {
          "cloudformation": "Set `DisableApiTermination` attribute with value `true`",
          "terraform": "Set `disable_api_termination` attribute  with value `true`"
        },
        "lineNumber": -1,
        "iacDescription": {
          "issue": "To prevent instance from being accidentally terminated using Amazon EC2, you can enable termination protection for the instance",
          "impact": "Without this setting enabled the instances can be terminated by accident. This setting should only be used for instances with high availability requirements. Enabling this may prevent IaC workflows from updating the instance, for example terraform will not be able to terminate the instance to update instance type",
          "resolve": "Set `DisableApiTermination` attribute with value `true`"
        },
        "publicId": "SNYK-CC-AWS-426",
        "msg": "Resources[Master0].Properties.DisableApiTermination",
        "references": [
          "https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/terminating-instances.html#Using_ChangingDisableAPITermination"
        ],
        "path": [
          "[DocId: 0]",
          "Resources[Master0]",
          "Properties",
          "DisableApiTermination"
        ],
        "compliance": []
      }
    ]
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/configs/ocp4-ha-lab/files/aws_upi_route53_template.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/configs/ocp4-ha-lab/files/aws_upi_route53_template.yaml",
    "packageManager": "cloudformationconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "cloudformationconfig",
    "ok": false,
    "infrastructureAsCodeIssues": [
      {
        "id": "SNYK-CC-TF-133",
        "title": "X-ray tracing is disabled for Lambda function",
        "severity": "low",
        "isIgnored": false,
        "subType": "Lambda",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-TF-133",
        "isGeneratedByCustomRule": false,
        "issue": "Amazon X-Ray tracing is not enabled for Lambda function",
        "impact": "Trace logs will not be available during investigation",
        "resolve": "Set `Properties.TracingConfig.Mode` attribute to `Active` or `PassThrough`",
        "remediation": {
          "cloudformation": "Set `Properties.TracingConfig.Mode` attribute to `Active` or `PassThrough`",
          "terraform": "Set `tracing_config.mode` attribute to `Active` or `PassThrough`"
        },
        "lineNumber": -1,
        "iacDescription": {
          "issue": "Amazon X-Ray tracing is not enabled for Lambda function",
          "impact": "Trace logs will not be available during investigation",
          "resolve": "Set `Properties.TracingConfig.Mode` attribute to `Active` or `PassThrough`"
        },
        "publicId": "SNYK-CC-TF-133",
        "msg": "Resources[RegisterSubnetTags].Properties.TracingConfig.Mode",
        "references": [
          "https://docs.aws.amazon.com/lambda/latest/dg/services-xray.html"
        ],
        "path": [
          "[DocId: 0]",
          "Resources[RegisterSubnetTags]",
          "Properties",
          "TracingConfig",
          "Mode"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-TF-48",
        "title": "Load balancer is internet facing",
        "severity": "low",
        "isIgnored": false,
        "subType": "Elastic Load Balancing",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-TF-48",
        "isGeneratedByCustomRule": false,
        "issue": "Load balancer is internet facing",
        "impact": "Increases attack vector reachability",
        "resolve": "Set `Properties.Scheme` attribute to `internal`",
        "remediation": {
          "cloudformation": "Set `Properties.Scheme` attribute to `internal`",
          "terraform": "Set `internal` attribute to `true`"
        },
        "lineNumber": 74,
        "iacDescription": {
          "issue": "Load balancer is internet facing",
          "impact": "Increases attack vector reachability",
          "resolve": "Set `Properties.Scheme` attribute to `internal`"
        },
        "publicId": "SNYK-CC-TF-48",
        "msg": "Resources.ExtApiElb.Properties.Scheme",
        "references": [
          "https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-internet-facing-load-balancers.html"
        ],
        "path": [
          "[DocId: 0]",
          "Resources",
          "ExtApiElb",
          "Properties",
          "Scheme"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-TF-133",
        "title": "X-ray tracing is disabled for Lambda function",
        "severity": "low",
        "isIgnored": false,
        "subType": "Lambda",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-TF-133",
        "isGeneratedByCustomRule": false,
        "issue": "Amazon X-Ray tracing is not enabled for Lambda function",
        "impact": "Trace logs will not be available during investigation",
        "resolve": "Set `Properties.TracingConfig.Mode` attribute to `Active` or `PassThrough`",
        "remediation": {
          "cloudformation": "Set `Properties.TracingConfig.Mode` attribute to `Active` or `PassThrough`",
          "terraform": "Set `tracing_config.mode` attribute to `Active` or `PassThrough`"
        },
        "lineNumber": -1,
        "iacDescription": {
          "issue": "Amazon X-Ray tracing is not enabled for Lambda function",
          "impact": "Trace logs will not be available during investigation",
          "resolve": "Set `Properties.TracingConfig.Mode` attribute to `Active` or `PassThrough`"
        },
        "publicId": "SNYK-CC-TF-133",
        "msg": "Resources[RegisterNlbIpTargets].Properties.TracingConfig.Mode",
        "references": [
          "https://docs.aws.amazon.com/lambda/latest/dg/services-xray.html"
        ],
        "path": [
          "[DocId: 0]",
          "Resources[RegisterNlbIpTargets]",
          "Properties",
          "TracingConfig",
          "Mode"
        ],
        "compliance": []
      }
    ]
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/configs/ocp4-ha-lab/files/aws_upi_sec_template.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/configs/ocp4-ha-lab/files/aws_upi_sec_template.yaml",
    "packageManager": "cloudformationconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "cloudformationconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/configs/ocp4-ha-lab/files/aws_upi_vpc_template.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/configs/ocp4-ha-lab/files/aws_upi_vpc_template.yaml",
    "packageManager": "cloudformationconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "cloudformationconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/configs/ocp4-ha-lab/files/aws_upi_worker_template.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/configs/ocp4-ha-lab/files/aws_upi_worker_template.yaml",
    "packageManager": "cloudformationconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "cloudformationconfig",
    "ok": false,
    "infrastructureAsCodeIssues": [
      {
        "id": "SNYK-CC-AWS-426",
        "title": "EC2 API termination protection is not enabled",
        "severity": "low",
        "isIgnored": false,
        "subType": "EC2",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-AWS-426",
        "isGeneratedByCustomRule": false,
        "issue": "To prevent instance from being accidentally terminated using Amazon EC2, you can enable termination protection for the instance",
        "impact": "Without this setting enabled the instances can be terminated by accident. This setting should only be used for instances with high availability requirements. Enabling this may prevent IaC workflows from updating the instance, for example terraform will not be able to terminate the instance to update instance type",
        "resolve": "Set `DisableApiTermination` attribute with value `true`",
        "remediation": {
          "cloudformation": "Set `DisableApiTermination` attribute with value `true`",
          "terraform": "Set `disable_api_termination` attribute  with value `true`"
        },
        "lineNumber": -1,
        "iacDescription": {
          "issue": "To prevent instance from being accidentally terminated using Amazon EC2, you can enable termination protection for the instance",
          "impact": "Without this setting enabled the instances can be terminated by accident. This setting should only be used for instances with high availability requirements. Enabling this may prevent IaC workflows from updating the instance, for example terraform will not be able to terminate the instance to update instance type",
          "resolve": "Set `DisableApiTermination` attribute with value `true`"
        },
        "publicId": "SNYK-CC-AWS-426",
        "msg": "Resources[Worker0].Properties.DisableApiTermination",
        "references": [
          "https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/terminating-instances.html#Using_ChangingDisableAPITermination"
        ],
        "path": [
          "[DocId: 0]",
          "Resources[Worker0]",
          "Properties",
          "DisableApiTermination"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-TF-130",
        "title": "EC2 instance accepts IMDSv1",
        "severity": "low",
        "isIgnored": false,
        "subType": "EC2",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-TF-130",
        "isGeneratedByCustomRule": false,
        "issue": "Instance Metadata Service v2 is not enforced",
        "impact": "Metadata service may be vulnerable to reverse proxy/open firewall misconfigurations and server side request forgery attacks",
        "resolve": "Set `MetadataOptions.HttpTokens` attribute to `required` in `AWS::EC2::LaunchTemplate`",
        "remediation": {
          "cloudformation": "Set `MetadataOptions.HttpTokens` attribute to `required` in `AWS::EC2::LaunchTemplate`",
          "terraform": "Set `metadata_options.http_tokens` attribute to `required`"
        },
        "lineNumber": -1,
        "iacDescription": {
          "issue": "Instance Metadata Service v2 is not enforced",
          "impact": "Metadata service may be vulnerable to reverse proxy/open firewall misconfigurations and server side request forgery attacks",
          "resolve": "Set `MetadataOptions.HttpTokens` attribute to `required` in `AWS::EC2::LaunchTemplate`"
        },
        "publicId": "SNYK-CC-TF-130",
        "msg": "Resources[Worker0].MetadataOptions.HttpTokens",
        "references": [
          "https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/configuring-instance-metadata-service.html",
          "https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html",
          "https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instancedata-data-retrieval.html",
          "https://aws.amazon.com/blogs/security/defense-in-depth-open-firewalls-reverse-proxies-ssrf-vulnerabilities-ec2-instance-metadata-service/"
        ],
        "path": [
          "[DocId: 0]",
          "Resources[Worker0]",
          "MetadataOptions",
          "HttpTokens"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-TF-53",
        "title": "Non-Encrypted root block device",
        "severity": "medium",
        "isIgnored": false,
        "subType": "EC2",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-TF-53",
        "isGeneratedByCustomRule": false,
        "issue": "The root block device for ec2 instance is not encrypted",
        "impact": "That should someone gain unauthorized access to the data they would be able to read the contents.",
        "resolve": "Set `BlockDeviceMappings.Encrypted` attribute of root device to `true`",
        "remediation": {
          "cloudformation": "Set `BlockDeviceMappings.Encrypted` attribute of root device to `true`",
          "terraform": "Set `root_block_device.encrypted` attribute to `true`"
        },
        "lineNumber": 106,
        "iacDescription": {
          "issue": "The root block device for ec2 instance is not encrypted",
          "impact": "That should someone gain unauthorized access to the data they would be able to read the contents.",
          "resolve": "Set `BlockDeviceMappings.Encrypted` attribute of root device to `true`"
        },
        "publicId": "SNYK-CC-TF-53",
        "msg": "Resources.Worker0.Properties.BlockDeviceMappings",
        "references": [
          "https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/RootDeviceStorage.html",
          "https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html",
          "https://aws.amazon.com/premiumsupport/knowledge-center/cloudformation-root-volume-property/",
          "https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/device_naming.html"
        ],
        "path": [
          "[DocId: 0]",
          "Resources",
          "Worker0",
          "Properties",
          "BlockDeviceMappings"
        ],
        "compliance": []
      }
    ]
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/configs/ocp4-workshop/files/kubelet-bootstrap-cred-manager-ds.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/configs/ocp4-workshop/files/kubelet-bootstrap-cred-manager-ds.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": false,
    "infrastructureAsCodeIssues": [
      {
        "id": "SNYK-CC-K8S-9",
        "title": "Container is running without privilege escalation control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-9",
        "isGeneratedByCustomRule": false,
        "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
        "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
          "terraform": "Set `spec.container.security_context.allow_privilege_escalation` to `false`"
        },
        "lineNumber": 83,
        "iacDescription": {
          "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
          "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`"
        },
        "publicId": "SNYK-CC-K8S-9",
        "msg": "spec.template.spec.containers[kubelet-bootstrap-cred-manager].securityContext.allowPrivilegeEscalation",
        "references": [
          "https://www.kernel.org/doc/html/latest/userspace-api/no_new_privs.html"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "containers[kubelet-bootstrap-cred-manager]",
          "securityContext",
          "allowPrivilegeEscalation"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-4",
        "title": "Container is running without memory limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-4",
        "isGeneratedByCustomRule": false,
        "issue": "Memory limit is not defined",
        "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
        "resolve": "Set `resources.limits.memory` value",
        "remediation": {
          "kubernetes": "Set `resources.limits.memory` value",
          "terraform": "Set `resources.limits.memory` value"
        },
        "lineNumber": 20,
        "iacDescription": {
          "issue": "Memory limit is not defined",
          "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
          "resolve": "Set `resources.limits.memory` value"
        },
        "publicId": "SNYK-CC-K8S-4",
        "msg": "input.spec.template.spec.containers[kubelet-bootstrap-cred-manager].resources.limits.memory",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/memory-default-namespace/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[kubelet-bootstrap-cred-manager]",
          "resources",
          "limits",
          "memory"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-10",
        "title": "Container or Pod is running without root user control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-10",
        "isGeneratedByCustomRule": false,
        "issue": "Container or Pod is running without root user control",
        "impact": "Container or Pod could be running with full administrative privileges",
        "resolve": "Set `securityContext.runAsNonRoot` to `true`",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsNonRoot` to `true`",
          "terraform": "Set `security_context.run_as_non_root` to `true`"
        },
        "lineNumber": 83,
        "iacDescription": {
          "issue": "Container or Pod is running without root user control",
          "impact": "Container or Pod could be running with full administrative privileges",
          "resolve": "Set `securityContext.runAsNonRoot` to `true`"
        },
        "publicId": "SNYK-CC-K8S-10",
        "msg": "input.spec.template.spec.containers[kubelet-bootstrap-cred-manager].securityContext.runAsNonRoot",
        "description": "",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[kubelet-bootstrap-cred-manager]",
          "securityContext",
          "runAsNonRoot"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-8",
        "title": "Container is running with writable root filesystem",
        "severity": "low",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-8",
        "isGeneratedByCustomRule": false,
        "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
        "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
          "terraform": "Set `security_context.read_only_root_filesystem` to `true`"
        },
        "lineNumber": 83,
        "iacDescription": {
          "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
          "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`"
        },
        "publicId": "SNYK-CC-K8S-8",
        "msg": "spec.template.spec.containers[kubelet-bootstrap-cred-manager].securityContext.readOnlyRootFilesystem",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "containers[kubelet-bootstrap-cred-manager]",
          "securityContext",
          "readOnlyRootFilesystem"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-37",
        "title": "Container is running with host path mount",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-37",
        "isGeneratedByCustomRule": false,
        "issue": "Host path has been mounted inside the pod",
        "impact": "Increases the attack surface, and can lead to privilege escalation",
        "resolve": "Remove `hostPath` volume mount",
        "remediation": {
          "kubernetes": "Remove `hostPath` volume mount",
          "terraform": "Remove `host_path` from `spec.volume` property"
        },
        "lineNumber": 108,
        "iacDescription": {
          "issue": "Host path has been mounted inside the pod",
          "impact": "Increases the attack surface, and can lead to privilege escalation",
          "resolve": "Remove `hostPath` volume mount"
        },
        "publicId": "SNYK-CC-K8S-37",
        "msg": "spec.template.spec.volumes[kubelet-dir].hostPath",
        "references": [
          "https://kubernetes.io/docs/concepts/storage/volumes/#hostpath"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "volumes[kubelet-dir]",
          "hostPath"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-5",
        "title": "Container has no CPU limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-5",
        "isGeneratedByCustomRule": false,
        "issue": "Container has no CPU limit",
        "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
        "resolve": "Add `resources.limits.cpu` field with required CPU limit value",
        "remediation": {
          "kubernetes": "Add `resources.limits.cpu` field with required CPU limit value",
          "terraform": "Add `spec.container.resources.limits.cpu` field with required CPU limit value"
        },
        "lineNumber": 20,
        "iacDescription": {
          "issue": "Container has no CPU limit",
          "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
          "resolve": "Add `resources.limits.cpu` field with required CPU limit value"
        },
        "publicId": "SNYK-CC-K8S-5",
        "msg": "input.spec.template.spec.containers[kubelet-bootstrap-cred-manager].resources.limits.cpu",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-cpu-resource/",
          "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/cpu-default-namespace/",
          "https://github.com/kubernetes/design-proposals-archive/blob/8da1442ea29adccea40693357d04727127e045ed/node/resource-qos.md#compressible-resource-guaranteess"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[kubelet-bootstrap-cred-manager]",
          "resources",
          "limits",
          "cpu"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-1",
        "title": "Privileged container",
        "severity": "high",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-1",
        "isGeneratedByCustomRule": false,
        "issue": "Container is running in privileged mode",
        "impact": "Compromised container could potentially modify the underlying host\u2019s kernel by loading unauthorized modules (i.e. drivers).",
        "resolve": "Remove `securityContext.privileged` attribute, or set value to `false`",
        "remediation": {
          "kubernetes": "Remove `securityContext.privileged` attribute, or set value to `false`",
          "terraform": "Remove `security_context.privileged` attribute, or set value to `false`"
        },
        "lineNumber": 84,
        "iacDescription": {
          "issue": "Container is running in privileged mode",
          "impact": "Compromised container could potentially modify the underlying host\u2019s kernel by loading unauthorized modules (i.e. drivers).",
          "resolve": "Remove `securityContext.privileged` attribute, or set value to `false`"
        },
        "publicId": "SNYK-CC-K8S-1",
        "msg": "input.spec.template.spec.containers[kubelet-bootstrap-cred-manager].securityContext.privileged",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[kubelet-bootstrap-cred-manager]",
          "securityContext",
          "privileged"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-11",
        "title": "Container's or Pod's  UID could clash with host's UID",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-11",
        "isGeneratedByCustomRule": false,
        "issue": "`runAsUser` value is set to low UID",
        "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
        "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
          "terraform": "Set `security_context.run_as_user` value to greater or equal than 10'000"
        },
        "lineNumber": 85,
        "iacDescription": {
          "issue": "`runAsUser` value is set to low UID",
          "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
          "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence"
        },
        "publicId": "SNYK-CC-K8S-11",
        "msg": "input.spec.template.spec.containers[kubelet-bootstrap-cred-manager].securityContext.runAsUser",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container",
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod",
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[kubelet-bootstrap-cred-manager]",
          "securityContext",
          "runAsUser"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-6",
        "title": "Container does not drop all default capabilities",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-6",
        "isGeneratedByCustomRule": false,
        "issue": "All default capabilities are not explicitly dropped",
        "impact": "Containers are running with potentially unnecessary privileges",
        "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
        "remediation": {
          "kubernetes": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
          "terraform": "Add `ALL` to `spec.container.security_context.capabilities.drop` list, and add only required capabilities to `spec.container.security_context.capabilities.add`, ensuring it also does not contain `ALL`"
        },
        "lineNumber": 83,
        "iacDescription": {
          "issue": "All default capabilities are not explicitly dropped",
          "impact": "Containers are running with potentially unnecessary privileges",
          "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`"
        },
        "publicId": "SNYK-CC-K8S-6",
        "msg": "input.spec.template.spec.containers[kubelet-bootstrap-cred-manager].securityContext.capabilities.drop",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
          "https://linux-audit.com/linux-capabilities-hardening-linux-binaries-by-removing-setuid/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[kubelet-bootstrap-cred-manager]",
          "securityContext",
          "capabilities",
          "drop"
        ],
        "compliance": []
      }
    ]
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/configs/ocp4-workshop/files/oauth-htpasswd.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/configs/ocp4-workshop/files/oauth-htpasswd.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/configs/ocp4-workshop/files/oauth-opentlc-ldap.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/configs/ocp4-workshop/files/oauth-opentlc-ldap.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/configs/ocs4-external-implementation/files/kubelet-bootstrap-cred-manager-ds.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/configs/ocs4-external-implementation/files/kubelet-bootstrap-cred-manager-ds.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": false,
    "infrastructureAsCodeIssues": [
      {
        "id": "SNYK-CC-K8S-9",
        "title": "Container is running without privilege escalation control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-9",
        "isGeneratedByCustomRule": false,
        "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
        "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
          "terraform": "Set `spec.container.security_context.allow_privilege_escalation` to `false`"
        },
        "lineNumber": 70,
        "iacDescription": {
          "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
          "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`"
        },
        "publicId": "SNYK-CC-K8S-9",
        "msg": "spec.template.spec.containers[kubelet-bootstrap-cred-manager].securityContext.allowPrivilegeEscalation",
        "references": [
          "https://www.kernel.org/doc/html/latest/userspace-api/no_new_privs.html"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "containers[kubelet-bootstrap-cred-manager]",
          "securityContext",
          "allowPrivilegeEscalation"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-4",
        "title": "Container is running without memory limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-4",
        "isGeneratedByCustomRule": false,
        "issue": "Memory limit is not defined",
        "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
        "resolve": "Set `resources.limits.memory` value",
        "remediation": {
          "kubernetes": "Set `resources.limits.memory` value",
          "terraform": "Set `resources.limits.memory` value"
        },
        "lineNumber": 20,
        "iacDescription": {
          "issue": "Memory limit is not defined",
          "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
          "resolve": "Set `resources.limits.memory` value"
        },
        "publicId": "SNYK-CC-K8S-4",
        "msg": "input.spec.template.spec.containers[kubelet-bootstrap-cred-manager].resources.limits.memory",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/memory-default-namespace/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[kubelet-bootstrap-cred-manager]",
          "resources",
          "limits",
          "memory"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-10",
        "title": "Container or Pod is running without root user control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-10",
        "isGeneratedByCustomRule": false,
        "issue": "Container or Pod is running without root user control",
        "impact": "Container or Pod could be running with full administrative privileges",
        "resolve": "Set `securityContext.runAsNonRoot` to `true`",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsNonRoot` to `true`",
          "terraform": "Set `security_context.run_as_non_root` to `true`"
        },
        "lineNumber": 70,
        "iacDescription": {
          "issue": "Container or Pod is running without root user control",
          "impact": "Container or Pod could be running with full administrative privileges",
          "resolve": "Set `securityContext.runAsNonRoot` to `true`"
        },
        "publicId": "SNYK-CC-K8S-10",
        "msg": "input.spec.template.spec.containers[kubelet-bootstrap-cred-manager].securityContext.runAsNonRoot",
        "description": "",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[kubelet-bootstrap-cred-manager]",
          "securityContext",
          "runAsNonRoot"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-8",
        "title": "Container is running with writable root filesystem",
        "severity": "low",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-8",
        "isGeneratedByCustomRule": false,
        "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
        "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
          "terraform": "Set `security_context.read_only_root_filesystem` to `true`"
        },
        "lineNumber": 70,
        "iacDescription": {
          "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
          "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`"
        },
        "publicId": "SNYK-CC-K8S-8",
        "msg": "spec.template.spec.containers[kubelet-bootstrap-cred-manager].securityContext.readOnlyRootFilesystem",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "containers[kubelet-bootstrap-cred-manager]",
          "securityContext",
          "readOnlyRootFilesystem"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-37",
        "title": "Container is running with host path mount",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-37",
        "isGeneratedByCustomRule": false,
        "issue": "Host path has been mounted inside the pod",
        "impact": "Increases the attack surface, and can lead to privilege escalation",
        "resolve": "Remove `hostPath` volume mount",
        "remediation": {
          "kubernetes": "Remove `hostPath` volume mount",
          "terraform": "Remove `host_path` from `spec.volume` property"
        },
        "lineNumber": 95,
        "iacDescription": {
          "issue": "Host path has been mounted inside the pod",
          "impact": "Increases the attack surface, and can lead to privilege escalation",
          "resolve": "Remove `hostPath` volume mount"
        },
        "publicId": "SNYK-CC-K8S-37",
        "msg": "spec.template.spec.volumes[kubelet-dir].hostPath",
        "references": [
          "https://kubernetes.io/docs/concepts/storage/volumes/#hostpath"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "volumes[kubelet-dir]",
          "hostPath"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-5",
        "title": "Container has no CPU limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-5",
        "isGeneratedByCustomRule": false,
        "issue": "Container has no CPU limit",
        "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
        "resolve": "Add `resources.limits.cpu` field with required CPU limit value",
        "remediation": {
          "kubernetes": "Add `resources.limits.cpu` field with required CPU limit value",
          "terraform": "Add `spec.container.resources.limits.cpu` field with required CPU limit value"
        },
        "lineNumber": 20,
        "iacDescription": {
          "issue": "Container has no CPU limit",
          "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
          "resolve": "Add `resources.limits.cpu` field with required CPU limit value"
        },
        "publicId": "SNYK-CC-K8S-5",
        "msg": "input.spec.template.spec.containers[kubelet-bootstrap-cred-manager].resources.limits.cpu",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-cpu-resource/",
          "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/cpu-default-namespace/",
          "https://github.com/kubernetes/design-proposals-archive/blob/8da1442ea29adccea40693357d04727127e045ed/node/resource-qos.md#compressible-resource-guaranteess"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[kubelet-bootstrap-cred-manager]",
          "resources",
          "limits",
          "cpu"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-1",
        "title": "Privileged container",
        "severity": "high",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-1",
        "isGeneratedByCustomRule": false,
        "issue": "Container is running in privileged mode",
        "impact": "Compromised container could potentially modify the underlying host\u2019s kernel by loading unauthorized modules (i.e. drivers).",
        "resolve": "Remove `securityContext.privileged` attribute, or set value to `false`",
        "remediation": {
          "kubernetes": "Remove `securityContext.privileged` attribute, or set value to `false`",
          "terraform": "Remove `security_context.privileged` attribute, or set value to `false`"
        },
        "lineNumber": 71,
        "iacDescription": {
          "issue": "Container is running in privileged mode",
          "impact": "Compromised container could potentially modify the underlying host\u2019s kernel by loading unauthorized modules (i.e. drivers).",
          "resolve": "Remove `securityContext.privileged` attribute, or set value to `false`"
        },
        "publicId": "SNYK-CC-K8S-1",
        "msg": "input.spec.template.spec.containers[kubelet-bootstrap-cred-manager].securityContext.privileged",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[kubelet-bootstrap-cred-manager]",
          "securityContext",
          "privileged"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-11",
        "title": "Container's or Pod's  UID could clash with host's UID",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-11",
        "isGeneratedByCustomRule": false,
        "issue": "`runAsUser` value is set to low UID",
        "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
        "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
          "terraform": "Set `security_context.run_as_user` value to greater or equal than 10'000"
        },
        "lineNumber": 72,
        "iacDescription": {
          "issue": "`runAsUser` value is set to low UID",
          "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
          "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence"
        },
        "publicId": "SNYK-CC-K8S-11",
        "msg": "input.spec.template.spec.containers[kubelet-bootstrap-cred-manager].securityContext.runAsUser",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container",
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod",
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[kubelet-bootstrap-cred-manager]",
          "securityContext",
          "runAsUser"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-6",
        "title": "Container does not drop all default capabilities",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-6",
        "isGeneratedByCustomRule": false,
        "issue": "All default capabilities are not explicitly dropped",
        "impact": "Containers are running with potentially unnecessary privileges",
        "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
        "remediation": {
          "kubernetes": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
          "terraform": "Add `ALL` to `spec.container.security_context.capabilities.drop` list, and add only required capabilities to `spec.container.security_context.capabilities.add`, ensuring it also does not contain `ALL`"
        },
        "lineNumber": 70,
        "iacDescription": {
          "issue": "All default capabilities are not explicitly dropped",
          "impact": "Containers are running with potentially unnecessary privileges",
          "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`"
        },
        "publicId": "SNYK-CC-K8S-6",
        "msg": "input.spec.template.spec.containers[kubelet-bootstrap-cred-manager].securityContext.capabilities.drop",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
          "https://linux-audit.com/linux-capabilities-hardening-linux-binaries-by-removing-setuid/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[kubelet-bootstrap-cred-manager]",
          "securityContext",
          "capabilities",
          "drop"
        ],
        "compliance": []
      }
    ]
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/configs/ocs4-external-implementation/files/pvc-registry.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/configs/ocs4-external-implementation/files/pvc-registry.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/configs/osp-stf/files/alerts.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/configs/osp-stf/files/alerts.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/configs/osp-stf/files/amqsubscription.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/configs/osp-stf/files/amqsubscription.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/configs/osp-stf/files/catalogsource.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/configs/osp-stf/files/catalogsource.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/configs/osp-stf/files/dashboardroute.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/configs/osp-stf/files/dashboardroute.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/configs/osp-stf/files/datasource.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/configs/osp-stf/files/datasource.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/configs/osp-stf/files/elasticcloudsubscription.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/configs/osp-stf/files/elasticcloudsubscription.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/configs/osp-stf/files/grafanasubscription.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/configs/osp-stf/files/grafanasubscription.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/configs/osp-stf/files/operatorgroup.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/configs/osp-stf/files/operatorgroup.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/configs/osp-stf/files/operatorhubiocatalogsource.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/configs/osp-stf/files/operatorhubiocatalogsource.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/configs/osp-stf/files/project.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/configs/osp-stf/files/project.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/configs/osp-stf/files/rhos-cloud-dashboard.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/configs/osp-stf/files/rhos-cloud-dashboard.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/configs/osp-stf/files/rhos-dashboard.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/configs/osp-stf/files/rhos-dashboard.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/configs/osp-stf/files/servicetelemetryobject.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/configs/osp-stf/files/servicetelemetryobject.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/configs/osp-stf/files/servicetelemetryobjectwithgrafana.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/configs/osp-stf/files/servicetelemetryobjectwithgrafana.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/configs/osp-stf/files/servicetelemetrysubscription.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/configs/osp-stf/files/servicetelemetrysubscription.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/host-ocp4-installer/files/cluster-network-03-config.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/host-ocp4-installer/files/cluster-network-03-config.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-dynamic-nfs-provisioner/files/cluster_role.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-dynamic-nfs-provisioner/files/cluster_role.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-dynamic-nfs-provisioner/templates/cluster_role_binding.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-dynamic-nfs-provisioner/templates/cluster_role_binding.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-dynamic-nfs-provisioner/templates/nfs_provisioner.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-dynamic-nfs-provisioner/templates/nfs_provisioner.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": false,
    "infrastructureAsCodeIssues": [
      {
        "id": "SNYK-CC-K8S-41",
        "title": "Container is running without liveness probe",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-41",
        "isGeneratedByCustomRule": false,
        "issue": "Liveness probe is not defined",
        "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
        "resolve": "Add `livenessProbe` attribute",
        "remediation": {
          "kubernetes": "Add `livenessProbe` attribute",
          "terraform": "Add `liveness_probe` attribute"
        },
        "lineNumber": 19,
        "iacDescription": {
          "issue": "Liveness probe is not defined",
          "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
          "resolve": "Add `livenessProbe` attribute"
        },
        "publicId": "SNYK-CC-K8S-41",
        "msg": "spec.template.spec.containers[nfs-client-provisioner].livenessProbe",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/",
          "https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/",
          "https://cloud.google.com/blog/products/gcp/kubernetes-best-practices-setting-up-health-checks-with-readiness-and-liveness-probes"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "containers[nfs-client-provisioner]",
          "livenessProbe"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-4",
        "title": "Container is running without memory limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-4",
        "isGeneratedByCustomRule": false,
        "issue": "Memory limit is not defined",
        "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
        "resolve": "Set `resources.limits.memory` value",
        "remediation": {
          "kubernetes": "Set `resources.limits.memory` value",
          "terraform": "Set `resources.limits.memory` value"
        },
        "lineNumber": 19,
        "iacDescription": {
          "issue": "Memory limit is not defined",
          "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
          "resolve": "Set `resources.limits.memory` value"
        },
        "publicId": "SNYK-CC-K8S-4",
        "msg": "input.spec.template.spec.containers[nfs-client-provisioner].resources.limits.memory",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/memory-default-namespace/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[nfs-client-provisioner]",
          "resources",
          "limits",
          "memory"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-42",
        "title": "Container could be running with outdated image",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-42",
        "isGeneratedByCustomRule": false,
        "issue": "The image policy does not prevent image reuse",
        "impact": "The container may run with outdated or unauthorized image",
        "resolve": "Set `imagePullPolicy` attribute to `Always`",
        "remediation": {
          "kubernetes": "Set `imagePullPolicy` attribute to `Always`",
          "terraform": "Set `image_pull_policy` attribute to `Always"
        },
        "lineNumber": 19,
        "iacDescription": {
          "issue": "The image policy does not prevent image reuse",
          "impact": "The container may run with outdated or unauthorized image",
          "resolve": "Set `imagePullPolicy` attribute to `Always`"
        },
        "publicId": "SNYK-CC-K8S-42",
        "msg": "spec.template.spec.containers[nfs-client-provisioner].imagePullPolicy",
        "references": [
          "https://kubernetes.io/docs/concepts/containers/images/",
          "https://kubernetes.io/docs/concepts/configuration/overview/#container-images"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "containers[nfs-client-provisioner]",
          "imagePullPolicy"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-10",
        "title": "Container or Pod is running without root user control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-10",
        "isGeneratedByCustomRule": false,
        "issue": "Container or Pod is running without root user control",
        "impact": "Container or Pod could be running with full administrative privileges",
        "resolve": "Set `securityContext.runAsNonRoot` to `true`",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsNonRoot` to `true`",
          "terraform": "Set `security_context.run_as_non_root` to `true`"
        },
        "lineNumber": 19,
        "iacDescription": {
          "issue": "Container or Pod is running without root user control",
          "impact": "Container or Pod could be running with full administrative privileges",
          "resolve": "Set `securityContext.runAsNonRoot` to `true`"
        },
        "publicId": "SNYK-CC-K8S-10",
        "msg": "input.spec.template.spec.containers[nfs-client-provisioner].securityContext.runAsNonRoot",
        "description": "",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[nfs-client-provisioner]",
          "securityContext",
          "runAsNonRoot"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-9",
        "title": "Container is running without privilege escalation control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-9",
        "isGeneratedByCustomRule": false,
        "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
        "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
          "terraform": "Set `spec.container.security_context.allow_privilege_escalation` to `false`"
        },
        "lineNumber": 19,
        "iacDescription": {
          "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
          "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`"
        },
        "publicId": "SNYK-CC-K8S-9",
        "msg": "spec.template.spec.containers[nfs-client-provisioner].securityContext.allowPrivilegeEscalation",
        "references": [
          "https://www.kernel.org/doc/html/latest/userspace-api/no_new_privs.html"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "containers[nfs-client-provisioner]",
          "securityContext",
          "allowPrivilegeEscalation"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-5",
        "title": "Container has no CPU limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-5",
        "isGeneratedByCustomRule": false,
        "issue": "Container has no CPU limit",
        "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
        "resolve": "Add `resources.limits.cpu` field with required CPU limit value",
        "remediation": {
          "kubernetes": "Add `resources.limits.cpu` field with required CPU limit value",
          "terraform": "Add `spec.container.resources.limits.cpu` field with required CPU limit value"
        },
        "lineNumber": 19,
        "iacDescription": {
          "issue": "Container has no CPU limit",
          "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
          "resolve": "Add `resources.limits.cpu` field with required CPU limit value"
        },
        "publicId": "SNYK-CC-K8S-5",
        "msg": "input.spec.template.spec.containers[nfs-client-provisioner].resources.limits.cpu",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-cpu-resource/",
          "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/cpu-default-namespace/",
          "https://github.com/kubernetes/design-proposals-archive/blob/8da1442ea29adccea40693357d04727127e045ed/node/resource-qos.md#compressible-resource-guaranteess"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[nfs-client-provisioner]",
          "resources",
          "limits",
          "cpu"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-11",
        "title": "Container's or Pod's  UID could clash with host's UID",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-11",
        "isGeneratedByCustomRule": false,
        "issue": "`runAsUser` value is set to low UID",
        "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
        "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
          "terraform": "Set `security_context.run_as_user` value to greater or equal than 10'000"
        },
        "lineNumber": 19,
        "iacDescription": {
          "issue": "`runAsUser` value is set to low UID",
          "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
          "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence"
        },
        "publicId": "SNYK-CC-K8S-11",
        "msg": "input.spec.template.spec.containers[nfs-client-provisioner].securityContext.runAsUser",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container",
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod",
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[nfs-client-provisioner]",
          "securityContext",
          "runAsUser"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-8",
        "title": "Container is running with writable root filesystem",
        "severity": "low",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-8",
        "isGeneratedByCustomRule": false,
        "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
        "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
          "terraform": "Set `security_context.read_only_root_filesystem` to `true`"
        },
        "lineNumber": 19,
        "iacDescription": {
          "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
          "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`"
        },
        "publicId": "SNYK-CC-K8S-8",
        "msg": "spec.template.spec.containers[nfs-client-provisioner].securityContext.readOnlyRootFilesystem",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "containers[nfs-client-provisioner]",
          "securityContext",
          "readOnlyRootFilesystem"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-6",
        "title": "Container does not drop all default capabilities",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-6",
        "isGeneratedByCustomRule": false,
        "issue": "All default capabilities are not explicitly dropped",
        "impact": "Containers are running with potentially unnecessary privileges",
        "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
        "remediation": {
          "kubernetes": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
          "terraform": "Add `ALL` to `spec.container.security_context.capabilities.drop` list, and add only required capabilities to `spec.container.security_context.capabilities.add`, ensuring it also does not contain `ALL`"
        },
        "lineNumber": 19,
        "iacDescription": {
          "issue": "All default capabilities are not explicitly dropped",
          "impact": "Containers are running with potentially unnecessary privileges",
          "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`"
        },
        "publicId": "SNYK-CC-K8S-6",
        "msg": "input.spec.template.spec.containers[nfs-client-provisioner].securityContext.capabilities.drop",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
          "https://linux-audit.com/linux-capabilities-hardening-linux-binaries-by-removing-setuid/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[nfs-client-provisioner]",
          "securityContext",
          "capabilities",
          "drop"
        ],
        "compliance": []
      }
    ]
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-dynamic-nfs-provisioner/templates/role.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-dynamic-nfs-provisioner/templates/role.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-dynamic-nfs-provisioner/templates/role_binding.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-dynamic-nfs-provisioner/templates/role_binding.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-dynamic-nfs-provisioner/templates/storage_class.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-dynamic-nfs-provisioner/templates/storage_class.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-infra-nexus/files/nexus3-persistent-template.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-infra-nexus/files/nexus3-persistent-template.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-workload-appmod-migration/templates/constraints_limitrange.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-workload-appmod-migration/templates/constraints_limitrange.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-workload-appmod-migration/templates/limitrange.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-workload-appmod-migration/templates/limitrange.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-workload-bxms-dm/templates/rhdm72-image-streams.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-workload-bxms-dm/templates/rhdm72-image-streams.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-workload-bxms-dm-foundations/templates/ng-dmf-template.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-workload-bxms-dm-foundations/templates/ng-dmf-template.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-workload-bxms-dm-foundations/templates/rhdm7-authoring.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-workload-bxms-dm-foundations/templates/rhdm7-authoring.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-workload-bxms-pam/templates/loadtester-template.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-workload-bxms-pam/templates/loadtester-template.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-workload-bxms-pam/templates/nexus3-persistent-template.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-workload-bxms-pam/templates/nexus3-persistent-template.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-workload-bxms-pam/templates/rhpam-dev-businesscentral.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-workload-bxms-pam/templates/rhpam-dev-businesscentral.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-workload-bxms-pam/templates/rhpam-dev-kieserver.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-workload-bxms-pam/templates/rhpam-dev-kieserver.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-workload-bxms-pam-foundations/templates/rhpam-dev-businesscentral.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-workload-bxms-pam-foundations/templates/rhpam-dev-businesscentral.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-workload-bxms-pam-foundations/templates/rhpam-dev-kieserver.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-workload-bxms-pam-foundations/templates/rhpam-dev-kieserver.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-workload-dekorate-component-operator/files/capability.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-workload-dekorate-component-operator/files/capability.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-workload-dekorate-component-operator/files/component.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-workload-dekorate-component-operator/files/component.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-workload-dekorate-component-operator/files/link.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-workload-dekorate-component-operator/files/link.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-workload-dekorate-component-operator/files/sa.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-workload-dekorate-component-operator/files/sa.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-workload-dekorate-component-operator/files/user-rbac.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-workload-dekorate-component-operator/files/user-rbac.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-workload-dm7-qlb-demo/files/rhdm71-kieserver-cors.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-workload-dm7-qlb-demo/files/rhdm71-kieserver-cors.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-workload-dm7-qlb-demo/files/rhdm73-kieserver-cors.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-workload-dm7-qlb-demo/files/rhdm73-kieserver-cors.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-workload-dm7-realtime-event-decisioning/files/examples/kafka/kafka-ephemeral.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-workload-dm7-realtime-event-decisioning/files/examples/kafka/kafka-ephemeral.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-workload-dm7-realtime-event-decisioning/files/examples/kafka/kafka-persistent.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-workload-dm7-realtime-event-decisioning/files/examples/kafka/kafka-persistent.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-workload-dm7-realtime-event-decisioning/files/examples/topic/kafka-topic.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-workload-dm7-realtime-event-decisioning/files/examples/topic/kafka-topic.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-workload-dm7-realtime-event-decisioning/files/install/cluster-operator/010-ServiceAccount-strimzi-cluster-operator.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-workload-dm7-realtime-event-decisioning/files/install/cluster-operator/010-ServiceAccount-strimzi-cluster-operator.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-workload-dm7-realtime-event-decisioning/files/install/cluster-operator/020-ClusterRole-strimzi-cluster-operator-role.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-workload-dm7-realtime-event-decisioning/files/install/cluster-operator/020-ClusterRole-strimzi-cluster-operator-role.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": false,
    "infrastructureAsCodeIssues": [
      {
        "id": "SNYK-CC-K8S-47",
        "title": "Role or ClusterRole with dangerous permissions",
        "severity": "high",
        "isIgnored": false,
        "subType": "ClusterRole",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-47",
        "isGeneratedByCustomRule": false,
        "issue": "A role was found using a dangerous permissions",
        "impact": "Using this role grants dangerous permissions. For a ClusterRole this would be considered high severity.",
        "resolve": "Consider removing these permissions",
        "remediation": {
          "kubernetes": "Consider removing these permissions",
          "terraform": "Consider removing these permissions"
        },
        "lineNumber": 187,
        "iacDescription": {
          "issue": "A role was found using a dangerous permissions",
          "impact": "Using this role grants dangerous permissions. For a ClusterRole this would be considered high severity.",
          "resolve": "Consider removing these permissions"
        },
        "publicId": "SNYK-CC-K8S-47",
        "msg": "rules[15].resources",
        "references": [
          "https://kubernetes.io/docs/reference/access-authn-authz/rbac/"
        ],
        "path": [
          "[DocId: 0]",
          "rules[15]",
          "resources"
        ],
        "compliance": []
      }
    ]
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-workload-dm7-realtime-event-decisioning/files/install/cluster-operator/020-RoleBinding-strimzi-cluster-operator.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-workload-dm7-realtime-event-decisioning/files/install/cluster-operator/020-RoleBinding-strimzi-cluster-operator.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-workload-dm7-realtime-event-decisioning/files/install/cluster-operator/021-ClusterRole-strimzi-cluster-operator-role.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-workload-dm7-realtime-event-decisioning/files/install/cluster-operator/021-ClusterRole-strimzi-cluster-operator-role.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-workload-dm7-realtime-event-decisioning/files/install/cluster-operator/021-ClusterRoleBinding-strimzi-cluster-operator.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-workload-dm7-realtime-event-decisioning/files/install/cluster-operator/021-ClusterRoleBinding-strimzi-cluster-operator.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-workload-dm7-realtime-event-decisioning/files/install/cluster-operator/030-ClusterRole-strimzi-kafka-broker.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-workload-dm7-realtime-event-decisioning/files/install/cluster-operator/030-ClusterRole-strimzi-kafka-broker.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-workload-dm7-realtime-event-decisioning/files/install/cluster-operator/030-ClusterRoleBinding-strimzi-cluster-operator-kafka-broker-delegation.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-workload-dm7-realtime-event-decisioning/files/install/cluster-operator/030-ClusterRoleBinding-strimzi-cluster-operator-kafka-broker-delegation.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-workload-dm7-realtime-event-decisioning/files/install/cluster-operator/031-ClusterRole-strimzi-entity-operator.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-workload-dm7-realtime-event-decisioning/files/install/cluster-operator/031-ClusterRole-strimzi-entity-operator.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": false,
    "infrastructureAsCodeIssues": [
      {
        "id": "SNYK-CC-K8S-47",
        "title": "Role or ClusterRole with dangerous permissions",
        "severity": "high",
        "isIgnored": false,
        "subType": "ClusterRole",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-47",
        "isGeneratedByCustomRule": false,
        "issue": "A role was found using a dangerous permissions",
        "impact": "Using this role grants dangerous permissions. For a ClusterRole this would be considered high severity.",
        "resolve": "Consider removing these permissions",
        "remediation": {
          "kubernetes": "Consider removing these permissions",
          "terraform": "Consider removing these permissions"
        },
        "lineNumber": 41,
        "iacDescription": {
          "issue": "A role was found using a dangerous permissions",
          "impact": "Using this role grants dangerous permissions. For a ClusterRole this would be considered high severity.",
          "resolve": "Consider removing these permissions"
        },
        "publicId": "SNYK-CC-K8S-47",
        "msg": "rules[3].resources",
        "references": [
          "https://kubernetes.io/docs/reference/access-authn-authz/rbac/"
        ],
        "path": [
          "[DocId: 0]",
          "rules[3]",
          "resources"
        ],
        "compliance": []
      }
    ]
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-workload-dm7-realtime-event-decisioning/files/install/cluster-operator/031-RoleBinding-strimzi-cluster-operator-entity-operator-delegation.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-workload-dm7-realtime-event-decisioning/files/install/cluster-operator/031-RoleBinding-strimzi-cluster-operator-entity-operator-delegation.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-workload-dm7-realtime-event-decisioning/files/install/cluster-operator/032-ClusterRole-strimzi-topic-operator.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-workload-dm7-realtime-event-decisioning/files/install/cluster-operator/032-ClusterRole-strimzi-topic-operator.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-workload-dm7-realtime-event-decisioning/files/install/cluster-operator/032-RoleBinding-strimzi-cluster-operator-topic-operator-delegation.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-workload-dm7-realtime-event-decisioning/files/install/cluster-operator/032-RoleBinding-strimzi-cluster-operator-topic-operator-delegation.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-workload-dm7-realtime-event-decisioning/files/install/cluster-operator/040-Crd-kafka.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-workload-dm7-realtime-event-decisioning/files/install/cluster-operator/040-Crd-kafka.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-workload-dm7-realtime-event-decisioning/files/install/cluster-operator/041-Crd-kafkaconnect.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-workload-dm7-realtime-event-decisioning/files/install/cluster-operator/041-Crd-kafkaconnect.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-workload-dm7-realtime-event-decisioning/files/install/cluster-operator/042-Crd-kafkaconnects2i.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-workload-dm7-realtime-event-decisioning/files/install/cluster-operator/042-Crd-kafkaconnects2i.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-workload-dm7-realtime-event-decisioning/files/install/cluster-operator/043-Crd-kafkatopic.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-workload-dm7-realtime-event-decisioning/files/install/cluster-operator/043-Crd-kafkatopic.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-workload-dm7-realtime-event-decisioning/files/install/cluster-operator/044-Crd-kafkauser.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-workload-dm7-realtime-event-decisioning/files/install/cluster-operator/044-Crd-kafkauser.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-workload-dm7-realtime-event-decisioning/files/install/cluster-operator/045-Crd-kafkamirrormaker.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-workload-dm7-realtime-event-decisioning/files/install/cluster-operator/045-Crd-kafkamirrormaker.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-workload-dm7-realtime-event-decisioning/files/install/cluster-operator/050-Deployment-strimzi-cluster-operator.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-workload-dm7-realtime-event-decisioning/files/install/cluster-operator/050-Deployment-strimzi-cluster-operator.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": false,
    "infrastructureAsCodeIssues": [
      {
        "id": "SNYK-CC-K8S-9",
        "title": "Container is running without privilege escalation control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-9",
        "isGeneratedByCustomRule": false,
        "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
        "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
          "terraform": "Set `spec.container.security_context.allow_privilege_escalation` to `false`"
        },
        "lineNumber": 16,
        "iacDescription": {
          "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
          "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`"
        },
        "publicId": "SNYK-CC-K8S-9",
        "msg": "spec.template.spec.containers[strimzi-cluster-operator].securityContext.allowPrivilegeEscalation",
        "references": [
          "https://www.kernel.org/doc/html/latest/userspace-api/no_new_privs.html"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "containers[strimzi-cluster-operator]",
          "securityContext",
          "allowPrivilegeEscalation"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-11",
        "title": "Container's or Pod's  UID could clash with host's UID",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-11",
        "isGeneratedByCustomRule": false,
        "issue": "`runAsUser` value is set to low UID",
        "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
        "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
          "terraform": "Set `security_context.run_as_user` value to greater or equal than 10'000"
        },
        "lineNumber": 16,
        "iacDescription": {
          "issue": "`runAsUser` value is set to low UID",
          "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
          "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence"
        },
        "publicId": "SNYK-CC-K8S-11",
        "msg": "input.spec.template.spec.containers[strimzi-cluster-operator].securityContext.runAsUser",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container",
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod",
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[strimzi-cluster-operator]",
          "securityContext",
          "runAsUser"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-8",
        "title": "Container is running with writable root filesystem",
        "severity": "low",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-8",
        "isGeneratedByCustomRule": false,
        "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
        "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
          "terraform": "Set `security_context.read_only_root_filesystem` to `true`"
        },
        "lineNumber": 16,
        "iacDescription": {
          "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
          "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`"
        },
        "publicId": "SNYK-CC-K8S-8",
        "msg": "spec.template.spec.containers[strimzi-cluster-operator].securityContext.readOnlyRootFilesystem",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "containers[strimzi-cluster-operator]",
          "securityContext",
          "readOnlyRootFilesystem"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-6",
        "title": "Container does not drop all default capabilities",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-6",
        "isGeneratedByCustomRule": false,
        "issue": "All default capabilities are not explicitly dropped",
        "impact": "Containers are running with potentially unnecessary privileges",
        "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
        "remediation": {
          "kubernetes": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
          "terraform": "Add `ALL` to `spec.container.security_context.capabilities.drop` list, and add only required capabilities to `spec.container.security_context.capabilities.add`, ensuring it also does not contain `ALL`"
        },
        "lineNumber": 16,
        "iacDescription": {
          "issue": "All default capabilities are not explicitly dropped",
          "impact": "Containers are running with potentially unnecessary privileges",
          "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`"
        },
        "publicId": "SNYK-CC-K8S-6",
        "msg": "input.spec.template.spec.containers[strimzi-cluster-operator].securityContext.capabilities.drop",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
          "https://linux-audit.com/linux-capabilities-hardening-linux-binaries-by-removing-setuid/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[strimzi-cluster-operator]",
          "securityContext",
          "capabilities",
          "drop"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-42",
        "title": "Container could be running with outdated image",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-42",
        "isGeneratedByCustomRule": false,
        "issue": "The image policy does not prevent image reuse",
        "impact": "The container may run with outdated or unauthorized image",
        "resolve": "Set `imagePullPolicy` attribute to `Always`",
        "remediation": {
          "kubernetes": "Set `imagePullPolicy` attribute to `Always`",
          "terraform": "Set `image_pull_policy` attribute to `Always"
        },
        "lineNumber": 18,
        "iacDescription": {
          "issue": "The image policy does not prevent image reuse",
          "impact": "The container may run with outdated or unauthorized image",
          "resolve": "Set `imagePullPolicy` attribute to `Always`"
        },
        "publicId": "SNYK-CC-K8S-42",
        "msg": "spec.template.spec.containers[strimzi-cluster-operator].imagePullPolicy",
        "references": [
          "https://kubernetes.io/docs/concepts/containers/images/",
          "https://kubernetes.io/docs/concepts/configuration/overview/#container-images"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "containers[strimzi-cluster-operator]",
          "imagePullPolicy"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-10",
        "title": "Container or Pod is running without root user control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-10",
        "isGeneratedByCustomRule": false,
        "issue": "Container or Pod is running without root user control",
        "impact": "Container or Pod could be running with full administrative privileges",
        "resolve": "Set `securityContext.runAsNonRoot` to `true`",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsNonRoot` to `true`",
          "terraform": "Set `security_context.run_as_non_root` to `true`"
        },
        "lineNumber": 16,
        "iacDescription": {
          "issue": "Container or Pod is running without root user control",
          "impact": "Container or Pod could be running with full administrative privileges",
          "resolve": "Set `securityContext.runAsNonRoot` to `true`"
        },
        "publicId": "SNYK-CC-K8S-10",
        "msg": "input.spec.template.spec.containers[strimzi-cluster-operator].securityContext.runAsNonRoot",
        "description": "",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[strimzi-cluster-operator]",
          "securityContext",
          "runAsNonRoot"
        ],
        "compliance": []
      }
    ]
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-workload-dm7-realtime-event-decisioning/files/install/topic-operator/01-ServiceAccount-strimzi-topic-operator.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-workload-dm7-realtime-event-decisioning/files/install/topic-operator/01-ServiceAccount-strimzi-topic-operator.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-workload-dm7-realtime-event-decisioning/files/install/topic-operator/02-Role-strimzi-topic-operator.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-workload-dm7-realtime-event-decisioning/files/install/topic-operator/02-Role-strimzi-topic-operator.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-workload-dm7-realtime-event-decisioning/files/install/topic-operator/03-RoleBinding-strimzi-topic-operator.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-workload-dm7-realtime-event-decisioning/files/install/topic-operator/03-RoleBinding-strimzi-topic-operator.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-workload-dm7-realtime-event-decisioning/files/install/topic-operator/04-Crd-kafkatopic.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-workload-dm7-realtime-event-decisioning/files/install/topic-operator/04-Crd-kafkatopic.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-workload-dm7-realtime-event-decisioning/files/install/topic-operator/05-Deployment-strimzi-topic-operator.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-workload-dm7-realtime-event-decisioning/files/install/topic-operator/05-Deployment-strimzi-topic-operator.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": false,
    "infrastructureAsCodeIssues": [
      {
        "id": "SNYK-CC-K8S-6",
        "title": "Container does not drop all default capabilities",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-6",
        "isGeneratedByCustomRule": false,
        "issue": "All default capabilities are not explicitly dropped",
        "impact": "Containers are running with potentially unnecessary privileges",
        "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
        "remediation": {
          "kubernetes": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
          "terraform": "Add `ALL` to `spec.container.security_context.capabilities.drop` list, and add only required capabilities to `spec.container.security_context.capabilities.add`, ensuring it also does not contain `ALL`"
        },
        "lineNumber": 16,
        "iacDescription": {
          "issue": "All default capabilities are not explicitly dropped",
          "impact": "Containers are running with potentially unnecessary privileges",
          "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`"
        },
        "publicId": "SNYK-CC-K8S-6",
        "msg": "input.spec.template.spec.containers[strimzi-topic-operator].securityContext.capabilities.drop",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
          "https://linux-audit.com/linux-capabilities-hardening-linux-binaries-by-removing-setuid/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[strimzi-topic-operator]",
          "securityContext",
          "capabilities",
          "drop"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-8",
        "title": "Container is running with writable root filesystem",
        "severity": "low",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-8",
        "isGeneratedByCustomRule": false,
        "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
        "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
          "terraform": "Set `security_context.read_only_root_filesystem` to `true`"
        },
        "lineNumber": 16,
        "iacDescription": {
          "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
          "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`"
        },
        "publicId": "SNYK-CC-K8S-8",
        "msg": "spec.template.spec.containers[strimzi-topic-operator].securityContext.readOnlyRootFilesystem",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "containers[strimzi-topic-operator]",
          "securityContext",
          "readOnlyRootFilesystem"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-9",
        "title": "Container is running without privilege escalation control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-9",
        "isGeneratedByCustomRule": false,
        "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
        "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
          "terraform": "Set `spec.container.security_context.allow_privilege_escalation` to `false`"
        },
        "lineNumber": 16,
        "iacDescription": {
          "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
          "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`"
        },
        "publicId": "SNYK-CC-K8S-9",
        "msg": "spec.template.spec.containers[strimzi-topic-operator].securityContext.allowPrivilegeEscalation",
        "references": [
          "https://www.kernel.org/doc/html/latest/userspace-api/no_new_privs.html"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "containers[strimzi-topic-operator]",
          "securityContext",
          "allowPrivilegeEscalation"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-10",
        "title": "Container or Pod is running without root user control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-10",
        "isGeneratedByCustomRule": false,
        "issue": "Container or Pod is running without root user control",
        "impact": "Container or Pod could be running with full administrative privileges",
        "resolve": "Set `securityContext.runAsNonRoot` to `true`",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsNonRoot` to `true`",
          "terraform": "Set `security_context.run_as_non_root` to `true`"
        },
        "lineNumber": 16,
        "iacDescription": {
          "issue": "Container or Pod is running without root user control",
          "impact": "Container or Pod could be running with full administrative privileges",
          "resolve": "Set `securityContext.runAsNonRoot` to `true`"
        },
        "publicId": "SNYK-CC-K8S-10",
        "msg": "input.spec.template.spec.containers[strimzi-topic-operator].securityContext.runAsNonRoot",
        "description": "",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[strimzi-topic-operator]",
          "securityContext",
          "runAsNonRoot"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-11",
        "title": "Container's or Pod's  UID could clash with host's UID",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-11",
        "isGeneratedByCustomRule": false,
        "issue": "`runAsUser` value is set to low UID",
        "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
        "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
          "terraform": "Set `security_context.run_as_user` value to greater or equal than 10'000"
        },
        "lineNumber": 16,
        "iacDescription": {
          "issue": "`runAsUser` value is set to low UID",
          "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
          "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence"
        },
        "publicId": "SNYK-CC-K8S-11",
        "msg": "input.spec.template.spec.containers[strimzi-topic-operator].securityContext.runAsUser",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container",
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod",
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[strimzi-topic-operator]",
          "securityContext",
          "runAsUser"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-42",
        "title": "Container could be running with outdated image",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-42",
        "isGeneratedByCustomRule": false,
        "issue": "The image policy does not prevent image reuse",
        "impact": "The container may run with outdated or unauthorized image",
        "resolve": "Set `imagePullPolicy` attribute to `Always`",
        "remediation": {
          "kubernetes": "Set `imagePullPolicy` attribute to `Always`",
          "terraform": "Set `image_pull_policy` attribute to `Always"
        },
        "lineNumber": 16,
        "iacDescription": {
          "issue": "The image policy does not prevent image reuse",
          "impact": "The container may run with outdated or unauthorized image",
          "resolve": "Set `imagePullPolicy` attribute to `Always`"
        },
        "publicId": "SNYK-CC-K8S-42",
        "msg": "spec.template.spec.containers[strimzi-topic-operator].imagePullPolicy",
        "references": [
          "https://kubernetes.io/docs/concepts/containers/images/",
          "https://kubernetes.io/docs/concepts/configuration/overview/#container-images"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "containers[strimzi-topic-operator]",
          "imagePullPolicy"
        ],
        "compliance": []
      }
    ]
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-workload-dm7-realtime-event-decisioning/files/install/user-operator/01-ServiceAccount-strimzi-user-operator.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-workload-dm7-realtime-event-decisioning/files/install/user-operator/01-ServiceAccount-strimzi-user-operator.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-workload-dm7-realtime-event-decisioning/files/install/user-operator/02-Role-strimzi-user-operator.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-workload-dm7-realtime-event-decisioning/files/install/user-operator/02-Role-strimzi-user-operator.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": false,
    "infrastructureAsCodeIssues": [
      {
        "id": "SNYK-CC-K8S-47",
        "title": "Role or ClusterRole with dangerous permissions",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Role",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-47",
        "isGeneratedByCustomRule": false,
        "issue": "A role was found using a dangerous permissions",
        "impact": "Using this role grants dangerous permissions. For a ClusterRole this would be considered high severity.",
        "resolve": "Consider removing these permissions",
        "remediation": {
          "kubernetes": "Consider removing these permissions",
          "terraform": "Consider removing these permissions"
        },
        "lineNumber": 23,
        "iacDescription": {
          "issue": "A role was found using a dangerous permissions",
          "impact": "Using this role grants dangerous permissions. For a ClusterRole this would be considered high severity.",
          "resolve": "Consider removing these permissions"
        },
        "publicId": "SNYK-CC-K8S-47",
        "msg": "rules[1].resources",
        "references": [
          "https://kubernetes.io/docs/reference/access-authn-authz/rbac/"
        ],
        "path": [
          "[DocId: 0]",
          "rules[1]",
          "resources"
        ],
        "compliance": []
      }
    ]
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-workload-dm7-realtime-event-decisioning/files/install/user-operator/03-RoleBinding-strimzi-user-operator.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-workload-dm7-realtime-event-decisioning/files/install/user-operator/03-RoleBinding-strimzi-user-operator.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-workload-dm7-realtime-event-decisioning/files/install/user-operator/04-Crd-kafkauser.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-workload-dm7-realtime-event-decisioning/files/install/user-operator/04-Crd-kafkauser.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-workload-dm7-realtime-event-decisioning/files/install/user-operator/05-Deployment-strimzi-user-operator.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-workload-dm7-realtime-event-decisioning/files/install/user-operator/05-Deployment-strimzi-user-operator.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": false,
    "infrastructureAsCodeIssues": [
      {
        "id": "SNYK-CC-K8S-11",
        "title": "Container's or Pod's  UID could clash with host's UID",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-11",
        "isGeneratedByCustomRule": false,
        "issue": "`runAsUser` value is set to low UID",
        "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
        "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
          "terraform": "Set `security_context.run_as_user` value to greater or equal than 10'000"
        },
        "lineNumber": 16,
        "iacDescription": {
          "issue": "`runAsUser` value is set to low UID",
          "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
          "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence"
        },
        "publicId": "SNYK-CC-K8S-11",
        "msg": "input.spec.template.spec.containers[strimzi-user-operator].securityContext.runAsUser",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container",
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod",
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[strimzi-user-operator]",
          "securityContext",
          "runAsUser"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-8",
        "title": "Container is running with writable root filesystem",
        "severity": "low",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-8",
        "isGeneratedByCustomRule": false,
        "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
        "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
          "terraform": "Set `security_context.read_only_root_filesystem` to `true`"
        },
        "lineNumber": 16,
        "iacDescription": {
          "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
          "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`"
        },
        "publicId": "SNYK-CC-K8S-8",
        "msg": "spec.template.spec.containers[strimzi-user-operator].securityContext.readOnlyRootFilesystem",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "containers[strimzi-user-operator]",
          "securityContext",
          "readOnlyRootFilesystem"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-6",
        "title": "Container does not drop all default capabilities",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-6",
        "isGeneratedByCustomRule": false,
        "issue": "All default capabilities are not explicitly dropped",
        "impact": "Containers are running with potentially unnecessary privileges",
        "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
        "remediation": {
          "kubernetes": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
          "terraform": "Add `ALL` to `spec.container.security_context.capabilities.drop` list, and add only required capabilities to `spec.container.security_context.capabilities.add`, ensuring it also does not contain `ALL`"
        },
        "lineNumber": 16,
        "iacDescription": {
          "issue": "All default capabilities are not explicitly dropped",
          "impact": "Containers are running with potentially unnecessary privileges",
          "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`"
        },
        "publicId": "SNYK-CC-K8S-6",
        "msg": "input.spec.template.spec.containers[strimzi-user-operator].securityContext.capabilities.drop",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
          "https://linux-audit.com/linux-capabilities-hardening-linux-binaries-by-removing-setuid/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[strimzi-user-operator]",
          "securityContext",
          "capabilities",
          "drop"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-42",
        "title": "Container could be running with outdated image",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-42",
        "isGeneratedByCustomRule": false,
        "issue": "The image policy does not prevent image reuse",
        "impact": "The container may run with outdated or unauthorized image",
        "resolve": "Set `imagePullPolicy` attribute to `Always`",
        "remediation": {
          "kubernetes": "Set `imagePullPolicy` attribute to `Always`",
          "terraform": "Set `image_pull_policy` attribute to `Always"
        },
        "lineNumber": 16,
        "iacDescription": {
          "issue": "The image policy does not prevent image reuse",
          "impact": "The container may run with outdated or unauthorized image",
          "resolve": "Set `imagePullPolicy` attribute to `Always`"
        },
        "publicId": "SNYK-CC-K8S-42",
        "msg": "spec.template.spec.containers[strimzi-user-operator].imagePullPolicy",
        "references": [
          "https://kubernetes.io/docs/concepts/containers/images/",
          "https://kubernetes.io/docs/concepts/configuration/overview/#container-images"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "containers[strimzi-user-operator]",
          "imagePullPolicy"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-9",
        "title": "Container is running without privilege escalation control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-9",
        "isGeneratedByCustomRule": false,
        "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
        "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
          "terraform": "Set `spec.container.security_context.allow_privilege_escalation` to `false`"
        },
        "lineNumber": 16,
        "iacDescription": {
          "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
          "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`"
        },
        "publicId": "SNYK-CC-K8S-9",
        "msg": "spec.template.spec.containers[strimzi-user-operator].securityContext.allowPrivilegeEscalation",
        "references": [
          "https://www.kernel.org/doc/html/latest/userspace-api/no_new_privs.html"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "containers[strimzi-user-operator]",
          "securityContext",
          "allowPrivilegeEscalation"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-10",
        "title": "Container or Pod is running without root user control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-10",
        "isGeneratedByCustomRule": false,
        "issue": "Container or Pod is running without root user control",
        "impact": "Container or Pod could be running with full administrative privileges",
        "resolve": "Set `securityContext.runAsNonRoot` to `true`",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsNonRoot` to `true`",
          "terraform": "Set `security_context.run_as_non_root` to `true`"
        },
        "lineNumber": 16,
        "iacDescription": {
          "issue": "Container or Pod is running without root user control",
          "impact": "Container or Pod could be running with full administrative privileges",
          "resolve": "Set `securityContext.runAsNonRoot` to `true`"
        },
        "publicId": "SNYK-CC-K8S-10",
        "msg": "input.spec.template.spec.containers[strimzi-user-operator].securityContext.runAsNonRoot",
        "description": "",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[strimzi-user-operator]",
          "securityContext",
          "runAsNonRoot"
        ],
        "compliance": []
      }
    ]
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-workload-dm7-realtime-event-decisioning/files/templates/cluster-operator/connect-s2i-template.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-workload-dm7-realtime-event-decisioning/files/templates/cluster-operator/connect-s2i-template.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-workload-dm7-realtime-event-decisioning/files/templates/cluster-operator/connect-template.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-workload-dm7-realtime-event-decisioning/files/templates/cluster-operator/connect-template.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-workload-dm7-realtime-event-decisioning/files/templates/cluster-operator/ephemeral-template.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-workload-dm7-realtime-event-decisioning/files/templates/cluster-operator/ephemeral-template.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-workload-dm7-realtime-event-decisioning/files/templates/cluster-operator/mirror-maker-template.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-workload-dm7-realtime-event-decisioning/files/templates/cluster-operator/mirror-maker-template.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-workload-dm7-realtime-event-decisioning/files/templates/cluster-operator/persistent-template.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-workload-dm7-realtime-event-decisioning/files/templates/cluster-operator/persistent-template.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-workload-dm7-realtime-event-decisioning/files/templates/topic-operator/topic-template.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-workload-dm7-realtime-event-decisioning/files/templates/topic-operator/topic-template.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-workload-edge-deployments/files/project-iot-development.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-workload-edge-deployments/files/project-iot-development.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-workload-edge-deployments/files/project-iot-hub.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-workload-edge-deployments/files/project-iot-hub.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-workload-edge-deployments/files/project-iot-testing.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-workload-edge-deployments/files/project-iot-testing.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-workload-fsi-client-onboarding-demo/files/client-onboarding-process.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-workload-fsi-client-onboarding-demo/files/client-onboarding-process.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-workload-fsi-client-onboarding-demo/files/secrets-and-accounts.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-workload-fsi-client-onboarding-demo/files/secrets-and-accounts.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-workload-integreatly-iot/files/010-CustomResourceDefinition-iot-project.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-workload-integreatly-iot/files/010-CustomResourceDefinition-iot-project.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-workload-integreatly-iot/files/010-IoTConfig-default.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-workload-integreatly-iot/files/010-IoTConfig-default.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-workload-integreatly-iot/files/010-ServiceAccount-iot-operator.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-workload-integreatly-iot/files/010-ServiceAccount-iot-operator.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-workload-integreatly-iot/files/020-ClusterRole-iot-operator.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-workload-integreatly-iot/files/020-ClusterRole-iot-operator.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-workload-integreatly-iot/files/020-ClusterRole-iot-tenant-edit.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-workload-integreatly-iot/files/020-ClusterRole-iot-tenant-edit.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-workload-integreatly-iot/files/020-ClusterRole-iot-tenant-view.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-workload-integreatly-iot/files/020-ClusterRole-iot-tenant-view.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-workload-integreatly-iot/files/020-ClusterRole-qdr-configurator.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-workload-integreatly-iot/files/020-ClusterRole-qdr-configurator.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": false,
    "infrastructureAsCodeIssues": [
      {
        "id": "SNYK-CC-K8S-45",
        "title": "RoleBinding or ClusterRoleBinding to the default service account",
        "severity": "high",
        "isIgnored": false,
        "subType": "ClusterRoleBinding",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-45",
        "isGeneratedByCustomRule": false,
        "issue": "A binding was found between a role and the default service account",
        "impact": "The use of default service account is discouraged. For a ClusterRoleBinding this would be considered high severity.",
        "resolve": "Set `subject.name` to a service account other than `default`",
        "remediation": {
          "kubernetes": "Set `subject.name` to a service account other than `default`",
          "terraform": "Set `subject.name` to a service account other than `default`"
        },
        "lineNumber": 41,
        "iacDescription": {
          "issue": "A binding was found between a role and the default service account",
          "impact": "The use of default service account is discouraged. For a ClusterRoleBinding this would be considered high severity.",
          "resolve": "Set `subject.name` to a service account other than `default`"
        },
        "publicId": "SNYK-CC-K8S-45",
        "msg": "subjects[0].name",
        "references": [
          "https://kubernetes.io/docs/reference/access-authn-authz/rbac/"
        ],
        "path": [
          "[DocId: 1]",
          "subjects[0]",
          "name"
        ],
        "compliance": []
      }
    ]
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-workload-integreatly-iot/files/030-ClusterRoleBinding-iot-operator.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-workload-integreatly-iot/files/030-ClusterRoleBinding-iot-operator.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-workload-integreatly-iot/files/050-Deployment-iot-operator.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-workload-integreatly-iot/files/050-Deployment-iot-operator.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": false,
    "infrastructureAsCodeIssues": [
      {
        "id": "SNYK-CC-K8S-41",
        "title": "Container is running without liveness probe",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-41",
        "isGeneratedByCustomRule": false,
        "issue": "Liveness probe is not defined",
        "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
        "resolve": "Add `livenessProbe` attribute",
        "remediation": {
          "kubernetes": "Add `livenessProbe` attribute",
          "terraform": "Add `liveness_probe` attribute"
        },
        "lineNumber": 23,
        "iacDescription": {
          "issue": "Liveness probe is not defined",
          "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
          "resolve": "Add `livenessProbe` attribute"
        },
        "publicId": "SNYK-CC-K8S-41",
        "msg": "spec.template.spec.containers[operator].livenessProbe",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/",
          "https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/",
          "https://cloud.google.com/blog/products/gcp/kubernetes-best-practices-setting-up-health-checks-with-readiness-and-liveness-probes"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "containers[operator]",
          "livenessProbe"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-5",
        "title": "Container has no CPU limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-5",
        "isGeneratedByCustomRule": false,
        "issue": "Container has no CPU limit",
        "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
        "resolve": "Add `resources.limits.cpu` field with required CPU limit value",
        "remediation": {
          "kubernetes": "Add `resources.limits.cpu` field with required CPU limit value",
          "terraform": "Add `spec.container.resources.limits.cpu` field with required CPU limit value"
        },
        "lineNumber": 62,
        "iacDescription": {
          "issue": "Container has no CPU limit",
          "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
          "resolve": "Add `resources.limits.cpu` field with required CPU limit value"
        },
        "publicId": "SNYK-CC-K8S-5",
        "msg": "input.spec.template.spec.containers[operator].resources.limits.cpu",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-cpu-resource/",
          "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/cpu-default-namespace/",
          "https://github.com/kubernetes/design-proposals-archive/blob/8da1442ea29adccea40693357d04727127e045ed/node/resource-qos.md#compressible-resource-guaranteess"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[operator]",
          "resources",
          "limits",
          "cpu"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-9",
        "title": "Container is running without privilege escalation control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-9",
        "isGeneratedByCustomRule": false,
        "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
        "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
          "terraform": "Set `spec.container.security_context.allow_privilege_escalation` to `false`"
        },
        "lineNumber": 23,
        "iacDescription": {
          "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
          "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`"
        },
        "publicId": "SNYK-CC-K8S-9",
        "msg": "spec.template.spec.containers[operator].securityContext.allowPrivilegeEscalation",
        "references": [
          "https://www.kernel.org/doc/html/latest/userspace-api/no_new_privs.html"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "containers[operator]",
          "securityContext",
          "allowPrivilegeEscalation"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-10",
        "title": "Container or Pod is running without root user control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-10",
        "isGeneratedByCustomRule": false,
        "issue": "Container or Pod is running without root user control",
        "impact": "Container or Pod could be running with full administrative privileges",
        "resolve": "Set `securityContext.runAsNonRoot` to `true`",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsNonRoot` to `true`",
          "terraform": "Set `security_context.run_as_non_root` to `true`"
        },
        "lineNumber": 23,
        "iacDescription": {
          "issue": "Container or Pod is running without root user control",
          "impact": "Container or Pod could be running with full administrative privileges",
          "resolve": "Set `securityContext.runAsNonRoot` to `true`"
        },
        "publicId": "SNYK-CC-K8S-10",
        "msg": "input.spec.template.spec.containers[operator].securityContext.runAsNonRoot",
        "description": "",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[operator]",
          "securityContext",
          "runAsNonRoot"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-8",
        "title": "Container is running with writable root filesystem",
        "severity": "low",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-8",
        "isGeneratedByCustomRule": false,
        "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
        "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
          "terraform": "Set `security_context.read_only_root_filesystem` to `true`"
        },
        "lineNumber": 23,
        "iacDescription": {
          "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
          "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`"
        },
        "publicId": "SNYK-CC-K8S-8",
        "msg": "spec.template.spec.containers[operator].securityContext.readOnlyRootFilesystem",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "containers[operator]",
          "securityContext",
          "readOnlyRootFilesystem"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-6",
        "title": "Container does not drop all default capabilities",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-6",
        "isGeneratedByCustomRule": false,
        "issue": "All default capabilities are not explicitly dropped",
        "impact": "Containers are running with potentially unnecessary privileges",
        "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
        "remediation": {
          "kubernetes": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
          "terraform": "Add `ALL` to `spec.container.security_context.capabilities.drop` list, and add only required capabilities to `spec.container.security_context.capabilities.add`, ensuring it also does not contain `ALL`"
        },
        "lineNumber": 23,
        "iacDescription": {
          "issue": "All default capabilities are not explicitly dropped",
          "impact": "Containers are running with potentially unnecessary privileges",
          "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`"
        },
        "publicId": "SNYK-CC-K8S-6",
        "msg": "input.spec.template.spec.containers[operator].securityContext.capabilities.drop",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
          "https://linux-audit.com/linux-capabilities-hardening-linux-binaries-by-removing-setuid/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[operator]",
          "securityContext",
          "capabilities",
          "drop"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-11",
        "title": "Container's or Pod's  UID could clash with host's UID",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-11",
        "isGeneratedByCustomRule": false,
        "issue": "`runAsUser` value is set to low UID",
        "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
        "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
          "terraform": "Set `security_context.run_as_user` value to greater or equal than 10'000"
        },
        "lineNumber": 23,
        "iacDescription": {
          "issue": "`runAsUser` value is set to low UID",
          "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
          "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence"
        },
        "publicId": "SNYK-CC-K8S-11",
        "msg": "input.spec.template.spec.containers[operator].securityContext.runAsUser",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container",
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod",
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[operator]",
          "securityContext",
          "runAsUser"
        ],
        "compliance": []
      }
    ]
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-workload-iot-demo/files/api.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-workload-iot-demo/files/api.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-workload-iot-demo/files/broker.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-workload-iot-demo/files/broker.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-workload-iot-demo/files/console.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-workload-iot-demo/files/console.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-workload-iot-demo/files/dashboard-proxy.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-workload-iot-demo/files/dashboard-proxy.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-workload-iot-demo/files/dashboard.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-workload-iot-demo/files/dashboard.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-workload-iot-demo/files/mariadb.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-workload-iot-demo/files/mariadb.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-workload-iot-demo/files/redhat-iot-rhpds-secret.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-workload-iot-demo/files/redhat-iot-rhpds-secret.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-workload-iot-demo/files/vpn.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-workload-iot-demo/files/vpn.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-workload-mediawiki/files/mariadb.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-workload-mediawiki/files/mariadb.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-workload-mediawiki/files/mediawiki-ns.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-workload-mediawiki/files/mediawiki-ns.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-workload-mediawiki/files/mediawiki-route.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-workload-mediawiki/files/mediawiki-route.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-workload-odo-workshop/files/tsb-instance.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-workload-odo-workshop/files/tsb-instance.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-workload-odo-workshop/files/tsb-namespace.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-workload-odo-workshop/files/tsb-namespace.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-workload-odo-workshop/files/tsb-og.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-workload-odo-workshop/files/tsb-og.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-workload-odo-workshop/files/tsb-sub.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-workload-odo-workshop/files/tsb-sub.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-workload-pam-order-it-hardware/files/rhpam71-businesscentral-openshift-with-users.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-workload-pam-order-it-hardware/files/rhpam71-businesscentral-openshift-with-users.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-workload-pam-order-it-hardware/files/rhpam73-businesscentral-openshift-with-users.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-workload-pam-order-it-hardware/files/rhpam73-businesscentral-openshift-with-users.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-workload-pam7-offer-management-dmn-pmml/files/deploy_kibana.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-workload-pam7-offer-management-dmn-pmml/files/deploy_kibana.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-workload-pam7-offer-management-dmn-pmml/files/elastic_deploy.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-workload-pam7-offer-management-dmn-pmml/files/elastic_deploy.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-workload-pam7-offer-management-dmn-pmml/files/examples/kafka/kafka-ephemeral.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-workload-pam7-offer-management-dmn-pmml/files/examples/kafka/kafka-ephemeral.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-workload-pam7-offer-management-dmn-pmml/files/examples/templates/cluster-operator/ephemeral-template.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-workload-pam7-offer-management-dmn-pmml/files/examples/templates/cluster-operator/ephemeral-template.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-workload-pam7-offer-management-dmn-pmml/files/examples/templates/topic-operator/topic-template.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-workload-pam7-offer-management-dmn-pmml/files/examples/templates/topic-operator/topic-template.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-workload-pam7-offer-management-dmn-pmml/files/examples/topic/kafka-topic.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-workload-pam7-offer-management-dmn-pmml/files/examples/topic/kafka-topic.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-workload-pam7-offer-management-dmn-pmml/files/examples/user/kafka-user.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-workload-pam7-offer-management-dmn-pmml/files/examples/user/kafka-user.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-workload-pam7-offer-management-dmn-pmml/files/install/cluster-operator/010-ServiceAccount-strimzi-cluster-operator.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-workload-pam7-offer-management-dmn-pmml/files/install/cluster-operator/010-ServiceAccount-strimzi-cluster-operator.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-workload-pam7-offer-management-dmn-pmml/files/install/cluster-operator/020-ClusterRole-strimzi-cluster-operator-role.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-workload-pam7-offer-management-dmn-pmml/files/install/cluster-operator/020-ClusterRole-strimzi-cluster-operator-role.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": false,
    "infrastructureAsCodeIssues": [
      {
        "id": "SNYK-CC-K8S-47",
        "title": "Role or ClusterRole with dangerous permissions",
        "severity": "high",
        "isIgnored": false,
        "subType": "ClusterRole",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-47",
        "isGeneratedByCustomRule": false,
        "issue": "A role was found using a dangerous permissions",
        "impact": "Using this role grants dangerous permissions. For a ClusterRole this would be considered high severity.",
        "resolve": "Consider removing these permissions",
        "remediation": {
          "kubernetes": "Consider removing these permissions",
          "terraform": "Consider removing these permissions"
        },
        "lineNumber": 188,
        "iacDescription": {
          "issue": "A role was found using a dangerous permissions",
          "impact": "Using this role grants dangerous permissions. For a ClusterRole this would be considered high severity.",
          "resolve": "Consider removing these permissions"
        },
        "publicId": "SNYK-CC-K8S-47",
        "msg": "rules[15].resources",
        "references": [
          "https://kubernetes.io/docs/reference/access-authn-authz/rbac/"
        ],
        "path": [
          "[DocId: 0]",
          "rules[15]",
          "resources"
        ],
        "compliance": []
      }
    ]
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-workload-pam7-offer-management-dmn-pmml/files/install/cluster-operator/020-RoleBinding-strimzi-cluster-operator.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-workload-pam7-offer-management-dmn-pmml/files/install/cluster-operator/020-RoleBinding-strimzi-cluster-operator.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-workload-pam7-offer-management-dmn-pmml/files/install/cluster-operator/021-ClusterRole-strimzi-cluster-operator-role.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-workload-pam7-offer-management-dmn-pmml/files/install/cluster-operator/021-ClusterRole-strimzi-cluster-operator-role.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-workload-pam7-offer-management-dmn-pmml/files/install/cluster-operator/021-ClusterRoleBinding-strimzi-cluster-operator.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-workload-pam7-offer-management-dmn-pmml/files/install/cluster-operator/021-ClusterRoleBinding-strimzi-cluster-operator.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-workload-pam7-offer-management-dmn-pmml/files/install/cluster-operator/030-ClusterRole-strimzi-kafka-broker.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-workload-pam7-offer-management-dmn-pmml/files/install/cluster-operator/030-ClusterRole-strimzi-kafka-broker.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-workload-pam7-offer-management-dmn-pmml/files/install/cluster-operator/030-ClusterRoleBinding-strimzi-cluster-operator-kafka-broker-delegation.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-workload-pam7-offer-management-dmn-pmml/files/install/cluster-operator/030-ClusterRoleBinding-strimzi-cluster-operator-kafka-broker-delegation.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-workload-pam7-offer-management-dmn-pmml/files/install/cluster-operator/031-ClusterRole-strimzi-entity-operator.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-workload-pam7-offer-management-dmn-pmml/files/install/cluster-operator/031-ClusterRole-strimzi-entity-operator.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": false,
    "infrastructureAsCodeIssues": [
      {
        "id": "SNYK-CC-K8S-47",
        "title": "Role or ClusterRole with dangerous permissions",
        "severity": "high",
        "isIgnored": false,
        "subType": "ClusterRole",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-47",
        "isGeneratedByCustomRule": false,
        "issue": "A role was found using a dangerous permissions",
        "impact": "Using this role grants dangerous permissions. For a ClusterRole this would be considered high severity.",
        "resolve": "Consider removing these permissions",
        "remediation": {
          "kubernetes": "Consider removing these permissions",
          "terraform": "Consider removing these permissions"
        },
        "lineNumber": 41,
        "iacDescription": {
          "issue": "A role was found using a dangerous permissions",
          "impact": "Using this role grants dangerous permissions. For a ClusterRole this would be considered high severity.",
          "resolve": "Consider removing these permissions"
        },
        "publicId": "SNYK-CC-K8S-47",
        "msg": "rules[3].resources",
        "references": [
          "https://kubernetes.io/docs/reference/access-authn-authz/rbac/"
        ],
        "path": [
          "[DocId: 0]",
          "rules[3]",
          "resources"
        ],
        "compliance": []
      }
    ]
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-workload-pam7-offer-management-dmn-pmml/files/install/cluster-operator/031-RoleBinding-strimzi-cluster-operator-entity-operator-delegation.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-workload-pam7-offer-management-dmn-pmml/files/install/cluster-operator/031-RoleBinding-strimzi-cluster-operator-entity-operator-delegation.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-workload-pam7-offer-management-dmn-pmml/files/install/cluster-operator/032-ClusterRole-strimzi-topic-operator.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-workload-pam7-offer-management-dmn-pmml/files/install/cluster-operator/032-ClusterRole-strimzi-topic-operator.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-workload-pam7-offer-management-dmn-pmml/files/install/cluster-operator/032-RoleBinding-strimzi-cluster-operator-topic-operator-delegation.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-workload-pam7-offer-management-dmn-pmml/files/install/cluster-operator/032-RoleBinding-strimzi-cluster-operator-topic-operator-delegation.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-workload-pam7-offer-management-dmn-pmml/files/install/cluster-operator/040-Crd-kafka.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-workload-pam7-offer-management-dmn-pmml/files/install/cluster-operator/040-Crd-kafka.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-workload-pam7-offer-management-dmn-pmml/files/install/cluster-operator/041-Crd-kafkaconnect.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-workload-pam7-offer-management-dmn-pmml/files/install/cluster-operator/041-Crd-kafkaconnect.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-workload-pam7-offer-management-dmn-pmml/files/install/cluster-operator/042-Crd-kafkaconnects2i.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-workload-pam7-offer-management-dmn-pmml/files/install/cluster-operator/042-Crd-kafkaconnects2i.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-workload-pam7-offer-management-dmn-pmml/files/install/cluster-operator/043-Crd-kafkatopic.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-workload-pam7-offer-management-dmn-pmml/files/install/cluster-operator/043-Crd-kafkatopic.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-workload-pam7-offer-management-dmn-pmml/files/install/cluster-operator/044-Crd-kafkauser.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-workload-pam7-offer-management-dmn-pmml/files/install/cluster-operator/044-Crd-kafkauser.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-workload-pam7-offer-management-dmn-pmml/files/install/cluster-operator/045-Crd-kafkamirrormaker.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-workload-pam7-offer-management-dmn-pmml/files/install/cluster-operator/045-Crd-kafkamirrormaker.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-workload-pam7-offer-management-dmn-pmml/files/install/cluster-operator/050-Deployment-strimzi-cluster-operator.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-workload-pam7-offer-management-dmn-pmml/files/install/cluster-operator/050-Deployment-strimzi-cluster-operator.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": false,
    "infrastructureAsCodeIssues": [
      {
        "id": "SNYK-CC-K8S-9",
        "title": "Container is running without privilege escalation control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-9",
        "isGeneratedByCustomRule": false,
        "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
        "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
          "terraform": "Set `spec.container.security_context.allow_privilege_escalation` to `false`"
        },
        "lineNumber": 18,
        "iacDescription": {
          "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
          "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`"
        },
        "publicId": "SNYK-CC-K8S-9",
        "msg": "spec.template.spec.containers[strimzi-cluster-operator].securityContext.allowPrivilegeEscalation",
        "references": [
          "https://www.kernel.org/doc/html/latest/userspace-api/no_new_privs.html"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "containers[strimzi-cluster-operator]",
          "securityContext",
          "allowPrivilegeEscalation"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-11",
        "title": "Container's or Pod's  UID could clash with host's UID",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-11",
        "isGeneratedByCustomRule": false,
        "issue": "`runAsUser` value is set to low UID",
        "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
        "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
          "terraform": "Set `security_context.run_as_user` value to greater or equal than 10'000"
        },
        "lineNumber": 18,
        "iacDescription": {
          "issue": "`runAsUser` value is set to low UID",
          "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
          "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence"
        },
        "publicId": "SNYK-CC-K8S-11",
        "msg": "input.spec.template.spec.containers[strimzi-cluster-operator].securityContext.runAsUser",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container",
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod",
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[strimzi-cluster-operator]",
          "securityContext",
          "runAsUser"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-8",
        "title": "Container is running with writable root filesystem",
        "severity": "low",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-8",
        "isGeneratedByCustomRule": false,
        "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
        "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
          "terraform": "Set `security_context.read_only_root_filesystem` to `true`"
        },
        "lineNumber": 18,
        "iacDescription": {
          "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
          "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`"
        },
        "publicId": "SNYK-CC-K8S-8",
        "msg": "spec.template.spec.containers[strimzi-cluster-operator].securityContext.readOnlyRootFilesystem",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "containers[strimzi-cluster-operator]",
          "securityContext",
          "readOnlyRootFilesystem"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-6",
        "title": "Container does not drop all default capabilities",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-6",
        "isGeneratedByCustomRule": false,
        "issue": "All default capabilities are not explicitly dropped",
        "impact": "Containers are running with potentially unnecessary privileges",
        "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
        "remediation": {
          "kubernetes": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
          "terraform": "Add `ALL` to `spec.container.security_context.capabilities.drop` list, and add only required capabilities to `spec.container.security_context.capabilities.add`, ensuring it also does not contain `ALL`"
        },
        "lineNumber": 18,
        "iacDescription": {
          "issue": "All default capabilities are not explicitly dropped",
          "impact": "Containers are running with potentially unnecessary privileges",
          "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`"
        },
        "publicId": "SNYK-CC-K8S-6",
        "msg": "input.spec.template.spec.containers[strimzi-cluster-operator].securityContext.capabilities.drop",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
          "https://linux-audit.com/linux-capabilities-hardening-linux-binaries-by-removing-setuid/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[strimzi-cluster-operator]",
          "securityContext",
          "capabilities",
          "drop"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-42",
        "title": "Container could be running with outdated image",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-42",
        "isGeneratedByCustomRule": false,
        "issue": "The image policy does not prevent image reuse",
        "impact": "The container may run with outdated or unauthorized image",
        "resolve": "Set `imagePullPolicy` attribute to `Always`",
        "remediation": {
          "kubernetes": "Set `imagePullPolicy` attribute to `Always`",
          "terraform": "Set `image_pull_policy` attribute to `Always"
        },
        "lineNumber": 20,
        "iacDescription": {
          "issue": "The image policy does not prevent image reuse",
          "impact": "The container may run with outdated or unauthorized image",
          "resolve": "Set `imagePullPolicy` attribute to `Always`"
        },
        "publicId": "SNYK-CC-K8S-42",
        "msg": "spec.template.spec.containers[strimzi-cluster-operator].imagePullPolicy",
        "references": [
          "https://kubernetes.io/docs/concepts/containers/images/",
          "https://kubernetes.io/docs/concepts/configuration/overview/#container-images"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "containers[strimzi-cluster-operator]",
          "imagePullPolicy"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-10",
        "title": "Container or Pod is running without root user control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-10",
        "isGeneratedByCustomRule": false,
        "issue": "Container or Pod is running without root user control",
        "impact": "Container or Pod could be running with full administrative privileges",
        "resolve": "Set `securityContext.runAsNonRoot` to `true`",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsNonRoot` to `true`",
          "terraform": "Set `security_context.run_as_non_root` to `true`"
        },
        "lineNumber": 18,
        "iacDescription": {
          "issue": "Container or Pod is running without root user control",
          "impact": "Container or Pod could be running with full administrative privileges",
          "resolve": "Set `securityContext.runAsNonRoot` to `true`"
        },
        "publicId": "SNYK-CC-K8S-10",
        "msg": "input.spec.template.spec.containers[strimzi-cluster-operator].securityContext.runAsNonRoot",
        "description": "",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[strimzi-cluster-operator]",
          "securityContext",
          "runAsNonRoot"
        ],
        "compliance": []
      }
    ]
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-workload-pam7-offer-management-dmn-pmml/files/install/strimzi-admin/010-ClusterRole-strimzi-admin.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-workload-pam7-offer-management-dmn-pmml/files/install/strimzi-admin/010-ClusterRole-strimzi-admin.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-workload-pam7-offer-management-dmn-pmml/files/install/topic-operator/01-ServiceAccount-strimzi-topic-operator.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-workload-pam7-offer-management-dmn-pmml/files/install/topic-operator/01-ServiceAccount-strimzi-topic-operator.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-workload-pam7-offer-management-dmn-pmml/files/install/topic-operator/02-Role-strimzi-topic-operator.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-workload-pam7-offer-management-dmn-pmml/files/install/topic-operator/02-Role-strimzi-topic-operator.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-workload-pam7-offer-management-dmn-pmml/files/install/topic-operator/03-RoleBinding-strimzi-topic-operator.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-workload-pam7-offer-management-dmn-pmml/files/install/topic-operator/03-RoleBinding-strimzi-topic-operator.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-workload-pam7-offer-management-dmn-pmml/files/install/topic-operator/04-Crd-kafkatopic.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-workload-pam7-offer-management-dmn-pmml/files/install/topic-operator/04-Crd-kafkatopic.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-workload-pam7-offer-management-dmn-pmml/files/install/topic-operator/05-Deployment-strimzi-topic-operator.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-workload-pam7-offer-management-dmn-pmml/files/install/topic-operator/05-Deployment-strimzi-topic-operator.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": false,
    "infrastructureAsCodeIssues": [
      {
        "id": "SNYK-CC-K8S-6",
        "title": "Container does not drop all default capabilities",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-6",
        "isGeneratedByCustomRule": false,
        "issue": "All default capabilities are not explicitly dropped",
        "impact": "Containers are running with potentially unnecessary privileges",
        "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
        "remediation": {
          "kubernetes": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
          "terraform": "Add `ALL` to `spec.container.security_context.capabilities.drop` list, and add only required capabilities to `spec.container.security_context.capabilities.add`, ensuring it also does not contain `ALL`"
        },
        "lineNumber": 16,
        "iacDescription": {
          "issue": "All default capabilities are not explicitly dropped",
          "impact": "Containers are running with potentially unnecessary privileges",
          "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`"
        },
        "publicId": "SNYK-CC-K8S-6",
        "msg": "input.spec.template.spec.containers[strimzi-topic-operator].securityContext.capabilities.drop",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
          "https://linux-audit.com/linux-capabilities-hardening-linux-binaries-by-removing-setuid/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[strimzi-topic-operator]",
          "securityContext",
          "capabilities",
          "drop"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-8",
        "title": "Container is running with writable root filesystem",
        "severity": "low",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-8",
        "isGeneratedByCustomRule": false,
        "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
        "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
          "terraform": "Set `security_context.read_only_root_filesystem` to `true`"
        },
        "lineNumber": 16,
        "iacDescription": {
          "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
          "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`"
        },
        "publicId": "SNYK-CC-K8S-8",
        "msg": "spec.template.spec.containers[strimzi-topic-operator].securityContext.readOnlyRootFilesystem",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "containers[strimzi-topic-operator]",
          "securityContext",
          "readOnlyRootFilesystem"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-9",
        "title": "Container is running without privilege escalation control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-9",
        "isGeneratedByCustomRule": false,
        "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
        "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
          "terraform": "Set `spec.container.security_context.allow_privilege_escalation` to `false`"
        },
        "lineNumber": 16,
        "iacDescription": {
          "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
          "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`"
        },
        "publicId": "SNYK-CC-K8S-9",
        "msg": "spec.template.spec.containers[strimzi-topic-operator].securityContext.allowPrivilegeEscalation",
        "references": [
          "https://www.kernel.org/doc/html/latest/userspace-api/no_new_privs.html"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "containers[strimzi-topic-operator]",
          "securityContext",
          "allowPrivilegeEscalation"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-10",
        "title": "Container or Pod is running without root user control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-10",
        "isGeneratedByCustomRule": false,
        "issue": "Container or Pod is running without root user control",
        "impact": "Container or Pod could be running with full administrative privileges",
        "resolve": "Set `securityContext.runAsNonRoot` to `true`",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsNonRoot` to `true`",
          "terraform": "Set `security_context.run_as_non_root` to `true`"
        },
        "lineNumber": 16,
        "iacDescription": {
          "issue": "Container or Pod is running without root user control",
          "impact": "Container or Pod could be running with full administrative privileges",
          "resolve": "Set `securityContext.runAsNonRoot` to `true`"
        },
        "publicId": "SNYK-CC-K8S-10",
        "msg": "input.spec.template.spec.containers[strimzi-topic-operator].securityContext.runAsNonRoot",
        "description": "",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[strimzi-topic-operator]",
          "securityContext",
          "runAsNonRoot"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-11",
        "title": "Container's or Pod's  UID could clash with host's UID",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-11",
        "isGeneratedByCustomRule": false,
        "issue": "`runAsUser` value is set to low UID",
        "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
        "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
          "terraform": "Set `security_context.run_as_user` value to greater or equal than 10'000"
        },
        "lineNumber": 16,
        "iacDescription": {
          "issue": "`runAsUser` value is set to low UID",
          "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
          "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence"
        },
        "publicId": "SNYK-CC-K8S-11",
        "msg": "input.spec.template.spec.containers[strimzi-topic-operator].securityContext.runAsUser",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container",
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod",
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[strimzi-topic-operator]",
          "securityContext",
          "runAsUser"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-42",
        "title": "Container could be running with outdated image",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-42",
        "isGeneratedByCustomRule": false,
        "issue": "The image policy does not prevent image reuse",
        "impact": "The container may run with outdated or unauthorized image",
        "resolve": "Set `imagePullPolicy` attribute to `Always`",
        "remediation": {
          "kubernetes": "Set `imagePullPolicy` attribute to `Always`",
          "terraform": "Set `image_pull_policy` attribute to `Always"
        },
        "lineNumber": 16,
        "iacDescription": {
          "issue": "The image policy does not prevent image reuse",
          "impact": "The container may run with outdated or unauthorized image",
          "resolve": "Set `imagePullPolicy` attribute to `Always`"
        },
        "publicId": "SNYK-CC-K8S-42",
        "msg": "spec.template.spec.containers[strimzi-topic-operator].imagePullPolicy",
        "references": [
          "https://kubernetes.io/docs/concepts/containers/images/",
          "https://kubernetes.io/docs/concepts/configuration/overview/#container-images"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "containers[strimzi-topic-operator]",
          "imagePullPolicy"
        ],
        "compliance": []
      }
    ]
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-workload-pam7-offer-management-dmn-pmml/files/install/user-operator/01-ServiceAccount-strimzi-user-operator.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-workload-pam7-offer-management-dmn-pmml/files/install/user-operator/01-ServiceAccount-strimzi-user-operator.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-workload-pam7-offer-management-dmn-pmml/files/install/user-operator/02-Role-strimzi-user-operator.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-workload-pam7-offer-management-dmn-pmml/files/install/user-operator/02-Role-strimzi-user-operator.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": false,
    "infrastructureAsCodeIssues": [
      {
        "id": "SNYK-CC-K8S-47",
        "title": "Role or ClusterRole with dangerous permissions",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Role",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-47",
        "isGeneratedByCustomRule": false,
        "issue": "A role was found using a dangerous permissions",
        "impact": "Using this role grants dangerous permissions. For a ClusterRole this would be considered high severity.",
        "resolve": "Consider removing these permissions",
        "remediation": {
          "kubernetes": "Consider removing these permissions",
          "terraform": "Consider removing these permissions"
        },
        "lineNumber": 23,
        "iacDescription": {
          "issue": "A role was found using a dangerous permissions",
          "impact": "Using this role grants dangerous permissions. For a ClusterRole this would be considered high severity.",
          "resolve": "Consider removing these permissions"
        },
        "publicId": "SNYK-CC-K8S-47",
        "msg": "rules[1].resources",
        "references": [
          "https://kubernetes.io/docs/reference/access-authn-authz/rbac/"
        ],
        "path": [
          "[DocId: 0]",
          "rules[1]",
          "resources"
        ],
        "compliance": []
      }
    ]
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-workload-pam7-offer-management-dmn-pmml/files/install/user-operator/03-RoleBinding-strimzi-user-operator.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-workload-pam7-offer-management-dmn-pmml/files/install/user-operator/03-RoleBinding-strimzi-user-operator.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-workload-pam7-offer-management-dmn-pmml/files/install/user-operator/04-Crd-kafkauser.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-workload-pam7-offer-management-dmn-pmml/files/install/user-operator/04-Crd-kafkauser.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-workload-pam7-offer-management-dmn-pmml/files/install/user-operator/05-Deployment-strimzi-user-operator.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-workload-pam7-offer-management-dmn-pmml/files/install/user-operator/05-Deployment-strimzi-user-operator.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": false,
    "infrastructureAsCodeIssues": [
      {
        "id": "SNYK-CC-K8S-11",
        "title": "Container's or Pod's  UID could clash with host's UID",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-11",
        "isGeneratedByCustomRule": false,
        "issue": "`runAsUser` value is set to low UID",
        "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
        "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
          "terraform": "Set `security_context.run_as_user` value to greater or equal than 10'000"
        },
        "lineNumber": 16,
        "iacDescription": {
          "issue": "`runAsUser` value is set to low UID",
          "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
          "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence"
        },
        "publicId": "SNYK-CC-K8S-11",
        "msg": "input.spec.template.spec.containers[strimzi-user-operator].securityContext.runAsUser",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container",
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod",
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[strimzi-user-operator]",
          "securityContext",
          "runAsUser"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-8",
        "title": "Container is running with writable root filesystem",
        "severity": "low",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-8",
        "isGeneratedByCustomRule": false,
        "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
        "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
          "terraform": "Set `security_context.read_only_root_filesystem` to `true`"
        },
        "lineNumber": 16,
        "iacDescription": {
          "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
          "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`"
        },
        "publicId": "SNYK-CC-K8S-8",
        "msg": "spec.template.spec.containers[strimzi-user-operator].securityContext.readOnlyRootFilesystem",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "containers[strimzi-user-operator]",
          "securityContext",
          "readOnlyRootFilesystem"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-6",
        "title": "Container does not drop all default capabilities",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-6",
        "isGeneratedByCustomRule": false,
        "issue": "All default capabilities are not explicitly dropped",
        "impact": "Containers are running with potentially unnecessary privileges",
        "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
        "remediation": {
          "kubernetes": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
          "terraform": "Add `ALL` to `spec.container.security_context.capabilities.drop` list, and add only required capabilities to `spec.container.security_context.capabilities.add`, ensuring it also does not contain `ALL`"
        },
        "lineNumber": 16,
        "iacDescription": {
          "issue": "All default capabilities are not explicitly dropped",
          "impact": "Containers are running with potentially unnecessary privileges",
          "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`"
        },
        "publicId": "SNYK-CC-K8S-6",
        "msg": "input.spec.template.spec.containers[strimzi-user-operator].securityContext.capabilities.drop",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
          "https://linux-audit.com/linux-capabilities-hardening-linux-binaries-by-removing-setuid/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[strimzi-user-operator]",
          "securityContext",
          "capabilities",
          "drop"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-42",
        "title": "Container could be running with outdated image",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-42",
        "isGeneratedByCustomRule": false,
        "issue": "The image policy does not prevent image reuse",
        "impact": "The container may run with outdated or unauthorized image",
        "resolve": "Set `imagePullPolicy` attribute to `Always`",
        "remediation": {
          "kubernetes": "Set `imagePullPolicy` attribute to `Always`",
          "terraform": "Set `image_pull_policy` attribute to `Always"
        },
        "lineNumber": 16,
        "iacDescription": {
          "issue": "The image policy does not prevent image reuse",
          "impact": "The container may run with outdated or unauthorized image",
          "resolve": "Set `imagePullPolicy` attribute to `Always`"
        },
        "publicId": "SNYK-CC-K8S-42",
        "msg": "spec.template.spec.containers[strimzi-user-operator].imagePullPolicy",
        "references": [
          "https://kubernetes.io/docs/concepts/containers/images/",
          "https://kubernetes.io/docs/concepts/configuration/overview/#container-images"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "containers[strimzi-user-operator]",
          "imagePullPolicy"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-9",
        "title": "Container is running without privilege escalation control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-9",
        "isGeneratedByCustomRule": false,
        "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
        "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
          "terraform": "Set `spec.container.security_context.allow_privilege_escalation` to `false`"
        },
        "lineNumber": 16,
        "iacDescription": {
          "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
          "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`"
        },
        "publicId": "SNYK-CC-K8S-9",
        "msg": "spec.template.spec.containers[strimzi-user-operator].securityContext.allowPrivilegeEscalation",
        "references": [
          "https://www.kernel.org/doc/html/latest/userspace-api/no_new_privs.html"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "containers[strimzi-user-operator]",
          "securityContext",
          "allowPrivilegeEscalation"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-10",
        "title": "Container or Pod is running without root user control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-10",
        "isGeneratedByCustomRule": false,
        "issue": "Container or Pod is running without root user control",
        "impact": "Container or Pod could be running with full administrative privileges",
        "resolve": "Set `securityContext.runAsNonRoot` to `true`",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsNonRoot` to `true`",
          "terraform": "Set `security_context.run_as_non_root` to `true`"
        },
        "lineNumber": 16,
        "iacDescription": {
          "issue": "Container or Pod is running without root user control",
          "impact": "Container or Pod could be running with full administrative privileges",
          "resolve": "Set `securityContext.runAsNonRoot` to `true`"
        },
        "publicId": "SNYK-CC-K8S-10",
        "msg": "input.spec.template.spec.containers[strimzi-user-operator].securityContext.runAsNonRoot",
        "description": "",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[strimzi-user-operator]",
          "securityContext",
          "runAsNonRoot"
        ],
        "compliance": []
      }
    ]
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-workload-parksmap-demo/files/workshop-mlbparks.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-workload-parksmap-demo/files/workshop-mlbparks.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-workload-parksmap-demo/files/workshop-nationalparks.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-workload-parksmap-demo/files/workshop-nationalparks.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-workload-parksmap-demo/files/workshop-parksmap.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-workload-parksmap-demo/files/workshop-parksmap.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-workload-parksmap-demo/files/workshopper-template.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-workload-parksmap-demo/files/workshopper-template.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-workload-rhte-mw-api-mesh/templates/coolstore-catalog-mongodb-persistent.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-workload-rhte-mw-api-mesh/templates/coolstore-catalog-mongodb-persistent.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-workload-rhte-mw-msa-mesh/templates/coolstore-catalog-mongodb-persistent.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-workload-rhte-mw-msa-mesh/templates/coolstore-catalog-mongodb-persistent.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-workload-rhte-mw-msa-mesh/templates/coolstore-gateway.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-workload-rhte-mw-msa-mesh/templates/coolstore-gateway.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-workload-rhte19-optaplanner-101-lab-infra/files/codeready-workspaces-operator-installer/custom-resource.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-workload-rhte19-optaplanner-101-lab-infra/files/codeready-workspaces-operator-installer/custom-resource.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-workload-starter-workshop/templates/etherpad-template.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-workload-starter-workshop/templates/etherpad-template.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-workload-starter-workshop/templates/guides-template.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-workload-starter-workshop/templates/guides-template.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-workload-vertx-reactica/templates/billboard-dc.json",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-workload-vertx-reactica/templates/billboard-dc.json",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-workload-vertx-reactica/templates/billboard-svc.json",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-workload-vertx-reactica/templates/billboard-svc.json",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-workload-vertx-reactica/templates/current-line-updater-dc.json",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-workload-vertx-reactica/templates/current-line-updater-dc.json",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-workload-vertx-reactica/templates/current-line-updater-svc.json",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-workload-vertx-reactica/templates/current-line-updater-svc.json",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-workload-vertx-reactica/templates/event-generator-dc.json",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-workload-vertx-reactica/templates/event-generator-dc.json",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-workload-vertx-reactica/templates/event-generator-svc.json",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-workload-vertx-reactica/templates/event-generator-svc.json",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-workload-vertx-reactica/templates/event-store-dc.json",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-workload-vertx-reactica/templates/event-store-dc.json",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-workload-vertx-reactica/templates/event-store-svc.json",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-workload-vertx-reactica/templates/event-store-svc.json",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-workload-vertx-reactica/templates/queue-length-calculator-dc.json",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-workload-vertx-reactica/templates/queue-length-calculator-dc.json",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp-workload-vertx-reactica/templates/queue-length-calculator-svc.json",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp-workload-vertx-reactica/templates/queue-length-calculator-svc.json",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-3scale-servicemesh-demo/files/rhsso-imagestream.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-3scale-servicemesh-demo/files/rhsso-imagestream.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-3scale-servicemesh-demo/files/rhsso-template.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-3scale-servicemesh-demo/files/rhsso-template.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-agile-integration-enterprise/files/fuse-ignite-server-openshift4-template.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-agile-integration-enterprise/files/fuse-ignite-server-openshift4-template.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-agile-integration-enterprise/files/istio-controlplane.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-agile-integration-enterprise/files/istio-controlplane.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-agile-integration-enterprise/files/postgresql-seed.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-agile-integration-enterprise/files/postgresql-seed.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-ai-spam-demo-apps/files/scaling_role.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-ai-spam-demo-apps/files/scaling_role.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-ai-spam-demo-apps/files/scaling_rolebinding.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-ai-spam-demo-apps/files/scaling_rolebinding.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-ai-spam-demo-apps/files/scaling_sa.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-ai-spam-demo-apps/files/scaling_sa.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-ai-spam-demo-odh/files/deploy_role.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-ai-spam-demo-odh/files/deploy_role.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": false,
    "infrastructureAsCodeIssues": [
      {
        "id": "SNYK-CC-K8S-47",
        "title": "Role or ClusterRole with dangerous permissions",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Role",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-47",
        "isGeneratedByCustomRule": false,
        "issue": "A role was found using a dangerous permissions",
        "impact": "Using this role grants dangerous permissions. For a ClusterRole this would be considered high severity.",
        "resolve": "Consider removing these permissions",
        "remediation": {
          "kubernetes": "Consider removing these permissions",
          "terraform": "Consider removing these permissions"
        },
        "lineNumber": 123,
        "iacDescription": {
          "issue": "A role was found using a dangerous permissions",
          "impact": "Using this role grants dangerous permissions. For a ClusterRole this would be considered high severity.",
          "resolve": "Consider removing these permissions"
        },
        "publicId": "SNYK-CC-K8S-47",
        "msg": "rules[11].resources",
        "references": [
          "https://kubernetes.io/docs/reference/access-authn-authz/rbac/"
        ],
        "path": [
          "[DocId: 0]",
          "rules[11]",
          "resources"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-47",
        "title": "Role or ClusterRole with dangerous permissions",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Role",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-47",
        "isGeneratedByCustomRule": false,
        "issue": "A role was found using a dangerous permissions",
        "impact": "Using this role grants dangerous permissions. For a ClusterRole this would be considered high severity.",
        "resolve": "Consider removing these permissions",
        "remediation": {
          "kubernetes": "Consider removing these permissions",
          "terraform": "Consider removing these permissions"
        },
        "lineNumber": 50,
        "iacDescription": {
          "issue": "A role was found using a dangerous permissions",
          "impact": "Using this role grants dangerous permissions. For a ClusterRole this would be considered high severity.",
          "resolve": "Consider removing these permissions"
        },
        "publicId": "SNYK-CC-K8S-47",
        "msg": "rules[4].resources",
        "references": [
          "https://kubernetes.io/docs/reference/access-authn-authz/rbac/"
        ],
        "path": [
          "[DocId: 0]",
          "rules[4]",
          "resources"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-47",
        "title": "Role or ClusterRole with dangerous permissions",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Role",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-47",
        "isGeneratedByCustomRule": false,
        "issue": "A role was found using a dangerous permissions",
        "impact": "Using this role grants dangerous permissions. For a ClusterRole this would be considered high severity.",
        "resolve": "Consider removing these permissions",
        "remediation": {
          "kubernetes": "Consider removing these permissions",
          "terraform": "Consider removing these permissions"
        },
        "lineNumber": 110,
        "iacDescription": {
          "issue": "A role was found using a dangerous permissions",
          "impact": "Using this role grants dangerous permissions. For a ClusterRole this would be considered high severity.",
          "resolve": "Consider removing these permissions"
        },
        "publicId": "SNYK-CC-K8S-47",
        "msg": "rules[10].resources",
        "references": [
          "https://kubernetes.io/docs/reference/access-authn-authz/rbac/"
        ],
        "path": [
          "[DocId: 0]",
          "rules[10]",
          "resources"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-44",
        "title": "Role or ClusterRole with too wide permissions",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Role",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-44",
        "isGeneratedByCustomRule": false,
        "issue": "The role uses wildcards, which grant the role permissions to the whole cluster",
        "impact": "The use of wildcard rights grants is likely to provide excessive rights to the Kubernetes API. For a ClusterRole this would be considered high severity.",
        "resolve": "Set only the necessary permissions required",
        "remediation": {
          "kubernetes": "Set only the necessary permissions required",
          "terraform": "Remove any wildcards [*] from `rule.verbs` and `rule.resources`"
        },
        "lineNumber": 782,
        "iacDescription": {
          "issue": "The role uses wildcards, which grant the role permissions to the whole cluster",
          "impact": "The use of wildcard rights grants is likely to provide excessive rights to the Kubernetes API. For a ClusterRole this would be considered high severity.",
          "resolve": "Set only the necessary permissions required"
        },
        "publicId": "SNYK-CC-K8S-44",
        "msg": "rules[72].verbs",
        "references": [
          "https://kubernetes.io/docs/reference/access-authn-authz/rbac/"
        ],
        "path": [
          "[DocId: 0]",
          "rules[72]",
          "verbs"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-44",
        "title": "Role or ClusterRole with too wide permissions",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Role",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-44",
        "isGeneratedByCustomRule": false,
        "issue": "The role uses wildcards, which grant the role permissions to the whole cluster",
        "impact": "The use of wildcard rights grants is likely to provide excessive rights to the Kubernetes API. For a ClusterRole this would be considered high severity.",
        "resolve": "Set only the necessary permissions required",
        "remediation": {
          "kubernetes": "Set only the necessary permissions required",
          "terraform": "Remove any wildcards [*] from `rule.verbs` and `rule.resources`"
        },
        "lineNumber": 780,
        "iacDescription": {
          "issue": "The role uses wildcards, which grant the role permissions to the whole cluster",
          "impact": "The use of wildcard rights grants is likely to provide excessive rights to the Kubernetes API. For a ClusterRole this would be considered high severity.",
          "resolve": "Set only the necessary permissions required"
        },
        "publicId": "SNYK-CC-K8S-44",
        "msg": "rules[72].resources",
        "references": [
          "https://kubernetes.io/docs/reference/access-authn-authz/rbac/"
        ],
        "path": [
          "[DocId: 0]",
          "rules[72]",
          "resources"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-44",
        "title": "Role or ClusterRole with too wide permissions",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Role",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-44",
        "isGeneratedByCustomRule": false,
        "issue": "The role uses wildcards, which grant the role permissions to the whole cluster",
        "impact": "The use of wildcard rights grants is likely to provide excessive rights to the Kubernetes API. For a ClusterRole this would be considered high severity.",
        "resolve": "Set only the necessary permissions required",
        "remediation": {
          "kubernetes": "Set only the necessary permissions required",
          "terraform": "Remove any wildcards [*] from `rule.verbs` and `rule.resources`"
        },
        "lineNumber": 658,
        "iacDescription": {
          "issue": "The role uses wildcards, which grant the role permissions to the whole cluster",
          "impact": "The use of wildcard rights grants is likely to provide excessive rights to the Kubernetes API. For a ClusterRole this would be considered high severity.",
          "resolve": "Set only the necessary permissions required"
        },
        "publicId": "SNYK-CC-K8S-44",
        "msg": "rules[58].verbs",
        "references": [
          "https://kubernetes.io/docs/reference/access-authn-authz/rbac/"
        ],
        "path": [
          "[DocId: 0]",
          "rules[58]",
          "verbs"
        ],
        "compliance": []
      }
    ]
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-ai-spam-demo-odh/files/deploy_role_binding.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-ai-spam-demo-odh/files/deploy_role_binding.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-ai-spam-demo-odh/files/deploy_service_account.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-ai-spam-demo-odh/files/deploy_service_account.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-ai-spam-demo-odh/files/opendatahub_v1alpha1_opendatahub_cr.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-ai-spam-demo-odh/files/opendatahub_v1alpha1_opendatahub_cr.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-ai-spam-demo-odh/files/operator.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-ai-spam-demo-odh/files/operator.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": false,
    "infrastructureAsCodeIssues": [
      {
        "id": "SNYK-CC-K8S-9",
        "title": "Container is running without privilege escalation control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-9",
        "isGeneratedByCustomRule": false,
        "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
        "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
          "terraform": "Set `spec.container.security_context.allow_privilege_escalation` to `false`"
        },
        "lineNumber": 17,
        "iacDescription": {
          "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
          "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`"
        },
        "publicId": "SNYK-CC-K8S-9",
        "msg": "spec.template.spec.containers[opendatahub-operator].securityContext.allowPrivilegeEscalation",
        "references": [
          "https://www.kernel.org/doc/html/latest/userspace-api/no_new_privs.html"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "containers[opendatahub-operator]",
          "securityContext",
          "allowPrivilegeEscalation"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-4",
        "title": "Container is running without memory limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-4",
        "isGeneratedByCustomRule": false,
        "issue": "Memory limit is not defined",
        "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
        "resolve": "Set `resources.limits.memory` value",
        "remediation": {
          "kubernetes": "Set `resources.limits.memory` value",
          "terraform": "Set `resources.limits.memory` value"
        },
        "lineNumber": 17,
        "iacDescription": {
          "issue": "Memory limit is not defined",
          "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
          "resolve": "Set `resources.limits.memory` value"
        },
        "publicId": "SNYK-CC-K8S-4",
        "msg": "input.spec.template.spec.containers[opendatahub-operator].resources.limits.memory",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/memory-default-namespace/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[opendatahub-operator]",
          "resources",
          "limits",
          "memory"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-8",
        "title": "Container is running with writable root filesystem",
        "severity": "low",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-8",
        "isGeneratedByCustomRule": false,
        "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
        "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
          "terraform": "Set `security_context.read_only_root_filesystem` to `true`"
        },
        "lineNumber": 17,
        "iacDescription": {
          "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
          "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`"
        },
        "publicId": "SNYK-CC-K8S-8",
        "msg": "spec.template.spec.containers[opendatahub-operator].securityContext.readOnlyRootFilesystem",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "containers[opendatahub-operator]",
          "securityContext",
          "readOnlyRootFilesystem"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-5",
        "title": "Container has no CPU limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-5",
        "isGeneratedByCustomRule": false,
        "issue": "Container has no CPU limit",
        "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
        "resolve": "Add `resources.limits.cpu` field with required CPU limit value",
        "remediation": {
          "kubernetes": "Add `resources.limits.cpu` field with required CPU limit value",
          "terraform": "Add `spec.container.resources.limits.cpu` field with required CPU limit value"
        },
        "lineNumber": 17,
        "iacDescription": {
          "issue": "Container has no CPU limit",
          "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
          "resolve": "Add `resources.limits.cpu` field with required CPU limit value"
        },
        "publicId": "SNYK-CC-K8S-5",
        "msg": "input.spec.template.spec.containers[opendatahub-operator].resources.limits.cpu",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-cpu-resource/",
          "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/cpu-default-namespace/",
          "https://github.com/kubernetes/design-proposals-archive/blob/8da1442ea29adccea40693357d04727127e045ed/node/resource-qos.md#compressible-resource-guaranteess"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[opendatahub-operator]",
          "resources",
          "limits",
          "cpu"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-11",
        "title": "Container's or Pod's  UID could clash with host's UID",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-11",
        "isGeneratedByCustomRule": false,
        "issue": "`runAsUser` value is set to low UID",
        "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
        "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
          "terraform": "Set `security_context.run_as_user` value to greater or equal than 10'000"
        },
        "lineNumber": 17,
        "iacDescription": {
          "issue": "`runAsUser` value is set to low UID",
          "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
          "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence"
        },
        "publicId": "SNYK-CC-K8S-11",
        "msg": "input.spec.template.spec.containers[opendatahub-operator].securityContext.runAsUser",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container",
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod",
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[opendatahub-operator]",
          "securityContext",
          "runAsUser"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-10",
        "title": "Container or Pod is running without root user control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-10",
        "isGeneratedByCustomRule": false,
        "issue": "Container or Pod is running without root user control",
        "impact": "Container or Pod could be running with full administrative privileges",
        "resolve": "Set `securityContext.runAsNonRoot` to `true`",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsNonRoot` to `true`",
          "terraform": "Set `security_context.run_as_non_root` to `true`"
        },
        "lineNumber": 17,
        "iacDescription": {
          "issue": "Container or Pod is running without root user control",
          "impact": "Container or Pod could be running with full administrative privileges",
          "resolve": "Set `securityContext.runAsNonRoot` to `true`"
        },
        "publicId": "SNYK-CC-K8S-10",
        "msg": "input.spec.template.spec.containers[opendatahub-operator].securityContext.runAsNonRoot",
        "description": "",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[opendatahub-operator]",
          "securityContext",
          "runAsNonRoot"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-41",
        "title": "Container is running without liveness probe",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-41",
        "isGeneratedByCustomRule": false,
        "issue": "Liveness probe is not defined",
        "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
        "resolve": "Add `livenessProbe` attribute",
        "remediation": {
          "kubernetes": "Add `livenessProbe` attribute",
          "terraform": "Add `liveness_probe` attribute"
        },
        "lineNumber": 17,
        "iacDescription": {
          "issue": "Liveness probe is not defined",
          "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
          "resolve": "Add `livenessProbe` attribute"
        },
        "publicId": "SNYK-CC-K8S-41",
        "msg": "spec.template.spec.containers[opendatahub-operator].livenessProbe",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/",
          "https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/",
          "https://cloud.google.com/blog/products/gcp/kubernetes-best-practices-setting-up-health-checks-with-readiness-and-liveness-probes"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "containers[opendatahub-operator]",
          "livenessProbe"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-6",
        "title": "Container does not drop all default capabilities",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-6",
        "isGeneratedByCustomRule": false,
        "issue": "All default capabilities are not explicitly dropped",
        "impact": "Containers are running with potentially unnecessary privileges",
        "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
        "remediation": {
          "kubernetes": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
          "terraform": "Add `ALL` to `spec.container.security_context.capabilities.drop` list, and add only required capabilities to `spec.container.security_context.capabilities.add`, ensuring it also does not contain `ALL`"
        },
        "lineNumber": 17,
        "iacDescription": {
          "issue": "All default capabilities are not explicitly dropped",
          "impact": "Containers are running with potentially unnecessary privileges",
          "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`"
        },
        "publicId": "SNYK-CC-K8S-6",
        "msg": "input.spec.template.spec.containers[opendatahub-operator].securityContext.capabilities.drop",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
          "https://linux-audit.com/linux-capabilities-hardening-linux-binaries-by-removing-setuid/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[opendatahub-operator]",
          "securityContext",
          "capabilities",
          "drop"
        ],
        "compliance": []
      }
    ]
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-automation-broker/files/service_catalog_api_server.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-automation-broker/files/service_catalog_api_server.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-automation-broker/files/service_catalog_controller_manager.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-automation-broker/files/service_catalog_controller_manager.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-camelk-crw/files/stack_imagestream.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-camelk-crw/files/stack_imagestream.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-camelk-crw/files/apicurio/operator-old.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-camelk-crw/files/apicurio/operator-old.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": false,
    "infrastructureAsCodeIssues": [
      {
        "id": "SNYK-CC-K8S-11",
        "title": "Container's or Pod's  UID could clash with host's UID",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-11",
        "isGeneratedByCustomRule": false,
        "issue": "`runAsUser` value is set to low UID",
        "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
        "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
          "terraform": "Set `security_context.run_as_user` value to greater or equal than 10'000"
        },
        "lineNumber": 17,
        "iacDescription": {
          "issue": "`runAsUser` value is set to low UID",
          "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
          "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence"
        },
        "publicId": "SNYK-CC-K8S-11",
        "msg": "input.spec.template.spec.containers[apicurio-operator].securityContext.runAsUser",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container",
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod",
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[apicurio-operator]",
          "securityContext",
          "runAsUser"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-5",
        "title": "Container has no CPU limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-5",
        "isGeneratedByCustomRule": false,
        "issue": "Container has no CPU limit",
        "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
        "resolve": "Add `resources.limits.cpu` field with required CPU limit value",
        "remediation": {
          "kubernetes": "Add `resources.limits.cpu` field with required CPU limit value",
          "terraform": "Add `spec.container.resources.limits.cpu` field with required CPU limit value"
        },
        "lineNumber": 17,
        "iacDescription": {
          "issue": "Container has no CPU limit",
          "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
          "resolve": "Add `resources.limits.cpu` field with required CPU limit value"
        },
        "publicId": "SNYK-CC-K8S-5",
        "msg": "input.spec.template.spec.containers[apicurio-operator].resources.limits.cpu",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-cpu-resource/",
          "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/cpu-default-namespace/",
          "https://github.com/kubernetes/design-proposals-archive/blob/8da1442ea29adccea40693357d04727127e045ed/node/resource-qos.md#compressible-resource-guaranteess"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[apicurio-operator]",
          "resources",
          "limits",
          "cpu"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-8",
        "title": "Container is running with writable root filesystem",
        "severity": "low",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-8",
        "isGeneratedByCustomRule": false,
        "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
        "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
          "terraform": "Set `security_context.read_only_root_filesystem` to `true`"
        },
        "lineNumber": 17,
        "iacDescription": {
          "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
          "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`"
        },
        "publicId": "SNYK-CC-K8S-8",
        "msg": "spec.template.spec.containers[apicurio-operator].securityContext.readOnlyRootFilesystem",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "containers[apicurio-operator]",
          "securityContext",
          "readOnlyRootFilesystem"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-10",
        "title": "Container or Pod is running without root user control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-10",
        "isGeneratedByCustomRule": false,
        "issue": "Container or Pod is running without root user control",
        "impact": "Container or Pod could be running with full administrative privileges",
        "resolve": "Set `securityContext.runAsNonRoot` to `true`",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsNonRoot` to `true`",
          "terraform": "Set `security_context.run_as_non_root` to `true`"
        },
        "lineNumber": 17,
        "iacDescription": {
          "issue": "Container or Pod is running without root user control",
          "impact": "Container or Pod could be running with full administrative privileges",
          "resolve": "Set `securityContext.runAsNonRoot` to `true`"
        },
        "publicId": "SNYK-CC-K8S-10",
        "msg": "input.spec.template.spec.containers[apicurio-operator].securityContext.runAsNonRoot",
        "description": "",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[apicurio-operator]",
          "securityContext",
          "runAsNonRoot"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-6",
        "title": "Container does not drop all default capabilities",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-6",
        "isGeneratedByCustomRule": false,
        "issue": "All default capabilities are not explicitly dropped",
        "impact": "Containers are running with potentially unnecessary privileges",
        "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
        "remediation": {
          "kubernetes": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
          "terraform": "Add `ALL` to `spec.container.security_context.capabilities.drop` list, and add only required capabilities to `spec.container.security_context.capabilities.add`, ensuring it also does not contain `ALL`"
        },
        "lineNumber": 17,
        "iacDescription": {
          "issue": "All default capabilities are not explicitly dropped",
          "impact": "Containers are running with potentially unnecessary privileges",
          "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`"
        },
        "publicId": "SNYK-CC-K8S-6",
        "msg": "input.spec.template.spec.containers[apicurio-operator].securityContext.capabilities.drop",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
          "https://linux-audit.com/linux-capabilities-hardening-linux-binaries-by-removing-setuid/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[apicurio-operator]",
          "securityContext",
          "capabilities",
          "drop"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-41",
        "title": "Container is running without liveness probe",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-41",
        "isGeneratedByCustomRule": false,
        "issue": "Liveness probe is not defined",
        "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
        "resolve": "Add `livenessProbe` attribute",
        "remediation": {
          "kubernetes": "Add `livenessProbe` attribute",
          "terraform": "Add `liveness_probe` attribute"
        },
        "lineNumber": 17,
        "iacDescription": {
          "issue": "Liveness probe is not defined",
          "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
          "resolve": "Add `livenessProbe` attribute"
        },
        "publicId": "SNYK-CC-K8S-41",
        "msg": "spec.template.spec.containers[apicurio-operator].livenessProbe",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/",
          "https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/",
          "https://cloud.google.com/blog/products/gcp/kubernetes-best-practices-setting-up-health-checks-with-readiness-and-liveness-probes"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "containers[apicurio-operator]",
          "livenessProbe"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-4",
        "title": "Container is running without memory limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-4",
        "isGeneratedByCustomRule": false,
        "issue": "Memory limit is not defined",
        "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
        "resolve": "Set `resources.limits.memory` value",
        "remediation": {
          "kubernetes": "Set `resources.limits.memory` value",
          "terraform": "Set `resources.limits.memory` value"
        },
        "lineNumber": 17,
        "iacDescription": {
          "issue": "Memory limit is not defined",
          "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
          "resolve": "Set `resources.limits.memory` value"
        },
        "publicId": "SNYK-CC-K8S-4",
        "msg": "input.spec.template.spec.containers[apicurio-operator].resources.limits.memory",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/memory-default-namespace/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[apicurio-operator]",
          "resources",
          "limits",
          "memory"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-9",
        "title": "Container is running without privilege escalation control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-9",
        "isGeneratedByCustomRule": false,
        "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
        "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
          "terraform": "Set `spec.container.security_context.allow_privilege_escalation` to `false`"
        },
        "lineNumber": 17,
        "iacDescription": {
          "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
          "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`"
        },
        "publicId": "SNYK-CC-K8S-9",
        "msg": "spec.template.spec.containers[apicurio-operator].securityContext.allowPrivilegeEscalation",
        "references": [
          "https://www.kernel.org/doc/html/latest/userspace-api/no_new_privs.html"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "containers[apicurio-operator]",
          "securityContext",
          "allowPrivilegeEscalation"
        ],
        "compliance": []
      }
    ]
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-camelk-crw/files/apicurio/operator.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-camelk-crw/files/apicurio/operator.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-camelk-crw/files/apicurio/service.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-camelk-crw/files/apicurio/service.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-camelk-crw/files/codeready-workspaces/cluster.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-camelk-crw/files/codeready-workspaces/cluster.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-camelk-crw/files/codeready-workspaces/operator.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-camelk-crw/files/codeready-workspaces/operator.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-camelk-crw/files/fuse/fis-image-streams-2.1.fuse-750056-redhat-00006.json",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-camelk-crw/files/fuse/fis-image-streams-2.1.fuse-750056-redhat-00006.json",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-camelk-crw/files/fuse/fuse-imagepuller.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-camelk-crw/files/fuse/fuse-imagepuller.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": false,
    "infrastructureAsCodeIssues": [
      {
        "id": "SNYK-CC-K8S-9",
        "title": "Container is running without privilege escalation control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-9",
        "isGeneratedByCustomRule": false,
        "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
        "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
          "terraform": "Set `spec.container.security_context.allow_privilege_escalation` to `false`"
        },
        "lineNumber": 10,
        "iacDescription": {
          "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
          "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`"
        },
        "publicId": "SNYK-CC-K8S-9",
        "msg": "spec.template.spec.containers[fuse7-java-openshift].securityContext.allowPrivilegeEscalation",
        "references": [
          "https://www.kernel.org/doc/html/latest/userspace-api/no_new_privs.html"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "containers[fuse7-java-openshift]",
          "securityContext",
          "allowPrivilegeEscalation"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-4",
        "title": "Container is running without memory limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-4",
        "isGeneratedByCustomRule": false,
        "issue": "Memory limit is not defined",
        "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
        "resolve": "Set `resources.limits.memory` value",
        "remediation": {
          "kubernetes": "Set `resources.limits.memory` value",
          "terraform": "Set `resources.limits.memory` value"
        },
        "lineNumber": 10,
        "iacDescription": {
          "issue": "Memory limit is not defined",
          "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
          "resolve": "Set `resources.limits.memory` value"
        },
        "publicId": "SNYK-CC-K8S-4",
        "msg": "input.spec.template.spec.containers[fuse7-java-openshift].resources.limits.memory",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/memory-default-namespace/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[fuse7-java-openshift]",
          "resources",
          "limits",
          "memory"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-10",
        "title": "Container or Pod is running without root user control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-10",
        "isGeneratedByCustomRule": false,
        "issue": "Container or Pod is running without root user control",
        "impact": "Container or Pod could be running with full administrative privileges",
        "resolve": "Set `securityContext.runAsNonRoot` to `true`",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsNonRoot` to `true`",
          "terraform": "Set `security_context.run_as_non_root` to `true`"
        },
        "lineNumber": 10,
        "iacDescription": {
          "issue": "Container or Pod is running without root user control",
          "impact": "Container or Pod could be running with full administrative privileges",
          "resolve": "Set `securityContext.runAsNonRoot` to `true`"
        },
        "publicId": "SNYK-CC-K8S-10",
        "msg": "input.spec.template.spec.containers[fuse7-java-openshift].securityContext.runAsNonRoot",
        "description": "",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[fuse7-java-openshift]",
          "securityContext",
          "runAsNonRoot"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-6",
        "title": "Container does not drop all default capabilities",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-6",
        "isGeneratedByCustomRule": false,
        "issue": "All default capabilities are not explicitly dropped",
        "impact": "Containers are running with potentially unnecessary privileges",
        "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
        "remediation": {
          "kubernetes": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
          "terraform": "Add `ALL` to `spec.container.security_context.capabilities.drop` list, and add only required capabilities to `spec.container.security_context.capabilities.add`, ensuring it also does not contain `ALL`"
        },
        "lineNumber": 10,
        "iacDescription": {
          "issue": "All default capabilities are not explicitly dropped",
          "impact": "Containers are running with potentially unnecessary privileges",
          "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`"
        },
        "publicId": "SNYK-CC-K8S-6",
        "msg": "input.spec.template.spec.containers[fuse7-java-openshift].securityContext.capabilities.drop",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
          "https://linux-audit.com/linux-capabilities-hardening-linux-binaries-by-removing-setuid/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[fuse7-java-openshift]",
          "securityContext",
          "capabilities",
          "drop"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-11",
        "title": "Container's or Pod's  UID could clash with host's UID",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-11",
        "isGeneratedByCustomRule": false,
        "issue": "`runAsUser` value is set to low UID",
        "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
        "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
          "terraform": "Set `security_context.run_as_user` value to greater or equal than 10'000"
        },
        "lineNumber": 10,
        "iacDescription": {
          "issue": "`runAsUser` value is set to low UID",
          "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
          "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence"
        },
        "publicId": "SNYK-CC-K8S-11",
        "msg": "input.spec.template.spec.containers[fuse7-java-openshift].securityContext.runAsUser",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container",
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod",
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[fuse7-java-openshift]",
          "securityContext",
          "runAsUser"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-8",
        "title": "Container is running with writable root filesystem",
        "severity": "low",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-8",
        "isGeneratedByCustomRule": false,
        "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
        "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
          "terraform": "Set `security_context.read_only_root_filesystem` to `true`"
        },
        "lineNumber": 10,
        "iacDescription": {
          "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
          "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`"
        },
        "publicId": "SNYK-CC-K8S-8",
        "msg": "spec.template.spec.containers[fuse7-java-openshift].securityContext.readOnlyRootFilesystem",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "containers[fuse7-java-openshift]",
          "securityContext",
          "readOnlyRootFilesystem"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-5",
        "title": "Container has no CPU limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-5",
        "isGeneratedByCustomRule": false,
        "issue": "Container has no CPU limit",
        "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
        "resolve": "Add `resources.limits.cpu` field with required CPU limit value",
        "remediation": {
          "kubernetes": "Add `resources.limits.cpu` field with required CPU limit value",
          "terraform": "Add `spec.container.resources.limits.cpu` field with required CPU limit value"
        },
        "lineNumber": 10,
        "iacDescription": {
          "issue": "Container has no CPU limit",
          "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
          "resolve": "Add `resources.limits.cpu` field with required CPU limit value"
        },
        "publicId": "SNYK-CC-K8S-5",
        "msg": "input.spec.template.spec.containers[fuse7-java-openshift].resources.limits.cpu",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-cpu-resource/",
          "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/cpu-default-namespace/",
          "https://github.com/kubernetes/design-proposals-archive/blob/8da1442ea29adccea40693357d04727127e045ed/node/resource-qos.md#compressible-resource-guaranteess"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[fuse7-java-openshift]",
          "resources",
          "limits",
          "cpu"
        ],
        "compliance": []
      }
    ]
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-camelk-crw/files/fuse/samples-operator-patch.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-camelk-crw/files/fuse/samples-operator-patch.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-camelk-crw/files/fuse/quickstarts/eap-camel-amq-template.json",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-camelk-crw/files/fuse/quickstarts/eap-camel-amq-template.json",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-camelk-crw/files/fuse/quickstarts/eap-camel-cdi-template.json",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-camelk-crw/files/fuse/quickstarts/eap-camel-cdi-template.json",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-camelk-crw/files/fuse/quickstarts/eap-camel-cxf-jaxrs-template.json",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-camelk-crw/files/fuse/quickstarts/eap-camel-cxf-jaxrs-template.json",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-camelk-crw/files/fuse/quickstarts/eap-camel-cxf-jaxws-template.json",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-camelk-crw/files/fuse/quickstarts/eap-camel-cxf-jaxws-template.json",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-camelk-crw/files/fuse/quickstarts/eap-camel-jpa-template.json",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-camelk-crw/files/fuse/quickstarts/eap-camel-jpa-template.json",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-camelk-crw/files/fuse/quickstarts/karaf-camel-amq-template.json",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-camelk-crw/files/fuse/quickstarts/karaf-camel-amq-template.json",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-camelk-crw/files/fuse/quickstarts/karaf-camel-log-template.json",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-camelk-crw/files/fuse/quickstarts/karaf-camel-log-template.json",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-camelk-crw/files/fuse/quickstarts/karaf-camel-rest-sql-template.json",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-camelk-crw/files/fuse/quickstarts/karaf-camel-rest-sql-template.json",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-camelk-crw/files/fuse/quickstarts/karaf-cxf-rest-template.json",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-camelk-crw/files/fuse/quickstarts/karaf-cxf-rest-template.json",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-camelk-crw/files/fuse/quickstarts/spring-boot-2-camel-amq-template.json",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-camelk-crw/files/fuse/quickstarts/spring-boot-2-camel-amq-template.json",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-camelk-crw/files/fuse/quickstarts/spring-boot-2-camel-drools-template.json",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-camelk-crw/files/fuse/quickstarts/spring-boot-2-camel-drools-template.json",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-camelk-crw/files/fuse/quickstarts/spring-boot-2-camel-infinispan-template.json",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-camelk-crw/files/fuse/quickstarts/spring-boot-2-camel-infinispan-template.json",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-camelk-crw/files/fuse/quickstarts/spring-boot-2-camel-rest-3scale-template.json",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-camelk-crw/files/fuse/quickstarts/spring-boot-2-camel-rest-3scale-template.json",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-camelk-crw/files/fuse/quickstarts/spring-boot-2-camel-rest-sql-template.json",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-camelk-crw/files/fuse/quickstarts/spring-boot-2-camel-rest-sql-template.json",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-camelk-crw/files/fuse/quickstarts/spring-boot-2-camel-teiid-template.json",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-camelk-crw/files/fuse/quickstarts/spring-boot-2-camel-teiid-template.json",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-camelk-crw/files/fuse/quickstarts/spring-boot-2-camel-template.json",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-camelk-crw/files/fuse/quickstarts/spring-boot-2-camel-template.json",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-camelk-crw/files/fuse/quickstarts/spring-boot-2-camel-xa-template.json",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-camelk-crw/files/fuse/quickstarts/spring-boot-2-camel-xa-template.json",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-camelk-crw/files/fuse/quickstarts/spring-boot-2-camel-xml-template.json",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-camelk-crw/files/fuse/quickstarts/spring-boot-2-camel-xml-template.json",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-camelk-crw/files/fuse/quickstarts/spring-boot-2-cxf-jaxrs-template.json",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-camelk-crw/files/fuse/quickstarts/spring-boot-2-cxf-jaxrs-template.json",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-camelk-crw/files/fuse/quickstarts/spring-boot-2-cxf-jaxws-template.json",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-camelk-crw/files/fuse/quickstarts/spring-boot-2-cxf-jaxws-template.json",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-camelk-crw/files/fuse/quickstarts/spring-boot-camel-amq-template.json",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-camelk-crw/files/fuse/quickstarts/spring-boot-camel-amq-template.json",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-camelk-crw/files/fuse/quickstarts/spring-boot-camel-config-template.json",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-camelk-crw/files/fuse/quickstarts/spring-boot-camel-config-template.json",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-camelk-crw/files/fuse/quickstarts/spring-boot-camel-drools-template.json",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-camelk-crw/files/fuse/quickstarts/spring-boot-camel-drools-template.json",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-camelk-crw/files/fuse/quickstarts/spring-boot-camel-infinispan-template.json",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-camelk-crw/files/fuse/quickstarts/spring-boot-camel-infinispan-template.json",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-camelk-crw/files/fuse/quickstarts/spring-boot-camel-rest-3scale-template.json",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-camelk-crw/files/fuse/quickstarts/spring-boot-camel-rest-3scale-template.json",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-camelk-crw/files/fuse/quickstarts/spring-boot-camel-rest-sql-template.json",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-camelk-crw/files/fuse/quickstarts/spring-boot-camel-rest-sql-template.json",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-camelk-crw/files/fuse/quickstarts/spring-boot-camel-template.json",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-camelk-crw/files/fuse/quickstarts/spring-boot-camel-template.json",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-camelk-crw/files/fuse/quickstarts/spring-boot-camel-xa-template.json",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-camelk-crw/files/fuse/quickstarts/spring-boot-camel-xa-template.json",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-camelk-crw/files/fuse/quickstarts/spring-boot-camel-xml-template.json",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-camelk-crw/files/fuse/quickstarts/spring-boot-camel-xml-template.json",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-camelk-crw/files/fuse/quickstarts/spring-boot-cxf-jaxrs-template.json",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-camelk-crw/files/fuse/quickstarts/spring-boot-cxf-jaxrs-template.json",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-camelk-crw/files/fuse/quickstarts/spring-boot-cxf-jaxws-template.json",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-camelk-crw/files/fuse/quickstarts/spring-boot-cxf-jaxws-template.json",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-camelk-crw/files/grafana/instance.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-camelk-crw/files/grafana/instance.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-camelk-crw/files/grafana/operator.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-camelk-crw/files/grafana/operator.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-camelk-crw/files/prometheus/operator.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-camelk-crw/files/prometheus/operator.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-camelk-crw/files/prometheus/route.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-camelk-crw/files/prometheus/route.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-camelk-crw/files/prometheus/service.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-camelk-crw/files/prometheus/service.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-camelk-crw/files/prometheus/servicemonitor.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-camelk-crw/files/prometheus/servicemonitor.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-camelk-lab/templates/amqstreams-subscription.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-camelk-lab/templates/amqstreams-subscription.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-camelk-lab/templates/camelk-subscription.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-camelk-lab/templates/camelk-subscription.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-camelk-lab/templates/installed-community-openshift-operators.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-camelk-lab/templates/installed-community-openshift-operators.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-camelk-lab/templates/installed-redhat-openshift-operators.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-camelk-lab/templates/installed-redhat-openshift-operators.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-ccnrd-cuttingedge/files/amqstreams_subscription.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-ccnrd-cuttingedge/files/amqstreams_subscription.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-ccnrd-cuttingedge/files/ccn-sso-template.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-ccnrd-cuttingedge/files/ccn-sso-template.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-ccnrd-cuttingedge/files/codeready_cr.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-ccnrd-cuttingedge/files/codeready_cr.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-ccnrd-cuttingedge/files/codeready_operatorgroup.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-ccnrd-cuttingedge/files/codeready_operatorgroup.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-ccnrd-cuttingedge/files/codeready_subscription.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-ccnrd-cuttingedge/files/codeready_subscription.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-ccnrd-cuttingedge/files/community-operators-index.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-ccnrd-cuttingedge/files/community-operators-index.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-ccnrd-cuttingedge/files/coolstore-monolith-binary-build-template.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-ccnrd-cuttingedge/files/coolstore-monolith-binary-build-template.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-ccnrd-cuttingedge/files/coolstore-monolith-pipeline-build-template.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-ccnrd-cuttingedge/files/coolstore-monolith-pipeline-build-template.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-ccnrd-cuttingedge/files/eap74-openjdk11-image-stream.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-ccnrd-cuttingedge/files/eap74-openjdk11-image-stream.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-ccnrd-cuttingedge/files/elasticsearch_subscription.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-ccnrd-cuttingedge/files/elasticsearch_subscription.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-ccnrd-cuttingedge/files/jaeger-all-in-one-template.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-ccnrd-cuttingedge/files/jaeger-all-in-one-template.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-ccnrd-cuttingedge/files/jaeger_subscription.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-ccnrd-cuttingedge/files/jaeger_subscription.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-ccnrd-cuttingedge/files/jenkins-template.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-ccnrd-cuttingedge/files/jenkins-template.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-ccnrd-cuttingedge/files/kiali_subscription.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-ccnrd-cuttingedge/files/kiali_subscription.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-ccnrd-cuttingedge/files/knative_eventing_cr.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-ccnrd-cuttingedge/files/knative_eventing_cr.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-ccnrd-cuttingedge/files/knative_kafka_cr.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-ccnrd-cuttingedge/files/knative_kafka_cr.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-ccnrd-cuttingedge/files/knative_serving_cr.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-ccnrd-cuttingedge/files/knative_serving_cr.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-ccnrd-cuttingedge/files/osm_subscription.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-ccnrd-cuttingedge/files/osm_subscription.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-ccnrd-cuttingedge/files/pipelines_subscription.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-ccnrd-cuttingedge/files/pipelines_subscription.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-ccnrd-cuttingedge/files/redhat-operators-index.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-ccnrd-cuttingedge/files/redhat-operators-index.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-ccnrd-cuttingedge/files/redis-template.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-ccnrd-cuttingedge/files/redis-template.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-ccnrd-cuttingedge/files/serverless_subscription.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-ccnrd-cuttingedge/files/serverless_subscription.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-ccnrd-cuttingedge/files/sso-image-stream.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-ccnrd-cuttingedge/files/sso-image-stream.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-ccnrd-cuttingedge/files/stack_imagestream.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-ccnrd-cuttingedge/files/stack_imagestream.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-ccnrd-stable/files/amqstreams_subscription.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-ccnrd-stable/files/amqstreams_subscription.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-ccnrd-stable/files/ccn-sso-template.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-ccnrd-stable/files/ccn-sso-template.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-ccnrd-stable/files/codeready_cr.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-ccnrd-stable/files/codeready_cr.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-ccnrd-stable/files/codeready_operatorgroup.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-ccnrd-stable/files/codeready_operatorgroup.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-ccnrd-stable/files/codeready_subscription.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-ccnrd-stable/files/codeready_subscription.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-ccnrd-stable/files/community-operators-index.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-ccnrd-stable/files/community-operators-index.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-ccnrd-stable/files/coolstore-monolith-binary-build-template.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-ccnrd-stable/files/coolstore-monolith-binary-build-template.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-ccnrd-stable/files/coolstore-monolith-pipeline-build-template.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-ccnrd-stable/files/coolstore-monolith-pipeline-build-template.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-ccnrd-stable/files/eap74-openjdk11-image-stream.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-ccnrd-stable/files/eap74-openjdk11-image-stream.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-ccnrd-stable/files/elasticsearch_subscription.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-ccnrd-stable/files/elasticsearch_subscription.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-ccnrd-stable/files/jaeger-all-in-one-template.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-ccnrd-stable/files/jaeger-all-in-one-template.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-ccnrd-stable/files/jaeger_subscription.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-ccnrd-stable/files/jaeger_subscription.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-ccnrd-stable/files/jenkins-template.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-ccnrd-stable/files/jenkins-template.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-ccnrd-stable/files/kiali_subscription.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-ccnrd-stable/files/kiali_subscription.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-ccnrd-stable/files/knative_eventing_cr.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-ccnrd-stable/files/knative_eventing_cr.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-ccnrd-stable/files/knative_kafka_cr.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-ccnrd-stable/files/knative_kafka_cr.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-ccnrd-stable/files/knative_serving_cr.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-ccnrd-stable/files/knative_serving_cr.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-ccnrd-stable/files/osm_subscription.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-ccnrd-stable/files/osm_subscription.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-ccnrd-stable/files/pipelines_subscription.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-ccnrd-stable/files/pipelines_subscription.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-ccnrd-stable/files/redhat-operators-index.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-ccnrd-stable/files/redhat-operators-index.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-ccnrd-stable/files/redis-template.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-ccnrd-stable/files/redis-template.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-ccnrd-stable/files/serverless_subscription.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-ccnrd-stable/files/serverless_subscription.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-ccnrd-stable/files/sso-image-stream.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-ccnrd-stable/files/sso-image-stream.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-ccnrd-stable/files/stack_imagestream.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-ccnrd-stable/files/stack_imagestream.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-cnad-app-modernization/files/bc-quarkus-trade-orders.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-cnad-app-modernization/files/bc-quarkus-trade-orders.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-cnad-app-modernization/files/crw-cluster.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-cnad-app-modernization/files/crw-cluster.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-cnad-app-modernization/files/crw-operator-group.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-cnad-app-modernization/files/crw-operator-group.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-cnad-app-modernization/files/crw-operator.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-cnad-app-modernization/files/crw-operator.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-cnad-app-modernization/files/dc-quarkus-trade-orders.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-cnad-app-modernization/files/dc-quarkus-trade-orders.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-cnad-app-modernization/files/image-puller-operator-group.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-cnad-app-modernization/files/image-puller-operator-group.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-cnad-app-modernization/files/image-puller-operator.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-cnad-app-modernization/files/image-puller-operator.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-cnad-app-modernization/files/image-puller.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-cnad-app-modernization/files/image-puller.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-cnad-app-modernization/files/is-quarkus-trade-orders.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-cnad-app-modernization/files/is-quarkus-trade-orders.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-cnad-app-modernization/files/kafdrop4.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-cnad-app-modernization/files/kafdrop4.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-cnad-app-modernization/files/kafka-connect.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-cnad-app-modernization/files/kafka-connect.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-cnad-app-modernization/files/kafka.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-cnad-app-modernization/files/kafka.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-cnad-app-modernization/files/mysql.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-cnad-app-modernization/files/mysql.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-cnad-app-modernization/files/mysqlconnector.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-cnad-app-modernization/files/mysqlconnector.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-cnad-app-modernization/files/open-liberty-app.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-cnad-app-modernization/files/open-liberty-app.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-cnad-app-modernization/files/operator-subscriptions.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-cnad-app-modernization/files/operator-subscriptions.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-cnad-app-modernization/files/operator-subscriptions.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-cnad-app-modernization/files/operator-subscriptions.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-cnad-app-modernization/files/operators.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-cnad-app-modernization/files/operators.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-cnad-app-modernization/files/quarkus-route.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-cnad-app-modernization/files/quarkus-route.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-cnad-app-modernization/files/sample-daytrader-route.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-cnad-app-modernization/files/sample-daytrader-route.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-cnad-app-modernization/files/service-trade-orders.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-cnad-app-modernization/files/service-trade-orders.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-cnvlab/files/cnv-admin.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-cnvlab/files/cnv-admin.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": false,
    "infrastructureAsCodeIssues": [
      {
        "id": "SNYK-CC-K8S-46",
        "title": "RoleBinding or ClusterRoleBinding is using a pre-defined role",
        "severity": "high",
        "isIgnored": false,
        "subType": "ClusterRoleBinding",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-46",
        "isGeneratedByCustomRule": false,
        "issue": "A RoleBinding or ClusterRoleBinding was found using one of the default user facing roles, `cluster-admin`, `admin`, `edit` or `view`.",
        "impact": "Using a default user facing role may be overly permissive. For a ClusterRoleBinding this would be considered high severity.",
        "resolve": "Update roleRef.name to a specific role name with only the necessary permissions",
        "remediation": {
          "kubernetes": "Update roleRef.name to a specific role name with only the necessary permissions"
        },
        "lineNumber": 12,
        "iacDescription": {
          "issue": "A RoleBinding or ClusterRoleBinding was found using one of the default user facing roles, `cluster-admin`, `admin`, `edit` or `view`.",
          "impact": "Using a default user facing role may be overly permissive. For a ClusterRoleBinding this would be considered high severity.",
          "resolve": "Update roleRef.name to a specific role name with only the necessary permissions"
        },
        "publicId": "SNYK-CC-K8S-46",
        "msg": "roleRef.name",
        "references": [
          "https://kubernetes.io/docs/reference/access-authn-authz/rbac/"
        ],
        "path": [
          "[DocId: 0]",
          "roleRef",
          "name"
        ],
        "compliance": []
      }
    ]
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-cnvlab/files/project.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-cnvlab/files/project.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-enable-lets-encrypt-certificates/files/router-with-certs.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-enable-lets-encrypt-certificates/files/router-with-certs.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-enable-lets-encrypt-certificates/files/router-without-certs.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-enable-lets-encrypt-certificates/files/router-without-certs.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-enable-service-broker/files/service_catalog_api_server.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-enable-service-broker/files/service_catalog_api_server.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-enable-service-broker/files/service_catalog_controller_manager.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-enable-service-broker/files/service_catalog_controller_manager.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-homeroomlab-starter-guides/files/cl-instance.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-homeroomlab-starter-guides/files/cl-instance.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-homeroomlab-starter-guides/files/clo-namespace.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-homeroomlab-starter-guides/files/clo-namespace.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-homeroomlab-starter-guides/files/clo-og.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-homeroomlab-starter-guides/files/clo-og.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-homeroomlab-starter-guides/files/clo-sub.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-homeroomlab-starter-guides/files/clo-sub.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-homeroomlab-starter-guides/files/eo-namespace.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-homeroomlab-starter-guides/files/eo-namespace.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-homeroomlab-starter-guides/files/eo-og.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-homeroomlab-starter-guides/files/eo-og.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-homeroomlab-starter-guides/files/eo-rb.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-homeroomlab-starter-guides/files/eo-rb.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-homeroomlab-starter-guides/files/eo-role.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-homeroomlab-starter-guides/files/eo-role.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-homeroomlab-starter-guides/files/eo-sub.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-homeroomlab-starter-guides/files/eo-sub.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-homeroomlab-starter-guides/files/php-is.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-homeroomlab-starter-guides/files/php-is.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-infra-nodes/files/cluster-monitoring-config.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-infra-nodes/files/cluster-monitoring-config.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-istio-workshop-homeroom/files/hosted-workshop-production.json",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-istio-workshop-homeroom/files/hosted-workshop-production.json",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-jdg-workshop/tmp.json",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-jdg-workshop/tmp.json",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-jdg-workshop/files/codeready_cr.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-jdg-workshop/files/codeready_cr.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-jdg-workshop/files/codeready_operatorgroup.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-jdg-workshop/files/codeready_operatorgroup.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-jdg-workshop/files/codeready_subscription.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-jdg-workshop/files/codeready_subscription.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-jdg-workshop/files/community-operators-index.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-jdg-workshop/files/community-operators-index.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-jdg-workshop/files/datagrid_subscription.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-jdg-workshop/files/datagrid_subscription.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-jdg-workshop/files/knative_eventing_cr.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-jdg-workshop/files/knative_eventing_cr.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-jdg-workshop/files/knative_kafka_cr.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-jdg-workshop/files/knative_kafka_cr.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-jdg-workshop/files/knative_serving_cr.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-jdg-workshop/files/knative_serving_cr.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-jdg-workshop/files/redhat-operators-index.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-jdg-workshop/files/redhat-operators-index.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-jdg-workshop/files/redis-template.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-jdg-workshop/files/redis-template.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-jdg-workshop/files/stack_imagestream.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-jdg-workshop/files/stack_imagestream.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-logging/files/eo_namespace.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-logging/files/eo_namespace.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-logging/files/eo_operatorgroup.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-logging/files/eo_operatorgroup.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-logging/files/eo_role.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-logging/files/eo_role.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-logging/files/eo_rolebinding.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-logging/files/eo_rolebinding.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-logging/files/logging_curator_configmap.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-logging/files/logging_curator_configmap.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-logging/files/logging_namespace.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-logging/files/logging_namespace.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-logging/files/logging_operatorgroup.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-logging/files/logging_operatorgroup.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-machinesets/files/cluster-monitoring-config.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-machinesets/files/cluster-monitoring-config.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-migration/files/cluster-admins-group.clusterrolebinding.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-migration/files/cluster-admins-group.clusterrolebinding.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": false,
    "infrastructureAsCodeIssues": [
      {
        "id": "SNYK-CC-K8S-46",
        "title": "RoleBinding or ClusterRoleBinding is using a pre-defined role",
        "severity": "high",
        "isIgnored": false,
        "subType": "ClusterRoleBinding",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-46",
        "isGeneratedByCustomRule": false,
        "issue": "A RoleBinding or ClusterRoleBinding was found using one of the default user facing roles, `cluster-admin`, `admin`, `edit` or `view`.",
        "impact": "Using a default user facing role may be overly permissive. For a ClusterRoleBinding this would be considered high severity.",
        "resolve": "Update roleRef.name to a specific role name with only the necessary permissions",
        "remediation": {
          "kubernetes": "Update roleRef.name to a specific role name with only the necessary permissions"
        },
        "lineNumber": 8,
        "iacDescription": {
          "issue": "A RoleBinding or ClusterRoleBinding was found using one of the default user facing roles, `cluster-admin`, `admin`, `edit` or `view`.",
          "impact": "Using a default user facing role may be overly permissive. For a ClusterRoleBinding this would be considered high severity.",
          "resolve": "Update roleRef.name to a specific role name with only the necessary permissions"
        },
        "publicId": "SNYK-CC-K8S-46",
        "msg": "roleRef.name",
        "references": [
          "https://kubernetes.io/docs/reference/access-authn-authz/rbac/"
        ],
        "path": [
          "[DocId: 0]",
          "roleRef",
          "name"
        ],
        "compliance": []
      }
    ]
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-mlops/files/amq_streams_cr.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-mlops/files/amq_streams_cr.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-mlops/files/amq_streams_operatorgroup.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-mlops/files/amq_streams_operatorgroup.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-mlops/files/amq_streams_subscription.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-mlops/files/amq_streams_subscription.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-mlops/files/argocd_operatorgroup.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-mlops/files/argocd_operatorgroup.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-mlops/files/argocd_subscription.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-mlops/files/argocd_subscription.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-mlops/files/codeready_cr.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-mlops/files/codeready_cr.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-mlops/files/codeready_operatorgroup.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-mlops/files/codeready_operatorgroup.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-mlops/files/codeready_subscription.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-mlops/files/codeready_subscription.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-mlops/files/dm_operatorgroup.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-mlops/files/dm_operatorgroup.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-mlops/files/dm_subscription.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-mlops/files/dm_subscription.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-mlops/files/gogs-template.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-mlops/files/gogs-template.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-mlops/files/grafana_kfdef.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-mlops/files/grafana_kfdef.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-mlops/files/jupyterhub_kfdef.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-mlops/files/jupyterhub_kfdef.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-mlops/files/odh_subscription.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-mlops/files/odh_subscription.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-mlops/files/osm_subscription.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-mlops/files/osm_subscription.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-mlops/files/pipelines_subscription.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-mlops/files/pipelines_subscription.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-mlops/files/prom_cr.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-mlops/files/prom_cr.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-mlops/files/prom_operatorgroup.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-mlops/files/prom_operatorgroup.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-mlops/files/prom_subscription.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-mlops/files/prom_subscription.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-mlops/files/redis-template.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-mlops/files/redis-template.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-mlops/files/seldon_subscription.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-mlops/files/seldon_subscription.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-open-data-hub-infra/files/deploy_crds_opendatahub_v1alpha1_opendatahub_crd.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-open-data-hub-infra/files/deploy_crds_opendatahub_v1alpha1_opendatahub_crd.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-open-data-hub-infra/files/workshop-notebook-openshift-image.imagestreamtag.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-open-data-hub-infra/files/workshop-notebook-openshift-image.imagestreamtag.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-open-data-hub-infra/files/kafka/kafka.clusterrole.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-open-data-hub-infra/files/kafka/kafka.clusterrole.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": false,
    "infrastructureAsCodeIssues": [
      {
        "id": "SNYK-CC-K8S-47",
        "title": "Role or ClusterRole with dangerous permissions",
        "severity": "high",
        "isIgnored": false,
        "subType": "ClusterRole",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-47",
        "isGeneratedByCustomRule": false,
        "issue": "A role was found using a dangerous permissions",
        "impact": "Using this role grants dangerous permissions. For a ClusterRole this would be considered high severity.",
        "resolve": "Consider removing these permissions",
        "remediation": {
          "kubernetes": "Consider removing these permissions",
          "terraform": "Consider removing these permissions"
        },
        "lineNumber": 211,
        "iacDescription": {
          "issue": "A role was found using a dangerous permissions",
          "impact": "Using this role grants dangerous permissions. For a ClusterRole this would be considered high severity.",
          "resolve": "Consider removing these permissions"
        },
        "publicId": "SNYK-CC-K8S-47",
        "msg": "rules[15].resources",
        "references": [
          "https://kubernetes.io/docs/reference/access-authn-authz/rbac/"
        ],
        "path": [
          "[DocId: 1]",
          "rules[15]",
          "resources"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-47",
        "title": "Role or ClusterRole with dangerous permissions",
        "severity": "high",
        "isIgnored": false,
        "subType": "ClusterRole",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-47",
        "isGeneratedByCustomRule": false,
        "issue": "A role was found using a dangerous permissions",
        "impact": "Using this role grants dangerous permissions. For a ClusterRole this would be considered high severity.",
        "resolve": "Consider removing these permissions",
        "remediation": {
          "kubernetes": "Consider removing these permissions",
          "terraform": "Consider removing these permissions"
        },
        "lineNumber": 351,
        "iacDescription": {
          "issue": "A role was found using a dangerous permissions",
          "impact": "Using this role grants dangerous permissions. For a ClusterRole this would be considered high severity.",
          "resolve": "Consider removing these permissions"
        },
        "publicId": "SNYK-CC-K8S-47",
        "msg": "rules[3].resources",
        "references": [
          "https://kubernetes.io/docs/reference/access-authn-authz/rbac/"
        ],
        "path": [
          "[DocId: 4]",
          "rules[3]",
          "resources"
        ],
        "compliance": []
      }
    ]
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-open-data-hub-infra/files/kafka/kafka.crd.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-open-data-hub-infra/files/kafka/kafka.crd.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-open-data-hub-infra/files/seldon/seldon-crd.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-open-data-hub-infra/files/seldon/seldon-crd.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-open-data-hub-infra/files/seldon/seldon-user.clusterrole.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-open-data-hub-infra/files/seldon/seldon-user.clusterrole.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": false,
    "infrastructureAsCodeIssues": [
      {
        "id": "SNYK-CC-K8S-44",
        "title": "Role or ClusterRole with too wide permissions",
        "severity": "high",
        "isIgnored": false,
        "subType": "ClusterRole",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-44",
        "isGeneratedByCustomRule": false,
        "issue": "The role uses wildcards, which grant the role permissions to the whole cluster",
        "impact": "The use of wildcard rights grants is likely to provide excessive rights to the Kubernetes API. For a ClusterRole this would be considered high severity.",
        "resolve": "Set only the necessary permissions required",
        "remediation": {
          "kubernetes": "Set only the necessary permissions required",
          "terraform": "Remove any wildcards [*] from `rule.verbs` and `rule.resources`"
        },
        "lineNumber": 11,
        "iacDescription": {
          "issue": "The role uses wildcards, which grant the role permissions to the whole cluster",
          "impact": "The use of wildcard rights grants is likely to provide excessive rights to the Kubernetes API. For a ClusterRole this would be considered high severity.",
          "resolve": "Set only the necessary permissions required"
        },
        "publicId": "SNYK-CC-K8S-44",
        "msg": "rules[0].verbs",
        "references": [
          "https://kubernetes.io/docs/reference/access-authn-authz/rbac/"
        ],
        "path": [
          "[DocId: 0]",
          "rules[0]",
          "verbs"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-44",
        "title": "Role or ClusterRole with too wide permissions",
        "severity": "high",
        "isIgnored": false,
        "subType": "ClusterRole",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-44",
        "isGeneratedByCustomRule": false,
        "issue": "The role uses wildcards, which grant the role permissions to the whole cluster",
        "impact": "The use of wildcard rights grants is likely to provide excessive rights to the Kubernetes API. For a ClusterRole this would be considered high severity.",
        "resolve": "Set only the necessary permissions required",
        "remediation": {
          "kubernetes": "Set only the necessary permissions required",
          "terraform": "Remove any wildcards [*] from `rule.verbs` and `rule.resources`"
        },
        "lineNumber": 10,
        "iacDescription": {
          "issue": "The role uses wildcards, which grant the role permissions to the whole cluster",
          "impact": "The use of wildcard rights grants is likely to provide excessive rights to the Kubernetes API. For a ClusterRole this would be considered high severity.",
          "resolve": "Set only the necessary permissions required"
        },
        "publicId": "SNYK-CC-K8S-44",
        "msg": "rules[0].resources",
        "references": [
          "https://kubernetes.io/docs/reference/access-authn-authz/rbac/"
        ],
        "path": [
          "[DocId: 0]",
          "rules[0]",
          "resources"
        ],
        "compliance": []
      }
    ]
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-open-data-hub-student/files/deploy_role.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-open-data-hub-student/files/deploy_role.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": false,
    "infrastructureAsCodeIssues": [
      {
        "id": "SNYK-CC-K8S-47",
        "title": "Role or ClusterRole with dangerous permissions",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Role",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-47",
        "isGeneratedByCustomRule": false,
        "issue": "A role was found using a dangerous permissions",
        "impact": "Using this role grants dangerous permissions. For a ClusterRole this would be considered high severity.",
        "resolve": "Consider removing these permissions",
        "remediation": {
          "kubernetes": "Consider removing these permissions",
          "terraform": "Consider removing these permissions"
        },
        "lineNumber": 124,
        "iacDescription": {
          "issue": "A role was found using a dangerous permissions",
          "impact": "Using this role grants dangerous permissions. For a ClusterRole this would be considered high severity.",
          "resolve": "Consider removing these permissions"
        },
        "publicId": "SNYK-CC-K8S-47",
        "msg": "rules[11].resources",
        "references": [
          "https://kubernetes.io/docs/reference/access-authn-authz/rbac/"
        ],
        "path": [
          "[DocId: 0]",
          "rules[11]",
          "resources"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-47",
        "title": "Role or ClusterRole with dangerous permissions",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Role",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-47",
        "isGeneratedByCustomRule": false,
        "issue": "A role was found using a dangerous permissions",
        "impact": "Using this role grants dangerous permissions. For a ClusterRole this would be considered high severity.",
        "resolve": "Consider removing these permissions",
        "remediation": {
          "kubernetes": "Consider removing these permissions",
          "terraform": "Consider removing these permissions"
        },
        "lineNumber": 51,
        "iacDescription": {
          "issue": "A role was found using a dangerous permissions",
          "impact": "Using this role grants dangerous permissions. For a ClusterRole this would be considered high severity.",
          "resolve": "Consider removing these permissions"
        },
        "publicId": "SNYK-CC-K8S-47",
        "msg": "rules[4].resources",
        "references": [
          "https://kubernetes.io/docs/reference/access-authn-authz/rbac/"
        ],
        "path": [
          "[DocId: 0]",
          "rules[4]",
          "resources"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-47",
        "title": "Role or ClusterRole with dangerous permissions",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Role",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-47",
        "isGeneratedByCustomRule": false,
        "issue": "A role was found using a dangerous permissions",
        "impact": "Using this role grants dangerous permissions. For a ClusterRole this would be considered high severity.",
        "resolve": "Consider removing these permissions",
        "remediation": {
          "kubernetes": "Consider removing these permissions",
          "terraform": "Consider removing these permissions"
        },
        "lineNumber": 111,
        "iacDescription": {
          "issue": "A role was found using a dangerous permissions",
          "impact": "Using this role grants dangerous permissions. For a ClusterRole this would be considered high severity.",
          "resolve": "Consider removing these permissions"
        },
        "publicId": "SNYK-CC-K8S-47",
        "msg": "rules[10].resources",
        "references": [
          "https://kubernetes.io/docs/reference/access-authn-authz/rbac/"
        ],
        "path": [
          "[DocId: 0]",
          "rules[10]",
          "resources"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-44",
        "title": "Role or ClusterRole with too wide permissions",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Role",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-44",
        "isGeneratedByCustomRule": false,
        "issue": "The role uses wildcards, which grant the role permissions to the whole cluster",
        "impact": "The use of wildcard rights grants is likely to provide excessive rights to the Kubernetes API. For a ClusterRole this would be considered high severity.",
        "resolve": "Set only the necessary permissions required",
        "remediation": {
          "kubernetes": "Set only the necessary permissions required",
          "terraform": "Remove any wildcards [*] from `rule.verbs` and `rule.resources`"
        },
        "lineNumber": 783,
        "iacDescription": {
          "issue": "The role uses wildcards, which grant the role permissions to the whole cluster",
          "impact": "The use of wildcard rights grants is likely to provide excessive rights to the Kubernetes API. For a ClusterRole this would be considered high severity.",
          "resolve": "Set only the necessary permissions required"
        },
        "publicId": "SNYK-CC-K8S-44",
        "msg": "rules[72].verbs",
        "references": [
          "https://kubernetes.io/docs/reference/access-authn-authz/rbac/"
        ],
        "path": [
          "[DocId: 0]",
          "rules[72]",
          "verbs"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-44",
        "title": "Role or ClusterRole with too wide permissions",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Role",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-44",
        "isGeneratedByCustomRule": false,
        "issue": "The role uses wildcards, which grant the role permissions to the whole cluster",
        "impact": "The use of wildcard rights grants is likely to provide excessive rights to the Kubernetes API. For a ClusterRole this would be considered high severity.",
        "resolve": "Set only the necessary permissions required",
        "remediation": {
          "kubernetes": "Set only the necessary permissions required",
          "terraform": "Remove any wildcards [*] from `rule.verbs` and `rule.resources`"
        },
        "lineNumber": 781,
        "iacDescription": {
          "issue": "The role uses wildcards, which grant the role permissions to the whole cluster",
          "impact": "The use of wildcard rights grants is likely to provide excessive rights to the Kubernetes API. For a ClusterRole this would be considered high severity.",
          "resolve": "Set only the necessary permissions required"
        },
        "publicId": "SNYK-CC-K8S-44",
        "msg": "rules[72].resources",
        "references": [
          "https://kubernetes.io/docs/reference/access-authn-authz/rbac/"
        ],
        "path": [
          "[DocId: 0]",
          "rules[72]",
          "resources"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-44",
        "title": "Role or ClusterRole with too wide permissions",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Role",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-44",
        "isGeneratedByCustomRule": false,
        "issue": "The role uses wildcards, which grant the role permissions to the whole cluster",
        "impact": "The use of wildcard rights grants is likely to provide excessive rights to the Kubernetes API. For a ClusterRole this would be considered high severity.",
        "resolve": "Set only the necessary permissions required",
        "remediation": {
          "kubernetes": "Set only the necessary permissions required",
          "terraform": "Remove any wildcards [*] from `rule.verbs` and `rule.resources`"
        },
        "lineNumber": 659,
        "iacDescription": {
          "issue": "The role uses wildcards, which grant the role permissions to the whole cluster",
          "impact": "The use of wildcard rights grants is likely to provide excessive rights to the Kubernetes API. For a ClusterRole this would be considered high severity.",
          "resolve": "Set only the necessary permissions required"
        },
        "publicId": "SNYK-CC-K8S-44",
        "msg": "rules[58].verbs",
        "references": [
          "https://kubernetes.io/docs/reference/access-authn-authz/rbac/"
        ],
        "path": [
          "[DocId: 0]",
          "rules[58]",
          "verbs"
        ],
        "compliance": []
      }
    ]
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-open-data-hub-student/files/deploy_role_binding.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-open-data-hub-student/files/deploy_role_binding.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-open-data-hub-student/files/deploy_service_account.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-open-data-hub-student/files/deploy_service_account.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-opentlc-production/files/image_registry.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-opentlc-production/files/image_registry.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-opentlc-production/templates/build_defaults.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-opentlc-production/templates/build_defaults.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-pam-fraudmanagement-workshop/files/namespace-limits.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-pam-fraudmanagement-workshop/files/namespace-limits.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-pam-fraudmanagement-workshop/files/namespace-quota.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-pam-fraudmanagement-workshop/files/namespace-quota.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-pam-fraudmanagement-workshop/files/businessautomation/imagestreams.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-pam-fraudmanagement-workshop/files/businessautomation/imagestreams.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-pam-fraudmanagement-workshop/files/businessautomation/operator.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-pam-fraudmanagement-workshop/files/businessautomation/operator.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-pam-fraudmanagement-workshop/files/businessautomation/operator/crd.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-pam-fraudmanagement-workshop/files/businessautomation/operator/crd.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-pam-fraudmanagement-workshop/files/businessautomation/operator/role.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-pam-fraudmanagement-workshop/files/businessautomation/operator/role.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": false,
    "infrastructureAsCodeIssues": [
      {
        "id": "SNYK-CC-K8S-44",
        "title": "Role or ClusterRole with too wide permissions",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Role",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-44",
        "isGeneratedByCustomRule": false,
        "issue": "The role uses wildcards, which grant the role permissions to the whole cluster",
        "impact": "The use of wildcard rights grants is likely to provide excessive rights to the Kubernetes API. For a ClusterRole this would be considered high severity.",
        "resolve": "Set only the necessary permissions required",
        "remediation": {
          "kubernetes": "Set only the necessary permissions required",
          "terraform": "Remove any wildcards [*] from `rule.verbs` and `rule.resources`"
        },
        "lineNumber": 27,
        "iacDescription": {
          "issue": "The role uses wildcards, which grant the role permissions to the whole cluster",
          "impact": "The use of wildcard rights grants is likely to provide excessive rights to the Kubernetes API. For a ClusterRole this would be considered high severity.",
          "resolve": "Set only the necessary permissions required"
        },
        "publicId": "SNYK-CC-K8S-44",
        "msg": "rules[2].verbs",
        "references": [
          "https://kubernetes.io/docs/reference/access-authn-authz/rbac/"
        ],
        "path": [
          "[DocId: 0]",
          "rules[2]",
          "verbs"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-44",
        "title": "Role or ClusterRole with too wide permissions",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Role",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-44",
        "isGeneratedByCustomRule": false,
        "issue": "The role uses wildcards, which grant the role permissions to the whole cluster",
        "impact": "The use of wildcard rights grants is likely to provide excessive rights to the Kubernetes API. For a ClusterRole this would be considered high severity.",
        "resolve": "Set only the necessary permissions required",
        "remediation": {
          "kubernetes": "Set only the necessary permissions required",
          "terraform": "Remove any wildcards [*] from `rule.verbs` and `rule.resources`"
        },
        "lineNumber": 7,
        "iacDescription": {
          "issue": "The role uses wildcards, which grant the role permissions to the whole cluster",
          "impact": "The use of wildcard rights grants is likely to provide excessive rights to the Kubernetes API. For a ClusterRole this would be considered high severity.",
          "resolve": "Set only the necessary permissions required"
        },
        "publicId": "SNYK-CC-K8S-44",
        "msg": "rules[0].verbs",
        "references": [
          "https://kubernetes.io/docs/reference/access-authn-authz/rbac/"
        ],
        "path": [
          "[DocId: 0]",
          "rules[0]",
          "verbs"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-44",
        "title": "Role or ClusterRole with too wide permissions",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Role",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-44",
        "isGeneratedByCustomRule": false,
        "issue": "The role uses wildcards, which grant the role permissions to the whole cluster",
        "impact": "The use of wildcard rights grants is likely to provide excessive rights to the Kubernetes API. For a ClusterRole this would be considered high severity.",
        "resolve": "Set only the necessary permissions required",
        "remediation": {
          "kubernetes": "Set only the necessary permissions required",
          "terraform": "Remove any wildcards [*] from `rule.verbs` and `rule.resources`"
        },
        "lineNumber": 18,
        "iacDescription": {
          "issue": "The role uses wildcards, which grant the role permissions to the whole cluster",
          "impact": "The use of wildcard rights grants is likely to provide excessive rights to the Kubernetes API. For a ClusterRole this would be considered high severity.",
          "resolve": "Set only the necessary permissions required"
        },
        "publicId": "SNYK-CC-K8S-44",
        "msg": "rules[0].resources",
        "references": [
          "https://kubernetes.io/docs/reference/access-authn-authz/rbac/"
        ],
        "path": [
          "[DocId: 0]",
          "rules[0]",
          "resources"
        ],
        "compliance": []
      }
    ]
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-pam-fraudmanagement-workshop/files/businessautomation/operator/sa.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-pam-fraudmanagement-workshop/files/businessautomation/operator/sa.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-pam-fraudmanagement-workshop/files/codeready-workspaces/cluster.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-pam-fraudmanagement-workshop/files/codeready-workspaces/cluster.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-pam-fraudmanagement-workshop/files/fuse/fis-image-streams-2.1.fuse-750056-redhat-00006.json",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-pam-fraudmanagement-workshop/files/fuse/fis-image-streams-2.1.fuse-750056-redhat-00006.json",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-pam-fraudmanagement-workshop/files/fuse/samples-operator-patch.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-pam-fraudmanagement-workshop/files/fuse/samples-operator-patch.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-pam-fraudmanagement-workshop/files/gitea/server.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-pam-fraudmanagement-workshop/files/gitea/server.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-pam-fraudmanagement-workshop/files/grafana/instance.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-pam-fraudmanagement-workshop/files/grafana/instance.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-pam-fraudmanagement-workshop/files/grafana/operator.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-pam-fraudmanagement-workshop/files/grafana/operator.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-pam-fraudmanagement-workshop/files/grafana/operator/crd-dashboard.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-pam-fraudmanagement-workshop/files/grafana/operator/crd-dashboard.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-pam-fraudmanagement-workshop/files/grafana/operator/crd-datasource.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-pam-fraudmanagement-workshop/files/grafana/operator/crd-datasource.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-pam-fraudmanagement-workshop/files/grafana/operator/crd-grafana.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-pam-fraudmanagement-workshop/files/grafana/operator/crd-grafana.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-pam-fraudmanagement-workshop/files/grafana/operator/role.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-pam-fraudmanagement-workshop/files/grafana/operator/role.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": false,
    "infrastructureAsCodeIssues": [
      {
        "id": "SNYK-CC-K8S-44",
        "title": "Role or ClusterRole with too wide permissions",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Role",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-44",
        "isGeneratedByCustomRule": false,
        "issue": "The role uses wildcards, which grant the role permissions to the whole cluster",
        "impact": "The use of wildcard rights grants is likely to provide excessive rights to the Kubernetes API. For a ClusterRole this would be considered high severity.",
        "resolve": "Set only the necessary permissions required",
        "remediation": {
          "kubernetes": "Set only the necessary permissions required",
          "terraform": "Remove any wildcards [*] from `rule.verbs` and `rule.resources`"
        },
        "lineNumber": 29,
        "iacDescription": {
          "issue": "The role uses wildcards, which grant the role permissions to the whole cluster",
          "impact": "The use of wildcard rights grants is likely to provide excessive rights to the Kubernetes API. For a ClusterRole this would be considered high severity.",
          "resolve": "Set only the necessary permissions required"
        },
        "publicId": "SNYK-CC-K8S-44",
        "msg": "rules[2].verbs",
        "references": [
          "https://kubernetes.io/docs/reference/access-authn-authz/rbac/"
        ],
        "path": [
          "[DocId: 0]",
          "rules[2]",
          "verbs"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-44",
        "title": "Role or ClusterRole with too wide permissions",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Role",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-44",
        "isGeneratedByCustomRule": false,
        "issue": "The role uses wildcards, which grant the role permissions to the whole cluster",
        "impact": "The use of wildcard rights grants is likely to provide excessive rights to the Kubernetes API. For a ClusterRole this would be considered high severity.",
        "resolve": "Set only the necessary permissions required",
        "remediation": {
          "kubernetes": "Set only the necessary permissions required",
          "terraform": "Remove any wildcards [*] from `rule.verbs` and `rule.resources`"
        },
        "lineNumber": 20,
        "iacDescription": {
          "issue": "The role uses wildcards, which grant the role permissions to the whole cluster",
          "impact": "The use of wildcard rights grants is likely to provide excessive rights to the Kubernetes API. For a ClusterRole this would be considered high severity.",
          "resolve": "Set only the necessary permissions required"
        },
        "publicId": "SNYK-CC-K8S-44",
        "msg": "rules[1].verbs",
        "references": [
          "https://kubernetes.io/docs/reference/access-authn-authz/rbac/"
        ],
        "path": [
          "[DocId: 0]",
          "rules[1]",
          "verbs"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-44",
        "title": "Role or ClusterRole with too wide permissions",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Role",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-44",
        "isGeneratedByCustomRule": false,
        "issue": "The role uses wildcards, which grant the role permissions to the whole cluster",
        "impact": "The use of wildcard rights grants is likely to provide excessive rights to the Kubernetes API. For a ClusterRole this would be considered high severity.",
        "resolve": "Set only the necessary permissions required",
        "remediation": {
          "kubernetes": "Set only the necessary permissions required",
          "terraform": "Remove any wildcards [*] from `rule.verbs` and `rule.resources`"
        },
        "lineNumber": 7,
        "iacDescription": {
          "issue": "The role uses wildcards, which grant the role permissions to the whole cluster",
          "impact": "The use of wildcard rights grants is likely to provide excessive rights to the Kubernetes API. For a ClusterRole this would be considered high severity.",
          "resolve": "Set only the necessary permissions required"
        },
        "publicId": "SNYK-CC-K8S-44",
        "msg": "rules[0].verbs",
        "references": [
          "https://kubernetes.io/docs/reference/access-authn-authz/rbac/"
        ],
        "path": [
          "[DocId: 0]",
          "rules[0]",
          "verbs"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-44",
        "title": "Role or ClusterRole with too wide permissions",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Role",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-44",
        "isGeneratedByCustomRule": false,
        "issue": "The role uses wildcards, which grant the role permissions to the whole cluster",
        "impact": "The use of wildcard rights grants is likely to provide excessive rights to the Kubernetes API. For a ClusterRole this would be considered high severity.",
        "resolve": "Set only the necessary permissions required",
        "remediation": {
          "kubernetes": "Set only the necessary permissions required",
          "terraform": "Remove any wildcards [*] from `rule.verbs` and `rule.resources`"
        },
        "lineNumber": 48,
        "iacDescription": {
          "issue": "The role uses wildcards, which grant the role permissions to the whole cluster",
          "impact": "The use of wildcard rights grants is likely to provide excessive rights to the Kubernetes API. For a ClusterRole this would be considered high severity.",
          "resolve": "Set only the necessary permissions required"
        },
        "publicId": "SNYK-CC-K8S-44",
        "msg": "rules[5].verbs",
        "references": [
          "https://kubernetes.io/docs/reference/access-authn-authz/rbac/"
        ],
        "path": [
          "[DocId: 0]",
          "rules[5]",
          "verbs"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-44",
        "title": "Role or ClusterRole with too wide permissions",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Role",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-44",
        "isGeneratedByCustomRule": false,
        "issue": "The role uses wildcards, which grant the role permissions to the whole cluster",
        "impact": "The use of wildcard rights grants is likely to provide excessive rights to the Kubernetes API. For a ClusterRole this would be considered high severity.",
        "resolve": "Set only the necessary permissions required",
        "remediation": {
          "kubernetes": "Set only the necessary permissions required",
          "terraform": "Remove any wildcards [*] from `rule.verbs` and `rule.resources`"
        },
        "lineNumber": 42,
        "iacDescription": {
          "issue": "The role uses wildcards, which grant the role permissions to the whole cluster",
          "impact": "The use of wildcard rights grants is likely to provide excessive rights to the Kubernetes API. For a ClusterRole this would be considered high severity.",
          "resolve": "Set only the necessary permissions required"
        },
        "publicId": "SNYK-CC-K8S-44",
        "msg": "rules[4].verbs",
        "references": [
          "https://kubernetes.io/docs/reference/access-authn-authz/rbac/"
        ],
        "path": [
          "[DocId: 0]",
          "rules[4]",
          "verbs"
        ],
        "compliance": []
      }
    ]
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-pam-fraudmanagement-workshop/files/grafana/operator/sa.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-pam-fraudmanagement-workshop/files/grafana/operator/sa.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-pam-fraudmanagement-workshop/files/olm-operatorgroup/global.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-pam-fraudmanagement-workshop/files/olm-operatorgroup/global.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-pam-fraudmanagement-workshop/files/prometheus/operator.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-pam-fraudmanagement-workshop/files/prometheus/operator.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-pam-fraudmanagement-workshop/files/prometheus/route.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-pam-fraudmanagement-workshop/files/prometheus/route.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-pam-fraudmanagement-workshop/files/prometheus/service.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-pam-fraudmanagement-workshop/files/prometheus/service.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-pam-fraudmanagement-workshop/files/prometheus/servicemonitor.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-pam-fraudmanagement-workshop/files/prometheus/servicemonitor.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-pam-fraudmanagement-workshop/files/prometheus/operator/k8s-sa.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-pam-fraudmanagement-workshop/files/prometheus/operator/k8s-sa.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-pam-fraudmanagement-workshop/files/prometheus/operator/role.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-pam-fraudmanagement-workshop/files/prometheus/operator/role.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": false,
    "infrastructureAsCodeIssues": [
      {
        "id": "SNYK-CC-K8S-44",
        "title": "Role or ClusterRole with too wide permissions",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Role",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-44",
        "isGeneratedByCustomRule": false,
        "issue": "The role uses wildcards, which grant the role permissions to the whole cluster",
        "impact": "The use of wildcard rights grants is likely to provide excessive rights to the Kubernetes API. For a ClusterRole this would be considered high severity.",
        "resolve": "Set only the necessary permissions required",
        "remediation": {
          "kubernetes": "Set only the necessary permissions required",
          "terraform": "Remove any wildcards [*] from `rule.verbs` and `rule.resources`"
        },
        "lineNumber": 25,
        "iacDescription": {
          "issue": "The role uses wildcards, which grant the role permissions to the whole cluster",
          "impact": "The use of wildcard rights grants is likely to provide excessive rights to the Kubernetes API. For a ClusterRole this would be considered high severity.",
          "resolve": "Set only the necessary permissions required"
        },
        "publicId": "SNYK-CC-K8S-44",
        "msg": "rules[2].verbs",
        "references": [
          "https://kubernetes.io/docs/reference/access-authn-authz/rbac/"
        ],
        "path": [
          "[DocId: 0]",
          "rules[2]",
          "verbs"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-44",
        "title": "Role or ClusterRole with too wide permissions",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Role",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-44",
        "isGeneratedByCustomRule": false,
        "issue": "The role uses wildcards, which grant the role permissions to the whole cluster",
        "impact": "The use of wildcard rights grants is likely to provide excessive rights to the Kubernetes API. For a ClusterRole this would be considered high severity.",
        "resolve": "Set only the necessary permissions required",
        "remediation": {
          "kubernetes": "Set only the necessary permissions required",
          "terraform": "Remove any wildcards [*] from `rule.verbs` and `rule.resources`"
        },
        "lineNumber": 13,
        "iacDescription": {
          "issue": "The role uses wildcards, which grant the role permissions to the whole cluster",
          "impact": "The use of wildcard rights grants is likely to provide excessive rights to the Kubernetes API. For a ClusterRole this would be considered high severity.",
          "resolve": "Set only the necessary permissions required"
        },
        "publicId": "SNYK-CC-K8S-44",
        "msg": "rules[1].verbs",
        "references": [
          "https://kubernetes.io/docs/reference/access-authn-authz/rbac/"
        ],
        "path": [
          "[DocId: 0]",
          "rules[1]",
          "verbs"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-44",
        "title": "Role or ClusterRole with too wide permissions",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Role",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-44",
        "isGeneratedByCustomRule": false,
        "issue": "The role uses wildcards, which grant the role permissions to the whole cluster",
        "impact": "The use of wildcard rights grants is likely to provide excessive rights to the Kubernetes API. For a ClusterRole this would be considered high severity.",
        "resolve": "Set only the necessary permissions required",
        "remediation": {
          "kubernetes": "Set only the necessary permissions required",
          "terraform": "Remove any wildcards [*] from `rule.verbs` and `rule.resources`"
        },
        "lineNumber": 7,
        "iacDescription": {
          "issue": "The role uses wildcards, which grant the role permissions to the whole cluster",
          "impact": "The use of wildcard rights grants is likely to provide excessive rights to the Kubernetes API. For a ClusterRole this would be considered high severity.",
          "resolve": "Set only the necessary permissions required"
        },
        "publicId": "SNYK-CC-K8S-44",
        "msg": "rules[0].verbs",
        "references": [
          "https://kubernetes.io/docs/reference/access-authn-authz/rbac/"
        ],
        "path": [
          "[DocId: 0]",
          "rules[0]",
          "verbs"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-44",
        "title": "Role or ClusterRole with too wide permissions",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Role",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-44",
        "isGeneratedByCustomRule": false,
        "issue": "The role uses wildcards, which grant the role permissions to the whole cluster",
        "impact": "The use of wildcard rights grants is likely to provide excessive rights to the Kubernetes API. For a ClusterRole this would be considered high severity.",
        "resolve": "Set only the necessary permissions required",
        "remediation": {
          "kubernetes": "Set only the necessary permissions required",
          "terraform": "Remove any wildcards [*] from `rule.verbs` and `rule.resources`"
        },
        "lineNumber": 31,
        "iacDescription": {
          "issue": "The role uses wildcards, which grant the role permissions to the whole cluster",
          "impact": "The use of wildcard rights grants is likely to provide excessive rights to the Kubernetes API. For a ClusterRole this would be considered high severity.",
          "resolve": "Set only the necessary permissions required"
        },
        "publicId": "SNYK-CC-K8S-44",
        "msg": "rules[3].verbs",
        "references": [
          "https://kubernetes.io/docs/reference/access-authn-authz/rbac/"
        ],
        "path": [
          "[DocId: 0]",
          "rules[3]",
          "verbs"
        ],
        "compliance": []
      }
    ]
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-pam-fraudmanagement-workshop/files/prometheus/operator/role2.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-pam-fraudmanagement-workshop/files/prometheus/operator/role2.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-pam-fraudmanagement-workshop/files/prometheus/operator/sa.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-pam-fraudmanagement-workshop/files/prometheus/operator/sa.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-project-request-template/files/openshift-ingress-namespace.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-project-request-template/files/openshift-ingress-namespace.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-quarkus-workshop/files/amqstreams_subscription.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-quarkus-workshop/files/amqstreams_subscription.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-quarkus-workshop/files/community-operators-index.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-quarkus-workshop/files/community-operators-index.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-quarkus-workshop/files/devspaces_cr.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-quarkus-workshop/files/devspaces_cr.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-quarkus-workshop/files/devspaces_subscription.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-quarkus-workshop/files/devspaces_subscription.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-quarkus-workshop/files/jaeger_subscription.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-quarkus-workshop/files/jaeger_subscription.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-quarkus-workshop/files/kubernetes-imagepuller-operator_subscription.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-quarkus-workshop/files/kubernetes-imagepuller-operator_subscription.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-quarkus-workshop/files/project-request-custom.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-quarkus-workshop/files/project-request-custom.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-quarkus-workshop/files/redhat-operators-index.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-quarkus-workshop/files/redhat-operators-index.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-quarkus-workshop/files/rhsso-credential.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-quarkus-workshop/files/rhsso-credential.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-quarkus-workshop/files/rhsso_cr.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-quarkus-workshop/files/rhsso_cr.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-quarkus-workshop/files/rhsso_operatorgroup.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-quarkus-workshop/files/rhsso_operatorgroup.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-quarkus-workshop/files/rhsso_subscription.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-quarkus-workshop/files/rhsso_subscription.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-rhte-analytics_data_ocp_infra/files/cluster.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-rhte-analytics_data_ocp_infra/files/cluster.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": false,
    "infrastructureAsCodeIssues": [
      {
        "id": "SNYK-CC-K8S-44",
        "title": "Role or ClusterRole with too wide permissions",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Role",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-44",
        "isGeneratedByCustomRule": false,
        "issue": "The role uses wildcards, which grant the role permissions to the whole cluster",
        "impact": "The use of wildcard rights grants is likely to provide excessive rights to the Kubernetes API. For a ClusterRole this would be considered high severity.",
        "resolve": "Set only the necessary permissions required",
        "remediation": {
          "kubernetes": "Set only the necessary permissions required",
          "terraform": "Remove any wildcards [*] from `rule.verbs` and `rule.resources`"
        },
        "lineNumber": 77,
        "iacDescription": {
          "issue": "The role uses wildcards, which grant the role permissions to the whole cluster",
          "impact": "The use of wildcard rights grants is likely to provide excessive rights to the Kubernetes API. For a ClusterRole this would be considered high severity.",
          "resolve": "Set only the necessary permissions required"
        },
        "publicId": "SNYK-CC-K8S-44",
        "msg": "rules[2].verbs",
        "references": [
          "https://kubernetes.io/docs/reference/access-authn-authz/rbac/"
        ],
        "path": [
          "[DocId: 5]",
          "rules[2]",
          "verbs"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-44",
        "title": "Role or ClusterRole with too wide permissions",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Role",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-44",
        "isGeneratedByCustomRule": false,
        "issue": "The role uses wildcards, which grant the role permissions to the whole cluster",
        "impact": "The use of wildcard rights grants is likely to provide excessive rights to the Kubernetes API. For a ClusterRole this would be considered high severity.",
        "resolve": "Set only the necessary permissions required",
        "remediation": {
          "kubernetes": "Set only the necessary permissions required",
          "terraform": "Remove any wildcards [*] from `rule.verbs` and `rule.resources`"
        },
        "lineNumber": 75,
        "iacDescription": {
          "issue": "The role uses wildcards, which grant the role permissions to the whole cluster",
          "impact": "The use of wildcard rights grants is likely to provide excessive rights to the Kubernetes API. For a ClusterRole this would be considered high severity.",
          "resolve": "Set only the necessary permissions required"
        },
        "publicId": "SNYK-CC-K8S-44",
        "msg": "rules[2].resources",
        "references": [
          "https://kubernetes.io/docs/reference/access-authn-authz/rbac/"
        ],
        "path": [
          "[DocId: 5]",
          "rules[2]",
          "resources"
        ],
        "compliance": []
      }
    ]
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-rhte-analytics_data_ocp_infra/files/object-user.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-rhte-analytics_data_ocp_infra/files/object-user.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-rhte-analytics_data_ocp_infra/files/object.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-rhte-analytics_data_ocp_infra/files/object.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-rhte-analytics_data_ocp_infra/files/opendatahub_v1alpha1_opendatahub_crd.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-rhte-analytics_data_ocp_infra/files/opendatahub_v1alpha1_opendatahub_crd.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-rhte-analytics_data_ocp_infra/files/operator.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-rhte-analytics_data_ocp_infra/files/operator.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": false,
    "infrastructureAsCodeIssues": [
      {
        "id": "SNYK-CC-K8S-47",
        "title": "Role or ClusterRole with dangerous permissions",
        "severity": "high",
        "isIgnored": false,
        "subType": "ClusterRole",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-47",
        "isGeneratedByCustomRule": false,
        "issue": "A role was found using a dangerous permissions",
        "impact": "Using this role grants dangerous permissions. For a ClusterRole this would be considered high severity.",
        "resolve": "Consider removing these permissions",
        "remediation": {
          "kubernetes": "Consider removing these permissions",
          "terraform": "Consider removing these permissions"
        },
        "lineNumber": 178,
        "iacDescription": {
          "issue": "A role was found using a dangerous permissions",
          "impact": "Using this role grants dangerous permissions. For a ClusterRole this would be considered high severity.",
          "resolve": "Consider removing these permissions"
        },
        "publicId": "SNYK-CC-K8S-47",
        "msg": "rules[0].resources",
        "references": [
          "https://kubernetes.io/docs/reference/access-authn-authz/rbac/"
        ],
        "path": [
          "[DocId: 7]",
          "rules[0]",
          "resources"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-47",
        "title": "Role or ClusterRole with dangerous permissions",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Role",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-47",
        "isGeneratedByCustomRule": false,
        "issue": "A role was found using a dangerous permissions",
        "impact": "Using this role grants dangerous permissions. For a ClusterRole this would be considered high severity.",
        "resolve": "Consider removing these permissions",
        "remediation": {
          "kubernetes": "Consider removing these permissions",
          "terraform": "Consider removing these permissions"
        },
        "lineNumber": 218,
        "iacDescription": {
          "issue": "A role was found using a dangerous permissions",
          "impact": "Using this role grants dangerous permissions. For a ClusterRole this would be considered high severity.",
          "resolve": "Consider removing these permissions"
        },
        "publicId": "SNYK-CC-K8S-47",
        "msg": "rules[0].resources",
        "references": [
          "https://kubernetes.io/docs/reference/access-authn-authz/rbac/"
        ],
        "path": [
          "[DocId: 8]",
          "rules[0]",
          "resources"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-44",
        "title": "Role or ClusterRole with too wide permissions",
        "severity": "high",
        "isIgnored": false,
        "subType": "ClusterRole",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-44",
        "isGeneratedByCustomRule": false,
        "issue": "The role uses wildcards, which grant the role permissions to the whole cluster",
        "impact": "The use of wildcard rights grants is likely to provide excessive rights to the Kubernetes API. For a ClusterRole this would be considered high severity.",
        "resolve": "Set only the necessary permissions required",
        "remediation": {
          "kubernetes": "Set only the necessary permissions required",
          "terraform": "Remove any wildcards [*] from `rule.verbs` and `rule.resources`"
        },
        "lineNumber": 298,
        "iacDescription": {
          "issue": "The role uses wildcards, which grant the role permissions to the whole cluster",
          "impact": "The use of wildcard rights grants is likely to provide excessive rights to the Kubernetes API. For a ClusterRole this would be considered high severity.",
          "resolve": "Set only the necessary permissions required"
        },
        "publicId": "SNYK-CC-K8S-44",
        "msg": "rules[4].resources",
        "references": [
          "https://kubernetes.io/docs/reference/access-authn-authz/rbac/"
        ],
        "path": [
          "[DocId: 9]",
          "rules[4]",
          "resources"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-44",
        "title": "Role or ClusterRole with too wide permissions",
        "severity": "high",
        "isIgnored": false,
        "subType": "ClusterRole",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-44",
        "isGeneratedByCustomRule": false,
        "issue": "The role uses wildcards, which grant the role permissions to the whole cluster",
        "impact": "The use of wildcard rights grants is likely to provide excessive rights to the Kubernetes API. For a ClusterRole this would be considered high severity.",
        "resolve": "Set only the necessary permissions required",
        "remediation": {
          "kubernetes": "Set only the necessary permissions required",
          "terraform": "Remove any wildcards [*] from `rule.verbs` and `rule.resources`"
        },
        "lineNumber": 304,
        "iacDescription": {
          "issue": "The role uses wildcards, which grant the role permissions to the whole cluster",
          "impact": "The use of wildcard rights grants is likely to provide excessive rights to the Kubernetes API. For a ClusterRole this would be considered high severity.",
          "resolve": "Set only the necessary permissions required"
        },
        "publicId": "SNYK-CC-K8S-44",
        "msg": "rules[5].resources",
        "references": [
          "https://kubernetes.io/docs/reference/access-authn-authz/rbac/"
        ],
        "path": [
          "[DocId: 9]",
          "rules[5]",
          "resources"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-44",
        "title": "Role or ClusterRole with too wide permissions",
        "severity": "high",
        "isIgnored": false,
        "subType": "ClusterRole",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-44",
        "isGeneratedByCustomRule": false,
        "issue": "The role uses wildcards, which grant the role permissions to the whole cluster",
        "impact": "The use of wildcard rights grants is likely to provide excessive rights to the Kubernetes API. For a ClusterRole this would be considered high severity.",
        "resolve": "Set only the necessary permissions required",
        "remediation": {
          "kubernetes": "Set only the necessary permissions required",
          "terraform": "Remove any wildcards [*] from `rule.verbs` and `rule.resources`"
        },
        "lineNumber": 306,
        "iacDescription": {
          "issue": "The role uses wildcards, which grant the role permissions to the whole cluster",
          "impact": "The use of wildcard rights grants is likely to provide excessive rights to the Kubernetes API. For a ClusterRole this would be considered high severity.",
          "resolve": "Set only the necessary permissions required"
        },
        "publicId": "SNYK-CC-K8S-44",
        "msg": "rules[5].verbs",
        "references": [
          "https://kubernetes.io/docs/reference/access-authn-authz/rbac/"
        ],
        "path": [
          "[DocId: 9]",
          "rules[5]",
          "verbs"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-44",
        "title": "Role or ClusterRole with too wide permissions",
        "severity": "high",
        "isIgnored": false,
        "subType": "ClusterRole",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-44",
        "isGeneratedByCustomRule": false,
        "issue": "The role uses wildcards, which grant the role permissions to the whole cluster",
        "impact": "The use of wildcard rights grants is likely to provide excessive rights to the Kubernetes API. For a ClusterRole this would be considered high severity.",
        "resolve": "Set only the necessary permissions required",
        "remediation": {
          "kubernetes": "Set only the necessary permissions required",
          "terraform": "Remove any wildcards [*] from `rule.verbs` and `rule.resources`"
        },
        "lineNumber": 300,
        "iacDescription": {
          "issue": "The role uses wildcards, which grant the role permissions to the whole cluster",
          "impact": "The use of wildcard rights grants is likely to provide excessive rights to the Kubernetes API. For a ClusterRole this would be considered high severity.",
          "resolve": "Set only the necessary permissions required"
        },
        "publicId": "SNYK-CC-K8S-44",
        "msg": "rules[4].verbs",
        "references": [
          "https://kubernetes.io/docs/reference/access-authn-authz/rbac/"
        ],
        "path": [
          "[DocId: 9]",
          "rules[4]",
          "verbs"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-41",
        "title": "Container is running without liveness probe",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-41",
        "isGeneratedByCustomRule": false,
        "issue": "Liveness probe is not defined",
        "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
        "resolve": "Add `livenessProbe` attribute",
        "remediation": {
          "kubernetes": "Add `livenessProbe` attribute",
          "terraform": "Add `liveness_probe` attribute"
        },
        "lineNumber": 392,
        "iacDescription": {
          "issue": "Liveness probe is not defined",
          "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
          "resolve": "Add `livenessProbe` attribute"
        },
        "publicId": "SNYK-CC-K8S-41",
        "msg": "spec.template.spec.containers[rook-ceph-operator].livenessProbe",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/",
          "https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/",
          "https://cloud.google.com/blog/products/gcp/kubernetes-best-practices-setting-up-health-checks-with-readiness-and-liveness-probes"
        ],
        "path": [
          "[DocId: 14]",
          "spec",
          "template",
          "spec",
          "containers[rook-ceph-operator]",
          "livenessProbe"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-42",
        "title": "Container could be running with outdated image",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-42",
        "isGeneratedByCustomRule": false,
        "issue": "The image policy does not prevent image reuse",
        "impact": "The container may run with outdated or unauthorized image",
        "resolve": "Set `imagePullPolicy` attribute to `Always`",
        "remediation": {
          "kubernetes": "Set `imagePullPolicy` attribute to `Always`",
          "terraform": "Set `image_pull_policy` attribute to `Always"
        },
        "lineNumber": 392,
        "iacDescription": {
          "issue": "The image policy does not prevent image reuse",
          "impact": "The container may run with outdated or unauthorized image",
          "resolve": "Set `imagePullPolicy` attribute to `Always`"
        },
        "publicId": "SNYK-CC-K8S-42",
        "msg": "spec.template.spec.containers[rook-ceph-operator].imagePullPolicy",
        "references": [
          "https://kubernetes.io/docs/concepts/containers/images/",
          "https://kubernetes.io/docs/concepts/configuration/overview/#container-images"
        ],
        "path": [
          "[DocId: 14]",
          "spec",
          "template",
          "spec",
          "containers[rook-ceph-operator]",
          "imagePullPolicy"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-9",
        "title": "Container is running without privilege escalation control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-9",
        "isGeneratedByCustomRule": false,
        "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
        "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
          "terraform": "Set `spec.container.security_context.allow_privilege_escalation` to `false`"
        },
        "lineNumber": 392,
        "iacDescription": {
          "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
          "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`"
        },
        "publicId": "SNYK-CC-K8S-9",
        "msg": "spec.template.spec.containers[rook-ceph-operator].securityContext.allowPrivilegeEscalation",
        "references": [
          "https://www.kernel.org/doc/html/latest/userspace-api/no_new_privs.html"
        ],
        "path": [
          "[DocId: 14]",
          "spec",
          "template",
          "spec",
          "containers[rook-ceph-operator]",
          "securityContext",
          "allowPrivilegeEscalation"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-4",
        "title": "Container is running without memory limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-4",
        "isGeneratedByCustomRule": false,
        "issue": "Memory limit is not defined",
        "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
        "resolve": "Set `resources.limits.memory` value",
        "remediation": {
          "kubernetes": "Set `resources.limits.memory` value",
          "terraform": "Set `resources.limits.memory` value"
        },
        "lineNumber": 392,
        "iacDescription": {
          "issue": "Memory limit is not defined",
          "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
          "resolve": "Set `resources.limits.memory` value"
        },
        "publicId": "SNYK-CC-K8S-4",
        "msg": "input.spec.template.spec.containers[rook-ceph-operator].resources.limits.memory",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/memory-default-namespace/"
        ],
        "path": [
          "[DocId: 14]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[rook-ceph-operator]",
          "resources",
          "limits",
          "memory"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-11",
        "title": "Container's or Pod's  UID could clash with host's UID",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-11",
        "isGeneratedByCustomRule": false,
        "issue": "`runAsUser` value is set to low UID",
        "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
        "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
          "terraform": "Set `security_context.run_as_user` value to greater or equal than 10'000"
        },
        "lineNumber": 392,
        "iacDescription": {
          "issue": "`runAsUser` value is set to low UID",
          "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
          "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence"
        },
        "publicId": "SNYK-CC-K8S-11",
        "msg": "input.spec.template.spec.containers[rook-ceph-operator].securityContext.runAsUser",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container",
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod",
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 14]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[rook-ceph-operator]",
          "securityContext",
          "runAsUser"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-5",
        "title": "Container has no CPU limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-5",
        "isGeneratedByCustomRule": false,
        "issue": "Container has no CPU limit",
        "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
        "resolve": "Add `resources.limits.cpu` field with required CPU limit value",
        "remediation": {
          "kubernetes": "Add `resources.limits.cpu` field with required CPU limit value",
          "terraform": "Add `spec.container.resources.limits.cpu` field with required CPU limit value"
        },
        "lineNumber": 392,
        "iacDescription": {
          "issue": "Container has no CPU limit",
          "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
          "resolve": "Add `resources.limits.cpu` field with required CPU limit value"
        },
        "publicId": "SNYK-CC-K8S-5",
        "msg": "input.spec.template.spec.containers[rook-ceph-operator].resources.limits.cpu",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-cpu-resource/",
          "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/cpu-default-namespace/",
          "https://github.com/kubernetes/design-proposals-archive/blob/8da1442ea29adccea40693357d04727127e045ed/node/resource-qos.md#compressible-resource-guaranteess"
        ],
        "path": [
          "[DocId: 14]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[rook-ceph-operator]",
          "resources",
          "limits",
          "cpu"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-10",
        "title": "Container or Pod is running without root user control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-10",
        "isGeneratedByCustomRule": false,
        "issue": "Container or Pod is running without root user control",
        "impact": "Container or Pod could be running with full administrative privileges",
        "resolve": "Set `securityContext.runAsNonRoot` to `true`",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsNonRoot` to `true`",
          "terraform": "Set `security_context.run_as_non_root` to `true`"
        },
        "lineNumber": 392,
        "iacDescription": {
          "issue": "Container or Pod is running without root user control",
          "impact": "Container or Pod could be running with full administrative privileges",
          "resolve": "Set `securityContext.runAsNonRoot` to `true`"
        },
        "publicId": "SNYK-CC-K8S-10",
        "msg": "input.spec.template.spec.containers[rook-ceph-operator].securityContext.runAsNonRoot",
        "description": "",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 14]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[rook-ceph-operator]",
          "securityContext",
          "runAsNonRoot"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-6",
        "title": "Container does not drop all default capabilities",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-6",
        "isGeneratedByCustomRule": false,
        "issue": "All default capabilities are not explicitly dropped",
        "impact": "Containers are running with potentially unnecessary privileges",
        "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
        "remediation": {
          "kubernetes": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
          "terraform": "Add `ALL` to `spec.container.security_context.capabilities.drop` list, and add only required capabilities to `spec.container.security_context.capabilities.add`, ensuring it also does not contain `ALL`"
        },
        "lineNumber": 392,
        "iacDescription": {
          "issue": "All default capabilities are not explicitly dropped",
          "impact": "Containers are running with potentially unnecessary privileges",
          "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`"
        },
        "publicId": "SNYK-CC-K8S-6",
        "msg": "input.spec.template.spec.containers[rook-ceph-operator].securityContext.capabilities.drop",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
          "https://linux-audit.com/linux-capabilities-hardening-linux-binaries-by-removing-setuid/"
        ],
        "path": [
          "[DocId: 14]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[rook-ceph-operator]",
          "securityContext",
          "capabilities",
          "drop"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-8",
        "title": "Container is running with writable root filesystem",
        "severity": "low",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-8",
        "isGeneratedByCustomRule": false,
        "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
        "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
          "terraform": "Set `security_context.read_only_root_filesystem` to `true`"
        },
        "lineNumber": 392,
        "iacDescription": {
          "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
          "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`"
        },
        "publicId": "SNYK-CC-K8S-8",
        "msg": "spec.template.spec.containers[rook-ceph-operator].securityContext.readOnlyRootFilesystem",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 14]",
          "spec",
          "template",
          "spec",
          "containers[rook-ceph-operator]",
          "securityContext",
          "readOnlyRootFilesystem"
        ],
        "compliance": []
      }
    ]
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-rhte-analytics_data_ocp_infra/files/scc.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-rhte-analytics_data_ocp_infra/files/scc.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-rhte-analytics_data_ocp_infra/files/toolbox.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-rhte-analytics_data_ocp_infra/files/toolbox.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": false,
    "infrastructureAsCodeIssues": [
      {
        "id": "SNYK-CC-K8S-14",
        "title": "Container is running in host's Network namespace",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-14",
        "isGeneratedByCustomRule": false,
        "issue": "The pod is sharing host's Network namespace",
        "impact": "Containers will be able to access host's networking resources. This breaks container security boundary.",
        "resolve": "Remove `hostNetwork` attribute, or set value to `false`",
        "remediation": {
          "kubernetes": "Remove `hostNetwork` attribute, or set value to `false`",
          "terraform": "Remove `host_network` attribute, or set value to `false`"
        },
        "lineNumber": 44,
        "iacDescription": {
          "issue": "The pod is sharing host's Network namespace",
          "impact": "Containers will be able to access host's networking resources. This breaks container security boundary.",
          "resolve": "Remove `hostNetwork` attribute, or set value to `false`"
        },
        "publicId": "SNYK-CC-K8S-14",
        "msg": "input.spec.template.spec.hostNetwork",
        "description": "",
        "references": [
          "https://kubernetes.io/docs/concepts/policy/pod-security-policy/#host-namespaces",
          "https://kubernetes.io/docs/concepts/configuration/overview/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "hostNetwork"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-4",
        "title": "Container is running without memory limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-4",
        "isGeneratedByCustomRule": false,
        "issue": "Memory limit is not defined",
        "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
        "resolve": "Set `resources.limits.memory` value",
        "remediation": {
          "kubernetes": "Set `resources.limits.memory` value",
          "terraform": "Set `resources.limits.memory` value"
        },
        "lineNumber": 21,
        "iacDescription": {
          "issue": "Memory limit is not defined",
          "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
          "resolve": "Set `resources.limits.memory` value"
        },
        "publicId": "SNYK-CC-K8S-4",
        "msg": "input.spec.template.spec.containers[rook-ceph-tools].resources.limits.memory",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/memory-default-namespace/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[rook-ceph-tools]",
          "resources",
          "limits",
          "memory"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-10",
        "title": "Container or Pod is running without root user control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-10",
        "isGeneratedByCustomRule": false,
        "issue": "Container or Pod is running without root user control",
        "impact": "Container or Pod could be running with full administrative privileges",
        "resolve": "Set `securityContext.runAsNonRoot` to `true`",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsNonRoot` to `true`",
          "terraform": "Set `security_context.run_as_non_root` to `true`"
        },
        "lineNumber": 32,
        "iacDescription": {
          "issue": "Container or Pod is running without root user control",
          "impact": "Container or Pod could be running with full administrative privileges",
          "resolve": "Set `securityContext.runAsNonRoot` to `true`"
        },
        "publicId": "SNYK-CC-K8S-10",
        "msg": "input.spec.template.spec.containers[rook-ceph-tools].securityContext.runAsNonRoot",
        "description": "",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[rook-ceph-tools]",
          "securityContext",
          "runAsNonRoot"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-37",
        "title": "Container is running with host path mount",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-37",
        "isGeneratedByCustomRule": false,
        "issue": "Host path has been mounted inside the pod",
        "impact": "Increases the attack surface, and can lead to privilege escalation",
        "resolve": "Remove `hostPath` volume mount",
        "remediation": {
          "kubernetes": "Remove `hostPath` volume mount",
          "terraform": "Remove `host_path` from `spec.volume` property"
        },
        "lineNumber": 53,
        "iacDescription": {
          "issue": "Host path has been mounted inside the pod",
          "impact": "Increases the attack surface, and can lead to privilege escalation",
          "resolve": "Remove `hostPath` volume mount"
        },
        "publicId": "SNYK-CC-K8S-37",
        "msg": "spec.template.spec.volumes[libmodules].hostPath",
        "references": [
          "https://kubernetes.io/docs/concepts/storage/volumes/#hostpath"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "volumes[libmodules]",
          "hostPath"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-37",
        "title": "Container is running with host path mount",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-37",
        "isGeneratedByCustomRule": false,
        "issue": "Host path has been mounted inside the pod",
        "impact": "Increases the attack surface, and can lead to privilege escalation",
        "resolve": "Remove `hostPath` volume mount",
        "remediation": {
          "kubernetes": "Remove `hostPath` volume mount",
          "terraform": "Remove `host_path` from `spec.volume` property"
        },
        "lineNumber": 50,
        "iacDescription": {
          "issue": "Host path has been mounted inside the pod",
          "impact": "Increases the attack surface, and can lead to privilege escalation",
          "resolve": "Remove `hostPath` volume mount"
        },
        "publicId": "SNYK-CC-K8S-37",
        "msg": "spec.template.spec.volumes[sysbus].hostPath",
        "references": [
          "https://kubernetes.io/docs/concepts/storage/volumes/#hostpath"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "volumes[sysbus]",
          "hostPath"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-9",
        "title": "Container is running without privilege escalation control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-9",
        "isGeneratedByCustomRule": false,
        "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
        "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
          "terraform": "Set `spec.container.security_context.allow_privilege_escalation` to `false`"
        },
        "lineNumber": 32,
        "iacDescription": {
          "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
          "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`"
        },
        "publicId": "SNYK-CC-K8S-9",
        "msg": "spec.template.spec.containers[rook-ceph-tools].securityContext.allowPrivilegeEscalation",
        "references": [
          "https://www.kernel.org/doc/html/latest/userspace-api/no_new_privs.html"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "containers[rook-ceph-tools]",
          "securityContext",
          "allowPrivilegeEscalation"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-1",
        "title": "Privileged container",
        "severity": "high",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-1",
        "isGeneratedByCustomRule": false,
        "issue": "Container is running in privileged mode",
        "impact": "Compromised container could potentially modify the underlying host\u2019s kernel by loading unauthorized modules (i.e. drivers).",
        "resolve": "Remove `securityContext.privileged` attribute, or set value to `false`",
        "remediation": {
          "kubernetes": "Remove `securityContext.privileged` attribute, or set value to `false`",
          "terraform": "Remove `security_context.privileged` attribute, or set value to `false`"
        },
        "lineNumber": 33,
        "iacDescription": {
          "issue": "Container is running in privileged mode",
          "impact": "Compromised container could potentially modify the underlying host\u2019s kernel by loading unauthorized modules (i.e. drivers).",
          "resolve": "Remove `securityContext.privileged` attribute, or set value to `false`"
        },
        "publicId": "SNYK-CC-K8S-1",
        "msg": "input.spec.template.spec.containers[rook-ceph-tools].securityContext.privileged",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[rook-ceph-tools]",
          "securityContext",
          "privileged"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-37",
        "title": "Container is running with host path mount",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-37",
        "isGeneratedByCustomRule": false,
        "issue": "Host path has been mounted inside the pod",
        "impact": "Increases the attack surface, and can lead to privilege escalation",
        "resolve": "Remove `hostPath` volume mount",
        "remediation": {
          "kubernetes": "Remove `hostPath` volume mount",
          "terraform": "Remove `host_path` from `spec.volume` property"
        },
        "lineNumber": 47,
        "iacDescription": {
          "issue": "Host path has been mounted inside the pod",
          "impact": "Increases the attack surface, and can lead to privilege escalation",
          "resolve": "Remove `hostPath` volume mount"
        },
        "publicId": "SNYK-CC-K8S-37",
        "msg": "spec.template.spec.volumes[dev].hostPath",
        "references": [
          "https://kubernetes.io/docs/concepts/storage/volumes/#hostpath"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "volumes[dev]",
          "hostPath"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-11",
        "title": "Container's or Pod's  UID could clash with host's UID",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-11",
        "isGeneratedByCustomRule": false,
        "issue": "`runAsUser` value is set to low UID",
        "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
        "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
          "terraform": "Set `security_context.run_as_user` value to greater or equal than 10'000"
        },
        "lineNumber": 32,
        "iacDescription": {
          "issue": "`runAsUser` value is set to low UID",
          "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
          "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence"
        },
        "publicId": "SNYK-CC-K8S-11",
        "msg": "input.spec.template.spec.containers[rook-ceph-tools].securityContext.runAsUser",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container",
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod",
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[rook-ceph-tools]",
          "securityContext",
          "runAsUser"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-6",
        "title": "Container does not drop all default capabilities",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-6",
        "isGeneratedByCustomRule": false,
        "issue": "All default capabilities are not explicitly dropped",
        "impact": "Containers are running with potentially unnecessary privileges",
        "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
        "remediation": {
          "kubernetes": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
          "terraform": "Add `ALL` to `spec.container.security_context.capabilities.drop` list, and add only required capabilities to `spec.container.security_context.capabilities.add`, ensuring it also does not contain `ALL`"
        },
        "lineNumber": 32,
        "iacDescription": {
          "issue": "All default capabilities are not explicitly dropped",
          "impact": "Containers are running with potentially unnecessary privileges",
          "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`"
        },
        "publicId": "SNYK-CC-K8S-6",
        "msg": "input.spec.template.spec.containers[rook-ceph-tools].securityContext.capabilities.drop",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
          "https://linux-audit.com/linux-capabilities-hardening-linux-binaries-by-removing-setuid/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[rook-ceph-tools]",
          "securityContext",
          "capabilities",
          "drop"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-8",
        "title": "Container is running with writable root filesystem",
        "severity": "low",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-8",
        "isGeneratedByCustomRule": false,
        "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
        "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
          "terraform": "Set `security_context.read_only_root_filesystem` to `true`"
        },
        "lineNumber": 32,
        "iacDescription": {
          "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
          "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`"
        },
        "publicId": "SNYK-CC-K8S-8",
        "msg": "spec.template.spec.containers[rook-ceph-tools].securityContext.readOnlyRootFilesystem",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "containers[rook-ceph-tools]",
          "securityContext",
          "readOnlyRootFilesystem"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-42",
        "title": "Container could be running with outdated image",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-42",
        "isGeneratedByCustomRule": false,
        "issue": "The image policy does not prevent image reuse",
        "impact": "The container may run with outdated or unauthorized image",
        "resolve": "Set `imagePullPolicy` attribute to `Always`",
        "remediation": {
          "kubernetes": "Set `imagePullPolicy` attribute to `Always`",
          "terraform": "Set `image_pull_policy` attribute to `Always"
        },
        "lineNumber": 25,
        "iacDescription": {
          "issue": "The image policy does not prevent image reuse",
          "impact": "The container may run with outdated or unauthorized image",
          "resolve": "Set `imagePullPolicy` attribute to `Always`"
        },
        "publicId": "SNYK-CC-K8S-42",
        "msg": "spec.template.spec.containers[rook-ceph-tools].imagePullPolicy",
        "references": [
          "https://kubernetes.io/docs/concepts/containers/images/",
          "https://kubernetes.io/docs/concepts/configuration/overview/#container-images"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "containers[rook-ceph-tools]",
          "imagePullPolicy"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-5",
        "title": "Container has no CPU limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-5",
        "isGeneratedByCustomRule": false,
        "issue": "Container has no CPU limit",
        "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
        "resolve": "Add `resources.limits.cpu` field with required CPU limit value",
        "remediation": {
          "kubernetes": "Add `resources.limits.cpu` field with required CPU limit value",
          "terraform": "Add `spec.container.resources.limits.cpu` field with required CPU limit value"
        },
        "lineNumber": 21,
        "iacDescription": {
          "issue": "Container has no CPU limit",
          "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
          "resolve": "Add `resources.limits.cpu` field with required CPU limit value"
        },
        "publicId": "SNYK-CC-K8S-5",
        "msg": "input.spec.template.spec.containers[rook-ceph-tools].resources.limits.cpu",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-cpu-resource/",
          "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/cpu-default-namespace/",
          "https://github.com/kubernetes/design-proposals-archive/blob/8da1442ea29adccea40693357d04727127e045ed/node/resource-qos.md#compressible-resource-guaranteess"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[rook-ceph-tools]",
          "resources",
          "limits",
          "cpu"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-41",
        "title": "Container is running without liveness probe",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-41",
        "isGeneratedByCustomRule": false,
        "issue": "Liveness probe is not defined",
        "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
        "resolve": "Add `livenessProbe` attribute",
        "remediation": {
          "kubernetes": "Add `livenessProbe` attribute",
          "terraform": "Add `liveness_probe` attribute"
        },
        "lineNumber": 21,
        "iacDescription": {
          "issue": "Liveness probe is not defined",
          "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
          "resolve": "Add `livenessProbe` attribute"
        },
        "publicId": "SNYK-CC-K8S-41",
        "msg": "spec.template.spec.containers[rook-ceph-tools].livenessProbe",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/",
          "https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/",
          "https://cloud.google.com/blog/products/gcp/kubernetes-best-practices-setting-up-health-checks-with-readiness-and-liveness-probes"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "containers[rook-ceph-tools]",
          "livenessProbe"
        ],
        "compliance": []
      }
    ]
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-rhte-analytics_data_ocp_infra/files/kafka/kafka.clusterrole.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-rhte-analytics_data_ocp_infra/files/kafka/kafka.clusterrole.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": false,
    "infrastructureAsCodeIssues": [
      {
        "id": "SNYK-CC-K8S-47",
        "title": "Role or ClusterRole with dangerous permissions",
        "severity": "high",
        "isIgnored": false,
        "subType": "ClusterRole",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-47",
        "isGeneratedByCustomRule": false,
        "issue": "A role was found using a dangerous permissions",
        "impact": "Using this role grants dangerous permissions. For a ClusterRole this would be considered high severity.",
        "resolve": "Consider removing these permissions",
        "remediation": {
          "kubernetes": "Consider removing these permissions",
          "terraform": "Consider removing these permissions"
        },
        "lineNumber": 211,
        "iacDescription": {
          "issue": "A role was found using a dangerous permissions",
          "impact": "Using this role grants dangerous permissions. For a ClusterRole this would be considered high severity.",
          "resolve": "Consider removing these permissions"
        },
        "publicId": "SNYK-CC-K8S-47",
        "msg": "rules[15].resources",
        "references": [
          "https://kubernetes.io/docs/reference/access-authn-authz/rbac/"
        ],
        "path": [
          "[DocId: 1]",
          "rules[15]",
          "resources"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-47",
        "title": "Role or ClusterRole with dangerous permissions",
        "severity": "high",
        "isIgnored": false,
        "subType": "ClusterRole",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-47",
        "isGeneratedByCustomRule": false,
        "issue": "A role was found using a dangerous permissions",
        "impact": "Using this role grants dangerous permissions. For a ClusterRole this would be considered high severity.",
        "resolve": "Consider removing these permissions",
        "remediation": {
          "kubernetes": "Consider removing these permissions",
          "terraform": "Consider removing these permissions"
        },
        "lineNumber": 351,
        "iacDescription": {
          "issue": "A role was found using a dangerous permissions",
          "impact": "Using this role grants dangerous permissions. For a ClusterRole this would be considered high severity.",
          "resolve": "Consider removing these permissions"
        },
        "publicId": "SNYK-CC-K8S-47",
        "msg": "rules[3].resources",
        "references": [
          "https://kubernetes.io/docs/reference/access-authn-authz/rbac/"
        ],
        "path": [
          "[DocId: 4]",
          "rules[3]",
          "resources"
        ],
        "compliance": []
      }
    ]
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-rhte-analytics_data_ocp_infra/files/kafka/kafka.crd.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-rhte-analytics_data_ocp_infra/files/kafka/kafka.crd.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-rhte-analytics_data_ocp_infra/files/seldon/seldon-user.clusterrole.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-rhte-analytics_data_ocp_infra/files/seldon/seldon-user.clusterrole.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": false,
    "infrastructureAsCodeIssues": [
      {
        "id": "SNYK-CC-K8S-44",
        "title": "Role or ClusterRole with too wide permissions",
        "severity": "high",
        "isIgnored": false,
        "subType": "ClusterRole",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-44",
        "isGeneratedByCustomRule": false,
        "issue": "The role uses wildcards, which grant the role permissions to the whole cluster",
        "impact": "The use of wildcard rights grants is likely to provide excessive rights to the Kubernetes API. For a ClusterRole this would be considered high severity.",
        "resolve": "Set only the necessary permissions required",
        "remediation": {
          "kubernetes": "Set only the necessary permissions required",
          "terraform": "Remove any wildcards [*] from `rule.verbs` and `rule.resources`"
        },
        "lineNumber": 11,
        "iacDescription": {
          "issue": "The role uses wildcards, which grant the role permissions to the whole cluster",
          "impact": "The use of wildcard rights grants is likely to provide excessive rights to the Kubernetes API. For a ClusterRole this would be considered high severity.",
          "resolve": "Set only the necessary permissions required"
        },
        "publicId": "SNYK-CC-K8S-44",
        "msg": "rules[0].verbs",
        "references": [
          "https://kubernetes.io/docs/reference/access-authn-authz/rbac/"
        ],
        "path": [
          "[DocId: 0]",
          "rules[0]",
          "verbs"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-44",
        "title": "Role or ClusterRole with too wide permissions",
        "severity": "high",
        "isIgnored": false,
        "subType": "ClusterRole",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-44",
        "isGeneratedByCustomRule": false,
        "issue": "The role uses wildcards, which grant the role permissions to the whole cluster",
        "impact": "The use of wildcard rights grants is likely to provide excessive rights to the Kubernetes API. For a ClusterRole this would be considered high severity.",
        "resolve": "Set only the necessary permissions required",
        "remediation": {
          "kubernetes": "Set only the necessary permissions required",
          "terraform": "Remove any wildcards [*] from `rule.verbs` and `rule.resources`"
        },
        "lineNumber": 10,
        "iacDescription": {
          "issue": "The role uses wildcards, which grant the role permissions to the whole cluster",
          "impact": "The use of wildcard rights grants is likely to provide excessive rights to the Kubernetes API. For a ClusterRole this would be considered high severity.",
          "resolve": "Set only the necessary permissions required"
        },
        "publicId": "SNYK-CC-K8S-44",
        "msg": "rules[0].resources",
        "references": [
          "https://kubernetes.io/docs/reference/access-authn-authz/rbac/"
        ],
        "path": [
          "[DocId: 0]",
          "rules[0]",
          "resources"
        ],
        "compliance": []
      }
    ]
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-rhte-analytics_data_ocp_workshop/files/deploy_role.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-rhte-analytics_data_ocp_workshop/files/deploy_role.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": false,
    "infrastructureAsCodeIssues": [
      {
        "id": "SNYK-CC-K8S-47",
        "title": "Role or ClusterRole with dangerous permissions",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Role",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-47",
        "isGeneratedByCustomRule": false,
        "issue": "A role was found using a dangerous permissions",
        "impact": "Using this role grants dangerous permissions. For a ClusterRole this would be considered high severity.",
        "resolve": "Consider removing these permissions",
        "remediation": {
          "kubernetes": "Consider removing these permissions",
          "terraform": "Consider removing these permissions"
        },
        "lineNumber": 124,
        "iacDescription": {
          "issue": "A role was found using a dangerous permissions",
          "impact": "Using this role grants dangerous permissions. For a ClusterRole this would be considered high severity.",
          "resolve": "Consider removing these permissions"
        },
        "publicId": "SNYK-CC-K8S-47",
        "msg": "rules[11].resources",
        "references": [
          "https://kubernetes.io/docs/reference/access-authn-authz/rbac/"
        ],
        "path": [
          "[DocId: 0]",
          "rules[11]",
          "resources"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-47",
        "title": "Role or ClusterRole with dangerous permissions",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Role",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-47",
        "isGeneratedByCustomRule": false,
        "issue": "A role was found using a dangerous permissions",
        "impact": "Using this role grants dangerous permissions. For a ClusterRole this would be considered high severity.",
        "resolve": "Consider removing these permissions",
        "remediation": {
          "kubernetes": "Consider removing these permissions",
          "terraform": "Consider removing these permissions"
        },
        "lineNumber": 51,
        "iacDescription": {
          "issue": "A role was found using a dangerous permissions",
          "impact": "Using this role grants dangerous permissions. For a ClusterRole this would be considered high severity.",
          "resolve": "Consider removing these permissions"
        },
        "publicId": "SNYK-CC-K8S-47",
        "msg": "rules[4].resources",
        "references": [
          "https://kubernetes.io/docs/reference/access-authn-authz/rbac/"
        ],
        "path": [
          "[DocId: 0]",
          "rules[4]",
          "resources"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-47",
        "title": "Role or ClusterRole with dangerous permissions",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Role",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-47",
        "isGeneratedByCustomRule": false,
        "issue": "A role was found using a dangerous permissions",
        "impact": "Using this role grants dangerous permissions. For a ClusterRole this would be considered high severity.",
        "resolve": "Consider removing these permissions",
        "remediation": {
          "kubernetes": "Consider removing these permissions",
          "terraform": "Consider removing these permissions"
        },
        "lineNumber": 111,
        "iacDescription": {
          "issue": "A role was found using a dangerous permissions",
          "impact": "Using this role grants dangerous permissions. For a ClusterRole this would be considered high severity.",
          "resolve": "Consider removing these permissions"
        },
        "publicId": "SNYK-CC-K8S-47",
        "msg": "rules[10].resources",
        "references": [
          "https://kubernetes.io/docs/reference/access-authn-authz/rbac/"
        ],
        "path": [
          "[DocId: 0]",
          "rules[10]",
          "resources"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-44",
        "title": "Role or ClusterRole with too wide permissions",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Role",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-44",
        "isGeneratedByCustomRule": false,
        "issue": "The role uses wildcards, which grant the role permissions to the whole cluster",
        "impact": "The use of wildcard rights grants is likely to provide excessive rights to the Kubernetes API. For a ClusterRole this would be considered high severity.",
        "resolve": "Set only the necessary permissions required",
        "remediation": {
          "kubernetes": "Set only the necessary permissions required",
          "terraform": "Remove any wildcards [*] from `rule.verbs` and `rule.resources`"
        },
        "lineNumber": 783,
        "iacDescription": {
          "issue": "The role uses wildcards, which grant the role permissions to the whole cluster",
          "impact": "The use of wildcard rights grants is likely to provide excessive rights to the Kubernetes API. For a ClusterRole this would be considered high severity.",
          "resolve": "Set only the necessary permissions required"
        },
        "publicId": "SNYK-CC-K8S-44",
        "msg": "rules[72].verbs",
        "references": [
          "https://kubernetes.io/docs/reference/access-authn-authz/rbac/"
        ],
        "path": [
          "[DocId: 0]",
          "rules[72]",
          "verbs"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-44",
        "title": "Role or ClusterRole with too wide permissions",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Role",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-44",
        "isGeneratedByCustomRule": false,
        "issue": "The role uses wildcards, which grant the role permissions to the whole cluster",
        "impact": "The use of wildcard rights grants is likely to provide excessive rights to the Kubernetes API. For a ClusterRole this would be considered high severity.",
        "resolve": "Set only the necessary permissions required",
        "remediation": {
          "kubernetes": "Set only the necessary permissions required",
          "terraform": "Remove any wildcards [*] from `rule.verbs` and `rule.resources`"
        },
        "lineNumber": 781,
        "iacDescription": {
          "issue": "The role uses wildcards, which grant the role permissions to the whole cluster",
          "impact": "The use of wildcard rights grants is likely to provide excessive rights to the Kubernetes API. For a ClusterRole this would be considered high severity.",
          "resolve": "Set only the necessary permissions required"
        },
        "publicId": "SNYK-CC-K8S-44",
        "msg": "rules[72].resources",
        "references": [
          "https://kubernetes.io/docs/reference/access-authn-authz/rbac/"
        ],
        "path": [
          "[DocId: 0]",
          "rules[72]",
          "resources"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-44",
        "title": "Role or ClusterRole with too wide permissions",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Role",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-44",
        "isGeneratedByCustomRule": false,
        "issue": "The role uses wildcards, which grant the role permissions to the whole cluster",
        "impact": "The use of wildcard rights grants is likely to provide excessive rights to the Kubernetes API. For a ClusterRole this would be considered high severity.",
        "resolve": "Set only the necessary permissions required",
        "remediation": {
          "kubernetes": "Set only the necessary permissions required",
          "terraform": "Remove any wildcards [*] from `rule.verbs` and `rule.resources`"
        },
        "lineNumber": 659,
        "iacDescription": {
          "issue": "The role uses wildcards, which grant the role permissions to the whole cluster",
          "impact": "The use of wildcard rights grants is likely to provide excessive rights to the Kubernetes API. For a ClusterRole this would be considered high severity.",
          "resolve": "Set only the necessary permissions required"
        },
        "publicId": "SNYK-CC-K8S-44",
        "msg": "rules[58].verbs",
        "references": [
          "https://kubernetes.io/docs/reference/access-authn-authz/rbac/"
        ],
        "path": [
          "[DocId: 0]",
          "rules[58]",
          "verbs"
        ],
        "compliance": []
      }
    ]
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-rhte-analytics_data_ocp_workshop/files/deploy_role_binding.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-rhte-analytics_data_ocp_workshop/files/deploy_role_binding.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-rhte-analytics_data_ocp_workshop/files/deploy_service_account.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-rhte-analytics_data_ocp_workshop/files/deploy_service_account.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-rhte-analytics_data_ocp_workshop/files/operator.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-rhte-analytics_data_ocp_workshop/files/operator.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": false,
    "infrastructureAsCodeIssues": [
      {
        "id": "SNYK-CC-K8S-9",
        "title": "Container is running without privilege escalation control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-9",
        "isGeneratedByCustomRule": false,
        "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
        "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
          "terraform": "Set `spec.container.security_context.allow_privilege_escalation` to `false`"
        },
        "lineNumber": 18,
        "iacDescription": {
          "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
          "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`"
        },
        "publicId": "SNYK-CC-K8S-9",
        "msg": "spec.template.spec.containers[opendatahub-operator].securityContext.allowPrivilegeEscalation",
        "references": [
          "https://www.kernel.org/doc/html/latest/userspace-api/no_new_privs.html"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "containers[opendatahub-operator]",
          "securityContext",
          "allowPrivilegeEscalation"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-4",
        "title": "Container is running without memory limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-4",
        "isGeneratedByCustomRule": false,
        "issue": "Memory limit is not defined",
        "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
        "resolve": "Set `resources.limits.memory` value",
        "remediation": {
          "kubernetes": "Set `resources.limits.memory` value",
          "terraform": "Set `resources.limits.memory` value"
        },
        "lineNumber": 18,
        "iacDescription": {
          "issue": "Memory limit is not defined",
          "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
          "resolve": "Set `resources.limits.memory` value"
        },
        "publicId": "SNYK-CC-K8S-4",
        "msg": "input.spec.template.spec.containers[opendatahub-operator].resources.limits.memory",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/memory-default-namespace/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[opendatahub-operator]",
          "resources",
          "limits",
          "memory"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-8",
        "title": "Container is running with writable root filesystem",
        "severity": "low",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-8",
        "isGeneratedByCustomRule": false,
        "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
        "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
          "terraform": "Set `security_context.read_only_root_filesystem` to `true`"
        },
        "lineNumber": 18,
        "iacDescription": {
          "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
          "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`"
        },
        "publicId": "SNYK-CC-K8S-8",
        "msg": "spec.template.spec.containers[opendatahub-operator].securityContext.readOnlyRootFilesystem",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "containers[opendatahub-operator]",
          "securityContext",
          "readOnlyRootFilesystem"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-5",
        "title": "Container has no CPU limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-5",
        "isGeneratedByCustomRule": false,
        "issue": "Container has no CPU limit",
        "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
        "resolve": "Add `resources.limits.cpu` field with required CPU limit value",
        "remediation": {
          "kubernetes": "Add `resources.limits.cpu` field with required CPU limit value",
          "terraform": "Add `spec.container.resources.limits.cpu` field with required CPU limit value"
        },
        "lineNumber": 18,
        "iacDescription": {
          "issue": "Container has no CPU limit",
          "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
          "resolve": "Add `resources.limits.cpu` field with required CPU limit value"
        },
        "publicId": "SNYK-CC-K8S-5",
        "msg": "input.spec.template.spec.containers[opendatahub-operator].resources.limits.cpu",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-cpu-resource/",
          "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/cpu-default-namespace/",
          "https://github.com/kubernetes/design-proposals-archive/blob/8da1442ea29adccea40693357d04727127e045ed/node/resource-qos.md#compressible-resource-guaranteess"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[opendatahub-operator]",
          "resources",
          "limits",
          "cpu"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-11",
        "title": "Container's or Pod's  UID could clash with host's UID",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-11",
        "isGeneratedByCustomRule": false,
        "issue": "`runAsUser` value is set to low UID",
        "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
        "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
          "terraform": "Set `security_context.run_as_user` value to greater or equal than 10'000"
        },
        "lineNumber": 18,
        "iacDescription": {
          "issue": "`runAsUser` value is set to low UID",
          "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
          "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence"
        },
        "publicId": "SNYK-CC-K8S-11",
        "msg": "input.spec.template.spec.containers[opendatahub-operator].securityContext.runAsUser",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container",
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod",
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[opendatahub-operator]",
          "securityContext",
          "runAsUser"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-10",
        "title": "Container or Pod is running without root user control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-10",
        "isGeneratedByCustomRule": false,
        "issue": "Container or Pod is running without root user control",
        "impact": "Container or Pod could be running with full administrative privileges",
        "resolve": "Set `securityContext.runAsNonRoot` to `true`",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsNonRoot` to `true`",
          "terraform": "Set `security_context.run_as_non_root` to `true`"
        },
        "lineNumber": 18,
        "iacDescription": {
          "issue": "Container or Pod is running without root user control",
          "impact": "Container or Pod could be running with full administrative privileges",
          "resolve": "Set `securityContext.runAsNonRoot` to `true`"
        },
        "publicId": "SNYK-CC-K8S-10",
        "msg": "input.spec.template.spec.containers[opendatahub-operator].securityContext.runAsNonRoot",
        "description": "",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[opendatahub-operator]",
          "securityContext",
          "runAsNonRoot"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-41",
        "title": "Container is running without liveness probe",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-41",
        "isGeneratedByCustomRule": false,
        "issue": "Liveness probe is not defined",
        "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
        "resolve": "Add `livenessProbe` attribute",
        "remediation": {
          "kubernetes": "Add `livenessProbe` attribute",
          "terraform": "Add `liveness_probe` attribute"
        },
        "lineNumber": 18,
        "iacDescription": {
          "issue": "Liveness probe is not defined",
          "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
          "resolve": "Add `livenessProbe` attribute"
        },
        "publicId": "SNYK-CC-K8S-41",
        "msg": "spec.template.spec.containers[opendatahub-operator].livenessProbe",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/",
          "https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/",
          "https://cloud.google.com/blog/products/gcp/kubernetes-best-practices-setting-up-health-checks-with-readiness-and-liveness-probes"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "containers[opendatahub-operator]",
          "livenessProbe"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-6",
        "title": "Container does not drop all default capabilities",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-6",
        "isGeneratedByCustomRule": false,
        "issue": "All default capabilities are not explicitly dropped",
        "impact": "Containers are running with potentially unnecessary privileges",
        "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
        "remediation": {
          "kubernetes": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
          "terraform": "Add `ALL` to `spec.container.security_context.capabilities.drop` list, and add only required capabilities to `spec.container.security_context.capabilities.add`, ensuring it also does not contain `ALL`"
        },
        "lineNumber": 18,
        "iacDescription": {
          "issue": "All default capabilities are not explicitly dropped",
          "impact": "Containers are running with potentially unnecessary privileges",
          "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`"
        },
        "publicId": "SNYK-CC-K8S-6",
        "msg": "input.spec.template.spec.containers[opendatahub-operator].securityContext.capabilities.drop",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
          "https://linux-audit.com/linux-capabilities-hardening-linux-binaries-by-removing-setuid/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[opendatahub-operator]",
          "securityContext",
          "capabilities",
          "drop"
        ],
        "compliance": []
      }
    ]
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-rhte-analytics_data_ocp_workshop/files/redis-template.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-rhte-analytics_data_ocp_workshop/files/redis-template.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-rhte-analytics_data_ocp_workshop_s2020/files/opendatahub_v1alpha1_opendatahub_cr.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-rhte-analytics_data_ocp_workshop_s2020/files/opendatahub_v1alpha1_opendatahub_cr.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-rhte-analytics_data_ocp_workshop_s2020/files/operator.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-rhte-analytics_data_ocp_workshop_s2020/files/operator.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": false,
    "infrastructureAsCodeIssues": [
      {
        "id": "SNYK-CC-K8S-9",
        "title": "Container is running without privilege escalation control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-9",
        "isGeneratedByCustomRule": false,
        "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
        "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
          "terraform": "Set `spec.container.security_context.allow_privilege_escalation` to `false`"
        },
        "lineNumber": 18,
        "iacDescription": {
          "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
          "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`"
        },
        "publicId": "SNYK-CC-K8S-9",
        "msg": "spec.template.spec.containers[opendatahub-operator].securityContext.allowPrivilegeEscalation",
        "references": [
          "https://www.kernel.org/doc/html/latest/userspace-api/no_new_privs.html"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "containers[opendatahub-operator]",
          "securityContext",
          "allowPrivilegeEscalation"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-4",
        "title": "Container is running without memory limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-4",
        "isGeneratedByCustomRule": false,
        "issue": "Memory limit is not defined",
        "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
        "resolve": "Set `resources.limits.memory` value",
        "remediation": {
          "kubernetes": "Set `resources.limits.memory` value",
          "terraform": "Set `resources.limits.memory` value"
        },
        "lineNumber": 18,
        "iacDescription": {
          "issue": "Memory limit is not defined",
          "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
          "resolve": "Set `resources.limits.memory` value"
        },
        "publicId": "SNYK-CC-K8S-4",
        "msg": "input.spec.template.spec.containers[opendatahub-operator].resources.limits.memory",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/memory-default-namespace/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[opendatahub-operator]",
          "resources",
          "limits",
          "memory"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-8",
        "title": "Container is running with writable root filesystem",
        "severity": "low",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-8",
        "isGeneratedByCustomRule": false,
        "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
        "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
          "terraform": "Set `security_context.read_only_root_filesystem` to `true`"
        },
        "lineNumber": 18,
        "iacDescription": {
          "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
          "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`"
        },
        "publicId": "SNYK-CC-K8S-8",
        "msg": "spec.template.spec.containers[opendatahub-operator].securityContext.readOnlyRootFilesystem",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "containers[opendatahub-operator]",
          "securityContext",
          "readOnlyRootFilesystem"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-5",
        "title": "Container has no CPU limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-5",
        "isGeneratedByCustomRule": false,
        "issue": "Container has no CPU limit",
        "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
        "resolve": "Add `resources.limits.cpu` field with required CPU limit value",
        "remediation": {
          "kubernetes": "Add `resources.limits.cpu` field with required CPU limit value",
          "terraform": "Add `spec.container.resources.limits.cpu` field with required CPU limit value"
        },
        "lineNumber": 18,
        "iacDescription": {
          "issue": "Container has no CPU limit",
          "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
          "resolve": "Add `resources.limits.cpu` field with required CPU limit value"
        },
        "publicId": "SNYK-CC-K8S-5",
        "msg": "input.spec.template.spec.containers[opendatahub-operator].resources.limits.cpu",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-cpu-resource/",
          "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/cpu-default-namespace/",
          "https://github.com/kubernetes/design-proposals-archive/blob/8da1442ea29adccea40693357d04727127e045ed/node/resource-qos.md#compressible-resource-guaranteess"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[opendatahub-operator]",
          "resources",
          "limits",
          "cpu"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-11",
        "title": "Container's or Pod's  UID could clash with host's UID",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-11",
        "isGeneratedByCustomRule": false,
        "issue": "`runAsUser` value is set to low UID",
        "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
        "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
          "terraform": "Set `security_context.run_as_user` value to greater or equal than 10'000"
        },
        "lineNumber": 18,
        "iacDescription": {
          "issue": "`runAsUser` value is set to low UID",
          "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
          "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence"
        },
        "publicId": "SNYK-CC-K8S-11",
        "msg": "input.spec.template.spec.containers[opendatahub-operator].securityContext.runAsUser",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container",
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod",
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[opendatahub-operator]",
          "securityContext",
          "runAsUser"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-10",
        "title": "Container or Pod is running without root user control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-10",
        "isGeneratedByCustomRule": false,
        "issue": "Container or Pod is running without root user control",
        "impact": "Container or Pod could be running with full administrative privileges",
        "resolve": "Set `securityContext.runAsNonRoot` to `true`",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsNonRoot` to `true`",
          "terraform": "Set `security_context.run_as_non_root` to `true`"
        },
        "lineNumber": 18,
        "iacDescription": {
          "issue": "Container or Pod is running without root user control",
          "impact": "Container or Pod could be running with full administrative privileges",
          "resolve": "Set `securityContext.runAsNonRoot` to `true`"
        },
        "publicId": "SNYK-CC-K8S-10",
        "msg": "input.spec.template.spec.containers[opendatahub-operator].securityContext.runAsNonRoot",
        "description": "",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[opendatahub-operator]",
          "securityContext",
          "runAsNonRoot"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-41",
        "title": "Container is running without liveness probe",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-41",
        "isGeneratedByCustomRule": false,
        "issue": "Liveness probe is not defined",
        "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
        "resolve": "Add `livenessProbe` attribute",
        "remediation": {
          "kubernetes": "Add `livenessProbe` attribute",
          "terraform": "Add `liveness_probe` attribute"
        },
        "lineNumber": 18,
        "iacDescription": {
          "issue": "Liveness probe is not defined",
          "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
          "resolve": "Add `livenessProbe` attribute"
        },
        "publicId": "SNYK-CC-K8S-41",
        "msg": "spec.template.spec.containers[opendatahub-operator].livenessProbe",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/",
          "https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/",
          "https://cloud.google.com/blog/products/gcp/kubernetes-best-practices-setting-up-health-checks-with-readiness-and-liveness-probes"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "containers[opendatahub-operator]",
          "livenessProbe"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-6",
        "title": "Container does not drop all default capabilities",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-6",
        "isGeneratedByCustomRule": false,
        "issue": "All default capabilities are not explicitly dropped",
        "impact": "Containers are running with potentially unnecessary privileges",
        "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
        "remediation": {
          "kubernetes": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
          "terraform": "Add `ALL` to `spec.container.security_context.capabilities.drop` list, and add only required capabilities to `spec.container.security_context.capabilities.add`, ensuring it also does not contain `ALL`"
        },
        "lineNumber": 18,
        "iacDescription": {
          "issue": "All default capabilities are not explicitly dropped",
          "impact": "Containers are running with potentially unnecessary privileges",
          "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`"
        },
        "publicId": "SNYK-CC-K8S-6",
        "msg": "input.spec.template.spec.containers[opendatahub-operator].securityContext.capabilities.drop",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
          "https://linux-audit.com/linux-capabilities-hardening-linux-binaries-by-removing-setuid/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[opendatahub-operator]",
          "securityContext",
          "capabilities",
          "drop"
        ],
        "compliance": []
      }
    ]
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-rhte-analytics_data_ocp_workshop_s2020/files/role.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-rhte-analytics_data_ocp_workshop_s2020/files/role.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": false,
    "infrastructureAsCodeIssues": [
      {
        "id": "SNYK-CC-K8S-47",
        "title": "Role or ClusterRole with dangerous permissions",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Role",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-47",
        "isGeneratedByCustomRule": false,
        "issue": "A role was found using a dangerous permissions",
        "impact": "Using this role grants dangerous permissions. For a ClusterRole this would be considered high severity.",
        "resolve": "Consider removing these permissions",
        "remediation": {
          "kubernetes": "Consider removing these permissions",
          "terraform": "Consider removing these permissions"
        },
        "lineNumber": 124,
        "iacDescription": {
          "issue": "A role was found using a dangerous permissions",
          "impact": "Using this role grants dangerous permissions. For a ClusterRole this would be considered high severity.",
          "resolve": "Consider removing these permissions"
        },
        "publicId": "SNYK-CC-K8S-47",
        "msg": "rules[11].resources",
        "references": [
          "https://kubernetes.io/docs/reference/access-authn-authz/rbac/"
        ],
        "path": [
          "[DocId: 0]",
          "rules[11]",
          "resources"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-47",
        "title": "Role or ClusterRole with dangerous permissions",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Role",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-47",
        "isGeneratedByCustomRule": false,
        "issue": "A role was found using a dangerous permissions",
        "impact": "Using this role grants dangerous permissions. For a ClusterRole this would be considered high severity.",
        "resolve": "Consider removing these permissions",
        "remediation": {
          "kubernetes": "Consider removing these permissions",
          "terraform": "Consider removing these permissions"
        },
        "lineNumber": 51,
        "iacDescription": {
          "issue": "A role was found using a dangerous permissions",
          "impact": "Using this role grants dangerous permissions. For a ClusterRole this would be considered high severity.",
          "resolve": "Consider removing these permissions"
        },
        "publicId": "SNYK-CC-K8S-47",
        "msg": "rules[4].resources",
        "references": [
          "https://kubernetes.io/docs/reference/access-authn-authz/rbac/"
        ],
        "path": [
          "[DocId: 0]",
          "rules[4]",
          "resources"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-47",
        "title": "Role or ClusterRole with dangerous permissions",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Role",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-47",
        "isGeneratedByCustomRule": false,
        "issue": "A role was found using a dangerous permissions",
        "impact": "Using this role grants dangerous permissions. For a ClusterRole this would be considered high severity.",
        "resolve": "Consider removing these permissions",
        "remediation": {
          "kubernetes": "Consider removing these permissions",
          "terraform": "Consider removing these permissions"
        },
        "lineNumber": 111,
        "iacDescription": {
          "issue": "A role was found using a dangerous permissions",
          "impact": "Using this role grants dangerous permissions. For a ClusterRole this would be considered high severity.",
          "resolve": "Consider removing these permissions"
        },
        "publicId": "SNYK-CC-K8S-47",
        "msg": "rules[10].resources",
        "references": [
          "https://kubernetes.io/docs/reference/access-authn-authz/rbac/"
        ],
        "path": [
          "[DocId: 0]",
          "rules[10]",
          "resources"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-44",
        "title": "Role or ClusterRole with too wide permissions",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Role",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-44",
        "isGeneratedByCustomRule": false,
        "issue": "The role uses wildcards, which grant the role permissions to the whole cluster",
        "impact": "The use of wildcard rights grants is likely to provide excessive rights to the Kubernetes API. For a ClusterRole this would be considered high severity.",
        "resolve": "Set only the necessary permissions required",
        "remediation": {
          "kubernetes": "Set only the necessary permissions required",
          "terraform": "Remove any wildcards [*] from `rule.verbs` and `rule.resources`"
        },
        "lineNumber": 783,
        "iacDescription": {
          "issue": "The role uses wildcards, which grant the role permissions to the whole cluster",
          "impact": "The use of wildcard rights grants is likely to provide excessive rights to the Kubernetes API. For a ClusterRole this would be considered high severity.",
          "resolve": "Set only the necessary permissions required"
        },
        "publicId": "SNYK-CC-K8S-44",
        "msg": "rules[72].verbs",
        "references": [
          "https://kubernetes.io/docs/reference/access-authn-authz/rbac/"
        ],
        "path": [
          "[DocId: 0]",
          "rules[72]",
          "verbs"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-44",
        "title": "Role or ClusterRole with too wide permissions",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Role",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-44",
        "isGeneratedByCustomRule": false,
        "issue": "The role uses wildcards, which grant the role permissions to the whole cluster",
        "impact": "The use of wildcard rights grants is likely to provide excessive rights to the Kubernetes API. For a ClusterRole this would be considered high severity.",
        "resolve": "Set only the necessary permissions required",
        "remediation": {
          "kubernetes": "Set only the necessary permissions required",
          "terraform": "Remove any wildcards [*] from `rule.verbs` and `rule.resources`"
        },
        "lineNumber": 781,
        "iacDescription": {
          "issue": "The role uses wildcards, which grant the role permissions to the whole cluster",
          "impact": "The use of wildcard rights grants is likely to provide excessive rights to the Kubernetes API. For a ClusterRole this would be considered high severity.",
          "resolve": "Set only the necessary permissions required"
        },
        "publicId": "SNYK-CC-K8S-44",
        "msg": "rules[72].resources",
        "references": [
          "https://kubernetes.io/docs/reference/access-authn-authz/rbac/"
        ],
        "path": [
          "[DocId: 0]",
          "rules[72]",
          "resources"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-44",
        "title": "Role or ClusterRole with too wide permissions",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Role",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-44",
        "isGeneratedByCustomRule": false,
        "issue": "The role uses wildcards, which grant the role permissions to the whole cluster",
        "impact": "The use of wildcard rights grants is likely to provide excessive rights to the Kubernetes API. For a ClusterRole this would be considered high severity.",
        "resolve": "Set only the necessary permissions required",
        "remediation": {
          "kubernetes": "Set only the necessary permissions required",
          "terraform": "Remove any wildcards [*] from `rule.verbs` and `rule.resources`"
        },
        "lineNumber": 659,
        "iacDescription": {
          "issue": "The role uses wildcards, which grant the role permissions to the whole cluster",
          "impact": "The use of wildcard rights grants is likely to provide excessive rights to the Kubernetes API. For a ClusterRole this would be considered high severity.",
          "resolve": "Set only the necessary permissions required"
        },
        "publicId": "SNYK-CC-K8S-44",
        "msg": "rules[58].verbs",
        "references": [
          "https://kubernetes.io/docs/reference/access-authn-authz/rbac/"
        ],
        "path": [
          "[DocId: 0]",
          "rules[58]",
          "verbs"
        ],
        "compliance": []
      }
    ]
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-rhte-analytics_data_ocp_workshop_s2020/files/role_binding.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-rhte-analytics_data_ocp_workshop_s2020/files/role_binding.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-rhte-analytics_data_ocp_workshop_s2020/files/service_account.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-rhte-analytics_data_ocp_workshop_s2020/files/service_account.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-rhte-keynote-ai-infra/files/cluster.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-rhte-keynote-ai-infra/files/cluster.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": false,
    "infrastructureAsCodeIssues": [
      {
        "id": "SNYK-CC-K8S-44",
        "title": "Role or ClusterRole with too wide permissions",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Role",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-44",
        "isGeneratedByCustomRule": false,
        "issue": "The role uses wildcards, which grant the role permissions to the whole cluster",
        "impact": "The use of wildcard rights grants is likely to provide excessive rights to the Kubernetes API. For a ClusterRole this would be considered high severity.",
        "resolve": "Set only the necessary permissions required",
        "remediation": {
          "kubernetes": "Set only the necessary permissions required",
          "terraform": "Remove any wildcards [*] from `rule.verbs` and `rule.resources`"
        },
        "lineNumber": 77,
        "iacDescription": {
          "issue": "The role uses wildcards, which grant the role permissions to the whole cluster",
          "impact": "The use of wildcard rights grants is likely to provide excessive rights to the Kubernetes API. For a ClusterRole this would be considered high severity.",
          "resolve": "Set only the necessary permissions required"
        },
        "publicId": "SNYK-CC-K8S-44",
        "msg": "rules[2].verbs",
        "references": [
          "https://kubernetes.io/docs/reference/access-authn-authz/rbac/"
        ],
        "path": [
          "[DocId: 5]",
          "rules[2]",
          "verbs"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-44",
        "title": "Role or ClusterRole with too wide permissions",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Role",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-44",
        "isGeneratedByCustomRule": false,
        "issue": "The role uses wildcards, which grant the role permissions to the whole cluster",
        "impact": "The use of wildcard rights grants is likely to provide excessive rights to the Kubernetes API. For a ClusterRole this would be considered high severity.",
        "resolve": "Set only the necessary permissions required",
        "remediation": {
          "kubernetes": "Set only the necessary permissions required",
          "terraform": "Remove any wildcards [*] from `rule.verbs` and `rule.resources`"
        },
        "lineNumber": 75,
        "iacDescription": {
          "issue": "The role uses wildcards, which grant the role permissions to the whole cluster",
          "impact": "The use of wildcard rights grants is likely to provide excessive rights to the Kubernetes API. For a ClusterRole this would be considered high severity.",
          "resolve": "Set only the necessary permissions required"
        },
        "publicId": "SNYK-CC-K8S-44",
        "msg": "rules[2].resources",
        "references": [
          "https://kubernetes.io/docs/reference/access-authn-authz/rbac/"
        ],
        "path": [
          "[DocId: 5]",
          "rules[2]",
          "resources"
        ],
        "compliance": []
      }
    ]
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-rhte-keynote-ai-infra/files/object-user.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-rhte-keynote-ai-infra/files/object-user.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-rhte-keynote-ai-infra/files/object.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-rhte-keynote-ai-infra/files/object.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-rhte-keynote-ai-infra/files/opendatahub_v1alpha1_opendatahub_crd.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-rhte-keynote-ai-infra/files/opendatahub_v1alpha1_opendatahub_crd.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-rhte-keynote-ai-infra/files/operator.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-rhte-keynote-ai-infra/files/operator.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": false,
    "infrastructureAsCodeIssues": [
      {
        "id": "SNYK-CC-K8S-47",
        "title": "Role or ClusterRole with dangerous permissions",
        "severity": "high",
        "isIgnored": false,
        "subType": "ClusterRole",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-47",
        "isGeneratedByCustomRule": false,
        "issue": "A role was found using a dangerous permissions",
        "impact": "Using this role grants dangerous permissions. For a ClusterRole this would be considered high severity.",
        "resolve": "Consider removing these permissions",
        "remediation": {
          "kubernetes": "Consider removing these permissions",
          "terraform": "Consider removing these permissions"
        },
        "lineNumber": 178,
        "iacDescription": {
          "issue": "A role was found using a dangerous permissions",
          "impact": "Using this role grants dangerous permissions. For a ClusterRole this would be considered high severity.",
          "resolve": "Consider removing these permissions"
        },
        "publicId": "SNYK-CC-K8S-47",
        "msg": "rules[0].resources",
        "references": [
          "https://kubernetes.io/docs/reference/access-authn-authz/rbac/"
        ],
        "path": [
          "[DocId: 7]",
          "rules[0]",
          "resources"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-47",
        "title": "Role or ClusterRole with dangerous permissions",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Role",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-47",
        "isGeneratedByCustomRule": false,
        "issue": "A role was found using a dangerous permissions",
        "impact": "Using this role grants dangerous permissions. For a ClusterRole this would be considered high severity.",
        "resolve": "Consider removing these permissions",
        "remediation": {
          "kubernetes": "Consider removing these permissions",
          "terraform": "Consider removing these permissions"
        },
        "lineNumber": 218,
        "iacDescription": {
          "issue": "A role was found using a dangerous permissions",
          "impact": "Using this role grants dangerous permissions. For a ClusterRole this would be considered high severity.",
          "resolve": "Consider removing these permissions"
        },
        "publicId": "SNYK-CC-K8S-47",
        "msg": "rules[0].resources",
        "references": [
          "https://kubernetes.io/docs/reference/access-authn-authz/rbac/"
        ],
        "path": [
          "[DocId: 8]",
          "rules[0]",
          "resources"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-44",
        "title": "Role or ClusterRole with too wide permissions",
        "severity": "high",
        "isIgnored": false,
        "subType": "ClusterRole",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-44",
        "isGeneratedByCustomRule": false,
        "issue": "The role uses wildcards, which grant the role permissions to the whole cluster",
        "impact": "The use of wildcard rights grants is likely to provide excessive rights to the Kubernetes API. For a ClusterRole this would be considered high severity.",
        "resolve": "Set only the necessary permissions required",
        "remediation": {
          "kubernetes": "Set only the necessary permissions required",
          "terraform": "Remove any wildcards [*] from `rule.verbs` and `rule.resources`"
        },
        "lineNumber": 298,
        "iacDescription": {
          "issue": "The role uses wildcards, which grant the role permissions to the whole cluster",
          "impact": "The use of wildcard rights grants is likely to provide excessive rights to the Kubernetes API. For a ClusterRole this would be considered high severity.",
          "resolve": "Set only the necessary permissions required"
        },
        "publicId": "SNYK-CC-K8S-44",
        "msg": "rules[4].resources",
        "references": [
          "https://kubernetes.io/docs/reference/access-authn-authz/rbac/"
        ],
        "path": [
          "[DocId: 9]",
          "rules[4]",
          "resources"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-44",
        "title": "Role or ClusterRole with too wide permissions",
        "severity": "high",
        "isIgnored": false,
        "subType": "ClusterRole",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-44",
        "isGeneratedByCustomRule": false,
        "issue": "The role uses wildcards, which grant the role permissions to the whole cluster",
        "impact": "The use of wildcard rights grants is likely to provide excessive rights to the Kubernetes API. For a ClusterRole this would be considered high severity.",
        "resolve": "Set only the necessary permissions required",
        "remediation": {
          "kubernetes": "Set only the necessary permissions required",
          "terraform": "Remove any wildcards [*] from `rule.verbs` and `rule.resources`"
        },
        "lineNumber": 304,
        "iacDescription": {
          "issue": "The role uses wildcards, which grant the role permissions to the whole cluster",
          "impact": "The use of wildcard rights grants is likely to provide excessive rights to the Kubernetes API. For a ClusterRole this would be considered high severity.",
          "resolve": "Set only the necessary permissions required"
        },
        "publicId": "SNYK-CC-K8S-44",
        "msg": "rules[5].resources",
        "references": [
          "https://kubernetes.io/docs/reference/access-authn-authz/rbac/"
        ],
        "path": [
          "[DocId: 9]",
          "rules[5]",
          "resources"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-44",
        "title": "Role or ClusterRole with too wide permissions",
        "severity": "high",
        "isIgnored": false,
        "subType": "ClusterRole",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-44",
        "isGeneratedByCustomRule": false,
        "issue": "The role uses wildcards, which grant the role permissions to the whole cluster",
        "impact": "The use of wildcard rights grants is likely to provide excessive rights to the Kubernetes API. For a ClusterRole this would be considered high severity.",
        "resolve": "Set only the necessary permissions required",
        "remediation": {
          "kubernetes": "Set only the necessary permissions required",
          "terraform": "Remove any wildcards [*] from `rule.verbs` and `rule.resources`"
        },
        "lineNumber": 306,
        "iacDescription": {
          "issue": "The role uses wildcards, which grant the role permissions to the whole cluster",
          "impact": "The use of wildcard rights grants is likely to provide excessive rights to the Kubernetes API. For a ClusterRole this would be considered high severity.",
          "resolve": "Set only the necessary permissions required"
        },
        "publicId": "SNYK-CC-K8S-44",
        "msg": "rules[5].verbs",
        "references": [
          "https://kubernetes.io/docs/reference/access-authn-authz/rbac/"
        ],
        "path": [
          "[DocId: 9]",
          "rules[5]",
          "verbs"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-44",
        "title": "Role or ClusterRole with too wide permissions",
        "severity": "high",
        "isIgnored": false,
        "subType": "ClusterRole",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-44",
        "isGeneratedByCustomRule": false,
        "issue": "The role uses wildcards, which grant the role permissions to the whole cluster",
        "impact": "The use of wildcard rights grants is likely to provide excessive rights to the Kubernetes API. For a ClusterRole this would be considered high severity.",
        "resolve": "Set only the necessary permissions required",
        "remediation": {
          "kubernetes": "Set only the necessary permissions required",
          "terraform": "Remove any wildcards [*] from `rule.verbs` and `rule.resources`"
        },
        "lineNumber": 300,
        "iacDescription": {
          "issue": "The role uses wildcards, which grant the role permissions to the whole cluster",
          "impact": "The use of wildcard rights grants is likely to provide excessive rights to the Kubernetes API. For a ClusterRole this would be considered high severity.",
          "resolve": "Set only the necessary permissions required"
        },
        "publicId": "SNYK-CC-K8S-44",
        "msg": "rules[4].verbs",
        "references": [
          "https://kubernetes.io/docs/reference/access-authn-authz/rbac/"
        ],
        "path": [
          "[DocId: 9]",
          "rules[4]",
          "verbs"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-41",
        "title": "Container is running without liveness probe",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-41",
        "isGeneratedByCustomRule": false,
        "issue": "Liveness probe is not defined",
        "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
        "resolve": "Add `livenessProbe` attribute",
        "remediation": {
          "kubernetes": "Add `livenessProbe` attribute",
          "terraform": "Add `liveness_probe` attribute"
        },
        "lineNumber": 392,
        "iacDescription": {
          "issue": "Liveness probe is not defined",
          "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
          "resolve": "Add `livenessProbe` attribute"
        },
        "publicId": "SNYK-CC-K8S-41",
        "msg": "spec.template.spec.containers[rook-ceph-operator].livenessProbe",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/",
          "https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/",
          "https://cloud.google.com/blog/products/gcp/kubernetes-best-practices-setting-up-health-checks-with-readiness-and-liveness-probes"
        ],
        "path": [
          "[DocId: 14]",
          "spec",
          "template",
          "spec",
          "containers[rook-ceph-operator]",
          "livenessProbe"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-42",
        "title": "Container could be running with outdated image",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-42",
        "isGeneratedByCustomRule": false,
        "issue": "The image policy does not prevent image reuse",
        "impact": "The container may run with outdated or unauthorized image",
        "resolve": "Set `imagePullPolicy` attribute to `Always`",
        "remediation": {
          "kubernetes": "Set `imagePullPolicy` attribute to `Always`",
          "terraform": "Set `image_pull_policy` attribute to `Always"
        },
        "lineNumber": 392,
        "iacDescription": {
          "issue": "The image policy does not prevent image reuse",
          "impact": "The container may run with outdated or unauthorized image",
          "resolve": "Set `imagePullPolicy` attribute to `Always`"
        },
        "publicId": "SNYK-CC-K8S-42",
        "msg": "spec.template.spec.containers[rook-ceph-operator].imagePullPolicy",
        "references": [
          "https://kubernetes.io/docs/concepts/containers/images/",
          "https://kubernetes.io/docs/concepts/configuration/overview/#container-images"
        ],
        "path": [
          "[DocId: 14]",
          "spec",
          "template",
          "spec",
          "containers[rook-ceph-operator]",
          "imagePullPolicy"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-9",
        "title": "Container is running without privilege escalation control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-9",
        "isGeneratedByCustomRule": false,
        "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
        "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
          "terraform": "Set `spec.container.security_context.allow_privilege_escalation` to `false`"
        },
        "lineNumber": 392,
        "iacDescription": {
          "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
          "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`"
        },
        "publicId": "SNYK-CC-K8S-9",
        "msg": "spec.template.spec.containers[rook-ceph-operator].securityContext.allowPrivilegeEscalation",
        "references": [
          "https://www.kernel.org/doc/html/latest/userspace-api/no_new_privs.html"
        ],
        "path": [
          "[DocId: 14]",
          "spec",
          "template",
          "spec",
          "containers[rook-ceph-operator]",
          "securityContext",
          "allowPrivilegeEscalation"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-4",
        "title": "Container is running without memory limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-4",
        "isGeneratedByCustomRule": false,
        "issue": "Memory limit is not defined",
        "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
        "resolve": "Set `resources.limits.memory` value",
        "remediation": {
          "kubernetes": "Set `resources.limits.memory` value",
          "terraform": "Set `resources.limits.memory` value"
        },
        "lineNumber": 392,
        "iacDescription": {
          "issue": "Memory limit is not defined",
          "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
          "resolve": "Set `resources.limits.memory` value"
        },
        "publicId": "SNYK-CC-K8S-4",
        "msg": "input.spec.template.spec.containers[rook-ceph-operator].resources.limits.memory",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/memory-default-namespace/"
        ],
        "path": [
          "[DocId: 14]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[rook-ceph-operator]",
          "resources",
          "limits",
          "memory"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-11",
        "title": "Container's or Pod's  UID could clash with host's UID",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-11",
        "isGeneratedByCustomRule": false,
        "issue": "`runAsUser` value is set to low UID",
        "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
        "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
          "terraform": "Set `security_context.run_as_user` value to greater or equal than 10'000"
        },
        "lineNumber": 392,
        "iacDescription": {
          "issue": "`runAsUser` value is set to low UID",
          "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
          "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence"
        },
        "publicId": "SNYK-CC-K8S-11",
        "msg": "input.spec.template.spec.containers[rook-ceph-operator].securityContext.runAsUser",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container",
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod",
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 14]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[rook-ceph-operator]",
          "securityContext",
          "runAsUser"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-5",
        "title": "Container has no CPU limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-5",
        "isGeneratedByCustomRule": false,
        "issue": "Container has no CPU limit",
        "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
        "resolve": "Add `resources.limits.cpu` field with required CPU limit value",
        "remediation": {
          "kubernetes": "Add `resources.limits.cpu` field with required CPU limit value",
          "terraform": "Add `spec.container.resources.limits.cpu` field with required CPU limit value"
        },
        "lineNumber": 392,
        "iacDescription": {
          "issue": "Container has no CPU limit",
          "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
          "resolve": "Add `resources.limits.cpu` field with required CPU limit value"
        },
        "publicId": "SNYK-CC-K8S-5",
        "msg": "input.spec.template.spec.containers[rook-ceph-operator].resources.limits.cpu",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-cpu-resource/",
          "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/cpu-default-namespace/",
          "https://github.com/kubernetes/design-proposals-archive/blob/8da1442ea29adccea40693357d04727127e045ed/node/resource-qos.md#compressible-resource-guaranteess"
        ],
        "path": [
          "[DocId: 14]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[rook-ceph-operator]",
          "resources",
          "limits",
          "cpu"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-10",
        "title": "Container or Pod is running without root user control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-10",
        "isGeneratedByCustomRule": false,
        "issue": "Container or Pod is running without root user control",
        "impact": "Container or Pod could be running with full administrative privileges",
        "resolve": "Set `securityContext.runAsNonRoot` to `true`",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsNonRoot` to `true`",
          "terraform": "Set `security_context.run_as_non_root` to `true`"
        },
        "lineNumber": 392,
        "iacDescription": {
          "issue": "Container or Pod is running without root user control",
          "impact": "Container or Pod could be running with full administrative privileges",
          "resolve": "Set `securityContext.runAsNonRoot` to `true`"
        },
        "publicId": "SNYK-CC-K8S-10",
        "msg": "input.spec.template.spec.containers[rook-ceph-operator].securityContext.runAsNonRoot",
        "description": "",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 14]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[rook-ceph-operator]",
          "securityContext",
          "runAsNonRoot"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-6",
        "title": "Container does not drop all default capabilities",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-6",
        "isGeneratedByCustomRule": false,
        "issue": "All default capabilities are not explicitly dropped",
        "impact": "Containers are running with potentially unnecessary privileges",
        "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
        "remediation": {
          "kubernetes": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
          "terraform": "Add `ALL` to `spec.container.security_context.capabilities.drop` list, and add only required capabilities to `spec.container.security_context.capabilities.add`, ensuring it also does not contain `ALL`"
        },
        "lineNumber": 392,
        "iacDescription": {
          "issue": "All default capabilities are not explicitly dropped",
          "impact": "Containers are running with potentially unnecessary privileges",
          "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`"
        },
        "publicId": "SNYK-CC-K8S-6",
        "msg": "input.spec.template.spec.containers[rook-ceph-operator].securityContext.capabilities.drop",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
          "https://linux-audit.com/linux-capabilities-hardening-linux-binaries-by-removing-setuid/"
        ],
        "path": [
          "[DocId: 14]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[rook-ceph-operator]",
          "securityContext",
          "capabilities",
          "drop"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-8",
        "title": "Container is running with writable root filesystem",
        "severity": "low",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-8",
        "isGeneratedByCustomRule": false,
        "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
        "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
          "terraform": "Set `security_context.read_only_root_filesystem` to `true`"
        },
        "lineNumber": 392,
        "iacDescription": {
          "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
          "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`"
        },
        "publicId": "SNYK-CC-K8S-8",
        "msg": "spec.template.spec.containers[rook-ceph-operator].securityContext.readOnlyRootFilesystem",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 14]",
          "spec",
          "template",
          "spec",
          "containers[rook-ceph-operator]",
          "securityContext",
          "readOnlyRootFilesystem"
        ],
        "compliance": []
      }
    ]
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-rhte-keynote-ai-infra/files/scc.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-rhte-keynote-ai-infra/files/scc.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-rhte-keynote-ai-infra/files/toolbox.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-rhte-keynote-ai-infra/files/toolbox.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": false,
    "infrastructureAsCodeIssues": [
      {
        "id": "SNYK-CC-K8S-14",
        "title": "Container is running in host's Network namespace",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-14",
        "isGeneratedByCustomRule": false,
        "issue": "The pod is sharing host's Network namespace",
        "impact": "Containers will be able to access host's networking resources. This breaks container security boundary.",
        "resolve": "Remove `hostNetwork` attribute, or set value to `false`",
        "remediation": {
          "kubernetes": "Remove `hostNetwork` attribute, or set value to `false`",
          "terraform": "Remove `host_network` attribute, or set value to `false`"
        },
        "lineNumber": 44,
        "iacDescription": {
          "issue": "The pod is sharing host's Network namespace",
          "impact": "Containers will be able to access host's networking resources. This breaks container security boundary.",
          "resolve": "Remove `hostNetwork` attribute, or set value to `false`"
        },
        "publicId": "SNYK-CC-K8S-14",
        "msg": "input.spec.template.spec.hostNetwork",
        "description": "",
        "references": [
          "https://kubernetes.io/docs/concepts/policy/pod-security-policy/#host-namespaces",
          "https://kubernetes.io/docs/concepts/configuration/overview/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "hostNetwork"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-4",
        "title": "Container is running without memory limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-4",
        "isGeneratedByCustomRule": false,
        "issue": "Memory limit is not defined",
        "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
        "resolve": "Set `resources.limits.memory` value",
        "remediation": {
          "kubernetes": "Set `resources.limits.memory` value",
          "terraform": "Set `resources.limits.memory` value"
        },
        "lineNumber": 21,
        "iacDescription": {
          "issue": "Memory limit is not defined",
          "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
          "resolve": "Set `resources.limits.memory` value"
        },
        "publicId": "SNYK-CC-K8S-4",
        "msg": "input.spec.template.spec.containers[rook-ceph-tools].resources.limits.memory",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/memory-default-namespace/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[rook-ceph-tools]",
          "resources",
          "limits",
          "memory"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-10",
        "title": "Container or Pod is running without root user control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-10",
        "isGeneratedByCustomRule": false,
        "issue": "Container or Pod is running without root user control",
        "impact": "Container or Pod could be running with full administrative privileges",
        "resolve": "Set `securityContext.runAsNonRoot` to `true`",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsNonRoot` to `true`",
          "terraform": "Set `security_context.run_as_non_root` to `true`"
        },
        "lineNumber": 32,
        "iacDescription": {
          "issue": "Container or Pod is running without root user control",
          "impact": "Container or Pod could be running with full administrative privileges",
          "resolve": "Set `securityContext.runAsNonRoot` to `true`"
        },
        "publicId": "SNYK-CC-K8S-10",
        "msg": "input.spec.template.spec.containers[rook-ceph-tools].securityContext.runAsNonRoot",
        "description": "",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[rook-ceph-tools]",
          "securityContext",
          "runAsNonRoot"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-37",
        "title": "Container is running with host path mount",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-37",
        "isGeneratedByCustomRule": false,
        "issue": "Host path has been mounted inside the pod",
        "impact": "Increases the attack surface, and can lead to privilege escalation",
        "resolve": "Remove `hostPath` volume mount",
        "remediation": {
          "kubernetes": "Remove `hostPath` volume mount",
          "terraform": "Remove `host_path` from `spec.volume` property"
        },
        "lineNumber": 53,
        "iacDescription": {
          "issue": "Host path has been mounted inside the pod",
          "impact": "Increases the attack surface, and can lead to privilege escalation",
          "resolve": "Remove `hostPath` volume mount"
        },
        "publicId": "SNYK-CC-K8S-37",
        "msg": "spec.template.spec.volumes[libmodules].hostPath",
        "references": [
          "https://kubernetes.io/docs/concepts/storage/volumes/#hostpath"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "volumes[libmodules]",
          "hostPath"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-37",
        "title": "Container is running with host path mount",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-37",
        "isGeneratedByCustomRule": false,
        "issue": "Host path has been mounted inside the pod",
        "impact": "Increases the attack surface, and can lead to privilege escalation",
        "resolve": "Remove `hostPath` volume mount",
        "remediation": {
          "kubernetes": "Remove `hostPath` volume mount",
          "terraform": "Remove `host_path` from `spec.volume` property"
        },
        "lineNumber": 50,
        "iacDescription": {
          "issue": "Host path has been mounted inside the pod",
          "impact": "Increases the attack surface, and can lead to privilege escalation",
          "resolve": "Remove `hostPath` volume mount"
        },
        "publicId": "SNYK-CC-K8S-37",
        "msg": "spec.template.spec.volumes[sysbus].hostPath",
        "references": [
          "https://kubernetes.io/docs/concepts/storage/volumes/#hostpath"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "volumes[sysbus]",
          "hostPath"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-9",
        "title": "Container is running without privilege escalation control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-9",
        "isGeneratedByCustomRule": false,
        "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
        "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
          "terraform": "Set `spec.container.security_context.allow_privilege_escalation` to `false`"
        },
        "lineNumber": 32,
        "iacDescription": {
          "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
          "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`"
        },
        "publicId": "SNYK-CC-K8S-9",
        "msg": "spec.template.spec.containers[rook-ceph-tools].securityContext.allowPrivilegeEscalation",
        "references": [
          "https://www.kernel.org/doc/html/latest/userspace-api/no_new_privs.html"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "containers[rook-ceph-tools]",
          "securityContext",
          "allowPrivilegeEscalation"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-1",
        "title": "Privileged container",
        "severity": "high",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-1",
        "isGeneratedByCustomRule": false,
        "issue": "Container is running in privileged mode",
        "impact": "Compromised container could potentially modify the underlying host\u2019s kernel by loading unauthorized modules (i.e. drivers).",
        "resolve": "Remove `securityContext.privileged` attribute, or set value to `false`",
        "remediation": {
          "kubernetes": "Remove `securityContext.privileged` attribute, or set value to `false`",
          "terraform": "Remove `security_context.privileged` attribute, or set value to `false`"
        },
        "lineNumber": 33,
        "iacDescription": {
          "issue": "Container is running in privileged mode",
          "impact": "Compromised container could potentially modify the underlying host\u2019s kernel by loading unauthorized modules (i.e. drivers).",
          "resolve": "Remove `securityContext.privileged` attribute, or set value to `false`"
        },
        "publicId": "SNYK-CC-K8S-1",
        "msg": "input.spec.template.spec.containers[rook-ceph-tools].securityContext.privileged",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[rook-ceph-tools]",
          "securityContext",
          "privileged"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-37",
        "title": "Container is running with host path mount",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-37",
        "isGeneratedByCustomRule": false,
        "issue": "Host path has been mounted inside the pod",
        "impact": "Increases the attack surface, and can lead to privilege escalation",
        "resolve": "Remove `hostPath` volume mount",
        "remediation": {
          "kubernetes": "Remove `hostPath` volume mount",
          "terraform": "Remove `host_path` from `spec.volume` property"
        },
        "lineNumber": 47,
        "iacDescription": {
          "issue": "Host path has been mounted inside the pod",
          "impact": "Increases the attack surface, and can lead to privilege escalation",
          "resolve": "Remove `hostPath` volume mount"
        },
        "publicId": "SNYK-CC-K8S-37",
        "msg": "spec.template.spec.volumes[dev].hostPath",
        "references": [
          "https://kubernetes.io/docs/concepts/storage/volumes/#hostpath"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "volumes[dev]",
          "hostPath"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-11",
        "title": "Container's or Pod's  UID could clash with host's UID",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-11",
        "isGeneratedByCustomRule": false,
        "issue": "`runAsUser` value is set to low UID",
        "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
        "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
          "terraform": "Set `security_context.run_as_user` value to greater or equal than 10'000"
        },
        "lineNumber": 32,
        "iacDescription": {
          "issue": "`runAsUser` value is set to low UID",
          "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
          "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence"
        },
        "publicId": "SNYK-CC-K8S-11",
        "msg": "input.spec.template.spec.containers[rook-ceph-tools].securityContext.runAsUser",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container",
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod",
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[rook-ceph-tools]",
          "securityContext",
          "runAsUser"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-6",
        "title": "Container does not drop all default capabilities",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-6",
        "isGeneratedByCustomRule": false,
        "issue": "All default capabilities are not explicitly dropped",
        "impact": "Containers are running with potentially unnecessary privileges",
        "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
        "remediation": {
          "kubernetes": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
          "terraform": "Add `ALL` to `spec.container.security_context.capabilities.drop` list, and add only required capabilities to `spec.container.security_context.capabilities.add`, ensuring it also does not contain `ALL`"
        },
        "lineNumber": 32,
        "iacDescription": {
          "issue": "All default capabilities are not explicitly dropped",
          "impact": "Containers are running with potentially unnecessary privileges",
          "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`"
        },
        "publicId": "SNYK-CC-K8S-6",
        "msg": "input.spec.template.spec.containers[rook-ceph-tools].securityContext.capabilities.drop",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
          "https://linux-audit.com/linux-capabilities-hardening-linux-binaries-by-removing-setuid/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[rook-ceph-tools]",
          "securityContext",
          "capabilities",
          "drop"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-8",
        "title": "Container is running with writable root filesystem",
        "severity": "low",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-8",
        "isGeneratedByCustomRule": false,
        "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
        "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
          "terraform": "Set `security_context.read_only_root_filesystem` to `true`"
        },
        "lineNumber": 32,
        "iacDescription": {
          "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
          "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`"
        },
        "publicId": "SNYK-CC-K8S-8",
        "msg": "spec.template.spec.containers[rook-ceph-tools].securityContext.readOnlyRootFilesystem",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "containers[rook-ceph-tools]",
          "securityContext",
          "readOnlyRootFilesystem"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-42",
        "title": "Container could be running with outdated image",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-42",
        "isGeneratedByCustomRule": false,
        "issue": "The image policy does not prevent image reuse",
        "impact": "The container may run with outdated or unauthorized image",
        "resolve": "Set `imagePullPolicy` attribute to `Always`",
        "remediation": {
          "kubernetes": "Set `imagePullPolicy` attribute to `Always`",
          "terraform": "Set `image_pull_policy` attribute to `Always"
        },
        "lineNumber": 25,
        "iacDescription": {
          "issue": "The image policy does not prevent image reuse",
          "impact": "The container may run with outdated or unauthorized image",
          "resolve": "Set `imagePullPolicy` attribute to `Always`"
        },
        "publicId": "SNYK-CC-K8S-42",
        "msg": "spec.template.spec.containers[rook-ceph-tools].imagePullPolicy",
        "references": [
          "https://kubernetes.io/docs/concepts/containers/images/",
          "https://kubernetes.io/docs/concepts/configuration/overview/#container-images"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "containers[rook-ceph-tools]",
          "imagePullPolicy"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-5",
        "title": "Container has no CPU limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-5",
        "isGeneratedByCustomRule": false,
        "issue": "Container has no CPU limit",
        "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
        "resolve": "Add `resources.limits.cpu` field with required CPU limit value",
        "remediation": {
          "kubernetes": "Add `resources.limits.cpu` field with required CPU limit value",
          "terraform": "Add `spec.container.resources.limits.cpu` field with required CPU limit value"
        },
        "lineNumber": 21,
        "iacDescription": {
          "issue": "Container has no CPU limit",
          "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
          "resolve": "Add `resources.limits.cpu` field with required CPU limit value"
        },
        "publicId": "SNYK-CC-K8S-5",
        "msg": "input.spec.template.spec.containers[rook-ceph-tools].resources.limits.cpu",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-cpu-resource/",
          "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/cpu-default-namespace/",
          "https://github.com/kubernetes/design-proposals-archive/blob/8da1442ea29adccea40693357d04727127e045ed/node/resource-qos.md#compressible-resource-guaranteess"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[rook-ceph-tools]",
          "resources",
          "limits",
          "cpu"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-41",
        "title": "Container is running without liveness probe",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-41",
        "isGeneratedByCustomRule": false,
        "issue": "Liveness probe is not defined",
        "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
        "resolve": "Add `livenessProbe` attribute",
        "remediation": {
          "kubernetes": "Add `livenessProbe` attribute",
          "terraform": "Add `liveness_probe` attribute"
        },
        "lineNumber": 21,
        "iacDescription": {
          "issue": "Liveness probe is not defined",
          "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
          "resolve": "Add `livenessProbe` attribute"
        },
        "publicId": "SNYK-CC-K8S-41",
        "msg": "spec.template.spec.containers[rook-ceph-tools].livenessProbe",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/",
          "https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/",
          "https://cloud.google.com/blog/products/gcp/kubernetes-best-practices-setting-up-health-checks-with-readiness-and-liveness-probes"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "containers[rook-ceph-tools]",
          "livenessProbe"
        ],
        "compliance": []
      }
    ]
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-rhte-keynote-ai-infra/files/kafka/kafka.clusterrole.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-rhte-keynote-ai-infra/files/kafka/kafka.clusterrole.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": false,
    "infrastructureAsCodeIssues": [
      {
        "id": "SNYK-CC-K8S-47",
        "title": "Role or ClusterRole with dangerous permissions",
        "severity": "high",
        "isIgnored": false,
        "subType": "ClusterRole",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-47",
        "isGeneratedByCustomRule": false,
        "issue": "A role was found using a dangerous permissions",
        "impact": "Using this role grants dangerous permissions. For a ClusterRole this would be considered high severity.",
        "resolve": "Consider removing these permissions",
        "remediation": {
          "kubernetes": "Consider removing these permissions",
          "terraform": "Consider removing these permissions"
        },
        "lineNumber": 211,
        "iacDescription": {
          "issue": "A role was found using a dangerous permissions",
          "impact": "Using this role grants dangerous permissions. For a ClusterRole this would be considered high severity.",
          "resolve": "Consider removing these permissions"
        },
        "publicId": "SNYK-CC-K8S-47",
        "msg": "rules[15].resources",
        "references": [
          "https://kubernetes.io/docs/reference/access-authn-authz/rbac/"
        ],
        "path": [
          "[DocId: 1]",
          "rules[15]",
          "resources"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-47",
        "title": "Role or ClusterRole with dangerous permissions",
        "severity": "high",
        "isIgnored": false,
        "subType": "ClusterRole",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-47",
        "isGeneratedByCustomRule": false,
        "issue": "A role was found using a dangerous permissions",
        "impact": "Using this role grants dangerous permissions. For a ClusterRole this would be considered high severity.",
        "resolve": "Consider removing these permissions",
        "remediation": {
          "kubernetes": "Consider removing these permissions",
          "terraform": "Consider removing these permissions"
        },
        "lineNumber": 351,
        "iacDescription": {
          "issue": "A role was found using a dangerous permissions",
          "impact": "Using this role grants dangerous permissions. For a ClusterRole this would be considered high severity.",
          "resolve": "Consider removing these permissions"
        },
        "publicId": "SNYK-CC-K8S-47",
        "msg": "rules[3].resources",
        "references": [
          "https://kubernetes.io/docs/reference/access-authn-authz/rbac/"
        ],
        "path": [
          "[DocId: 4]",
          "rules[3]",
          "resources"
        ],
        "compliance": []
      }
    ]
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-rhte-keynote-ai-infra/files/kafka/kafka.crd.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-rhte-keynote-ai-infra/files/kafka/kafka.crd.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-rhte-keynote-ai-infra/files/seldon/seldon-user.clusterrole.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-rhte-keynote-ai-infra/files/seldon/seldon-user.clusterrole.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": false,
    "infrastructureAsCodeIssues": [
      {
        "id": "SNYK-CC-K8S-44",
        "title": "Role or ClusterRole with too wide permissions",
        "severity": "high",
        "isIgnored": false,
        "subType": "ClusterRole",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-44",
        "isGeneratedByCustomRule": false,
        "issue": "The role uses wildcards, which grant the role permissions to the whole cluster",
        "impact": "The use of wildcard rights grants is likely to provide excessive rights to the Kubernetes API. For a ClusterRole this would be considered high severity.",
        "resolve": "Set only the necessary permissions required",
        "remediation": {
          "kubernetes": "Set only the necessary permissions required",
          "terraform": "Remove any wildcards [*] from `rule.verbs` and `rule.resources`"
        },
        "lineNumber": 11,
        "iacDescription": {
          "issue": "The role uses wildcards, which grant the role permissions to the whole cluster",
          "impact": "The use of wildcard rights grants is likely to provide excessive rights to the Kubernetes API. For a ClusterRole this would be considered high severity.",
          "resolve": "Set only the necessary permissions required"
        },
        "publicId": "SNYK-CC-K8S-44",
        "msg": "rules[0].verbs",
        "references": [
          "https://kubernetes.io/docs/reference/access-authn-authz/rbac/"
        ],
        "path": [
          "[DocId: 0]",
          "rules[0]",
          "verbs"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-44",
        "title": "Role or ClusterRole with too wide permissions",
        "severity": "high",
        "isIgnored": false,
        "subType": "ClusterRole",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-44",
        "isGeneratedByCustomRule": false,
        "issue": "The role uses wildcards, which grant the role permissions to the whole cluster",
        "impact": "The use of wildcard rights grants is likely to provide excessive rights to the Kubernetes API. For a ClusterRole this would be considered high severity.",
        "resolve": "Set only the necessary permissions required",
        "remediation": {
          "kubernetes": "Set only the necessary permissions required",
          "terraform": "Remove any wildcards [*] from `rule.verbs` and `rule.resources`"
        },
        "lineNumber": 10,
        "iacDescription": {
          "issue": "The role uses wildcards, which grant the role permissions to the whole cluster",
          "impact": "The use of wildcard rights grants is likely to provide excessive rights to the Kubernetes API. For a ClusterRole this would be considered high severity.",
          "resolve": "Set only the necessary permissions required"
        },
        "publicId": "SNYK-CC-K8S-44",
        "msg": "rules[0].resources",
        "references": [
          "https://kubernetes.io/docs/reference/access-authn-authz/rbac/"
        ],
        "path": [
          "[DocId: 0]",
          "rules[0]",
          "resources"
        ],
        "compliance": []
      }
    ]
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-rhte-keynote-ai-odh-setup/files/opendatahub_v1alpha1_opendatahub_cr.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-rhte-keynote-ai-odh-setup/files/opendatahub_v1alpha1_opendatahub_cr.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-rhte-keynote-ai-odh-setup/files/operator.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-rhte-keynote-ai-odh-setup/files/operator.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": false,
    "infrastructureAsCodeIssues": [
      {
        "id": "SNYK-CC-K8S-9",
        "title": "Container is running without privilege escalation control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-9",
        "isGeneratedByCustomRule": false,
        "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
        "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
          "terraform": "Set `spec.container.security_context.allow_privilege_escalation` to `false`"
        },
        "lineNumber": 17,
        "iacDescription": {
          "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
          "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`"
        },
        "publicId": "SNYK-CC-K8S-9",
        "msg": "spec.template.spec.containers[opendatahub-operator].securityContext.allowPrivilegeEscalation",
        "references": [
          "https://www.kernel.org/doc/html/latest/userspace-api/no_new_privs.html"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "containers[opendatahub-operator]",
          "securityContext",
          "allowPrivilegeEscalation"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-4",
        "title": "Container is running without memory limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-4",
        "isGeneratedByCustomRule": false,
        "issue": "Memory limit is not defined",
        "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
        "resolve": "Set `resources.limits.memory` value",
        "remediation": {
          "kubernetes": "Set `resources.limits.memory` value",
          "terraform": "Set `resources.limits.memory` value"
        },
        "lineNumber": 17,
        "iacDescription": {
          "issue": "Memory limit is not defined",
          "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
          "resolve": "Set `resources.limits.memory` value"
        },
        "publicId": "SNYK-CC-K8S-4",
        "msg": "input.spec.template.spec.containers[opendatahub-operator].resources.limits.memory",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/memory-default-namespace/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[opendatahub-operator]",
          "resources",
          "limits",
          "memory"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-8",
        "title": "Container is running with writable root filesystem",
        "severity": "low",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-8",
        "isGeneratedByCustomRule": false,
        "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
        "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
          "terraform": "Set `security_context.read_only_root_filesystem` to `true`"
        },
        "lineNumber": 17,
        "iacDescription": {
          "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
          "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`"
        },
        "publicId": "SNYK-CC-K8S-8",
        "msg": "spec.template.spec.containers[opendatahub-operator].securityContext.readOnlyRootFilesystem",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "containers[opendatahub-operator]",
          "securityContext",
          "readOnlyRootFilesystem"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-5",
        "title": "Container has no CPU limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-5",
        "isGeneratedByCustomRule": false,
        "issue": "Container has no CPU limit",
        "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
        "resolve": "Add `resources.limits.cpu` field with required CPU limit value",
        "remediation": {
          "kubernetes": "Add `resources.limits.cpu` field with required CPU limit value",
          "terraform": "Add `spec.container.resources.limits.cpu` field with required CPU limit value"
        },
        "lineNumber": 17,
        "iacDescription": {
          "issue": "Container has no CPU limit",
          "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
          "resolve": "Add `resources.limits.cpu` field with required CPU limit value"
        },
        "publicId": "SNYK-CC-K8S-5",
        "msg": "input.spec.template.spec.containers[opendatahub-operator].resources.limits.cpu",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-cpu-resource/",
          "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/cpu-default-namespace/",
          "https://github.com/kubernetes/design-proposals-archive/blob/8da1442ea29adccea40693357d04727127e045ed/node/resource-qos.md#compressible-resource-guaranteess"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[opendatahub-operator]",
          "resources",
          "limits",
          "cpu"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-11",
        "title": "Container's or Pod's  UID could clash with host's UID",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-11",
        "isGeneratedByCustomRule": false,
        "issue": "`runAsUser` value is set to low UID",
        "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
        "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
          "terraform": "Set `security_context.run_as_user` value to greater or equal than 10'000"
        },
        "lineNumber": 17,
        "iacDescription": {
          "issue": "`runAsUser` value is set to low UID",
          "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
          "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence"
        },
        "publicId": "SNYK-CC-K8S-11",
        "msg": "input.spec.template.spec.containers[opendatahub-operator].securityContext.runAsUser",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container",
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod",
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[opendatahub-operator]",
          "securityContext",
          "runAsUser"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-10",
        "title": "Container or Pod is running without root user control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-10",
        "isGeneratedByCustomRule": false,
        "issue": "Container or Pod is running without root user control",
        "impact": "Container or Pod could be running with full administrative privileges",
        "resolve": "Set `securityContext.runAsNonRoot` to `true`",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsNonRoot` to `true`",
          "terraform": "Set `security_context.run_as_non_root` to `true`"
        },
        "lineNumber": 17,
        "iacDescription": {
          "issue": "Container or Pod is running without root user control",
          "impact": "Container or Pod could be running with full administrative privileges",
          "resolve": "Set `securityContext.runAsNonRoot` to `true`"
        },
        "publicId": "SNYK-CC-K8S-10",
        "msg": "input.spec.template.spec.containers[opendatahub-operator].securityContext.runAsNonRoot",
        "description": "",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[opendatahub-operator]",
          "securityContext",
          "runAsNonRoot"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-41",
        "title": "Container is running without liveness probe",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-41",
        "isGeneratedByCustomRule": false,
        "issue": "Liveness probe is not defined",
        "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
        "resolve": "Add `livenessProbe` attribute",
        "remediation": {
          "kubernetes": "Add `livenessProbe` attribute",
          "terraform": "Add `liveness_probe` attribute"
        },
        "lineNumber": 17,
        "iacDescription": {
          "issue": "Liveness probe is not defined",
          "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
          "resolve": "Add `livenessProbe` attribute"
        },
        "publicId": "SNYK-CC-K8S-41",
        "msg": "spec.template.spec.containers[opendatahub-operator].livenessProbe",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/",
          "https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/",
          "https://cloud.google.com/blog/products/gcp/kubernetes-best-practices-setting-up-health-checks-with-readiness-and-liveness-probes"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "containers[opendatahub-operator]",
          "livenessProbe"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-6",
        "title": "Container does not drop all default capabilities",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-6",
        "isGeneratedByCustomRule": false,
        "issue": "All default capabilities are not explicitly dropped",
        "impact": "Containers are running with potentially unnecessary privileges",
        "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
        "remediation": {
          "kubernetes": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
          "terraform": "Add `ALL` to `spec.container.security_context.capabilities.drop` list, and add only required capabilities to `spec.container.security_context.capabilities.add`, ensuring it also does not contain `ALL`"
        },
        "lineNumber": 17,
        "iacDescription": {
          "issue": "All default capabilities are not explicitly dropped",
          "impact": "Containers are running with potentially unnecessary privileges",
          "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`"
        },
        "publicId": "SNYK-CC-K8S-6",
        "msg": "input.spec.template.spec.containers[opendatahub-operator].securityContext.capabilities.drop",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
          "https://linux-audit.com/linux-capabilities-hardening-linux-binaries-by-removing-setuid/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[opendatahub-operator]",
          "securityContext",
          "capabilities",
          "drop"
        ],
        "compliance": []
      }
    ]
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-rhte-keynote-ai-odh-setup/files/role.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-rhte-keynote-ai-odh-setup/files/role.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": false,
    "infrastructureAsCodeIssues": [
      {
        "id": "SNYK-CC-K8S-47",
        "title": "Role or ClusterRole with dangerous permissions",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Role",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-47",
        "isGeneratedByCustomRule": false,
        "issue": "A role was found using a dangerous permissions",
        "impact": "Using this role grants dangerous permissions. For a ClusterRole this would be considered high severity.",
        "resolve": "Consider removing these permissions",
        "remediation": {
          "kubernetes": "Consider removing these permissions",
          "terraform": "Consider removing these permissions"
        },
        "lineNumber": 123,
        "iacDescription": {
          "issue": "A role was found using a dangerous permissions",
          "impact": "Using this role grants dangerous permissions. For a ClusterRole this would be considered high severity.",
          "resolve": "Consider removing these permissions"
        },
        "publicId": "SNYK-CC-K8S-47",
        "msg": "rules[11].resources",
        "references": [
          "https://kubernetes.io/docs/reference/access-authn-authz/rbac/"
        ],
        "path": [
          "[DocId: 0]",
          "rules[11]",
          "resources"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-47",
        "title": "Role or ClusterRole with dangerous permissions",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Role",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-47",
        "isGeneratedByCustomRule": false,
        "issue": "A role was found using a dangerous permissions",
        "impact": "Using this role grants dangerous permissions. For a ClusterRole this would be considered high severity.",
        "resolve": "Consider removing these permissions",
        "remediation": {
          "kubernetes": "Consider removing these permissions",
          "terraform": "Consider removing these permissions"
        },
        "lineNumber": 50,
        "iacDescription": {
          "issue": "A role was found using a dangerous permissions",
          "impact": "Using this role grants dangerous permissions. For a ClusterRole this would be considered high severity.",
          "resolve": "Consider removing these permissions"
        },
        "publicId": "SNYK-CC-K8S-47",
        "msg": "rules[4].resources",
        "references": [
          "https://kubernetes.io/docs/reference/access-authn-authz/rbac/"
        ],
        "path": [
          "[DocId: 0]",
          "rules[4]",
          "resources"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-47",
        "title": "Role or ClusterRole with dangerous permissions",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Role",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-47",
        "isGeneratedByCustomRule": false,
        "issue": "A role was found using a dangerous permissions",
        "impact": "Using this role grants dangerous permissions. For a ClusterRole this would be considered high severity.",
        "resolve": "Consider removing these permissions",
        "remediation": {
          "kubernetes": "Consider removing these permissions",
          "terraform": "Consider removing these permissions"
        },
        "lineNumber": 110,
        "iacDescription": {
          "issue": "A role was found using a dangerous permissions",
          "impact": "Using this role grants dangerous permissions. For a ClusterRole this would be considered high severity.",
          "resolve": "Consider removing these permissions"
        },
        "publicId": "SNYK-CC-K8S-47",
        "msg": "rules[10].resources",
        "references": [
          "https://kubernetes.io/docs/reference/access-authn-authz/rbac/"
        ],
        "path": [
          "[DocId: 0]",
          "rules[10]",
          "resources"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-44",
        "title": "Role or ClusterRole with too wide permissions",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Role",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-44",
        "isGeneratedByCustomRule": false,
        "issue": "The role uses wildcards, which grant the role permissions to the whole cluster",
        "impact": "The use of wildcard rights grants is likely to provide excessive rights to the Kubernetes API. For a ClusterRole this would be considered high severity.",
        "resolve": "Set only the necessary permissions required",
        "remediation": {
          "kubernetes": "Set only the necessary permissions required",
          "terraform": "Remove any wildcards [*] from `rule.verbs` and `rule.resources`"
        },
        "lineNumber": 782,
        "iacDescription": {
          "issue": "The role uses wildcards, which grant the role permissions to the whole cluster",
          "impact": "The use of wildcard rights grants is likely to provide excessive rights to the Kubernetes API. For a ClusterRole this would be considered high severity.",
          "resolve": "Set only the necessary permissions required"
        },
        "publicId": "SNYK-CC-K8S-44",
        "msg": "rules[72].verbs",
        "references": [
          "https://kubernetes.io/docs/reference/access-authn-authz/rbac/"
        ],
        "path": [
          "[DocId: 0]",
          "rules[72]",
          "verbs"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-44",
        "title": "Role or ClusterRole with too wide permissions",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Role",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-44",
        "isGeneratedByCustomRule": false,
        "issue": "The role uses wildcards, which grant the role permissions to the whole cluster",
        "impact": "The use of wildcard rights grants is likely to provide excessive rights to the Kubernetes API. For a ClusterRole this would be considered high severity.",
        "resolve": "Set only the necessary permissions required",
        "remediation": {
          "kubernetes": "Set only the necessary permissions required",
          "terraform": "Remove any wildcards [*] from `rule.verbs` and `rule.resources`"
        },
        "lineNumber": 780,
        "iacDescription": {
          "issue": "The role uses wildcards, which grant the role permissions to the whole cluster",
          "impact": "The use of wildcard rights grants is likely to provide excessive rights to the Kubernetes API. For a ClusterRole this would be considered high severity.",
          "resolve": "Set only the necessary permissions required"
        },
        "publicId": "SNYK-CC-K8S-44",
        "msg": "rules[72].resources",
        "references": [
          "https://kubernetes.io/docs/reference/access-authn-authz/rbac/"
        ],
        "path": [
          "[DocId: 0]",
          "rules[72]",
          "resources"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-44",
        "title": "Role or ClusterRole with too wide permissions",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Role",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-44",
        "isGeneratedByCustomRule": false,
        "issue": "The role uses wildcards, which grant the role permissions to the whole cluster",
        "impact": "The use of wildcard rights grants is likely to provide excessive rights to the Kubernetes API. For a ClusterRole this would be considered high severity.",
        "resolve": "Set only the necessary permissions required",
        "remediation": {
          "kubernetes": "Set only the necessary permissions required",
          "terraform": "Remove any wildcards [*] from `rule.verbs` and `rule.resources`"
        },
        "lineNumber": 658,
        "iacDescription": {
          "issue": "The role uses wildcards, which grant the role permissions to the whole cluster",
          "impact": "The use of wildcard rights grants is likely to provide excessive rights to the Kubernetes API. For a ClusterRole this would be considered high severity.",
          "resolve": "Set only the necessary permissions required"
        },
        "publicId": "SNYK-CC-K8S-44",
        "msg": "rules[58].verbs",
        "references": [
          "https://kubernetes.io/docs/reference/access-authn-authz/rbac/"
        ],
        "path": [
          "[DocId: 0]",
          "rules[58]",
          "verbs"
        ],
        "compliance": []
      }
    ]
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-rhte-keynote-ai-odh-setup/files/role_binding.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-rhte-keynote-ai-odh-setup/files/role_binding.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-rhte-keynote-ai-odh-setup/files/service_account.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-rhte-keynote-ai-odh-setup/files/service_account.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-security-compliance-lab/files/clair-kubernetes.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-security-compliance-lab/files/clair-kubernetes.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": false,
    "infrastructureAsCodeIssues": [
      {
        "id": "SNYK-CC-K8S-11",
        "title": "Container's or Pod's  UID could clash with host's UID",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-11",
        "isGeneratedByCustomRule": false,
        "issue": "`runAsUser` value is set to low UID",
        "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
        "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
          "terraform": "Set `security_context.run_as_user` value to greater or equal than 10'000"
        },
        "lineNumber": 38,
        "iacDescription": {
          "issue": "`runAsUser` value is set to low UID",
          "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
          "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence"
        },
        "publicId": "SNYK-CC-K8S-11",
        "msg": "input.spec.template.spec.containers[clair].securityContext.runAsUser",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container",
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod",
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 1]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[clair]",
          "securityContext",
          "runAsUser"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-5",
        "title": "Container has no CPU limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-5",
        "isGeneratedByCustomRule": false,
        "issue": "Container has no CPU limit",
        "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
        "resolve": "Add `resources.limits.cpu` field with required CPU limit value",
        "remediation": {
          "kubernetes": "Add `resources.limits.cpu` field with required CPU limit value",
          "terraform": "Add `spec.container.resources.limits.cpu` field with required CPU limit value"
        },
        "lineNumber": 38,
        "iacDescription": {
          "issue": "Container has no CPU limit",
          "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
          "resolve": "Add `resources.limits.cpu` field with required CPU limit value"
        },
        "publicId": "SNYK-CC-K8S-5",
        "msg": "input.spec.template.spec.containers[clair].resources.limits.cpu",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-cpu-resource/",
          "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/cpu-default-namespace/",
          "https://github.com/kubernetes/design-proposals-archive/blob/8da1442ea29adccea40693357d04727127e045ed/node/resource-qos.md#compressible-resource-guaranteess"
        ],
        "path": [
          "[DocId: 1]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[clair]",
          "resources",
          "limits",
          "cpu"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-6",
        "title": "Container does not drop all default capabilities",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-6",
        "isGeneratedByCustomRule": false,
        "issue": "All default capabilities are not explicitly dropped",
        "impact": "Containers are running with potentially unnecessary privileges",
        "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
        "remediation": {
          "kubernetes": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
          "terraform": "Add `ALL` to `spec.container.security_context.capabilities.drop` list, and add only required capabilities to `spec.container.security_context.capabilities.add`, ensuring it also does not contain `ALL`"
        },
        "lineNumber": 38,
        "iacDescription": {
          "issue": "All default capabilities are not explicitly dropped",
          "impact": "Containers are running with potentially unnecessary privileges",
          "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`"
        },
        "publicId": "SNYK-CC-K8S-6",
        "msg": "input.spec.template.spec.containers[clair].securityContext.capabilities.drop",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
          "https://linux-audit.com/linux-capabilities-hardening-linux-binaries-by-removing-setuid/"
        ],
        "path": [
          "[DocId: 1]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[clair]",
          "securityContext",
          "capabilities",
          "drop"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-8",
        "title": "Container is running with writable root filesystem",
        "severity": "low",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-8",
        "isGeneratedByCustomRule": false,
        "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
        "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
          "terraform": "Set `security_context.read_only_root_filesystem` to `true`"
        },
        "lineNumber": 38,
        "iacDescription": {
          "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
          "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`"
        },
        "publicId": "SNYK-CC-K8S-8",
        "msg": "spec.template.spec.containers[clair].securityContext.readOnlyRootFilesystem",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 1]",
          "spec",
          "template",
          "spec",
          "containers[clair]",
          "securityContext",
          "readOnlyRootFilesystem"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-4",
        "title": "Container is running without memory limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-4",
        "isGeneratedByCustomRule": false,
        "issue": "Memory limit is not defined",
        "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
        "resolve": "Set `resources.limits.memory` value",
        "remediation": {
          "kubernetes": "Set `resources.limits.memory` value",
          "terraform": "Set `resources.limits.memory` value"
        },
        "lineNumber": 38,
        "iacDescription": {
          "issue": "Memory limit is not defined",
          "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
          "resolve": "Set `resources.limits.memory` value"
        },
        "publicId": "SNYK-CC-K8S-4",
        "msg": "input.spec.template.spec.containers[clair].resources.limits.memory",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/memory-default-namespace/"
        ],
        "path": [
          "[DocId: 1]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[clair]",
          "resources",
          "limits",
          "memory"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-9",
        "title": "Container is running without privilege escalation control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-9",
        "isGeneratedByCustomRule": false,
        "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
        "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
          "terraform": "Set `spec.container.security_context.allow_privilege_escalation` to `false`"
        },
        "lineNumber": 38,
        "iacDescription": {
          "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
          "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`"
        },
        "publicId": "SNYK-CC-K8S-9",
        "msg": "spec.template.spec.containers[clair].securityContext.allowPrivilegeEscalation",
        "references": [
          "https://www.kernel.org/doc/html/latest/userspace-api/no_new_privs.html"
        ],
        "path": [
          "[DocId: 1]",
          "spec",
          "template",
          "spec",
          "containers[clair]",
          "securityContext",
          "allowPrivilegeEscalation"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-10",
        "title": "Container or Pod is running without root user control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-10",
        "isGeneratedByCustomRule": false,
        "issue": "Container or Pod is running without root user control",
        "impact": "Container or Pod could be running with full administrative privileges",
        "resolve": "Set `securityContext.runAsNonRoot` to `true`",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsNonRoot` to `true`",
          "terraform": "Set `security_context.run_as_non_root` to `true`"
        },
        "lineNumber": 38,
        "iacDescription": {
          "issue": "Container or Pod is running without root user control",
          "impact": "Container or Pod could be running with full administrative privileges",
          "resolve": "Set `securityContext.runAsNonRoot` to `true`"
        },
        "publicId": "SNYK-CC-K8S-10",
        "msg": "input.spec.template.spec.containers[clair].securityContext.runAsNonRoot",
        "description": "",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 1]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[clair]",
          "securityContext",
          "runAsNonRoot"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-8",
        "title": "Container is running with writable root filesystem",
        "severity": "low",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-8",
        "isGeneratedByCustomRule": false,
        "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
        "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
          "terraform": "Set `security_context.read_only_root_filesystem` to `true`"
        },
        "lineNumber": 66,
        "iacDescription": {
          "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
          "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`"
        },
        "publicId": "SNYK-CC-K8S-8",
        "msg": "spec.template.spec.containers[postgres].securityContext.readOnlyRootFilesystem",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 2]",
          "spec",
          "template",
          "spec",
          "containers[postgres]",
          "securityContext",
          "readOnlyRootFilesystem"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-9",
        "title": "Container is running without privilege escalation control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-9",
        "isGeneratedByCustomRule": false,
        "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
        "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
          "terraform": "Set `spec.container.security_context.allow_privilege_escalation` to `false`"
        },
        "lineNumber": 66,
        "iacDescription": {
          "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
          "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`"
        },
        "publicId": "SNYK-CC-K8S-9",
        "msg": "spec.template.spec.containers[postgres].securityContext.allowPrivilegeEscalation",
        "references": [
          "https://www.kernel.org/doc/html/latest/userspace-api/no_new_privs.html"
        ],
        "path": [
          "[DocId: 2]",
          "spec",
          "template",
          "spec",
          "containers[postgres]",
          "securityContext",
          "allowPrivilegeEscalation"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-10",
        "title": "Container or Pod is running without root user control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-10",
        "isGeneratedByCustomRule": false,
        "issue": "Container or Pod is running without root user control",
        "impact": "Container or Pod could be running with full administrative privileges",
        "resolve": "Set `securityContext.runAsNonRoot` to `true`",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsNonRoot` to `true`",
          "terraform": "Set `security_context.run_as_non_root` to `true`"
        },
        "lineNumber": 66,
        "iacDescription": {
          "issue": "Container or Pod is running without root user control",
          "impact": "Container or Pod could be running with full administrative privileges",
          "resolve": "Set `securityContext.runAsNonRoot` to `true`"
        },
        "publicId": "SNYK-CC-K8S-10",
        "msg": "input.spec.template.spec.containers[postgres].securityContext.runAsNonRoot",
        "description": "",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 2]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[postgres]",
          "securityContext",
          "runAsNonRoot"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-4",
        "title": "Container is running without memory limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-4",
        "isGeneratedByCustomRule": false,
        "issue": "Memory limit is not defined",
        "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
        "resolve": "Set `resources.limits.memory` value",
        "remediation": {
          "kubernetes": "Set `resources.limits.memory` value",
          "terraform": "Set `resources.limits.memory` value"
        },
        "lineNumber": 66,
        "iacDescription": {
          "issue": "Memory limit is not defined",
          "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
          "resolve": "Set `resources.limits.memory` value"
        },
        "publicId": "SNYK-CC-K8S-4",
        "msg": "input.spec.template.spec.containers[postgres].resources.limits.memory",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/memory-default-namespace/"
        ],
        "path": [
          "[DocId: 2]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[postgres]",
          "resources",
          "limits",
          "memory"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-11",
        "title": "Container's or Pod's  UID could clash with host's UID",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-11",
        "isGeneratedByCustomRule": false,
        "issue": "`runAsUser` value is set to low UID",
        "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
        "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
          "terraform": "Set `security_context.run_as_user` value to greater or equal than 10'000"
        },
        "lineNumber": 66,
        "iacDescription": {
          "issue": "`runAsUser` value is set to low UID",
          "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
          "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence"
        },
        "publicId": "SNYK-CC-K8S-11",
        "msg": "input.spec.template.spec.containers[postgres].securityContext.runAsUser",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container",
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod",
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 2]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[postgres]",
          "securityContext",
          "runAsUser"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-5",
        "title": "Container has no CPU limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-5",
        "isGeneratedByCustomRule": false,
        "issue": "Container has no CPU limit",
        "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
        "resolve": "Add `resources.limits.cpu` field with required CPU limit value",
        "remediation": {
          "kubernetes": "Add `resources.limits.cpu` field with required CPU limit value",
          "terraform": "Add `spec.container.resources.limits.cpu` field with required CPU limit value"
        },
        "lineNumber": 66,
        "iacDescription": {
          "issue": "Container has no CPU limit",
          "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
          "resolve": "Add `resources.limits.cpu` field with required CPU limit value"
        },
        "publicId": "SNYK-CC-K8S-5",
        "msg": "input.spec.template.spec.containers[postgres].resources.limits.cpu",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-cpu-resource/",
          "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/cpu-default-namespace/",
          "https://github.com/kubernetes/design-proposals-archive/blob/8da1442ea29adccea40693357d04727127e045ed/node/resource-qos.md#compressible-resource-guaranteess"
        ],
        "path": [
          "[DocId: 2]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[postgres]",
          "resources",
          "limits",
          "cpu"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-6",
        "title": "Container does not drop all default capabilities",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-6",
        "isGeneratedByCustomRule": false,
        "issue": "All default capabilities are not explicitly dropped",
        "impact": "Containers are running with potentially unnecessary privileges",
        "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
        "remediation": {
          "kubernetes": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
          "terraform": "Add `ALL` to `spec.container.security_context.capabilities.drop` list, and add only required capabilities to `spec.container.security_context.capabilities.add`, ensuring it also does not contain `ALL`"
        },
        "lineNumber": 66,
        "iacDescription": {
          "issue": "All default capabilities are not explicitly dropped",
          "impact": "Containers are running with potentially unnecessary privileges",
          "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`"
        },
        "publicId": "SNYK-CC-K8S-6",
        "msg": "input.spec.template.spec.containers[postgres].securityContext.capabilities.drop",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
          "https://linux-audit.com/linux-capabilities-hardening-linux-binaries-by-removing-setuid/"
        ],
        "path": [
          "[DocId: 2]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[postgres]",
          "securityContext",
          "capabilities",
          "drop"
        ],
        "compliance": []
      }
    ]
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-security-compliance-lab/files/config.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-security-compliance-lab/files/config.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-security-compliance-lab/files/custom-resource.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-security-compliance-lab/files/custom-resource.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-security-compliance-lab/files/image-mgmt-cmap.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-security-compliance-lab/files/image-mgmt-cmap.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-security-compliance-lab/files/owasp-cmap.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-security-compliance-lab/files/owasp-cmap.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-security-compliance-lab/files/quay_cr.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-security-compliance-lab/files/quay_cr.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-security-compliance-lab/templates/etherpad-template.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-security-compliance-lab/templates/etherpad-template.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-security-compliance-lab/templates/guides-template.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-security-compliance-lab/templates/guides-template.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-serverless/files/knative_serving.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-serverless/files/knative_serving.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-serverless/files/namespace.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-serverless/files/namespace.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-servicemesh/files/namespace.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-servicemesh/files/namespace.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-servicemesh/files/service_mesh_control_plane.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-servicemesh/files/service_mesh_control_plane.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-sso-workshop/files/codeready_cr.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-sso-workshop/files/codeready_cr.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-sso-workshop/files/codeready_operatorgroup.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-sso-workshop/files/codeready_operatorgroup.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-sso-workshop/files/codeready_subscription.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-sso-workshop/files/codeready_subscription.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-sso-workshop/files/community-operators-index.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-sso-workshop/files/community-operators-index.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-sso-workshop/files/redhat-operators-index.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-sso-workshop/files/redhat-operators-index.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-sso-workshop/files/redis-template.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-sso-workshop/files/redis-template.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-sso-workshop/files/stack_imagestream.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-sso-workshop/files/stack_imagestream.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-tektoncd-foundations/files/pipelines-subscription.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-tektoncd-foundations/files/pipelines-subscription.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-template-service-broker/files/service_catalog_api_server.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-template-service-broker/files/service_catalog_api_server.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-template-service-broker/files/service_catalog_controller_manager.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-template-service-broker/files/service_catalog_controller_manager.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4-workload-workshop-admin-storage/files/production-cluster-admin.json",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4-workload-workshop-admin-storage/files/production-cluster-admin.json",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4_workload_stackrox_demo_apps/files/demos/backend/everything.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4_workload_stackrox_demo_apps/files/demos/backend/everything.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": false,
    "infrastructureAsCodeIssues": [
      {
        "id": "SNYK-CC-K8S-8",
        "title": "Container is running with writable root filesystem",
        "severity": "low",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-8",
        "isGeneratedByCustomRule": false,
        "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
        "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
          "terraform": "Set `security_context.read_only_root_filesystem` to `true`"
        },
        "lineNumber": 44,
        "iacDescription": {
          "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
          "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`"
        },
        "publicId": "SNYK-CC-K8S-8",
        "msg": "spec.template.spec.containers[api-server].securityContext.readOnlyRootFilesystem",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 2]",
          "spec",
          "template",
          "spec",
          "containers[api-server]",
          "securityContext",
          "readOnlyRootFilesystem"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-6",
        "title": "Container does not drop all default capabilities",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-6",
        "isGeneratedByCustomRule": false,
        "issue": "All default capabilities are not explicitly dropped",
        "impact": "Containers are running with potentially unnecessary privileges",
        "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
        "remediation": {
          "kubernetes": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
          "terraform": "Add `ALL` to `spec.container.security_context.capabilities.drop` list, and add only required capabilities to `spec.container.security_context.capabilities.add`, ensuring it also does not contain `ALL`"
        },
        "lineNumber": 44,
        "iacDescription": {
          "issue": "All default capabilities are not explicitly dropped",
          "impact": "Containers are running with potentially unnecessary privileges",
          "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`"
        },
        "publicId": "SNYK-CC-K8S-6",
        "msg": "input.spec.template.spec.containers[api-server].securityContext.capabilities.drop",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
          "https://linux-audit.com/linux-capabilities-hardening-linux-binaries-by-removing-setuid/"
        ],
        "path": [
          "[DocId: 2]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[api-server]",
          "securityContext",
          "capabilities",
          "drop"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-11",
        "title": "Container's or Pod's  UID could clash with host's UID",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-11",
        "isGeneratedByCustomRule": false,
        "issue": "`runAsUser` value is set to low UID",
        "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
        "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
          "terraform": "Set `security_context.run_as_user` value to greater or equal than 10'000"
        },
        "lineNumber": 44,
        "iacDescription": {
          "issue": "`runAsUser` value is set to low UID",
          "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
          "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence"
        },
        "publicId": "SNYK-CC-K8S-11",
        "msg": "input.spec.template.spec.containers[api-server].securityContext.runAsUser",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container",
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod",
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 2]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[api-server]",
          "securityContext",
          "runAsUser"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-5",
        "title": "Container has no CPU limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-5",
        "isGeneratedByCustomRule": false,
        "issue": "Container has no CPU limit",
        "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
        "resolve": "Add `resources.limits.cpu` field with required CPU limit value",
        "remediation": {
          "kubernetes": "Add `resources.limits.cpu` field with required CPU limit value",
          "terraform": "Add `spec.container.resources.limits.cpu` field with required CPU limit value"
        },
        "lineNumber": 44,
        "iacDescription": {
          "issue": "Container has no CPU limit",
          "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
          "resolve": "Add `resources.limits.cpu` field with required CPU limit value"
        },
        "publicId": "SNYK-CC-K8S-5",
        "msg": "input.spec.template.spec.containers[api-server].resources.limits.cpu",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-cpu-resource/",
          "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/cpu-default-namespace/",
          "https://github.com/kubernetes/design-proposals-archive/blob/8da1442ea29adccea40693357d04727127e045ed/node/resource-qos.md#compressible-resource-guaranteess"
        ],
        "path": [
          "[DocId: 2]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[api-server]",
          "resources",
          "limits",
          "cpu"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-10",
        "title": "Container or Pod is running without root user control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-10",
        "isGeneratedByCustomRule": false,
        "issue": "Container or Pod is running without root user control",
        "impact": "Container or Pod could be running with full administrative privileges",
        "resolve": "Set `securityContext.runAsNonRoot` to `true`",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsNonRoot` to `true`",
          "terraform": "Set `security_context.run_as_non_root` to `true`"
        },
        "lineNumber": 44,
        "iacDescription": {
          "issue": "Container or Pod is running without root user control",
          "impact": "Container or Pod could be running with full administrative privileges",
          "resolve": "Set `securityContext.runAsNonRoot` to `true`"
        },
        "publicId": "SNYK-CC-K8S-10",
        "msg": "input.spec.template.spec.containers[api-server].securityContext.runAsNonRoot",
        "description": "",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 2]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[api-server]",
          "securityContext",
          "runAsNonRoot"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-9",
        "title": "Container is running without privilege escalation control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-9",
        "isGeneratedByCustomRule": false,
        "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
        "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
          "terraform": "Set `spec.container.security_context.allow_privilege_escalation` to `false`"
        },
        "lineNumber": 44,
        "iacDescription": {
          "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
          "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`"
        },
        "publicId": "SNYK-CC-K8S-9",
        "msg": "spec.template.spec.containers[api-server].securityContext.allowPrivilegeEscalation",
        "references": [
          "https://www.kernel.org/doc/html/latest/userspace-api/no_new_privs.html"
        ],
        "path": [
          "[DocId: 2]",
          "spec",
          "template",
          "spec",
          "containers[api-server]",
          "securityContext",
          "allowPrivilegeEscalation"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-41",
        "title": "Container is running without liveness probe",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-41",
        "isGeneratedByCustomRule": false,
        "issue": "Liveness probe is not defined",
        "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
        "resolve": "Add `livenessProbe` attribute",
        "remediation": {
          "kubernetes": "Add `livenessProbe` attribute",
          "terraform": "Add `liveness_probe` attribute"
        },
        "lineNumber": 44,
        "iacDescription": {
          "issue": "Liveness probe is not defined",
          "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
          "resolve": "Add `livenessProbe` attribute"
        },
        "publicId": "SNYK-CC-K8S-41",
        "msg": "spec.template.spec.containers[api-server].livenessProbe",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/",
          "https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/",
          "https://cloud.google.com/blog/products/gcp/kubernetes-best-practices-setting-up-health-checks-with-readiness-and-liveness-probes"
        ],
        "path": [
          "[DocId: 2]",
          "spec",
          "template",
          "spec",
          "containers[api-server]",
          "livenessProbe"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-4",
        "title": "Container is running without memory limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-4",
        "isGeneratedByCustomRule": false,
        "issue": "Memory limit is not defined",
        "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
        "resolve": "Set `resources.limits.memory` value",
        "remediation": {
          "kubernetes": "Set `resources.limits.memory` value",
          "terraform": "Set `resources.limits.memory` value"
        },
        "lineNumber": 44,
        "iacDescription": {
          "issue": "Memory limit is not defined",
          "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
          "resolve": "Set `resources.limits.memory` value"
        },
        "publicId": "SNYK-CC-K8S-4",
        "msg": "input.spec.template.spec.containers[api-server].resources.limits.memory",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/memory-default-namespace/"
        ],
        "path": [
          "[DocId: 2]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[api-server]",
          "resources",
          "limits",
          "memory"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-44",
        "title": "Role or ClusterRole with too wide permissions",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Role",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-44",
        "isGeneratedByCustomRule": false,
        "issue": "The role uses wildcards, which grant the role permissions to the whole cluster",
        "impact": "The use of wildcard rights grants is likely to provide excessive rights to the Kubernetes API. For a ClusterRole this would be considered high severity.",
        "resolve": "Set only the necessary permissions required",
        "remediation": {
          "kubernetes": "Set only the necessary permissions required",
          "terraform": "Remove any wildcards [*] from `rule.verbs` and `rule.resources`"
        },
        "lineNumber": 99,
        "iacDescription": {
          "issue": "The role uses wildcards, which grant the role permissions to the whole cluster",
          "impact": "The use of wildcard rights grants is likely to provide excessive rights to the Kubernetes API. For a ClusterRole this would be considered high severity.",
          "resolve": "Set only the necessary permissions required"
        },
        "publicId": "SNYK-CC-K8S-44",
        "msg": "rules[0].verbs",
        "references": [
          "https://kubernetes.io/docs/reference/access-authn-authz/rbac/"
        ],
        "path": [
          "[DocId: 5]",
          "rules[0]",
          "verbs"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-11",
        "title": "Container's or Pod's  UID could clash with host's UID",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-11",
        "isGeneratedByCustomRule": false,
        "issue": "`runAsUser` value is set to low UID",
        "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
        "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
          "terraform": "Set `security_context.run_as_user` value to greater or equal than 10'000"
        },
        "lineNumber": 147,
        "iacDescription": {
          "issue": "`runAsUser` value is set to low UID",
          "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
          "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence"
        },
        "publicId": "SNYK-CC-K8S-11",
        "msg": "input.spec.template.spec.containers[backend-atlas].securityContext.runAsUser",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container",
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod",
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 7]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[backend-atlas]",
          "securityContext",
          "runAsUser"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-5",
        "title": "Container has no CPU limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-5",
        "isGeneratedByCustomRule": false,
        "issue": "Container has no CPU limit",
        "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
        "resolve": "Add `resources.limits.cpu` field with required CPU limit value",
        "remediation": {
          "kubernetes": "Add `resources.limits.cpu` field with required CPU limit value",
          "terraform": "Add `spec.container.resources.limits.cpu` field with required CPU limit value"
        },
        "lineNumber": 152,
        "iacDescription": {
          "issue": "Container has no CPU limit",
          "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
          "resolve": "Add `resources.limits.cpu` field with required CPU limit value"
        },
        "publicId": "SNYK-CC-K8S-5",
        "msg": "input.spec.template.spec.containers[log-collector].resources.limits.cpu",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-cpu-resource/",
          "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/cpu-default-namespace/",
          "https://github.com/kubernetes/design-proposals-archive/blob/8da1442ea29adccea40693357d04727127e045ed/node/resource-qos.md#compressible-resource-guaranteess"
        ],
        "path": [
          "[DocId: 7]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[log-collector]",
          "resources",
          "limits",
          "cpu"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-10",
        "title": "Container or Pod is running without root user control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-10",
        "isGeneratedByCustomRule": false,
        "issue": "Container or Pod is running without root user control",
        "impact": "Container or Pod could be running with full administrative privileges",
        "resolve": "Set `securityContext.runAsNonRoot` to `true`",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsNonRoot` to `true`",
          "terraform": "Set `security_context.run_as_non_root` to `true`"
        },
        "lineNumber": 147,
        "iacDescription": {
          "issue": "Container or Pod is running without root user control",
          "impact": "Container or Pod could be running with full administrative privileges",
          "resolve": "Set `securityContext.runAsNonRoot` to `true`"
        },
        "publicId": "SNYK-CC-K8S-10",
        "msg": "input.spec.template.spec.containers[backend-atlas].securityContext.runAsNonRoot",
        "description": "",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 7]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[backend-atlas]",
          "securityContext",
          "runAsNonRoot"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-4",
        "title": "Container is running without memory limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-4",
        "isGeneratedByCustomRule": false,
        "issue": "Memory limit is not defined",
        "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
        "resolve": "Set `resources.limits.memory` value",
        "remediation": {
          "kubernetes": "Set `resources.limits.memory` value",
          "terraform": "Set `resources.limits.memory` value"
        },
        "lineNumber": 152,
        "iacDescription": {
          "issue": "Memory limit is not defined",
          "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
          "resolve": "Set `resources.limits.memory` value"
        },
        "publicId": "SNYK-CC-K8S-4",
        "msg": "input.spec.template.spec.containers[log-collector].resources.limits.memory",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/memory-default-namespace/"
        ],
        "path": [
          "[DocId: 7]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[log-collector]",
          "resources",
          "limits",
          "memory"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-9",
        "title": "Container is running without privilege escalation control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-9",
        "isGeneratedByCustomRule": false,
        "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
        "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
          "terraform": "Set `spec.container.security_context.allow_privilege_escalation` to `false`"
        },
        "lineNumber": 147,
        "iacDescription": {
          "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
          "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`"
        },
        "publicId": "SNYK-CC-K8S-9",
        "msg": "spec.template.spec.containers[backend-atlas].securityContext.allowPrivilegeEscalation",
        "references": [
          "https://www.kernel.org/doc/html/latest/userspace-api/no_new_privs.html"
        ],
        "path": [
          "[DocId: 7]",
          "spec",
          "template",
          "spec",
          "containers[backend-atlas]",
          "securityContext",
          "allowPrivilegeEscalation"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-41",
        "title": "Container is running without liveness probe",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-41",
        "isGeneratedByCustomRule": false,
        "issue": "Liveness probe is not defined",
        "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
        "resolve": "Add `livenessProbe` attribute",
        "remediation": {
          "kubernetes": "Add `livenessProbe` attribute",
          "terraform": "Add `liveness_probe` attribute"
        },
        "lineNumber": 152,
        "iacDescription": {
          "issue": "Liveness probe is not defined",
          "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
          "resolve": "Add `livenessProbe` attribute"
        },
        "publicId": "SNYK-CC-K8S-41",
        "msg": "spec.template.spec.containers[log-collector].livenessProbe",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/",
          "https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/",
          "https://cloud.google.com/blog/products/gcp/kubernetes-best-practices-setting-up-health-checks-with-readiness-and-liveness-probes"
        ],
        "path": [
          "[DocId: 7]",
          "spec",
          "template",
          "spec",
          "containers[log-collector]",
          "livenessProbe"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-8",
        "title": "Container is running with writable root filesystem",
        "severity": "low",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-8",
        "isGeneratedByCustomRule": false,
        "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
        "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
          "terraform": "Set `security_context.read_only_root_filesystem` to `true`"
        },
        "lineNumber": 147,
        "iacDescription": {
          "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
          "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`"
        },
        "publicId": "SNYK-CC-K8S-8",
        "msg": "spec.template.spec.containers[backend-atlas].securityContext.readOnlyRootFilesystem",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 7]",
          "spec",
          "template",
          "spec",
          "containers[backend-atlas]",
          "securityContext",
          "readOnlyRootFilesystem"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-6",
        "title": "Container does not drop all default capabilities",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-6",
        "isGeneratedByCustomRule": false,
        "issue": "All default capabilities are not explicitly dropped",
        "impact": "Containers are running with potentially unnecessary privileges",
        "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
        "remediation": {
          "kubernetes": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
          "terraform": "Add `ALL` to `spec.container.security_context.capabilities.drop` list, and add only required capabilities to `spec.container.security_context.capabilities.add`, ensuring it also does not contain `ALL`"
        },
        "lineNumber": 147,
        "iacDescription": {
          "issue": "All default capabilities are not explicitly dropped",
          "impact": "Containers are running with potentially unnecessary privileges",
          "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`"
        },
        "publicId": "SNYK-CC-K8S-6",
        "msg": "input.spec.template.spec.containers[backend-atlas].securityContext.capabilities.drop",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
          "https://linux-audit.com/linux-capabilities-hardening-linux-binaries-by-removing-setuid/"
        ],
        "path": [
          "[DocId: 7]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[backend-atlas]",
          "securityContext",
          "capabilities",
          "drop"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-42",
        "title": "Container could be running with outdated image",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-42",
        "isGeneratedByCustomRule": false,
        "issue": "The image policy does not prevent image reuse",
        "impact": "The container may run with outdated or unauthorized image",
        "resolve": "Set `imagePullPolicy` attribute to `Always`",
        "remediation": {
          "kubernetes": "Set `imagePullPolicy` attribute to `Always`",
          "terraform": "Set `image_pull_policy` attribute to `Always"
        },
        "lineNumber": 152,
        "iacDescription": {
          "issue": "The image policy does not prevent image reuse",
          "impact": "The container may run with outdated or unauthorized image",
          "resolve": "Set `imagePullPolicy` attribute to `Always`"
        },
        "publicId": "SNYK-CC-K8S-42",
        "msg": "spec.template.spec.containers[log-collector].imagePullPolicy",
        "references": [
          "https://kubernetes.io/docs/concepts/containers/images/",
          "https://kubernetes.io/docs/concepts/configuration/overview/#container-images"
        ],
        "path": [
          "[DocId: 7]",
          "spec",
          "template",
          "spec",
          "containers[log-collector]",
          "imagePullPolicy"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-9",
        "title": "Container is running without privilege escalation control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-9",
        "isGeneratedByCustomRule": false,
        "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
        "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
          "terraform": "Set `spec.container.security_context.allow_privilege_escalation` to `false`"
        },
        "lineNumber": 152,
        "iacDescription": {
          "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
          "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`"
        },
        "publicId": "SNYK-CC-K8S-9",
        "msg": "spec.template.spec.containers[log-collector].securityContext.allowPrivilegeEscalation",
        "references": [
          "https://www.kernel.org/doc/html/latest/userspace-api/no_new_privs.html"
        ],
        "path": [
          "[DocId: 7]",
          "spec",
          "template",
          "spec",
          "containers[log-collector]",
          "securityContext",
          "allowPrivilegeEscalation"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-4",
        "title": "Container is running without memory limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-4",
        "isGeneratedByCustomRule": false,
        "issue": "Memory limit is not defined",
        "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
        "resolve": "Set `resources.limits.memory` value",
        "remediation": {
          "kubernetes": "Set `resources.limits.memory` value",
          "terraform": "Set `resources.limits.memory` value"
        },
        "lineNumber": 147,
        "iacDescription": {
          "issue": "Memory limit is not defined",
          "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
          "resolve": "Set `resources.limits.memory` value"
        },
        "publicId": "SNYK-CC-K8S-4",
        "msg": "input.spec.template.spec.containers[backend-atlas].resources.limits.memory",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/memory-default-namespace/"
        ],
        "path": [
          "[DocId: 7]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[backend-atlas]",
          "resources",
          "limits",
          "memory"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-10",
        "title": "Container or Pod is running without root user control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-10",
        "isGeneratedByCustomRule": false,
        "issue": "Container or Pod is running without root user control",
        "impact": "Container or Pod could be running with full administrative privileges",
        "resolve": "Set `securityContext.runAsNonRoot` to `true`",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsNonRoot` to `true`",
          "terraform": "Set `security_context.run_as_non_root` to `true`"
        },
        "lineNumber": 152,
        "iacDescription": {
          "issue": "Container or Pod is running without root user control",
          "impact": "Container or Pod could be running with full administrative privileges",
          "resolve": "Set `securityContext.runAsNonRoot` to `true`"
        },
        "publicId": "SNYK-CC-K8S-10",
        "msg": "input.spec.template.spec.containers[log-collector].securityContext.runAsNonRoot",
        "description": "",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 7]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[log-collector]",
          "securityContext",
          "runAsNonRoot"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-8",
        "title": "Container is running with writable root filesystem",
        "severity": "low",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-8",
        "isGeneratedByCustomRule": false,
        "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
        "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
          "terraform": "Set `security_context.read_only_root_filesystem` to `true`"
        },
        "lineNumber": 152,
        "iacDescription": {
          "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
          "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`"
        },
        "publicId": "SNYK-CC-K8S-8",
        "msg": "spec.template.spec.containers[log-collector].securityContext.readOnlyRootFilesystem",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 7]",
          "spec",
          "template",
          "spec",
          "containers[log-collector]",
          "securityContext",
          "readOnlyRootFilesystem"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-6",
        "title": "Container does not drop all default capabilities",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-6",
        "isGeneratedByCustomRule": false,
        "issue": "All default capabilities are not explicitly dropped",
        "impact": "Containers are running with potentially unnecessary privileges",
        "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
        "remediation": {
          "kubernetes": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
          "terraform": "Add `ALL` to `spec.container.security_context.capabilities.drop` list, and add only required capabilities to `spec.container.security_context.capabilities.add`, ensuring it also does not contain `ALL`"
        },
        "lineNumber": 152,
        "iacDescription": {
          "issue": "All default capabilities are not explicitly dropped",
          "impact": "Containers are running with potentially unnecessary privileges",
          "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`"
        },
        "publicId": "SNYK-CC-K8S-6",
        "msg": "input.spec.template.spec.containers[log-collector].securityContext.capabilities.drop",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
          "https://linux-audit.com/linux-capabilities-hardening-linux-binaries-by-removing-setuid/"
        ],
        "path": [
          "[DocId: 7]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[log-collector]",
          "securityContext",
          "capabilities",
          "drop"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-41",
        "title": "Container is running without liveness probe",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-41",
        "isGeneratedByCustomRule": false,
        "issue": "Liveness probe is not defined",
        "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
        "resolve": "Add `livenessProbe` attribute",
        "remediation": {
          "kubernetes": "Add `livenessProbe` attribute",
          "terraform": "Add `liveness_probe` attribute"
        },
        "lineNumber": 147,
        "iacDescription": {
          "issue": "Liveness probe is not defined",
          "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
          "resolve": "Add `livenessProbe` attribute"
        },
        "publicId": "SNYK-CC-K8S-41",
        "msg": "spec.template.spec.containers[backend-atlas].livenessProbe",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/",
          "https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/",
          "https://cloud.google.com/blog/products/gcp/kubernetes-best-practices-setting-up-health-checks-with-readiness-and-liveness-probes"
        ],
        "path": [
          "[DocId: 7]",
          "spec",
          "template",
          "spec",
          "containers[backend-atlas]",
          "livenessProbe"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-11",
        "title": "Container's or Pod's  UID could clash with host's UID",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-11",
        "isGeneratedByCustomRule": false,
        "issue": "`runAsUser` value is set to low UID",
        "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
        "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
          "terraform": "Set `security_context.run_as_user` value to greater or equal than 10'000"
        },
        "lineNumber": 152,
        "iacDescription": {
          "issue": "`runAsUser` value is set to low UID",
          "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
          "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence"
        },
        "publicId": "SNYK-CC-K8S-11",
        "msg": "input.spec.template.spec.containers[log-collector].securityContext.runAsUser",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container",
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod",
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 7]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[log-collector]",
          "securityContext",
          "runAsUser"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-5",
        "title": "Container has no CPU limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-5",
        "isGeneratedByCustomRule": false,
        "issue": "Container has no CPU limit",
        "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
        "resolve": "Add `resources.limits.cpu` field with required CPU limit value",
        "remediation": {
          "kubernetes": "Add `resources.limits.cpu` field with required CPU limit value",
          "terraform": "Add `spec.container.resources.limits.cpu` field with required CPU limit value"
        },
        "lineNumber": 147,
        "iacDescription": {
          "issue": "Container has no CPU limit",
          "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
          "resolve": "Add `resources.limits.cpu` field with required CPU limit value"
        },
        "publicId": "SNYK-CC-K8S-5",
        "msg": "input.spec.template.spec.containers[backend-atlas].resources.limits.cpu",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-cpu-resource/",
          "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/cpu-default-namespace/",
          "https://github.com/kubernetes/design-proposals-archive/blob/8da1442ea29adccea40693357d04727127e045ed/node/resource-qos.md#compressible-resource-guaranteess"
        ],
        "path": [
          "[DocId: 7]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[backend-atlas]",
          "resources",
          "limits",
          "cpu"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-47",
        "title": "Role or ClusterRole with dangerous permissions",
        "severity": "high",
        "isIgnored": false,
        "subType": "ClusterRole",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-47",
        "isGeneratedByCustomRule": false,
        "issue": "A role was found using a dangerous permissions",
        "impact": "Using this role grants dangerous permissions. For a ClusterRole this would be considered high severity.",
        "resolve": "Consider removing these permissions",
        "remediation": {
          "kubernetes": "Consider removing these permissions",
          "terraform": "Consider removing these permissions"
        },
        "lineNumber": 225,
        "iacDescription": {
          "issue": "A role was found using a dangerous permissions",
          "impact": "Using this role grants dangerous permissions. For a ClusterRole this would be considered high severity.",
          "resolve": "Consider removing these permissions"
        },
        "publicId": "SNYK-CC-K8S-47",
        "msg": "rules[0].resources",
        "references": [
          "https://kubernetes.io/docs/reference/access-authn-authz/rbac/"
        ],
        "path": [
          "[DocId: 12]",
          "rules[0]",
          "resources"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-8",
        "title": "Container is running with writable root filesystem",
        "severity": "low",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-8",
        "isGeneratedByCustomRule": false,
        "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
        "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
          "terraform": "Set `security_context.read_only_root_filesystem` to `true`"
        },
        "lineNumber": 273,
        "iacDescription": {
          "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
          "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`"
        },
        "publicId": "SNYK-CC-K8S-8",
        "msg": "spec.template.spec.containers[postgres].securityContext.readOnlyRootFilesystem",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 14]",
          "spec",
          "template",
          "spec",
          "containers[postgres]",
          "securityContext",
          "readOnlyRootFilesystem"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-9",
        "title": "Container is running without privilege escalation control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-9",
        "isGeneratedByCustomRule": false,
        "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
        "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
          "terraform": "Set `spec.container.security_context.allow_privilege_escalation` to `false`"
        },
        "lineNumber": 273,
        "iacDescription": {
          "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
          "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`"
        },
        "publicId": "SNYK-CC-K8S-9",
        "msg": "spec.template.spec.containers[postgres].securityContext.allowPrivilegeEscalation",
        "references": [
          "https://www.kernel.org/doc/html/latest/userspace-api/no_new_privs.html"
        ],
        "path": [
          "[DocId: 14]",
          "spec",
          "template",
          "spec",
          "containers[postgres]",
          "securityContext",
          "allowPrivilegeEscalation"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-10",
        "title": "Container or Pod is running without root user control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-10",
        "isGeneratedByCustomRule": false,
        "issue": "Container or Pod is running without root user control",
        "impact": "Container or Pod could be running with full administrative privileges",
        "resolve": "Set `securityContext.runAsNonRoot` to `true`",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsNonRoot` to `true`",
          "terraform": "Set `security_context.run_as_non_root` to `true`"
        },
        "lineNumber": 273,
        "iacDescription": {
          "issue": "Container or Pod is running without root user control",
          "impact": "Container or Pod could be running with full administrative privileges",
          "resolve": "Set `securityContext.runAsNonRoot` to `true`"
        },
        "publicId": "SNYK-CC-K8S-10",
        "msg": "input.spec.template.spec.containers[postgres].securityContext.runAsNonRoot",
        "description": "",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 14]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[postgres]",
          "securityContext",
          "runAsNonRoot"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-4",
        "title": "Container is running without memory limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-4",
        "isGeneratedByCustomRule": false,
        "issue": "Memory limit is not defined",
        "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
        "resolve": "Set `resources.limits.memory` value",
        "remediation": {
          "kubernetes": "Set `resources.limits.memory` value",
          "terraform": "Set `resources.limits.memory` value"
        },
        "lineNumber": 273,
        "iacDescription": {
          "issue": "Memory limit is not defined",
          "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
          "resolve": "Set `resources.limits.memory` value"
        },
        "publicId": "SNYK-CC-K8S-4",
        "msg": "input.spec.template.spec.containers[postgres].resources.limits.memory",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/memory-default-namespace/"
        ],
        "path": [
          "[DocId: 14]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[postgres]",
          "resources",
          "limits",
          "memory"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-11",
        "title": "Container's or Pod's  UID could clash with host's UID",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-11",
        "isGeneratedByCustomRule": false,
        "issue": "`runAsUser` value is set to low UID",
        "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
        "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
          "terraform": "Set `security_context.run_as_user` value to greater or equal than 10'000"
        },
        "lineNumber": 273,
        "iacDescription": {
          "issue": "`runAsUser` value is set to low UID",
          "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
          "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence"
        },
        "publicId": "SNYK-CC-K8S-11",
        "msg": "input.spec.template.spec.containers[postgres].securityContext.runAsUser",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container",
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod",
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 14]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[postgres]",
          "securityContext",
          "runAsUser"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-5",
        "title": "Container has no CPU limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-5",
        "isGeneratedByCustomRule": false,
        "issue": "Container has no CPU limit",
        "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
        "resolve": "Add `resources.limits.cpu` field with required CPU limit value",
        "remediation": {
          "kubernetes": "Add `resources.limits.cpu` field with required CPU limit value",
          "terraform": "Add `spec.container.resources.limits.cpu` field with required CPU limit value"
        },
        "lineNumber": 273,
        "iacDescription": {
          "issue": "Container has no CPU limit",
          "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
          "resolve": "Add `resources.limits.cpu` field with required CPU limit value"
        },
        "publicId": "SNYK-CC-K8S-5",
        "msg": "input.spec.template.spec.containers[postgres].resources.limits.cpu",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-cpu-resource/",
          "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/cpu-default-namespace/",
          "https://github.com/kubernetes/design-proposals-archive/blob/8da1442ea29adccea40693357d04727127e045ed/node/resource-qos.md#compressible-resource-guaranteess"
        ],
        "path": [
          "[DocId: 14]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[postgres]",
          "resources",
          "limits",
          "cpu"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-41",
        "title": "Container is running without liveness probe",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-41",
        "isGeneratedByCustomRule": false,
        "issue": "Liveness probe is not defined",
        "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
        "resolve": "Add `livenessProbe` attribute",
        "remediation": {
          "kubernetes": "Add `livenessProbe` attribute",
          "terraform": "Add `liveness_probe` attribute"
        },
        "lineNumber": 273,
        "iacDescription": {
          "issue": "Liveness probe is not defined",
          "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
          "resolve": "Add `livenessProbe` attribute"
        },
        "publicId": "SNYK-CC-K8S-41",
        "msg": "spec.template.spec.containers[postgres].livenessProbe",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/",
          "https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/",
          "https://cloud.google.com/blog/products/gcp/kubernetes-best-practices-setting-up-health-checks-with-readiness-and-liveness-probes"
        ],
        "path": [
          "[DocId: 14]",
          "spec",
          "template",
          "spec",
          "containers[postgres]",
          "livenessProbe"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-6",
        "title": "Container does not drop all default capabilities",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-6",
        "isGeneratedByCustomRule": false,
        "issue": "All default capabilities are not explicitly dropped",
        "impact": "Containers are running with potentially unnecessary privileges",
        "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
        "remediation": {
          "kubernetes": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
          "terraform": "Add `ALL` to `spec.container.security_context.capabilities.drop` list, and add only required capabilities to `spec.container.security_context.capabilities.add`, ensuring it also does not contain `ALL`"
        },
        "lineNumber": 273,
        "iacDescription": {
          "issue": "All default capabilities are not explicitly dropped",
          "impact": "Containers are running with potentially unnecessary privileges",
          "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`"
        },
        "publicId": "SNYK-CC-K8S-6",
        "msg": "input.spec.template.spec.containers[postgres].securityContext.capabilities.drop",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
          "https://linux-audit.com/linux-capabilities-hardening-linux-binaries-by-removing-setuid/"
        ],
        "path": [
          "[DocId: 14]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[postgres]",
          "securityContext",
          "capabilities",
          "drop"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-4",
        "title": "Container is running without memory limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-4",
        "isGeneratedByCustomRule": false,
        "issue": "Memory limit is not defined",
        "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
        "resolve": "Set `resources.limits.memory` value",
        "remediation": {
          "kubernetes": "Set `resources.limits.memory` value",
          "terraform": "Set `resources.limits.memory` value"
        },
        "lineNumber": 328,
        "iacDescription": {
          "issue": "Memory limit is not defined",
          "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
          "resolve": "Set `resources.limits.memory` value"
        },
        "publicId": "SNYK-CC-K8S-4",
        "msg": "input.spec.template.spec.containers[varnish].resources.limits.memory",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/memory-default-namespace/"
        ],
        "path": [
          "[DocId: 16]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[varnish]",
          "resources",
          "limits",
          "memory"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-11",
        "title": "Container's or Pod's  UID could clash with host's UID",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-11",
        "isGeneratedByCustomRule": false,
        "issue": "`runAsUser` value is set to low UID",
        "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
        "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
          "terraform": "Set `security_context.run_as_user` value to greater or equal than 10'000"
        },
        "lineNumber": 328,
        "iacDescription": {
          "issue": "`runAsUser` value is set to low UID",
          "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
          "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence"
        },
        "publicId": "SNYK-CC-K8S-11",
        "msg": "input.spec.template.spec.containers[varnish].securityContext.runAsUser",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container",
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod",
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 16]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[varnish]",
          "securityContext",
          "runAsUser"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-5",
        "title": "Container has no CPU limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-5",
        "isGeneratedByCustomRule": false,
        "issue": "Container has no CPU limit",
        "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
        "resolve": "Add `resources.limits.cpu` field with required CPU limit value",
        "remediation": {
          "kubernetes": "Add `resources.limits.cpu` field with required CPU limit value",
          "terraform": "Add `spec.container.resources.limits.cpu` field with required CPU limit value"
        },
        "lineNumber": 328,
        "iacDescription": {
          "issue": "Container has no CPU limit",
          "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
          "resolve": "Add `resources.limits.cpu` field with required CPU limit value"
        },
        "publicId": "SNYK-CC-K8S-5",
        "msg": "input.spec.template.spec.containers[varnish].resources.limits.cpu",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-cpu-resource/",
          "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/cpu-default-namespace/",
          "https://github.com/kubernetes/design-proposals-archive/blob/8da1442ea29adccea40693357d04727127e045ed/node/resource-qos.md#compressible-resource-guaranteess"
        ],
        "path": [
          "[DocId: 16]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[varnish]",
          "resources",
          "limits",
          "cpu"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-41",
        "title": "Container is running without liveness probe",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-41",
        "isGeneratedByCustomRule": false,
        "issue": "Liveness probe is not defined",
        "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
        "resolve": "Add `livenessProbe` attribute",
        "remediation": {
          "kubernetes": "Add `livenessProbe` attribute",
          "terraform": "Add `liveness_probe` attribute"
        },
        "lineNumber": 328,
        "iacDescription": {
          "issue": "Liveness probe is not defined",
          "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
          "resolve": "Add `livenessProbe` attribute"
        },
        "publicId": "SNYK-CC-K8S-41",
        "msg": "spec.template.spec.containers[varnish].livenessProbe",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/",
          "https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/",
          "https://cloud.google.com/blog/products/gcp/kubernetes-best-practices-setting-up-health-checks-with-readiness-and-liveness-probes"
        ],
        "path": [
          "[DocId: 16]",
          "spec",
          "template",
          "spec",
          "containers[varnish]",
          "livenessProbe"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-6",
        "title": "Container does not drop all default capabilities",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-6",
        "isGeneratedByCustomRule": false,
        "issue": "All default capabilities are not explicitly dropped",
        "impact": "Containers are running with potentially unnecessary privileges",
        "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
        "remediation": {
          "kubernetes": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
          "terraform": "Add `ALL` to `spec.container.security_context.capabilities.drop` list, and add only required capabilities to `spec.container.security_context.capabilities.add`, ensuring it also does not contain `ALL`"
        },
        "lineNumber": 328,
        "iacDescription": {
          "issue": "All default capabilities are not explicitly dropped",
          "impact": "Containers are running with potentially unnecessary privileges",
          "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`"
        },
        "publicId": "SNYK-CC-K8S-6",
        "msg": "input.spec.template.spec.containers[varnish].securityContext.capabilities.drop",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
          "https://linux-audit.com/linux-capabilities-hardening-linux-binaries-by-removing-setuid/"
        ],
        "path": [
          "[DocId: 16]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[varnish]",
          "securityContext",
          "capabilities",
          "drop"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-8",
        "title": "Container is running with writable root filesystem",
        "severity": "low",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-8",
        "isGeneratedByCustomRule": false,
        "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
        "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
          "terraform": "Set `security_context.read_only_root_filesystem` to `true`"
        },
        "lineNumber": 328,
        "iacDescription": {
          "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
          "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`"
        },
        "publicId": "SNYK-CC-K8S-8",
        "msg": "spec.template.spec.containers[varnish].securityContext.readOnlyRootFilesystem",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 16]",
          "spec",
          "template",
          "spec",
          "containers[varnish]",
          "securityContext",
          "readOnlyRootFilesystem"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-9",
        "title": "Container is running without privilege escalation control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-9",
        "isGeneratedByCustomRule": false,
        "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
        "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
          "terraform": "Set `spec.container.security_context.allow_privilege_escalation` to `false`"
        },
        "lineNumber": 328,
        "iacDescription": {
          "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
          "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`"
        },
        "publicId": "SNYK-CC-K8S-9",
        "msg": "spec.template.spec.containers[varnish].securityContext.allowPrivilegeEscalation",
        "references": [
          "https://www.kernel.org/doc/html/latest/userspace-api/no_new_privs.html"
        ],
        "path": [
          "[DocId: 16]",
          "spec",
          "template",
          "spec",
          "containers[varnish]",
          "securityContext",
          "allowPrivilegeEscalation"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-10",
        "title": "Container or Pod is running without root user control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-10",
        "isGeneratedByCustomRule": false,
        "issue": "Container or Pod is running without root user control",
        "impact": "Container or Pod could be running with full administrative privileges",
        "resolve": "Set `securityContext.runAsNonRoot` to `true`",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsNonRoot` to `true`",
          "terraform": "Set `security_context.run_as_non_root` to `true`"
        },
        "lineNumber": 328,
        "iacDescription": {
          "issue": "Container or Pod is running without root user control",
          "impact": "Container or Pod could be running with full administrative privileges",
          "resolve": "Set `securityContext.runAsNonRoot` to `true`"
        },
        "publicId": "SNYK-CC-K8S-10",
        "msg": "input.spec.template.spec.containers[varnish].securityContext.runAsNonRoot",
        "description": "",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 16]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[varnish]",
          "securityContext",
          "runAsNonRoot"
        ],
        "compliance": []
      }
    ]
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4_workload_stackrox_demo_apps/files/demos/frontend/everything.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4_workload_stackrox_demo_apps/files/demos/frontend/everything.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": false,
    "infrastructureAsCodeIssues": [
      {
        "id": "SNYK-CC-K8S-44",
        "title": "Role or ClusterRole with too wide permissions",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Role",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-44",
        "isGeneratedByCustomRule": false,
        "issue": "The role uses wildcards, which grant the role permissions to the whole cluster",
        "impact": "The use of wildcard rights grants is likely to provide excessive rights to the Kubernetes API. For a ClusterRole this would be considered high severity.",
        "resolve": "Set only the necessary permissions required",
        "remediation": {
          "kubernetes": "Set only the necessary permissions required",
          "terraform": "Remove any wildcards [*] from `rule.verbs` and `rule.resources`"
        },
        "lineNumber": 38,
        "iacDescription": {
          "issue": "The role uses wildcards, which grant the role permissions to the whole cluster",
          "impact": "The use of wildcard rights grants is likely to provide excessive rights to the Kubernetes API. For a ClusterRole this would be considered high severity.",
          "resolve": "Set only the necessary permissions required"
        },
        "publicId": "SNYK-CC-K8S-44",
        "msg": "rules[0].verbs",
        "references": [
          "https://kubernetes.io/docs/reference/access-authn-authz/rbac/"
        ],
        "path": [
          "[DocId: 3]",
          "rules[0]",
          "verbs"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-41",
        "title": "Container is running without liveness probe",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-41",
        "isGeneratedByCustomRule": false,
        "issue": "Liveness probe is not defined",
        "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
        "resolve": "Add `livenessProbe` attribute",
        "remediation": {
          "kubernetes": "Add `livenessProbe` attribute",
          "terraform": "Add `liveness_probe` attribute"
        },
        "lineNumber": 84,
        "iacDescription": {
          "issue": "Liveness probe is not defined",
          "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
          "resolve": "Add `livenessProbe` attribute"
        },
        "publicId": "SNYK-CC-K8S-41",
        "msg": "spec.template.spec.containers[asset-cache].livenessProbe",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/",
          "https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/",
          "https://cloud.google.com/blog/products/gcp/kubernetes-best-practices-setting-up-health-checks-with-readiness-and-liveness-probes"
        ],
        "path": [
          "[DocId: 5]",
          "spec",
          "template",
          "spec",
          "containers[asset-cache]",
          "livenessProbe"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-10",
        "title": "Container or Pod is running without root user control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-10",
        "isGeneratedByCustomRule": false,
        "issue": "Container or Pod is running without root user control",
        "impact": "Container or Pod could be running with full administrative privileges",
        "resolve": "Set `securityContext.runAsNonRoot` to `true`",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsNonRoot` to `true`",
          "terraform": "Set `security_context.run_as_non_root` to `true`"
        },
        "lineNumber": 97,
        "iacDescription": {
          "issue": "Container or Pod is running without root user control",
          "impact": "Container or Pod could be running with full administrative privileges",
          "resolve": "Set `securityContext.runAsNonRoot` to `true`"
        },
        "publicId": "SNYK-CC-K8S-10",
        "msg": "input.spec.template.spec.containers[asset-cache-sidecar].securityContext.runAsNonRoot",
        "description": "",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 5]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[asset-cache-sidecar]",
          "securityContext",
          "runAsNonRoot"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-6",
        "title": "Container does not drop all default capabilities",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-6",
        "isGeneratedByCustomRule": false,
        "issue": "All default capabilities are not explicitly dropped",
        "impact": "Containers are running with potentially unnecessary privileges",
        "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
        "remediation": {
          "kubernetes": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
          "terraform": "Add `ALL` to `spec.container.security_context.capabilities.drop` list, and add only required capabilities to `spec.container.security_context.capabilities.add`, ensuring it also does not contain `ALL`"
        },
        "lineNumber": 97,
        "iacDescription": {
          "issue": "All default capabilities are not explicitly dropped",
          "impact": "Containers are running with potentially unnecessary privileges",
          "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`"
        },
        "publicId": "SNYK-CC-K8S-6",
        "msg": "input.spec.template.spec.containers[asset-cache-sidecar].securityContext.capabilities.drop",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
          "https://linux-audit.com/linux-capabilities-hardening-linux-binaries-by-removing-setuid/"
        ],
        "path": [
          "[DocId: 5]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[asset-cache-sidecar]",
          "securityContext",
          "capabilities",
          "drop"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-4",
        "title": "Container is running without memory limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-4",
        "isGeneratedByCustomRule": false,
        "issue": "Memory limit is not defined",
        "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
        "resolve": "Set `resources.limits.memory` value",
        "remediation": {
          "kubernetes": "Set `resources.limits.memory` value",
          "terraform": "Set `resources.limits.memory` value"
        },
        "lineNumber": 84,
        "iacDescription": {
          "issue": "Memory limit is not defined",
          "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
          "resolve": "Set `resources.limits.memory` value"
        },
        "publicId": "SNYK-CC-K8S-4",
        "msg": "input.spec.template.spec.containers[asset-cache].resources.limits.memory",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/memory-default-namespace/"
        ],
        "path": [
          "[DocId: 5]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[asset-cache]",
          "resources",
          "limits",
          "memory"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-41",
        "title": "Container is running without liveness probe",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-41",
        "isGeneratedByCustomRule": false,
        "issue": "Liveness probe is not defined",
        "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
        "resolve": "Add `livenessProbe` attribute",
        "remediation": {
          "kubernetes": "Add `livenessProbe` attribute",
          "terraform": "Add `liveness_probe` attribute"
        },
        "lineNumber": 93,
        "iacDescription": {
          "issue": "Liveness probe is not defined",
          "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
          "resolve": "Add `livenessProbe` attribute"
        },
        "publicId": "SNYK-CC-K8S-41",
        "msg": "spec.template.spec.containers[asset-cache-sidecar].livenessProbe",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/",
          "https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/",
          "https://cloud.google.com/blog/products/gcp/kubernetes-best-practices-setting-up-health-checks-with-readiness-and-liveness-probes"
        ],
        "path": [
          "[DocId: 5]",
          "spec",
          "template",
          "spec",
          "containers[asset-cache-sidecar]",
          "livenessProbe"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-11",
        "title": "Container's or Pod's  UID could clash with host's UID",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-11",
        "isGeneratedByCustomRule": false,
        "issue": "`runAsUser` value is set to low UID",
        "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
        "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
          "terraform": "Set `security_context.run_as_user` value to greater or equal than 10'000"
        },
        "lineNumber": 90,
        "iacDescription": {
          "issue": "`runAsUser` value is set to low UID",
          "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
          "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence"
        },
        "publicId": "SNYK-CC-K8S-11",
        "msg": "input.spec.template.spec.containers[asset-cache].securityContext.runAsUser",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container",
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod",
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 5]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[asset-cache]",
          "securityContext",
          "runAsUser"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-5",
        "title": "Container has no CPU limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-5",
        "isGeneratedByCustomRule": false,
        "issue": "Container has no CPU limit",
        "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
        "resolve": "Add `resources.limits.cpu` field with required CPU limit value",
        "remediation": {
          "kubernetes": "Add `resources.limits.cpu` field with required CPU limit value",
          "terraform": "Add `spec.container.resources.limits.cpu` field with required CPU limit value"
        },
        "lineNumber": 84,
        "iacDescription": {
          "issue": "Container has no CPU limit",
          "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
          "resolve": "Add `resources.limits.cpu` field with required CPU limit value"
        },
        "publicId": "SNYK-CC-K8S-5",
        "msg": "input.spec.template.spec.containers[asset-cache].resources.limits.cpu",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-cpu-resource/",
          "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/cpu-default-namespace/",
          "https://github.com/kubernetes/design-proposals-archive/blob/8da1442ea29adccea40693357d04727127e045ed/node/resource-qos.md#compressible-resource-guaranteess"
        ],
        "path": [
          "[DocId: 5]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[asset-cache]",
          "resources",
          "limits",
          "cpu"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-4",
        "title": "Container is running without memory limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-4",
        "isGeneratedByCustomRule": false,
        "issue": "Memory limit is not defined",
        "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
        "resolve": "Set `resources.limits.memory` value",
        "remediation": {
          "kubernetes": "Set `resources.limits.memory` value",
          "terraform": "Set `resources.limits.memory` value"
        },
        "lineNumber": 93,
        "iacDescription": {
          "issue": "Memory limit is not defined",
          "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
          "resolve": "Set `resources.limits.memory` value"
        },
        "publicId": "SNYK-CC-K8S-4",
        "msg": "input.spec.template.spec.containers[asset-cache-sidecar].resources.limits.memory",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/memory-default-namespace/"
        ],
        "path": [
          "[DocId: 5]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[asset-cache-sidecar]",
          "resources",
          "limits",
          "memory"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-9",
        "title": "Container is running without privilege escalation control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-9",
        "isGeneratedByCustomRule": false,
        "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
        "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
          "terraform": "Set `spec.container.security_context.allow_privilege_escalation` to `false`"
        },
        "lineNumber": 97,
        "iacDescription": {
          "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
          "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`"
        },
        "publicId": "SNYK-CC-K8S-9",
        "msg": "spec.template.spec.containers[asset-cache-sidecar].securityContext.allowPrivilegeEscalation",
        "references": [
          "https://www.kernel.org/doc/html/latest/userspace-api/no_new_privs.html"
        ],
        "path": [
          "[DocId: 5]",
          "spec",
          "template",
          "spec",
          "containers[asset-cache-sidecar]",
          "securityContext",
          "allowPrivilegeEscalation"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-11",
        "title": "Container's or Pod's  UID could clash with host's UID",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-11",
        "isGeneratedByCustomRule": false,
        "issue": "`runAsUser` value is set to low UID",
        "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
        "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
          "terraform": "Set `security_context.run_as_user` value to greater or equal than 10'000"
        },
        "lineNumber": 97,
        "iacDescription": {
          "issue": "`runAsUser` value is set to low UID",
          "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
          "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence"
        },
        "publicId": "SNYK-CC-K8S-11",
        "msg": "input.spec.template.spec.containers[asset-cache-sidecar].securityContext.runAsUser",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container",
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod",
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 5]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[asset-cache-sidecar]",
          "securityContext",
          "runAsUser"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-8",
        "title": "Container is running with writable root filesystem",
        "severity": "low",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-8",
        "isGeneratedByCustomRule": false,
        "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
        "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
          "terraform": "Set `security_context.read_only_root_filesystem` to `true`"
        },
        "lineNumber": 90,
        "iacDescription": {
          "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
          "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`"
        },
        "publicId": "SNYK-CC-K8S-8",
        "msg": "spec.template.spec.containers[asset-cache].securityContext.readOnlyRootFilesystem",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 5]",
          "spec",
          "template",
          "spec",
          "containers[asset-cache]",
          "securityContext",
          "readOnlyRootFilesystem"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-5",
        "title": "Container has no CPU limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-5",
        "isGeneratedByCustomRule": false,
        "issue": "Container has no CPU limit",
        "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
        "resolve": "Add `resources.limits.cpu` field with required CPU limit value",
        "remediation": {
          "kubernetes": "Add `resources.limits.cpu` field with required CPU limit value",
          "terraform": "Add `spec.container.resources.limits.cpu` field with required CPU limit value"
        },
        "lineNumber": 93,
        "iacDescription": {
          "issue": "Container has no CPU limit",
          "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
          "resolve": "Add `resources.limits.cpu` field with required CPU limit value"
        },
        "publicId": "SNYK-CC-K8S-5",
        "msg": "input.spec.template.spec.containers[asset-cache-sidecar].resources.limits.cpu",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-cpu-resource/",
          "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/cpu-default-namespace/",
          "https://github.com/kubernetes/design-proposals-archive/blob/8da1442ea29adccea40693357d04727127e045ed/node/resource-qos.md#compressible-resource-guaranteess"
        ],
        "path": [
          "[DocId: 5]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[asset-cache-sidecar]",
          "resources",
          "limits",
          "cpu"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-9",
        "title": "Container is running without privilege escalation control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-9",
        "isGeneratedByCustomRule": false,
        "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
        "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
          "terraform": "Set `spec.container.security_context.allow_privilege_escalation` to `false`"
        },
        "lineNumber": 90,
        "iacDescription": {
          "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
          "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`"
        },
        "publicId": "SNYK-CC-K8S-9",
        "msg": "spec.template.spec.containers[asset-cache].securityContext.allowPrivilegeEscalation",
        "references": [
          "https://www.kernel.org/doc/html/latest/userspace-api/no_new_privs.html"
        ],
        "path": [
          "[DocId: 5]",
          "spec",
          "template",
          "spec",
          "containers[asset-cache]",
          "securityContext",
          "allowPrivilegeEscalation"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-8",
        "title": "Container is running with writable root filesystem",
        "severity": "low",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-8",
        "isGeneratedByCustomRule": false,
        "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
        "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
          "terraform": "Set `security_context.read_only_root_filesystem` to `true`"
        },
        "lineNumber": 97,
        "iacDescription": {
          "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
          "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`"
        },
        "publicId": "SNYK-CC-K8S-8",
        "msg": "spec.template.spec.containers[asset-cache-sidecar].securityContext.readOnlyRootFilesystem",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 5]",
          "spec",
          "template",
          "spec",
          "containers[asset-cache-sidecar]",
          "securityContext",
          "readOnlyRootFilesystem"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-10",
        "title": "Container or Pod is running without root user control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-10",
        "isGeneratedByCustomRule": false,
        "issue": "Container or Pod is running without root user control",
        "impact": "Container or Pod could be running with full administrative privileges",
        "resolve": "Set `securityContext.runAsNonRoot` to `true`",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsNonRoot` to `true`",
          "terraform": "Set `security_context.run_as_non_root` to `true`"
        },
        "lineNumber": 90,
        "iacDescription": {
          "issue": "Container or Pod is running without root user control",
          "impact": "Container or Pod could be running with full administrative privileges",
          "resolve": "Set `securityContext.runAsNonRoot` to `true`"
        },
        "publicId": "SNYK-CC-K8S-10",
        "msg": "input.spec.template.spec.containers[asset-cache].securityContext.runAsNonRoot",
        "description": "",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 5]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[asset-cache]",
          "securityContext",
          "runAsNonRoot"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-6",
        "title": "Container does not drop all default capabilities",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-6",
        "isGeneratedByCustomRule": false,
        "issue": "All default capabilities are not explicitly dropped",
        "impact": "Containers are running with potentially unnecessary privileges",
        "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
        "remediation": {
          "kubernetes": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
          "terraform": "Add `ALL` to `spec.container.security_context.capabilities.drop` list, and add only required capabilities to `spec.container.security_context.capabilities.add`, ensuring it also does not contain `ALL`"
        },
        "lineNumber": 92,
        "iacDescription": {
          "issue": "All default capabilities are not explicitly dropped",
          "impact": "Containers are running with potentially unnecessary privileges",
          "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`"
        },
        "publicId": "SNYK-CC-K8S-6",
        "msg": "input.spec.template.spec.containers[asset-cache].securityContext.capabilities.drop",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
          "https://linux-audit.com/linux-capabilities-hardening-linux-binaries-by-removing-setuid/"
        ],
        "path": [
          "[DocId: 5]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[asset-cache]",
          "securityContext",
          "capabilities",
          "drop"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-8",
        "title": "Container is running with writable root filesystem",
        "severity": "low",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-8",
        "isGeneratedByCustomRule": false,
        "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
        "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
          "terraform": "Set `security_context.read_only_root_filesystem` to `true`"
        },
        "lineNumber": 148,
        "iacDescription": {
          "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
          "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`"
        },
        "publicId": "SNYK-CC-K8S-8",
        "msg": "spec.template.spec.containers[tls-proxy].securityContext.readOnlyRootFilesystem",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 7]",
          "spec",
          "template",
          "spec",
          "containers[tls-proxy]",
          "securityContext",
          "readOnlyRootFilesystem"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-6",
        "title": "Container does not drop all default capabilities",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-6",
        "isGeneratedByCustomRule": false,
        "issue": "All default capabilities are not explicitly dropped",
        "impact": "Containers are running with potentially unnecessary privileges",
        "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
        "remediation": {
          "kubernetes": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
          "terraform": "Add `ALL` to `spec.container.security_context.capabilities.drop` list, and add only required capabilities to `spec.container.security_context.capabilities.add`, ensuring it also does not contain `ALL`"
        },
        "lineNumber": 148,
        "iacDescription": {
          "issue": "All default capabilities are not explicitly dropped",
          "impact": "Containers are running with potentially unnecessary privileges",
          "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`"
        },
        "publicId": "SNYK-CC-K8S-6",
        "msg": "input.spec.template.spec.containers[tls-proxy].securityContext.capabilities.drop",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
          "https://linux-audit.com/linux-capabilities-hardening-linux-binaries-by-removing-setuid/"
        ],
        "path": [
          "[DocId: 7]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[tls-proxy]",
          "securityContext",
          "capabilities",
          "drop"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-11",
        "title": "Container's or Pod's  UID could clash with host's UID",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-11",
        "isGeneratedByCustomRule": false,
        "issue": "`runAsUser` value is set to low UID",
        "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
        "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
          "terraform": "Set `security_context.run_as_user` value to greater or equal than 10'000"
        },
        "lineNumber": 148,
        "iacDescription": {
          "issue": "`runAsUser` value is set to low UID",
          "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
          "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence"
        },
        "publicId": "SNYK-CC-K8S-11",
        "msg": "input.spec.template.spec.containers[tls-proxy].securityContext.runAsUser",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container",
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod",
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 7]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[tls-proxy]",
          "securityContext",
          "runAsUser"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-5",
        "title": "Container has no CPU limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-5",
        "isGeneratedByCustomRule": false,
        "issue": "Container has no CPU limit",
        "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
        "resolve": "Add `resources.limits.cpu` field with required CPU limit value",
        "remediation": {
          "kubernetes": "Add `resources.limits.cpu` field with required CPU limit value",
          "terraform": "Add `spec.container.resources.limits.cpu` field with required CPU limit value"
        },
        "lineNumber": 148,
        "iacDescription": {
          "issue": "Container has no CPU limit",
          "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
          "resolve": "Add `resources.limits.cpu` field with required CPU limit value"
        },
        "publicId": "SNYK-CC-K8S-5",
        "msg": "input.spec.template.spec.containers[tls-proxy].resources.limits.cpu",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-cpu-resource/",
          "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/cpu-default-namespace/",
          "https://github.com/kubernetes/design-proposals-archive/blob/8da1442ea29adccea40693357d04727127e045ed/node/resource-qos.md#compressible-resource-guaranteess"
        ],
        "path": [
          "[DocId: 7]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[tls-proxy]",
          "resources",
          "limits",
          "cpu"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-10",
        "title": "Container or Pod is running without root user control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-10",
        "isGeneratedByCustomRule": false,
        "issue": "Container or Pod is running without root user control",
        "impact": "Container or Pod could be running with full administrative privileges",
        "resolve": "Set `securityContext.runAsNonRoot` to `true`",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsNonRoot` to `true`",
          "terraform": "Set `security_context.run_as_non_root` to `true`"
        },
        "lineNumber": 148,
        "iacDescription": {
          "issue": "Container or Pod is running without root user control",
          "impact": "Container or Pod could be running with full administrative privileges",
          "resolve": "Set `securityContext.runAsNonRoot` to `true`"
        },
        "publicId": "SNYK-CC-K8S-10",
        "msg": "input.spec.template.spec.containers[tls-proxy].securityContext.runAsNonRoot",
        "description": "",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 7]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[tls-proxy]",
          "securityContext",
          "runAsNonRoot"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-9",
        "title": "Container is running without privilege escalation control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-9",
        "isGeneratedByCustomRule": false,
        "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
        "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
          "terraform": "Set `spec.container.security_context.allow_privilege_escalation` to `false`"
        },
        "lineNumber": 148,
        "iacDescription": {
          "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
          "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`"
        },
        "publicId": "SNYK-CC-K8S-9",
        "msg": "spec.template.spec.containers[tls-proxy].securityContext.allowPrivilegeEscalation",
        "references": [
          "https://www.kernel.org/doc/html/latest/userspace-api/no_new_privs.html"
        ],
        "path": [
          "[DocId: 7]",
          "spec",
          "template",
          "spec",
          "containers[tls-proxy]",
          "securityContext",
          "allowPrivilegeEscalation"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-41",
        "title": "Container is running without liveness probe",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-41",
        "isGeneratedByCustomRule": false,
        "issue": "Liveness probe is not defined",
        "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
        "resolve": "Add `livenessProbe` attribute",
        "remediation": {
          "kubernetes": "Add `livenessProbe` attribute",
          "terraform": "Add `liveness_probe` attribute"
        },
        "lineNumber": 148,
        "iacDescription": {
          "issue": "Liveness probe is not defined",
          "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
          "resolve": "Add `livenessProbe` attribute"
        },
        "publicId": "SNYK-CC-K8S-41",
        "msg": "spec.template.spec.containers[tls-proxy].livenessProbe",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/",
          "https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/",
          "https://cloud.google.com/blog/products/gcp/kubernetes-best-practices-setting-up-health-checks-with-readiness-and-liveness-probes"
        ],
        "path": [
          "[DocId: 7]",
          "spec",
          "template",
          "spec",
          "containers[tls-proxy]",
          "livenessProbe"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-4",
        "title": "Container is running without memory limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-4",
        "isGeneratedByCustomRule": false,
        "issue": "Memory limit is not defined",
        "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
        "resolve": "Set `resources.limits.memory` value",
        "remediation": {
          "kubernetes": "Set `resources.limits.memory` value",
          "terraform": "Set `resources.limits.memory` value"
        },
        "lineNumber": 148,
        "iacDescription": {
          "issue": "Memory limit is not defined",
          "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
          "resolve": "Set `resources.limits.memory` value"
        },
        "publicId": "SNYK-CC-K8S-4",
        "msg": "input.spec.template.spec.containers[tls-proxy].resources.limits.memory",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/memory-default-namespace/"
        ],
        "path": [
          "[DocId: 7]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[tls-proxy]",
          "resources",
          "limits",
          "memory"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-8",
        "title": "Container is running with writable root filesystem",
        "severity": "low",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-8",
        "isGeneratedByCustomRule": false,
        "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
        "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
          "terraform": "Set `security_context.read_only_root_filesystem` to `true`"
        },
        "lineNumber": 212,
        "iacDescription": {
          "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
          "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`"
        },
        "publicId": "SNYK-CC-K8S-8",
        "msg": "spec.template.spec.containers[wordpress].securityContext.readOnlyRootFilesystem",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 9]",
          "spec",
          "template",
          "spec",
          "containers[wordpress]",
          "securityContext",
          "readOnlyRootFilesystem"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-9",
        "title": "Container is running without privilege escalation control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-9",
        "isGeneratedByCustomRule": false,
        "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
        "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
          "terraform": "Set `spec.container.security_context.allow_privilege_escalation` to `false`"
        },
        "lineNumber": 212,
        "iacDescription": {
          "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
          "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`"
        },
        "publicId": "SNYK-CC-K8S-9",
        "msg": "spec.template.spec.containers[wordpress].securityContext.allowPrivilegeEscalation",
        "references": [
          "https://www.kernel.org/doc/html/latest/userspace-api/no_new_privs.html"
        ],
        "path": [
          "[DocId: 9]",
          "spec",
          "template",
          "spec",
          "containers[wordpress]",
          "securityContext",
          "allowPrivilegeEscalation"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-10",
        "title": "Container or Pod is running without root user control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-10",
        "isGeneratedByCustomRule": false,
        "issue": "Container or Pod is running without root user control",
        "impact": "Container or Pod could be running with full administrative privileges",
        "resolve": "Set `securityContext.runAsNonRoot` to `true`",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsNonRoot` to `true`",
          "terraform": "Set `security_context.run_as_non_root` to `true`"
        },
        "lineNumber": 212,
        "iacDescription": {
          "issue": "Container or Pod is running without root user control",
          "impact": "Container or Pod could be running with full administrative privileges",
          "resolve": "Set `securityContext.runAsNonRoot` to `true`"
        },
        "publicId": "SNYK-CC-K8S-10",
        "msg": "input.spec.template.spec.containers[wordpress].securityContext.runAsNonRoot",
        "description": "",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 9]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[wordpress]",
          "securityContext",
          "runAsNonRoot"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-4",
        "title": "Container is running without memory limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-4",
        "isGeneratedByCustomRule": false,
        "issue": "Memory limit is not defined",
        "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
        "resolve": "Set `resources.limits.memory` value",
        "remediation": {
          "kubernetes": "Set `resources.limits.memory` value",
          "terraform": "Set `resources.limits.memory` value"
        },
        "lineNumber": 212,
        "iacDescription": {
          "issue": "Memory limit is not defined",
          "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
          "resolve": "Set `resources.limits.memory` value"
        },
        "publicId": "SNYK-CC-K8S-4",
        "msg": "input.spec.template.spec.containers[wordpress].resources.limits.memory",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/memory-default-namespace/"
        ],
        "path": [
          "[DocId: 9]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[wordpress]",
          "resources",
          "limits",
          "memory"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-11",
        "title": "Container's or Pod's  UID could clash with host's UID",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-11",
        "isGeneratedByCustomRule": false,
        "issue": "`runAsUser` value is set to low UID",
        "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
        "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
          "terraform": "Set `security_context.run_as_user` value to greater or equal than 10'000"
        },
        "lineNumber": 212,
        "iacDescription": {
          "issue": "`runAsUser` value is set to low UID",
          "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
          "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence"
        },
        "publicId": "SNYK-CC-K8S-11",
        "msg": "input.spec.template.spec.containers[wordpress].securityContext.runAsUser",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container",
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod",
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 9]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[wordpress]",
          "securityContext",
          "runAsUser"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-5",
        "title": "Container has no CPU limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-5",
        "isGeneratedByCustomRule": false,
        "issue": "Container has no CPU limit",
        "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
        "resolve": "Add `resources.limits.cpu` field with required CPU limit value",
        "remediation": {
          "kubernetes": "Add `resources.limits.cpu` field with required CPU limit value",
          "terraform": "Add `spec.container.resources.limits.cpu` field with required CPU limit value"
        },
        "lineNumber": 212,
        "iacDescription": {
          "issue": "Container has no CPU limit",
          "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
          "resolve": "Add `resources.limits.cpu` field with required CPU limit value"
        },
        "publicId": "SNYK-CC-K8S-5",
        "msg": "input.spec.template.spec.containers[wordpress].resources.limits.cpu",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-cpu-resource/",
          "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/cpu-default-namespace/",
          "https://github.com/kubernetes/design-proposals-archive/blob/8da1442ea29adccea40693357d04727127e045ed/node/resource-qos.md#compressible-resource-guaranteess"
        ],
        "path": [
          "[DocId: 9]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[wordpress]",
          "resources",
          "limits",
          "cpu"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-41",
        "title": "Container is running without liveness probe",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-41",
        "isGeneratedByCustomRule": false,
        "issue": "Liveness probe is not defined",
        "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
        "resolve": "Add `livenessProbe` attribute",
        "remediation": {
          "kubernetes": "Add `livenessProbe` attribute",
          "terraform": "Add `liveness_probe` attribute"
        },
        "lineNumber": 212,
        "iacDescription": {
          "issue": "Liveness probe is not defined",
          "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
          "resolve": "Add `livenessProbe` attribute"
        },
        "publicId": "SNYK-CC-K8S-41",
        "msg": "spec.template.spec.containers[wordpress].livenessProbe",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/",
          "https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/",
          "https://cloud.google.com/blog/products/gcp/kubernetes-best-practices-setting-up-health-checks-with-readiness-and-liveness-probes"
        ],
        "path": [
          "[DocId: 9]",
          "spec",
          "template",
          "spec",
          "containers[wordpress]",
          "livenessProbe"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-6",
        "title": "Container does not drop all default capabilities",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-6",
        "isGeneratedByCustomRule": false,
        "issue": "All default capabilities are not explicitly dropped",
        "impact": "Containers are running with potentially unnecessary privileges",
        "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
        "remediation": {
          "kubernetes": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
          "terraform": "Add `ALL` to `spec.container.security_context.capabilities.drop` list, and add only required capabilities to `spec.container.security_context.capabilities.add`, ensuring it also does not contain `ALL`"
        },
        "lineNumber": 212,
        "iacDescription": {
          "issue": "All default capabilities are not explicitly dropped",
          "impact": "Containers are running with potentially unnecessary privileges",
          "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`"
        },
        "publicId": "SNYK-CC-K8S-6",
        "msg": "input.spec.template.spec.containers[wordpress].securityContext.capabilities.drop",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
          "https://linux-audit.com/linux-capabilities-hardening-linux-binaries-by-removing-setuid/"
        ],
        "path": [
          "[DocId: 9]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[wordpress]",
          "securityContext",
          "capabilities",
          "drop"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-4",
        "title": "Container is running without memory limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-4",
        "isGeneratedByCustomRule": false,
        "issue": "Memory limit is not defined",
        "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
        "resolve": "Set `resources.limits.memory` value",
        "remediation": {
          "kubernetes": "Set `resources.limits.memory` value",
          "terraform": "Set `resources.limits.memory` value"
        },
        "lineNumber": 260,
        "iacDescription": {
          "issue": "Memory limit is not defined",
          "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
          "resolve": "Set `resources.limits.memory` value"
        },
        "publicId": "SNYK-CC-K8S-4",
        "msg": "input.spec.template.spec.containers[monitor].resources.limits.memory",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/memory-default-namespace/"
        ],
        "path": [
          "[DocId: 11]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[monitor]",
          "resources",
          "limits",
          "memory"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-41",
        "title": "Container is running without liveness probe",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-41",
        "isGeneratedByCustomRule": false,
        "issue": "Liveness probe is not defined",
        "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
        "resolve": "Add `livenessProbe` attribute",
        "remediation": {
          "kubernetes": "Add `livenessProbe` attribute",
          "terraform": "Add `liveness_probe` attribute"
        },
        "lineNumber": 260,
        "iacDescription": {
          "issue": "Liveness probe is not defined",
          "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
          "resolve": "Add `livenessProbe` attribute"
        },
        "publicId": "SNYK-CC-K8S-41",
        "msg": "spec.template.spec.containers[monitor].livenessProbe",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/",
          "https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/",
          "https://cloud.google.com/blog/products/gcp/kubernetes-best-practices-setting-up-health-checks-with-readiness-and-liveness-probes"
        ],
        "path": [
          "[DocId: 11]",
          "spec",
          "template",
          "spec",
          "containers[monitor]",
          "livenessProbe"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-5",
        "title": "Container has no CPU limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-5",
        "isGeneratedByCustomRule": false,
        "issue": "Container has no CPU limit",
        "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
        "resolve": "Add `resources.limits.cpu` field with required CPU limit value",
        "remediation": {
          "kubernetes": "Add `resources.limits.cpu` field with required CPU limit value",
          "terraform": "Add `spec.container.resources.limits.cpu` field with required CPU limit value"
        },
        "lineNumber": 260,
        "iacDescription": {
          "issue": "Container has no CPU limit",
          "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
          "resolve": "Add `resources.limits.cpu` field with required CPU limit value"
        },
        "publicId": "SNYK-CC-K8S-5",
        "msg": "input.spec.template.spec.containers[monitor].resources.limits.cpu",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-cpu-resource/",
          "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/cpu-default-namespace/",
          "https://github.com/kubernetes/design-proposals-archive/blob/8da1442ea29adccea40693357d04727127e045ed/node/resource-qos.md#compressible-resource-guaranteess"
        ],
        "path": [
          "[DocId: 11]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[monitor]",
          "resources",
          "limits",
          "cpu"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-9",
        "title": "Container is running without privilege escalation control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-9",
        "isGeneratedByCustomRule": false,
        "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
        "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
          "terraform": "Set `spec.container.security_context.allow_privilege_escalation` to `false`"
        },
        "lineNumber": 260,
        "iacDescription": {
          "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
          "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`"
        },
        "publicId": "SNYK-CC-K8S-9",
        "msg": "spec.template.spec.containers[monitor].securityContext.allowPrivilegeEscalation",
        "references": [
          "https://www.kernel.org/doc/html/latest/userspace-api/no_new_privs.html"
        ],
        "path": [
          "[DocId: 11]",
          "spec",
          "template",
          "spec",
          "containers[monitor]",
          "securityContext",
          "allowPrivilegeEscalation"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-11",
        "title": "Container's or Pod's  UID could clash with host's UID",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-11",
        "isGeneratedByCustomRule": false,
        "issue": "`runAsUser` value is set to low UID",
        "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
        "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
          "terraform": "Set `security_context.run_as_user` value to greater or equal than 10'000"
        },
        "lineNumber": 260,
        "iacDescription": {
          "issue": "`runAsUser` value is set to low UID",
          "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
          "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence"
        },
        "publicId": "SNYK-CC-K8S-11",
        "msg": "input.spec.template.spec.containers[monitor].securityContext.runAsUser",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container",
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod",
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 11]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[monitor]",
          "securityContext",
          "runAsUser"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-10",
        "title": "Container or Pod is running without root user control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-10",
        "isGeneratedByCustomRule": false,
        "issue": "Container or Pod is running without root user control",
        "impact": "Container or Pod could be running with full administrative privileges",
        "resolve": "Set `securityContext.runAsNonRoot` to `true`",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsNonRoot` to `true`",
          "terraform": "Set `security_context.run_as_non_root` to `true`"
        },
        "lineNumber": 260,
        "iacDescription": {
          "issue": "Container or Pod is running without root user control",
          "impact": "Container or Pod could be running with full administrative privileges",
          "resolve": "Set `securityContext.runAsNonRoot` to `true`"
        },
        "publicId": "SNYK-CC-K8S-10",
        "msg": "input.spec.template.spec.containers[monitor].securityContext.runAsNonRoot",
        "description": "",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 11]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[monitor]",
          "securityContext",
          "runAsNonRoot"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-6",
        "title": "Container does not drop all default capabilities",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-6",
        "isGeneratedByCustomRule": false,
        "issue": "All default capabilities are not explicitly dropped",
        "impact": "Containers are running with potentially unnecessary privileges",
        "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
        "remediation": {
          "kubernetes": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
          "terraform": "Add `ALL` to `spec.container.security_context.capabilities.drop` list, and add only required capabilities to `spec.container.security_context.capabilities.add`, ensuring it also does not contain `ALL`"
        },
        "lineNumber": 260,
        "iacDescription": {
          "issue": "All default capabilities are not explicitly dropped",
          "impact": "Containers are running with potentially unnecessary privileges",
          "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`"
        },
        "publicId": "SNYK-CC-K8S-6",
        "msg": "input.spec.template.spec.containers[monitor].securityContext.capabilities.drop",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
          "https://linux-audit.com/linux-capabilities-hardening-linux-binaries-by-removing-setuid/"
        ],
        "path": [
          "[DocId: 11]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[monitor]",
          "securityContext",
          "capabilities",
          "drop"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-8",
        "title": "Container is running with writable root filesystem",
        "severity": "low",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-8",
        "isGeneratedByCustomRule": false,
        "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
        "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
          "terraform": "Set `security_context.read_only_root_filesystem` to `true`"
        },
        "lineNumber": 260,
        "iacDescription": {
          "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
          "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`"
        },
        "publicId": "SNYK-CC-K8S-8",
        "msg": "spec.template.spec.containers[monitor].securityContext.readOnlyRootFilesystem",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 11]",
          "spec",
          "template",
          "spec",
          "containers[monitor]",
          "securityContext",
          "readOnlyRootFilesystem"
        ],
        "compliance": []
      }
    ]
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4_workload_stackrox_demo_apps/files/demos/medical/everything.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4_workload_stackrox_demo_apps/files/demos/medical/everything.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": false,
    "infrastructureAsCodeIssues": [
      {
        "id": "SNYK-CC-K8S-4",
        "title": "Container is running without memory limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-4",
        "isGeneratedByCustomRule": false,
        "issue": "Memory limit is not defined",
        "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
        "resolve": "Set `resources.limits.memory` value",
        "remediation": {
          "kubernetes": "Set `resources.limits.memory` value",
          "terraform": "Set `resources.limits.memory` value"
        },
        "lineNumber": 32,
        "iacDescription": {
          "issue": "Memory limit is not defined",
          "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
          "resolve": "Set `resources.limits.memory` value"
        },
        "publicId": "SNYK-CC-K8S-4",
        "msg": "input.spec.template.spec.containers[reporting].resources.limits.memory",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/memory-default-namespace/"
        ],
        "path": [
          "[DocId: 1]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[reporting]",
          "resources",
          "limits",
          "memory"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-9",
        "title": "Container is running without privilege escalation control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-9",
        "isGeneratedByCustomRule": false,
        "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
        "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
          "terraform": "Set `spec.container.security_context.allow_privilege_escalation` to `false`"
        },
        "lineNumber": 32,
        "iacDescription": {
          "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
          "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`"
        },
        "publicId": "SNYK-CC-K8S-9",
        "msg": "spec.template.spec.containers[reporting].securityContext.allowPrivilegeEscalation",
        "references": [
          "https://www.kernel.org/doc/html/latest/userspace-api/no_new_privs.html"
        ],
        "path": [
          "[DocId: 1]",
          "spec",
          "template",
          "spec",
          "containers[reporting]",
          "securityContext",
          "allowPrivilegeEscalation"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-41",
        "title": "Container is running without liveness probe",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-41",
        "isGeneratedByCustomRule": false,
        "issue": "Liveness probe is not defined",
        "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
        "resolve": "Add `livenessProbe` attribute",
        "remediation": {
          "kubernetes": "Add `livenessProbe` attribute",
          "terraform": "Add `liveness_probe` attribute"
        },
        "lineNumber": 32,
        "iacDescription": {
          "issue": "Liveness probe is not defined",
          "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
          "resolve": "Add `livenessProbe` attribute"
        },
        "publicId": "SNYK-CC-K8S-41",
        "msg": "spec.template.spec.containers[reporting].livenessProbe",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/",
          "https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/",
          "https://cloud.google.com/blog/products/gcp/kubernetes-best-practices-setting-up-health-checks-with-readiness-and-liveness-probes"
        ],
        "path": [
          "[DocId: 1]",
          "spec",
          "template",
          "spec",
          "containers[reporting]",
          "livenessProbe"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-5",
        "title": "Container has no CPU limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-5",
        "isGeneratedByCustomRule": false,
        "issue": "Container has no CPU limit",
        "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
        "resolve": "Add `resources.limits.cpu` field with required CPU limit value",
        "remediation": {
          "kubernetes": "Add `resources.limits.cpu` field with required CPU limit value",
          "terraform": "Add `spec.container.resources.limits.cpu` field with required CPU limit value"
        },
        "lineNumber": 32,
        "iacDescription": {
          "issue": "Container has no CPU limit",
          "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
          "resolve": "Add `resources.limits.cpu` field with required CPU limit value"
        },
        "publicId": "SNYK-CC-K8S-5",
        "msg": "input.spec.template.spec.containers[reporting].resources.limits.cpu",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-cpu-resource/",
          "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/cpu-default-namespace/",
          "https://github.com/kubernetes/design-proposals-archive/blob/8da1442ea29adccea40693357d04727127e045ed/node/resource-qos.md#compressible-resource-guaranteess"
        ],
        "path": [
          "[DocId: 1]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[reporting]",
          "resources",
          "limits",
          "cpu"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-11",
        "title": "Container's or Pod's  UID could clash with host's UID",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-11",
        "isGeneratedByCustomRule": false,
        "issue": "`runAsUser` value is set to low UID",
        "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
        "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
          "terraform": "Set `security_context.run_as_user` value to greater or equal than 10'000"
        },
        "lineNumber": 32,
        "iacDescription": {
          "issue": "`runAsUser` value is set to low UID",
          "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
          "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence"
        },
        "publicId": "SNYK-CC-K8S-11",
        "msg": "input.spec.template.spec.containers[reporting].securityContext.runAsUser",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container",
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod",
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 1]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[reporting]",
          "securityContext",
          "runAsUser"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-10",
        "title": "Container or Pod is running without root user control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-10",
        "isGeneratedByCustomRule": false,
        "issue": "Container or Pod is running without root user control",
        "impact": "Container or Pod could be running with full administrative privileges",
        "resolve": "Set `securityContext.runAsNonRoot` to `true`",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsNonRoot` to `true`",
          "terraform": "Set `security_context.run_as_non_root` to `true`"
        },
        "lineNumber": 32,
        "iacDescription": {
          "issue": "Container or Pod is running without root user control",
          "impact": "Container or Pod could be running with full administrative privileges",
          "resolve": "Set `securityContext.runAsNonRoot` to `true`"
        },
        "publicId": "SNYK-CC-K8S-10",
        "msg": "input.spec.template.spec.containers[reporting].securityContext.runAsNonRoot",
        "description": "",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 1]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[reporting]",
          "securityContext",
          "runAsNonRoot"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-8",
        "title": "Container is running with writable root filesystem",
        "severity": "low",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-8",
        "isGeneratedByCustomRule": false,
        "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
        "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
          "terraform": "Set `security_context.read_only_root_filesystem` to `true`"
        },
        "lineNumber": 32,
        "iacDescription": {
          "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
          "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`"
        },
        "publicId": "SNYK-CC-K8S-8",
        "msg": "spec.template.spec.containers[reporting].securityContext.readOnlyRootFilesystem",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 1]",
          "spec",
          "template",
          "spec",
          "containers[reporting]",
          "securityContext",
          "readOnlyRootFilesystem"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-6",
        "title": "Container does not drop all default capabilities",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-6",
        "isGeneratedByCustomRule": false,
        "issue": "All default capabilities are not explicitly dropped",
        "impact": "Containers are running with potentially unnecessary privileges",
        "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
        "remediation": {
          "kubernetes": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
          "terraform": "Add `ALL` to `spec.container.security_context.capabilities.drop` list, and add only required capabilities to `spec.container.security_context.capabilities.add`, ensuring it also does not contain `ALL`"
        },
        "lineNumber": 32,
        "iacDescription": {
          "issue": "All default capabilities are not explicitly dropped",
          "impact": "Containers are running with potentially unnecessary privileges",
          "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`"
        },
        "publicId": "SNYK-CC-K8S-6",
        "msg": "input.spec.template.spec.containers[reporting].securityContext.capabilities.drop",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
          "https://linux-audit.com/linux-capabilities-hardening-linux-binaries-by-removing-setuid/"
        ],
        "path": [
          "[DocId: 1]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[reporting]",
          "securityContext",
          "capabilities",
          "drop"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-11",
        "title": "Container's or Pod's  UID could clash with host's UID",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-11",
        "isGeneratedByCustomRule": false,
        "issue": "`runAsUser` value is set to low UID",
        "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
        "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
          "terraform": "Set `security_context.run_as_user` value to greater or equal than 10'000"
        },
        "lineNumber": 90,
        "iacDescription": {
          "issue": "`runAsUser` value is set to low UID",
          "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
          "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence"
        },
        "publicId": "SNYK-CC-K8S-11",
        "msg": "input.spec.template.spec.containers[patient-db].securityContext.runAsUser",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container",
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod",
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 3]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[patient-db]",
          "securityContext",
          "runAsUser"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-10",
        "title": "Container or Pod is running without root user control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-10",
        "isGeneratedByCustomRule": false,
        "issue": "Container or Pod is running without root user control",
        "impact": "Container or Pod could be running with full administrative privileges",
        "resolve": "Set `securityContext.runAsNonRoot` to `true`",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsNonRoot` to `true`",
          "terraform": "Set `security_context.run_as_non_root` to `true`"
        },
        "lineNumber": 90,
        "iacDescription": {
          "issue": "Container or Pod is running without root user control",
          "impact": "Container or Pod could be running with full administrative privileges",
          "resolve": "Set `securityContext.runAsNonRoot` to `true`"
        },
        "publicId": "SNYK-CC-K8S-10",
        "msg": "input.spec.template.spec.containers[patient-db].securityContext.runAsNonRoot",
        "description": "",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 3]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[patient-db]",
          "securityContext",
          "runAsNonRoot"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-6",
        "title": "Container does not drop all default capabilities",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-6",
        "isGeneratedByCustomRule": false,
        "issue": "All default capabilities are not explicitly dropped",
        "impact": "Containers are running with potentially unnecessary privileges",
        "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
        "remediation": {
          "kubernetes": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
          "terraform": "Add `ALL` to `spec.container.security_context.capabilities.drop` list, and add only required capabilities to `spec.container.security_context.capabilities.add`, ensuring it also does not contain `ALL`"
        },
        "lineNumber": 90,
        "iacDescription": {
          "issue": "All default capabilities are not explicitly dropped",
          "impact": "Containers are running with potentially unnecessary privileges",
          "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`"
        },
        "publicId": "SNYK-CC-K8S-6",
        "msg": "input.spec.template.spec.containers[patient-db].securityContext.capabilities.drop",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
          "https://linux-audit.com/linux-capabilities-hardening-linux-binaries-by-removing-setuid/"
        ],
        "path": [
          "[DocId: 3]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[patient-db]",
          "securityContext",
          "capabilities",
          "drop"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-9",
        "title": "Container is running without privilege escalation control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-9",
        "isGeneratedByCustomRule": false,
        "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
        "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
          "terraform": "Set `spec.container.security_context.allow_privilege_escalation` to `false`"
        },
        "lineNumber": 90,
        "iacDescription": {
          "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
          "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`"
        },
        "publicId": "SNYK-CC-K8S-9",
        "msg": "spec.template.spec.containers[patient-db].securityContext.allowPrivilegeEscalation",
        "references": [
          "https://www.kernel.org/doc/html/latest/userspace-api/no_new_privs.html"
        ],
        "path": [
          "[DocId: 3]",
          "spec",
          "template",
          "spec",
          "containers[patient-db]",
          "securityContext",
          "allowPrivilegeEscalation"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-41",
        "title": "Container is running without liveness probe",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-41",
        "isGeneratedByCustomRule": false,
        "issue": "Liveness probe is not defined",
        "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
        "resolve": "Add `livenessProbe` attribute",
        "remediation": {
          "kubernetes": "Add `livenessProbe` attribute",
          "terraform": "Add `liveness_probe` attribute"
        },
        "lineNumber": 90,
        "iacDescription": {
          "issue": "Liveness probe is not defined",
          "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
          "resolve": "Add `livenessProbe` attribute"
        },
        "publicId": "SNYK-CC-K8S-41",
        "msg": "spec.template.spec.containers[patient-db].livenessProbe",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/",
          "https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/",
          "https://cloud.google.com/blog/products/gcp/kubernetes-best-practices-setting-up-health-checks-with-readiness-and-liveness-probes"
        ],
        "path": [
          "[DocId: 3]",
          "spec",
          "template",
          "spec",
          "containers[patient-db]",
          "livenessProbe"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-4",
        "title": "Container is running without memory limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-4",
        "isGeneratedByCustomRule": false,
        "issue": "Memory limit is not defined",
        "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
        "resolve": "Set `resources.limits.memory` value",
        "remediation": {
          "kubernetes": "Set `resources.limits.memory` value",
          "terraform": "Set `resources.limits.memory` value"
        },
        "lineNumber": 90,
        "iacDescription": {
          "issue": "Memory limit is not defined",
          "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
          "resolve": "Set `resources.limits.memory` value"
        },
        "publicId": "SNYK-CC-K8S-4",
        "msg": "input.spec.template.spec.containers[patient-db].resources.limits.memory",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/memory-default-namespace/"
        ],
        "path": [
          "[DocId: 3]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[patient-db]",
          "resources",
          "limits",
          "memory"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-8",
        "title": "Container is running with writable root filesystem",
        "severity": "low",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-8",
        "isGeneratedByCustomRule": false,
        "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
        "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
          "terraform": "Set `security_context.read_only_root_filesystem` to `true`"
        },
        "lineNumber": 90,
        "iacDescription": {
          "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
          "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`"
        },
        "publicId": "SNYK-CC-K8S-8",
        "msg": "spec.template.spec.containers[patient-db].securityContext.readOnlyRootFilesystem",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 3]",
          "spec",
          "template",
          "spec",
          "containers[patient-db]",
          "securityContext",
          "readOnlyRootFilesystem"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-5",
        "title": "Container has no CPU limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-5",
        "isGeneratedByCustomRule": false,
        "issue": "Container has no CPU limit",
        "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
        "resolve": "Add `resources.limits.cpu` field with required CPU limit value",
        "remediation": {
          "kubernetes": "Add `resources.limits.cpu` field with required CPU limit value",
          "terraform": "Add `spec.container.resources.limits.cpu` field with required CPU limit value"
        },
        "lineNumber": 90,
        "iacDescription": {
          "issue": "Container has no CPU limit",
          "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
          "resolve": "Add `resources.limits.cpu` field with required CPU limit value"
        },
        "publicId": "SNYK-CC-K8S-5",
        "msg": "input.spec.template.spec.containers[patient-db].resources.limits.cpu",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-cpu-resource/",
          "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/cpu-default-namespace/",
          "https://github.com/kubernetes/design-proposals-archive/blob/8da1442ea29adccea40693357d04727127e045ed/node/resource-qos.md#compressible-resource-guaranteess"
        ],
        "path": [
          "[DocId: 3]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[patient-db]",
          "resources",
          "limits",
          "cpu"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-46",
        "title": "RoleBinding or ClusterRoleBinding is using a pre-defined role",
        "severity": "high",
        "isIgnored": false,
        "subType": "ClusterRoleBinding",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-46",
        "isGeneratedByCustomRule": false,
        "issue": "A RoleBinding or ClusterRoleBinding was found using one of the default user facing roles, `cluster-admin`, `admin`, `edit` or `view`.",
        "impact": "Using a default user facing role may be overly permissive. For a ClusterRoleBinding this would be considered high severity.",
        "resolve": "Update roleRef.name to a specific role name with only the necessary permissions",
        "remediation": {
          "kubernetes": "Update roleRef.name to a specific role name with only the necessary permissions"
        },
        "lineNumber": 187,
        "iacDescription": {
          "issue": "A RoleBinding or ClusterRoleBinding was found using one of the default user facing roles, `cluster-admin`, `admin`, `edit` or `view`.",
          "impact": "Using a default user facing role may be overly permissive. For a ClusterRoleBinding this would be considered high severity.",
          "resolve": "Update roleRef.name to a specific role name with only the necessary permissions"
        },
        "publicId": "SNYK-CC-K8S-46",
        "msg": "roleRef.name",
        "references": [
          "https://kubernetes.io/docs/reference/access-authn-authz/rbac/"
        ],
        "path": [
          "[DocId: 7]",
          "roleRef",
          "name"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-5",
        "title": "Container has no CPU limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-5",
        "isGeneratedByCustomRule": false,
        "issue": "Container has no CPU limit",
        "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
        "resolve": "Add `resources.limits.cpu` field with required CPU limit value",
        "remediation": {
          "kubernetes": "Add `resources.limits.cpu` field with required CPU limit value",
          "terraform": "Add `spec.container.resources.limits.cpu` field with required CPU limit value"
        },
        "lineNumber": 214,
        "iacDescription": {
          "issue": "Container has no CPU limit",
          "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
          "resolve": "Add `resources.limits.cpu` field with required CPU limit value"
        },
        "publicId": "SNYK-CC-K8S-5",
        "msg": "input.spec.template.spec.containers[proxy].resources.limits.cpu",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-cpu-resource/",
          "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/cpu-default-namespace/",
          "https://github.com/kubernetes/design-proposals-archive/blob/8da1442ea29adccea40693357d04727127e045ed/node/resource-qos.md#compressible-resource-guaranteess"
        ],
        "path": [
          "[DocId: 8]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[proxy]",
          "resources",
          "limits",
          "cpu"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-9",
        "title": "Container is running without privilege escalation control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-9",
        "isGeneratedByCustomRule": false,
        "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
        "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
          "terraform": "Set `spec.container.security_context.allow_privilege_escalation` to `false`"
        },
        "lineNumber": 215,
        "iacDescription": {
          "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
          "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`"
        },
        "publicId": "SNYK-CC-K8S-9",
        "msg": "spec.template.spec.containers[proxy].securityContext.allowPrivilegeEscalation",
        "references": [
          "https://www.kernel.org/doc/html/latest/userspace-api/no_new_privs.html"
        ],
        "path": [
          "[DocId: 8]",
          "spec",
          "template",
          "spec",
          "containers[proxy]",
          "securityContext",
          "allowPrivilegeEscalation"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-41",
        "title": "Container is running without liveness probe",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-41",
        "isGeneratedByCustomRule": false,
        "issue": "Liveness probe is not defined",
        "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
        "resolve": "Add `livenessProbe` attribute",
        "remediation": {
          "kubernetes": "Add `livenessProbe` attribute",
          "terraform": "Add `liveness_probe` attribute"
        },
        "lineNumber": 214,
        "iacDescription": {
          "issue": "Liveness probe is not defined",
          "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
          "resolve": "Add `livenessProbe` attribute"
        },
        "publicId": "SNYK-CC-K8S-41",
        "msg": "spec.template.spec.containers[proxy].livenessProbe",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/",
          "https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/",
          "https://cloud.google.com/blog/products/gcp/kubernetes-best-practices-setting-up-health-checks-with-readiness-and-liveness-probes"
        ],
        "path": [
          "[DocId: 8]",
          "spec",
          "template",
          "spec",
          "containers[proxy]",
          "livenessProbe"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-8",
        "title": "Container is running with writable root filesystem",
        "severity": "low",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-8",
        "isGeneratedByCustomRule": false,
        "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
        "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
          "terraform": "Set `security_context.read_only_root_filesystem` to `true`"
        },
        "lineNumber": 215,
        "iacDescription": {
          "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
          "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`"
        },
        "publicId": "SNYK-CC-K8S-8",
        "msg": "spec.template.spec.containers[proxy].securityContext.readOnlyRootFilesystem",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 8]",
          "spec",
          "template",
          "spec",
          "containers[proxy]",
          "securityContext",
          "readOnlyRootFilesystem"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-1",
        "title": "Privileged container",
        "severity": "high",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-1",
        "isGeneratedByCustomRule": false,
        "issue": "Container is running in privileged mode",
        "impact": "Compromised container could potentially modify the underlying host\u2019s kernel by loading unauthorized modules (i.e. drivers).",
        "resolve": "Remove `securityContext.privileged` attribute, or set value to `false`",
        "remediation": {
          "kubernetes": "Remove `securityContext.privileged` attribute, or set value to `false`",
          "terraform": "Remove `security_context.privileged` attribute, or set value to `false`"
        },
        "lineNumber": 216,
        "iacDescription": {
          "issue": "Container is running in privileged mode",
          "impact": "Compromised container could potentially modify the underlying host\u2019s kernel by loading unauthorized modules (i.e. drivers).",
          "resolve": "Remove `securityContext.privileged` attribute, or set value to `false`"
        },
        "publicId": "SNYK-CC-K8S-1",
        "msg": "input.spec.template.spec.containers[proxy].securityContext.privileged",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 8]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[proxy]",
          "securityContext",
          "privileged"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-4",
        "title": "Container is running without memory limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-4",
        "isGeneratedByCustomRule": false,
        "issue": "Memory limit is not defined",
        "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
        "resolve": "Set `resources.limits.memory` value",
        "remediation": {
          "kubernetes": "Set `resources.limits.memory` value",
          "terraform": "Set `resources.limits.memory` value"
        },
        "lineNumber": 214,
        "iacDescription": {
          "issue": "Memory limit is not defined",
          "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
          "resolve": "Set `resources.limits.memory` value"
        },
        "publicId": "SNYK-CC-K8S-4",
        "msg": "input.spec.template.spec.containers[proxy].resources.limits.memory",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/memory-default-namespace/"
        ],
        "path": [
          "[DocId: 8]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[proxy]",
          "resources",
          "limits",
          "memory"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-10",
        "title": "Container or Pod is running without root user control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-10",
        "isGeneratedByCustomRule": false,
        "issue": "Container or Pod is running without root user control",
        "impact": "Container or Pod could be running with full administrative privileges",
        "resolve": "Set `securityContext.runAsNonRoot` to `true`",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsNonRoot` to `true`",
          "terraform": "Set `security_context.run_as_non_root` to `true`"
        },
        "lineNumber": 215,
        "iacDescription": {
          "issue": "Container or Pod is running without root user control",
          "impact": "Container or Pod could be running with full administrative privileges",
          "resolve": "Set `securityContext.runAsNonRoot` to `true`"
        },
        "publicId": "SNYK-CC-K8S-10",
        "msg": "input.spec.template.spec.containers[proxy].securityContext.runAsNonRoot",
        "description": "",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 8]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[proxy]",
          "securityContext",
          "runAsNonRoot"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-6",
        "title": "Container does not drop all default capabilities",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-6",
        "isGeneratedByCustomRule": false,
        "issue": "All default capabilities are not explicitly dropped",
        "impact": "Containers are running with potentially unnecessary privileges",
        "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
        "remediation": {
          "kubernetes": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
          "terraform": "Add `ALL` to `spec.container.security_context.capabilities.drop` list, and add only required capabilities to `spec.container.security_context.capabilities.add`, ensuring it also does not contain `ALL`"
        },
        "lineNumber": 215,
        "iacDescription": {
          "issue": "All default capabilities are not explicitly dropped",
          "impact": "Containers are running with potentially unnecessary privileges",
          "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`"
        },
        "publicId": "SNYK-CC-K8S-6",
        "msg": "input.spec.template.spec.containers[proxy].securityContext.capabilities.drop",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
          "https://linux-audit.com/linux-capabilities-hardening-linux-binaries-by-removing-setuid/"
        ],
        "path": [
          "[DocId: 8]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[proxy]",
          "securityContext",
          "capabilities",
          "drop"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-11",
        "title": "Container's or Pod's  UID could clash with host's UID",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-11",
        "isGeneratedByCustomRule": false,
        "issue": "`runAsUser` value is set to low UID",
        "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
        "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
          "terraform": "Set `security_context.run_as_user` value to greater or equal than 10'000"
        },
        "lineNumber": 215,
        "iacDescription": {
          "issue": "`runAsUser` value is set to low UID",
          "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
          "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence"
        },
        "publicId": "SNYK-CC-K8S-11",
        "msg": "input.spec.template.spec.containers[proxy].securityContext.runAsUser",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container",
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod",
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 8]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[proxy]",
          "securityContext",
          "runAsUser"
        ],
        "compliance": []
      }
    ]
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4_workload_stackrox_demo_apps/files/demos/misc/everything.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4_workload_stackrox_demo_apps/files/demos/misc/everything.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": false,
    "infrastructureAsCodeIssues": [
      {
        "id": "SNYK-CC-K8S-46",
        "title": "RoleBinding or ClusterRoleBinding is using a pre-defined role",
        "severity": "high",
        "isIgnored": false,
        "subType": "ClusterRoleBinding",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-46",
        "isGeneratedByCustomRule": false,
        "issue": "A RoleBinding or ClusterRoleBinding was found using one of the default user facing roles, `cluster-admin`, `admin`, `edit` or `view`.",
        "impact": "Using a default user facing role may be overly permissive. For a ClusterRoleBinding this would be considered high severity.",
        "resolve": "Update roleRef.name to a specific role name with only the necessary permissions",
        "remediation": {
          "kubernetes": "Update roleRef.name to a specific role name with only the necessary permissions"
        },
        "lineNumber": 9,
        "iacDescription": {
          "issue": "A RoleBinding or ClusterRoleBinding was found using one of the default user facing roles, `cluster-admin`, `admin`, `edit` or `view`.",
          "impact": "Using a default user facing role may be overly permissive. For a ClusterRoleBinding this would be considered high severity.",
          "resolve": "Update roleRef.name to a specific role name with only the necessary permissions"
        },
        "publicId": "SNYK-CC-K8S-46",
        "msg": "roleRef.name",
        "references": [
          "https://kubernetes.io/docs/reference/access-authn-authz/rbac/"
        ],
        "path": [
          "[DocId: 0]",
          "roleRef",
          "name"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-44",
        "title": "Role or ClusterRole with too wide permissions",
        "severity": "high",
        "isIgnored": false,
        "subType": "ClusterRole",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-44",
        "isGeneratedByCustomRule": false,
        "issue": "The role uses wildcards, which grant the role permissions to the whole cluster",
        "impact": "The use of wildcard rights grants is likely to provide excessive rights to the Kubernetes API. For a ClusterRole this would be considered high severity.",
        "resolve": "Set only the necessary permissions required",
        "remediation": {
          "kubernetes": "Set only the necessary permissions required",
          "terraform": "Remove any wildcards [*] from `rule.verbs` and `rule.resources`"
        },
        "lineNumber": 22,
        "iacDescription": {
          "issue": "The role uses wildcards, which grant the role permissions to the whole cluster",
          "impact": "The use of wildcard rights grants is likely to provide excessive rights to the Kubernetes API. For a ClusterRole this would be considered high severity.",
          "resolve": "Set only the necessary permissions required"
        },
        "publicId": "SNYK-CC-K8S-44",
        "msg": "rules[0].resources",
        "references": [
          "https://kubernetes.io/docs/reference/access-authn-authz/rbac/"
        ],
        "path": [
          "[DocId: 1]",
          "rules[0]",
          "resources"
        ],
        "compliance": []
      }
    ]
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4_workload_stackrox_demo_apps/files/demos/operations/everything.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4_workload_stackrox_demo_apps/files/demos/operations/everything.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": false,
    "infrastructureAsCodeIssues": [
      {
        "id": "SNYK-CC-K8S-34",
        "title": "Container is exposing SSH port",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-34",
        "isGeneratedByCustomRule": false,
        "issue": "SSH port is declared in `ports` attribute",
        "impact": "Increases the security management overhead",
        "resolve": "Remove ssh from `ports` array",
        "remediation": {
          "kubernetes": "Remove ssh from `ports` array",
          "terraform": "Remove ssh from `ports` array"
        },
        "lineNumber": 61,
        "iacDescription": {
          "issue": "SSH port is declared in `ports` attribute",
          "impact": "Increases the security management overhead",
          "resolve": "Remove ssh from `ports` array"
        },
        "publicId": "SNYK-CC-K8S-34",
        "msg": "spec.template.spec.containers[jump-host].ports.containerPort[22]",
        "references": [
          "https://kubernetes.io/docs/tasks/debug-application-cluster/get-shell-running-container/"
        ],
        "path": [
          "[DocId: 2]",
          "spec",
          "template",
          "spec",
          "containers[jump-host]",
          "ports",
          "containerPort[22]"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-11",
        "title": "Container's or Pod's  UID could clash with host's UID",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-11",
        "isGeneratedByCustomRule": false,
        "issue": "`runAsUser` value is set to low UID",
        "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
        "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
          "terraform": "Set `security_context.run_as_user` value to greater or equal than 10'000"
        },
        "lineNumber": 49,
        "iacDescription": {
          "issue": "`runAsUser` value is set to low UID",
          "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
          "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence"
        },
        "publicId": "SNYK-CC-K8S-11",
        "msg": "input.spec.template.spec.containers[jump-host].securityContext.runAsUser",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container",
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod",
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 2]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[jump-host]",
          "securityContext",
          "runAsUser"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-5",
        "title": "Container has no CPU limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-5",
        "isGeneratedByCustomRule": false,
        "issue": "Container has no CPU limit",
        "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
        "resolve": "Add `resources.limits.cpu` field with required CPU limit value",
        "remediation": {
          "kubernetes": "Add `resources.limits.cpu` field with required CPU limit value",
          "terraform": "Add `spec.container.resources.limits.cpu` field with required CPU limit value"
        },
        "lineNumber": 49,
        "iacDescription": {
          "issue": "Container has no CPU limit",
          "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
          "resolve": "Add `resources.limits.cpu` field with required CPU limit value"
        },
        "publicId": "SNYK-CC-K8S-5",
        "msg": "input.spec.template.spec.containers[jump-host].resources.limits.cpu",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-cpu-resource/",
          "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/cpu-default-namespace/",
          "https://github.com/kubernetes/design-proposals-archive/blob/8da1442ea29adccea40693357d04727127e045ed/node/resource-qos.md#compressible-resource-guaranteess"
        ],
        "path": [
          "[DocId: 2]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[jump-host]",
          "resources",
          "limits",
          "cpu"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-8",
        "title": "Container is running with writable root filesystem",
        "severity": "low",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-8",
        "isGeneratedByCustomRule": false,
        "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
        "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
          "terraform": "Set `security_context.read_only_root_filesystem` to `true`"
        },
        "lineNumber": 49,
        "iacDescription": {
          "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
          "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`"
        },
        "publicId": "SNYK-CC-K8S-8",
        "msg": "spec.template.spec.containers[jump-host].securityContext.readOnlyRootFilesystem",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 2]",
          "spec",
          "template",
          "spec",
          "containers[jump-host]",
          "securityContext",
          "readOnlyRootFilesystem"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-10",
        "title": "Container or Pod is running without root user control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-10",
        "isGeneratedByCustomRule": false,
        "issue": "Container or Pod is running without root user control",
        "impact": "Container or Pod could be running with full administrative privileges",
        "resolve": "Set `securityContext.runAsNonRoot` to `true`",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsNonRoot` to `true`",
          "terraform": "Set `security_context.run_as_non_root` to `true`"
        },
        "lineNumber": 49,
        "iacDescription": {
          "issue": "Container or Pod is running without root user control",
          "impact": "Container or Pod could be running with full administrative privileges",
          "resolve": "Set `securityContext.runAsNonRoot` to `true`"
        },
        "publicId": "SNYK-CC-K8S-10",
        "msg": "input.spec.template.spec.containers[jump-host].securityContext.runAsNonRoot",
        "description": "",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 2]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[jump-host]",
          "securityContext",
          "runAsNonRoot"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-6",
        "title": "Container does not drop all default capabilities",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-6",
        "isGeneratedByCustomRule": false,
        "issue": "All default capabilities are not explicitly dropped",
        "impact": "Containers are running with potentially unnecessary privileges",
        "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
        "remediation": {
          "kubernetes": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
          "terraform": "Add `ALL` to `spec.container.security_context.capabilities.drop` list, and add only required capabilities to `spec.container.security_context.capabilities.add`, ensuring it also does not contain `ALL`"
        },
        "lineNumber": 49,
        "iacDescription": {
          "issue": "All default capabilities are not explicitly dropped",
          "impact": "Containers are running with potentially unnecessary privileges",
          "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`"
        },
        "publicId": "SNYK-CC-K8S-6",
        "msg": "input.spec.template.spec.containers[jump-host].securityContext.capabilities.drop",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
          "https://linux-audit.com/linux-capabilities-hardening-linux-binaries-by-removing-setuid/"
        ],
        "path": [
          "[DocId: 2]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[jump-host]",
          "securityContext",
          "capabilities",
          "drop"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-41",
        "title": "Container is running without liveness probe",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-41",
        "isGeneratedByCustomRule": false,
        "issue": "Liveness probe is not defined",
        "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
        "resolve": "Add `livenessProbe` attribute",
        "remediation": {
          "kubernetes": "Add `livenessProbe` attribute",
          "terraform": "Add `liveness_probe` attribute"
        },
        "lineNumber": 49,
        "iacDescription": {
          "issue": "Liveness probe is not defined",
          "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
          "resolve": "Add `livenessProbe` attribute"
        },
        "publicId": "SNYK-CC-K8S-41",
        "msg": "spec.template.spec.containers[jump-host].livenessProbe",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/",
          "https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/",
          "https://cloud.google.com/blog/products/gcp/kubernetes-best-practices-setting-up-health-checks-with-readiness-and-liveness-probes"
        ],
        "path": [
          "[DocId: 2]",
          "spec",
          "template",
          "spec",
          "containers[jump-host]",
          "livenessProbe"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-4",
        "title": "Container is running without memory limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-4",
        "isGeneratedByCustomRule": false,
        "issue": "Memory limit is not defined",
        "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
        "resolve": "Set `resources.limits.memory` value",
        "remediation": {
          "kubernetes": "Set `resources.limits.memory` value",
          "terraform": "Set `resources.limits.memory` value"
        },
        "lineNumber": 49,
        "iacDescription": {
          "issue": "Memory limit is not defined",
          "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
          "resolve": "Set `resources.limits.memory` value"
        },
        "publicId": "SNYK-CC-K8S-4",
        "msg": "input.spec.template.spec.containers[jump-host].resources.limits.memory",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/memory-default-namespace/"
        ],
        "path": [
          "[DocId: 2]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[jump-host]",
          "resources",
          "limits",
          "memory"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-9",
        "title": "Container is running without privilege escalation control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-9",
        "isGeneratedByCustomRule": false,
        "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
        "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
          "terraform": "Set `spec.container.security_context.allow_privilege_escalation` to `false`"
        },
        "lineNumber": 49,
        "iacDescription": {
          "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
          "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`"
        },
        "publicId": "SNYK-CC-K8S-9",
        "msg": "spec.template.spec.containers[jump-host].securityContext.allowPrivilegeEscalation",
        "references": [
          "https://www.kernel.org/doc/html/latest/userspace-api/no_new_privs.html"
        ],
        "path": [
          "[DocId: 2]",
          "spec",
          "template",
          "spec",
          "containers[jump-host]",
          "securityContext",
          "allowPrivilegeEscalation"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-46",
        "title": "RoleBinding or ClusterRoleBinding is using a pre-defined role",
        "severity": "high",
        "isIgnored": false,
        "subType": "ClusterRoleBinding",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-46",
        "isGeneratedByCustomRule": false,
        "issue": "A RoleBinding or ClusterRoleBinding was found using one of the default user facing roles, `cluster-admin`, `admin`, `edit` or `view`.",
        "impact": "Using a default user facing role may be overly permissive. For a ClusterRoleBinding this would be considered high severity.",
        "resolve": "Update roleRef.name to a specific role name with only the necessary permissions",
        "remediation": {
          "kubernetes": "Update roleRef.name to a specific role name with only the necessary permissions"
        },
        "lineNumber": 107,
        "iacDescription": {
          "issue": "A RoleBinding or ClusterRoleBinding was found using one of the default user facing roles, `cluster-admin`, `admin`, `edit` or `view`.",
          "impact": "Using a default user facing role may be overly permissive. For a ClusterRoleBinding this would be considered high severity.",
          "resolve": "Update roleRef.name to a specific role name with only the necessary permissions"
        },
        "publicId": "SNYK-CC-K8S-46",
        "msg": "roleRef.name",
        "references": [
          "https://kubernetes.io/docs/reference/access-authn-authz/rbac/"
        ],
        "path": [
          "[DocId: 5]",
          "roleRef",
          "name"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-41",
        "title": "Container is running without liveness probe",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-41",
        "isGeneratedByCustomRule": false,
        "issue": "Liveness probe is not defined",
        "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
        "resolve": "Add `livenessProbe` attribute",
        "remediation": {
          "kubernetes": "Add `livenessProbe` attribute",
          "terraform": "Add `liveness_probe` attribute"
        },
        "lineNumber": 145,
        "iacDescription": {
          "issue": "Liveness probe is not defined",
          "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
          "resolve": "Add `livenessProbe` attribute"
        },
        "publicId": "SNYK-CC-K8S-41",
        "msg": "spec.template.spec.containers[puppet-master].livenessProbe",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/",
          "https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/",
          "https://cloud.google.com/blog/products/gcp/kubernetes-best-practices-setting-up-health-checks-with-readiness-and-liveness-probes"
        ],
        "path": [
          "[DocId: 6]",
          "spec",
          "template",
          "spec",
          "containers[puppet-master]",
          "livenessProbe"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-37",
        "title": "Container is running with host path mount",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-37",
        "isGeneratedByCustomRule": false,
        "issue": "Host path has been mounted inside the pod",
        "impact": "Increases the attack surface, and can lead to privilege escalation",
        "resolve": "Remove `hostPath` volume mount",
        "remediation": {
          "kubernetes": "Remove `hostPath` volume mount",
          "terraform": "Remove `host_path` from `spec.volume` property"
        },
        "lineNumber": 141,
        "iacDescription": {
          "issue": "Host path has been mounted inside the pod",
          "impact": "Increases the attack surface, and can lead to privilege escalation",
          "resolve": "Remove `hostPath` volume mount"
        },
        "publicId": "SNYK-CC-K8S-37",
        "msg": "spec.template.spec.volumes[var-run-docker-sock].hostPath",
        "references": [
          "https://kubernetes.io/docs/concepts/storage/volumes/#hostpath"
        ],
        "path": [
          "[DocId: 6]",
          "spec",
          "template",
          "spec",
          "volumes[var-run-docker-sock]",
          "hostPath"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-10",
        "title": "Container or Pod is running without root user control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-10",
        "isGeneratedByCustomRule": false,
        "issue": "Container or Pod is running without root user control",
        "impact": "Container or Pod could be running with full administrative privileges",
        "resolve": "Set `securityContext.runAsNonRoot` to `true`",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsNonRoot` to `true`",
          "terraform": "Set `security_context.run_as_non_root` to `true`"
        },
        "lineNumber": 154,
        "iacDescription": {
          "issue": "Container or Pod is running without root user control",
          "impact": "Container or Pod could be running with full administrative privileges",
          "resolve": "Set `securityContext.runAsNonRoot` to `true`"
        },
        "publicId": "SNYK-CC-K8S-10",
        "msg": "input.spec.template.spec.containers[puppet-master].securityContext.runAsNonRoot",
        "description": "",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 6]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[puppet-master]",
          "securityContext",
          "runAsNonRoot"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-1",
        "title": "Privileged container",
        "severity": "high",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-1",
        "isGeneratedByCustomRule": false,
        "issue": "Container is running in privileged mode",
        "impact": "Compromised container could potentially modify the underlying host\u2019s kernel by loading unauthorized modules (i.e. drivers).",
        "resolve": "Remove `securityContext.privileged` attribute, or set value to `false`",
        "remediation": {
          "kubernetes": "Remove `securityContext.privileged` attribute, or set value to `false`",
          "terraform": "Remove `security_context.privileged` attribute, or set value to `false`"
        },
        "lineNumber": 155,
        "iacDescription": {
          "issue": "Container is running in privileged mode",
          "impact": "Compromised container could potentially modify the underlying host\u2019s kernel by loading unauthorized modules (i.e. drivers).",
          "resolve": "Remove `securityContext.privileged` attribute, or set value to `false`"
        },
        "publicId": "SNYK-CC-K8S-1",
        "msg": "input.spec.template.spec.containers[puppet-master].securityContext.privileged",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 6]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[puppet-master]",
          "securityContext",
          "privileged"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-8",
        "title": "Container is running with writable root filesystem",
        "severity": "low",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-8",
        "isGeneratedByCustomRule": false,
        "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
        "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
          "terraform": "Set `security_context.read_only_root_filesystem` to `true`"
        },
        "lineNumber": 154,
        "iacDescription": {
          "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
          "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`"
        },
        "publicId": "SNYK-CC-K8S-8",
        "msg": "spec.template.spec.containers[puppet-master].securityContext.readOnlyRootFilesystem",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 6]",
          "spec",
          "template",
          "spec",
          "containers[puppet-master]",
          "securityContext",
          "readOnlyRootFilesystem"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-4",
        "title": "Container is running without memory limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-4",
        "isGeneratedByCustomRule": false,
        "issue": "Memory limit is not defined",
        "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
        "resolve": "Set `resources.limits.memory` value",
        "remediation": {
          "kubernetes": "Set `resources.limits.memory` value",
          "terraform": "Set `resources.limits.memory` value"
        },
        "lineNumber": 145,
        "iacDescription": {
          "issue": "Memory limit is not defined",
          "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
          "resolve": "Set `resources.limits.memory` value"
        },
        "publicId": "SNYK-CC-K8S-4",
        "msg": "input.spec.template.spec.containers[puppet-master].resources.limits.memory",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/memory-default-namespace/"
        ],
        "path": [
          "[DocId: 6]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[puppet-master]",
          "resources",
          "limits",
          "memory"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-11",
        "title": "Container's or Pod's  UID could clash with host's UID",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-11",
        "isGeneratedByCustomRule": false,
        "issue": "`runAsUser` value is set to low UID",
        "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
        "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
          "terraform": "Set `security_context.run_as_user` value to greater or equal than 10'000"
        },
        "lineNumber": 154,
        "iacDescription": {
          "issue": "`runAsUser` value is set to low UID",
          "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
          "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence"
        },
        "publicId": "SNYK-CC-K8S-11",
        "msg": "input.spec.template.spec.containers[puppet-master].securityContext.runAsUser",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container",
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod",
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 6]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[puppet-master]",
          "securityContext",
          "runAsUser"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-5",
        "title": "Container has no CPU limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-5",
        "isGeneratedByCustomRule": false,
        "issue": "Container has no CPU limit",
        "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
        "resolve": "Add `resources.limits.cpu` field with required CPU limit value",
        "remediation": {
          "kubernetes": "Add `resources.limits.cpu` field with required CPU limit value",
          "terraform": "Add `spec.container.resources.limits.cpu` field with required CPU limit value"
        },
        "lineNumber": 145,
        "iacDescription": {
          "issue": "Container has no CPU limit",
          "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
          "resolve": "Add `resources.limits.cpu` field with required CPU limit value"
        },
        "publicId": "SNYK-CC-K8S-5",
        "msg": "input.spec.template.spec.containers[puppet-master].resources.limits.cpu",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-cpu-resource/",
          "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/cpu-default-namespace/",
          "https://github.com/kubernetes/design-proposals-archive/blob/8da1442ea29adccea40693357d04727127e045ed/node/resource-qos.md#compressible-resource-guaranteess"
        ],
        "path": [
          "[DocId: 6]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[puppet-master]",
          "resources",
          "limits",
          "cpu"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-9",
        "title": "Container is running without privilege escalation control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-9",
        "isGeneratedByCustomRule": false,
        "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
        "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
          "terraform": "Set `spec.container.security_context.allow_privilege_escalation` to `false`"
        },
        "lineNumber": 154,
        "iacDescription": {
          "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
          "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`"
        },
        "publicId": "SNYK-CC-K8S-9",
        "msg": "spec.template.spec.containers[puppet-master].securityContext.allowPrivilegeEscalation",
        "references": [
          "https://www.kernel.org/doc/html/latest/userspace-api/no_new_privs.html"
        ],
        "path": [
          "[DocId: 6]",
          "spec",
          "template",
          "spec",
          "containers[puppet-master]",
          "securityContext",
          "allowPrivilegeEscalation"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-2",
        "title": "Container is running with docker socket mount",
        "severity": "high",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-2",
        "isGeneratedByCustomRule": false,
        "issue": "Docker socket has been mounted inside the pod",
        "impact": "Access to docker socket from container can lead to container escape attacks and privilege escalation on the host",
        "resolve": "Remove `/var/run/docker.sock` hostPath volume",
        "remediation": {
          "kubernetes": "Remove `/var/run/docker.sock` hostPath volume",
          "terraform": "Remove `/var/run/docker.sock` from `volume.host_path.path`"
        },
        "lineNumber": 142,
        "iacDescription": {
          "issue": "Docker socket has been mounted inside the pod",
          "impact": "Access to docker socket from container can lead to container escape attacks and privilege escalation on the host",
          "resolve": "Remove `/var/run/docker.sock` hostPath volume"
        },
        "publicId": "SNYK-CC-K8S-2",
        "msg": "input.spec.template.spec.volumes[var-run-docker-sock].hostPath.path",
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html",
          "https://aws.github.io/aws-eks-best-practices/pods/#never-run-docker-in-docker-or-mount-the-socket-in-the-container"
        ],
        "path": [
          "[DocId: 6]",
          "input",
          "spec",
          "template",
          "spec",
          "volumes[var-run-docker-sock]",
          "hostPath",
          "path"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-6",
        "title": "Container does not drop all default capabilities",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-6",
        "isGeneratedByCustomRule": false,
        "issue": "All default capabilities are not explicitly dropped",
        "impact": "Containers are running with potentially unnecessary privileges",
        "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
        "remediation": {
          "kubernetes": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
          "terraform": "Add `ALL` to `spec.container.security_context.capabilities.drop` list, and add only required capabilities to `spec.container.security_context.capabilities.add`, ensuring it also does not contain `ALL`"
        },
        "lineNumber": 154,
        "iacDescription": {
          "issue": "All default capabilities are not explicitly dropped",
          "impact": "Containers are running with potentially unnecessary privileges",
          "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`"
        },
        "publicId": "SNYK-CC-K8S-6",
        "msg": "input.spec.template.spec.containers[puppet-master].securityContext.capabilities.drop",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
          "https://linux-audit.com/linux-capabilities-hardening-linux-binaries-by-removing-setuid/"
        ],
        "path": [
          "[DocId: 6]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[puppet-master]",
          "securityContext",
          "capabilities",
          "drop"
        ],
        "compliance": []
      }
    ]
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4_workload_stackrox_demo_apps/files/demos/payments/everything.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4_workload_stackrox_demo_apps/files/demos/payments/everything.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": false,
    "infrastructureAsCodeIssues": [
      {
        "id": "SNYK-CC-K8S-46",
        "title": "RoleBinding or ClusterRoleBinding is using a pre-defined role",
        "severity": "high",
        "isIgnored": false,
        "subType": "ClusterRoleBinding",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-46",
        "isGeneratedByCustomRule": false,
        "issue": "A RoleBinding or ClusterRoleBinding was found using one of the default user facing roles, `cluster-admin`, `admin`, `edit` or `view`.",
        "impact": "Using a default user facing role may be overly permissive. For a ClusterRoleBinding this would be considered high severity.",
        "resolve": "Update roleRef.name to a specific role name with only the necessary permissions",
        "remediation": {
          "kubernetes": "Update roleRef.name to a specific role name with only the necessary permissions"
        },
        "lineNumber": 41,
        "iacDescription": {
          "issue": "A RoleBinding or ClusterRoleBinding was found using one of the default user facing roles, `cluster-admin`, `admin`, `edit` or `view`.",
          "impact": "Using a default user facing role may be overly permissive. For a ClusterRoleBinding this would be considered high severity.",
          "resolve": "Update roleRef.name to a specific role name with only the necessary permissions"
        },
        "publicId": "SNYK-CC-K8S-46",
        "msg": "roleRef.name",
        "references": [
          "https://kubernetes.io/docs/reference/access-authn-authz/rbac/"
        ],
        "path": [
          "[DocId: 3]",
          "roleRef",
          "name"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-10",
        "title": "Container or Pod is running without root user control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-10",
        "isGeneratedByCustomRule": false,
        "issue": "Container or Pod is running without root user control",
        "impact": "Container or Pod could be running with full administrative privileges",
        "resolve": "Set `securityContext.runAsNonRoot` to `true`",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsNonRoot` to `true`",
          "terraform": "Set `security_context.run_as_non_root` to `true`"
        },
        "lineNumber": 91,
        "iacDescription": {
          "issue": "Container or Pod is running without root user control",
          "impact": "Container or Pod could be running with full administrative privileges",
          "resolve": "Set `securityContext.runAsNonRoot` to `true`"
        },
        "publicId": "SNYK-CC-K8S-10",
        "msg": "input.spec.template.spec.containers[visa-processor].securityContext.runAsNonRoot",
        "description": "",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 4]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[visa-processor]",
          "securityContext",
          "runAsNonRoot"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-6",
        "title": "Container does not drop all default capabilities",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-6",
        "isGeneratedByCustomRule": false,
        "issue": "All default capabilities are not explicitly dropped",
        "impact": "Containers are running with potentially unnecessary privileges",
        "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
        "remediation": {
          "kubernetes": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
          "terraform": "Add `ALL` to `spec.container.security_context.capabilities.drop` list, and add only required capabilities to `spec.container.security_context.capabilities.add`, ensuring it also does not contain `ALL`"
        },
        "lineNumber": 101,
        "iacDescription": {
          "issue": "All default capabilities are not explicitly dropped",
          "impact": "Containers are running with potentially unnecessary privileges",
          "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`"
        },
        "publicId": "SNYK-CC-K8S-6",
        "msg": "input.spec.template.spec.containers[visa-processor-sidecar].securityContext.capabilities.drop",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
          "https://linux-audit.com/linux-capabilities-hardening-linux-binaries-by-removing-setuid/"
        ],
        "path": [
          "[DocId: 4]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[visa-processor-sidecar]",
          "securityContext",
          "capabilities",
          "drop"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-34",
        "title": "Container is exposing SSH port",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-34",
        "isGeneratedByCustomRule": false,
        "issue": "SSH port is declared in `ports` attribute",
        "impact": "Increases the security management overhead",
        "resolve": "Remove ssh from `ports` array",
        "remediation": {
          "kubernetes": "Remove ssh from `ports` array",
          "terraform": "Remove ssh from `ports` array"
        },
        "lineNumber": 83,
        "iacDescription": {
          "issue": "SSH port is declared in `ports` attribute",
          "impact": "Increases the security management overhead",
          "resolve": "Remove ssh from `ports` array"
        },
        "publicId": "SNYK-CC-K8S-34",
        "msg": "spec.template.spec.containers[visa-processor].ports.containerPort[22]",
        "references": [
          "https://kubernetes.io/docs/tasks/debug-application-cluster/get-shell-running-container/"
        ],
        "path": [
          "[DocId: 4]",
          "spec",
          "template",
          "spec",
          "containers[visa-processor]",
          "ports",
          "containerPort[22]"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-4",
        "title": "Container is running without memory limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-4",
        "isGeneratedByCustomRule": false,
        "issue": "Memory limit is not defined",
        "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
        "resolve": "Set `resources.limits.memory` value",
        "remediation": {
          "kubernetes": "Set `resources.limits.memory` value",
          "terraform": "Set `resources.limits.memory` value"
        },
        "lineNumber": 79,
        "iacDescription": {
          "issue": "Memory limit is not defined",
          "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
          "resolve": "Set `resources.limits.memory` value"
        },
        "publicId": "SNYK-CC-K8S-4",
        "msg": "input.spec.template.spec.containers[visa-processor].resources.limits.memory",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/memory-default-namespace/"
        ],
        "path": [
          "[DocId: 4]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[visa-processor]",
          "resources",
          "limits",
          "memory"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-7",
        "title": "Container or Pod is running with SYS_ADMIN capability",
        "severity": "high",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-7",
        "isGeneratedByCustomRule": false,
        "issue": "SYS_ADMIN privileges are assigned to the container",
        "impact": "SYS_ADMIN capability grants the container almost full administrative privileges",
        "resolve": "Remove `SYS_ADMIN` from `securityContext.capabilities.add` list",
        "remediation": {
          "kubernetes": "Remove `SYS_ADMIN` from `securityContext.capabilities.add` list",
          "terraform": "Remove `SYS_ADMIN` from `security_context.capabilities.add` list"
        },
        "lineNumber": 93,
        "iacDescription": {
          "issue": "SYS_ADMIN privileges are assigned to the container",
          "impact": "SYS_ADMIN capability grants the container almost full administrative privileges",
          "resolve": "Remove `SYS_ADMIN` from `securityContext.capabilities.add` list"
        },
        "publicId": "SNYK-CC-K8S-7",
        "msg": "input.spec.template.spec.containers[visa-processor].securityContext.capabilities.add.SYS_ADMIN",
        "description": "",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-capabilities-for-a-container",
          "https://man7.org/linux/man-pages/man7/capabilities.7.html",
          "https://docs.docker.com/engine/reference/run/#runtime-privilege-and-linux-capabilities"
        ],
        "path": [
          "[DocId: 4]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[visa-processor]",
          "securityContext",
          "capabilities",
          "add",
          "SYS_ADMIN"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-6",
        "title": "Container does not drop all default capabilities",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-6",
        "isGeneratedByCustomRule": false,
        "issue": "All default capabilities are not explicitly dropped",
        "impact": "Containers are running with potentially unnecessary privileges",
        "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
        "remediation": {
          "kubernetes": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
          "terraform": "Add `ALL` to `spec.container.security_context.capabilities.drop` list, and add only required capabilities to `spec.container.security_context.capabilities.add`, ensuring it also does not contain `ALL`"
        },
        "lineNumber": 92,
        "iacDescription": {
          "issue": "All default capabilities are not explicitly dropped",
          "impact": "Containers are running with potentially unnecessary privileges",
          "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`"
        },
        "publicId": "SNYK-CC-K8S-6",
        "msg": "input.spec.template.spec.containers[visa-processor].securityContext.capabilities.drop",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
          "https://linux-audit.com/linux-capabilities-hardening-linux-binaries-by-removing-setuid/"
        ],
        "path": [
          "[DocId: 4]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[visa-processor]",
          "securityContext",
          "capabilities",
          "drop"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-4",
        "title": "Container is running without memory limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-4",
        "isGeneratedByCustomRule": false,
        "issue": "Memory limit is not defined",
        "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
        "resolve": "Set `resources.limits.memory` value",
        "remediation": {
          "kubernetes": "Set `resources.limits.memory` value",
          "terraform": "Set `resources.limits.memory` value"
        },
        "lineNumber": 97,
        "iacDescription": {
          "issue": "Memory limit is not defined",
          "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
          "resolve": "Set `resources.limits.memory` value"
        },
        "publicId": "SNYK-CC-K8S-4",
        "msg": "input.spec.template.spec.containers[visa-processor-sidecar].resources.limits.memory",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/memory-default-namespace/"
        ],
        "path": [
          "[DocId: 4]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[visa-processor-sidecar]",
          "resources",
          "limits",
          "memory"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-5",
        "title": "Container has no CPU limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-5",
        "isGeneratedByCustomRule": false,
        "issue": "Container has no CPU limit",
        "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
        "resolve": "Add `resources.limits.cpu` field with required CPU limit value",
        "remediation": {
          "kubernetes": "Add `resources.limits.cpu` field with required CPU limit value",
          "terraform": "Add `spec.container.resources.limits.cpu` field with required CPU limit value"
        },
        "lineNumber": 97,
        "iacDescription": {
          "issue": "Container has no CPU limit",
          "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
          "resolve": "Add `resources.limits.cpu` field with required CPU limit value"
        },
        "publicId": "SNYK-CC-K8S-5",
        "msg": "input.spec.template.spec.containers[visa-processor-sidecar].resources.limits.cpu",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-cpu-resource/",
          "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/cpu-default-namespace/",
          "https://github.com/kubernetes/design-proposals-archive/blob/8da1442ea29adccea40693357d04727127e045ed/node/resource-qos.md#compressible-resource-guaranteess"
        ],
        "path": [
          "[DocId: 4]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[visa-processor-sidecar]",
          "resources",
          "limits",
          "cpu"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-41",
        "title": "Container is running without liveness probe",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-41",
        "isGeneratedByCustomRule": false,
        "issue": "Liveness probe is not defined",
        "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
        "resolve": "Add `livenessProbe` attribute",
        "remediation": {
          "kubernetes": "Add `livenessProbe` attribute",
          "terraform": "Add `liveness_probe` attribute"
        },
        "lineNumber": 79,
        "iacDescription": {
          "issue": "Liveness probe is not defined",
          "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
          "resolve": "Add `livenessProbe` attribute"
        },
        "publicId": "SNYK-CC-K8S-41",
        "msg": "spec.template.spec.containers[visa-processor].livenessProbe",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/",
          "https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/",
          "https://cloud.google.com/blog/products/gcp/kubernetes-best-practices-setting-up-health-checks-with-readiness-and-liveness-probes"
        ],
        "path": [
          "[DocId: 4]",
          "spec",
          "template",
          "spec",
          "containers[visa-processor]",
          "livenessProbe"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-11",
        "title": "Container's or Pod's  UID could clash with host's UID",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-11",
        "isGeneratedByCustomRule": false,
        "issue": "`runAsUser` value is set to low UID",
        "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
        "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
          "terraform": "Set `security_context.run_as_user` value to greater or equal than 10'000"
        },
        "lineNumber": 101,
        "iacDescription": {
          "issue": "`runAsUser` value is set to low UID",
          "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
          "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence"
        },
        "publicId": "SNYK-CC-K8S-11",
        "msg": "input.spec.template.spec.containers[visa-processor-sidecar].securityContext.runAsUser",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container",
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod",
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 4]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[visa-processor-sidecar]",
          "securityContext",
          "runAsUser"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-10",
        "title": "Container or Pod is running without root user control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-10",
        "isGeneratedByCustomRule": false,
        "issue": "Container or Pod is running without root user control",
        "impact": "Container or Pod could be running with full administrative privileges",
        "resolve": "Set `securityContext.runAsNonRoot` to `true`",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsNonRoot` to `true`",
          "terraform": "Set `security_context.run_as_non_root` to `true`"
        },
        "lineNumber": 101,
        "iacDescription": {
          "issue": "Container or Pod is running without root user control",
          "impact": "Container or Pod could be running with full administrative privileges",
          "resolve": "Set `securityContext.runAsNonRoot` to `true`"
        },
        "publicId": "SNYK-CC-K8S-10",
        "msg": "input.spec.template.spec.containers[visa-processor-sidecar].securityContext.runAsNonRoot",
        "description": "",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 4]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[visa-processor-sidecar]",
          "securityContext",
          "runAsNonRoot"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-9",
        "title": "Container is running without privilege escalation control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-9",
        "isGeneratedByCustomRule": false,
        "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
        "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
          "terraform": "Set `spec.container.security_context.allow_privilege_escalation` to `false`"
        },
        "lineNumber": 101,
        "iacDescription": {
          "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
          "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`"
        },
        "publicId": "SNYK-CC-K8S-9",
        "msg": "spec.template.spec.containers[visa-processor-sidecar].securityContext.allowPrivilegeEscalation",
        "references": [
          "https://www.kernel.org/doc/html/latest/userspace-api/no_new_privs.html"
        ],
        "path": [
          "[DocId: 4]",
          "spec",
          "template",
          "spec",
          "containers[visa-processor-sidecar]",
          "securityContext",
          "allowPrivilegeEscalation"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-9",
        "title": "Container is running without privilege escalation control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-9",
        "isGeneratedByCustomRule": false,
        "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
        "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
          "terraform": "Set `spec.container.security_context.allow_privilege_escalation` to `false`"
        },
        "lineNumber": 91,
        "iacDescription": {
          "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
          "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`"
        },
        "publicId": "SNYK-CC-K8S-9",
        "msg": "spec.template.spec.containers[visa-processor].securityContext.allowPrivilegeEscalation",
        "references": [
          "https://www.kernel.org/doc/html/latest/userspace-api/no_new_privs.html"
        ],
        "path": [
          "[DocId: 4]",
          "spec",
          "template",
          "spec",
          "containers[visa-processor]",
          "securityContext",
          "allowPrivilegeEscalation"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-41",
        "title": "Container is running without liveness probe",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-41",
        "isGeneratedByCustomRule": false,
        "issue": "Liveness probe is not defined",
        "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
        "resolve": "Add `livenessProbe` attribute",
        "remediation": {
          "kubernetes": "Add `livenessProbe` attribute",
          "terraform": "Add `liveness_probe` attribute"
        },
        "lineNumber": 97,
        "iacDescription": {
          "issue": "Liveness probe is not defined",
          "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
          "resolve": "Add `livenessProbe` attribute"
        },
        "publicId": "SNYK-CC-K8S-41",
        "msg": "spec.template.spec.containers[visa-processor-sidecar].livenessProbe",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/",
          "https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/",
          "https://cloud.google.com/blog/products/gcp/kubernetes-best-practices-setting-up-health-checks-with-readiness-and-liveness-probes"
        ],
        "path": [
          "[DocId: 4]",
          "spec",
          "template",
          "spec",
          "containers[visa-processor-sidecar]",
          "livenessProbe"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-1",
        "title": "Privileged container",
        "severity": "high",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-1",
        "isGeneratedByCustomRule": false,
        "issue": "Container is running in privileged mode",
        "impact": "Compromised container could potentially modify the underlying host\u2019s kernel by loading unauthorized modules (i.e. drivers).",
        "resolve": "Remove `securityContext.privileged` attribute, or set value to `false`",
        "remediation": {
          "kubernetes": "Remove `securityContext.privileged` attribute, or set value to `false`",
          "terraform": "Remove `security_context.privileged` attribute, or set value to `false`"
        },
        "lineNumber": 102,
        "iacDescription": {
          "issue": "Container is running in privileged mode",
          "impact": "Compromised container could potentially modify the underlying host\u2019s kernel by loading unauthorized modules (i.e. drivers).",
          "resolve": "Remove `securityContext.privileged` attribute, or set value to `false`"
        },
        "publicId": "SNYK-CC-K8S-1",
        "msg": "input.spec.template.spec.containers[visa-processor-sidecar].securityContext.privileged",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 4]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[visa-processor-sidecar]",
          "securityContext",
          "privileged"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-11",
        "title": "Container's or Pod's  UID could clash with host's UID",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-11",
        "isGeneratedByCustomRule": false,
        "issue": "`runAsUser` value is set to low UID",
        "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
        "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
          "terraform": "Set `security_context.run_as_user` value to greater or equal than 10'000"
        },
        "lineNumber": 91,
        "iacDescription": {
          "issue": "`runAsUser` value is set to low UID",
          "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
          "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence"
        },
        "publicId": "SNYK-CC-K8S-11",
        "msg": "input.spec.template.spec.containers[visa-processor].securityContext.runAsUser",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container",
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod",
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 4]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[visa-processor]",
          "securityContext",
          "runAsUser"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-8",
        "title": "Container is running with writable root filesystem",
        "severity": "low",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-8",
        "isGeneratedByCustomRule": false,
        "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
        "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
          "terraform": "Set `security_context.read_only_root_filesystem` to `true`"
        },
        "lineNumber": 101,
        "iacDescription": {
          "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
          "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`"
        },
        "publicId": "SNYK-CC-K8S-8",
        "msg": "spec.template.spec.containers[visa-processor-sidecar].securityContext.readOnlyRootFilesystem",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 4]",
          "spec",
          "template",
          "spec",
          "containers[visa-processor-sidecar]",
          "securityContext",
          "readOnlyRootFilesystem"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-8",
        "title": "Container is running with writable root filesystem",
        "severity": "low",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-8",
        "isGeneratedByCustomRule": false,
        "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
        "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
          "terraform": "Set `security_context.read_only_root_filesystem` to `true`"
        },
        "lineNumber": 91,
        "iacDescription": {
          "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
          "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`"
        },
        "publicId": "SNYK-CC-K8S-8",
        "msg": "spec.template.spec.containers[visa-processor].securityContext.readOnlyRootFilesystem",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 4]",
          "spec",
          "template",
          "spec",
          "containers[visa-processor]",
          "securityContext",
          "readOnlyRootFilesystem"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-5",
        "title": "Container has no CPU limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-5",
        "isGeneratedByCustomRule": false,
        "issue": "Container has no CPU limit",
        "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
        "resolve": "Add `resources.limits.cpu` field with required CPU limit value",
        "remediation": {
          "kubernetes": "Add `resources.limits.cpu` field with required CPU limit value",
          "terraform": "Add `spec.container.resources.limits.cpu` field with required CPU limit value"
        },
        "lineNumber": 79,
        "iacDescription": {
          "issue": "Container has no CPU limit",
          "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
          "resolve": "Add `resources.limits.cpu` field with required CPU limit value"
        },
        "publicId": "SNYK-CC-K8S-5",
        "msg": "input.spec.template.spec.containers[visa-processor].resources.limits.cpu",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-cpu-resource/",
          "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/cpu-default-namespace/",
          "https://github.com/kubernetes/design-proposals-archive/blob/8da1442ea29adccea40693357d04727127e045ed/node/resource-qos.md#compressible-resource-guaranteess"
        ],
        "path": [
          "[DocId: 4]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[visa-processor]",
          "resources",
          "limits",
          "cpu"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-11",
        "title": "Container's or Pod's  UID could clash with host's UID",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-11",
        "isGeneratedByCustomRule": false,
        "issue": "`runAsUser` value is set to low UID",
        "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
        "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
          "terraform": "Set `security_context.run_as_user` value to greater or equal than 10'000"
        },
        "lineNumber": 152,
        "iacDescription": {
          "issue": "`runAsUser` value is set to low UID",
          "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
          "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence"
        },
        "publicId": "SNYK-CC-K8S-11",
        "msg": "input.spec.template.spec.containers[gateway].securityContext.runAsUser",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container",
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod",
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 6]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[gateway]",
          "securityContext",
          "runAsUser"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-10",
        "title": "Container or Pod is running without root user control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-10",
        "isGeneratedByCustomRule": false,
        "issue": "Container or Pod is running without root user control",
        "impact": "Container or Pod could be running with full administrative privileges",
        "resolve": "Set `securityContext.runAsNonRoot` to `true`",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsNonRoot` to `true`",
          "terraform": "Set `security_context.run_as_non_root` to `true`"
        },
        "lineNumber": 152,
        "iacDescription": {
          "issue": "Container or Pod is running without root user control",
          "impact": "Container or Pod could be running with full administrative privileges",
          "resolve": "Set `securityContext.runAsNonRoot` to `true`"
        },
        "publicId": "SNYK-CC-K8S-10",
        "msg": "input.spec.template.spec.containers[gateway].securityContext.runAsNonRoot",
        "description": "",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 6]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[gateway]",
          "securityContext",
          "runAsNonRoot"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-41",
        "title": "Container is running without liveness probe",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-41",
        "isGeneratedByCustomRule": false,
        "issue": "Liveness probe is not defined",
        "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
        "resolve": "Add `livenessProbe` attribute",
        "remediation": {
          "kubernetes": "Add `livenessProbe` attribute",
          "terraform": "Add `liveness_probe` attribute"
        },
        "lineNumber": 152,
        "iacDescription": {
          "issue": "Liveness probe is not defined",
          "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
          "resolve": "Add `livenessProbe` attribute"
        },
        "publicId": "SNYK-CC-K8S-41",
        "msg": "spec.template.spec.containers[gateway].livenessProbe",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/",
          "https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/",
          "https://cloud.google.com/blog/products/gcp/kubernetes-best-practices-setting-up-health-checks-with-readiness-and-liveness-probes"
        ],
        "path": [
          "[DocId: 6]",
          "spec",
          "template",
          "spec",
          "containers[gateway]",
          "livenessProbe"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-6",
        "title": "Container does not drop all default capabilities",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-6",
        "isGeneratedByCustomRule": false,
        "issue": "All default capabilities are not explicitly dropped",
        "impact": "Containers are running with potentially unnecessary privileges",
        "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
        "remediation": {
          "kubernetes": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
          "terraform": "Add `ALL` to `spec.container.security_context.capabilities.drop` list, and add only required capabilities to `spec.container.security_context.capabilities.add`, ensuring it also does not contain `ALL`"
        },
        "lineNumber": 152,
        "iacDescription": {
          "issue": "All default capabilities are not explicitly dropped",
          "impact": "Containers are running with potentially unnecessary privileges",
          "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`"
        },
        "publicId": "SNYK-CC-K8S-6",
        "msg": "input.spec.template.spec.containers[gateway].securityContext.capabilities.drop",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
          "https://linux-audit.com/linux-capabilities-hardening-linux-binaries-by-removing-setuid/"
        ],
        "path": [
          "[DocId: 6]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[gateway]",
          "securityContext",
          "capabilities",
          "drop"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-9",
        "title": "Container is running without privilege escalation control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-9",
        "isGeneratedByCustomRule": false,
        "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
        "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
          "terraform": "Set `spec.container.security_context.allow_privilege_escalation` to `false`"
        },
        "lineNumber": 152,
        "iacDescription": {
          "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
          "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`"
        },
        "publicId": "SNYK-CC-K8S-9",
        "msg": "spec.template.spec.containers[gateway].securityContext.allowPrivilegeEscalation",
        "references": [
          "https://www.kernel.org/doc/html/latest/userspace-api/no_new_privs.html"
        ],
        "path": [
          "[DocId: 6]",
          "spec",
          "template",
          "spec",
          "containers[gateway]",
          "securityContext",
          "allowPrivilegeEscalation"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-4",
        "title": "Container is running without memory limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-4",
        "isGeneratedByCustomRule": false,
        "issue": "Memory limit is not defined",
        "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
        "resolve": "Set `resources.limits.memory` value",
        "remediation": {
          "kubernetes": "Set `resources.limits.memory` value",
          "terraform": "Set `resources.limits.memory` value"
        },
        "lineNumber": 152,
        "iacDescription": {
          "issue": "Memory limit is not defined",
          "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
          "resolve": "Set `resources.limits.memory` value"
        },
        "publicId": "SNYK-CC-K8S-4",
        "msg": "input.spec.template.spec.containers[gateway].resources.limits.memory",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/memory-default-namespace/"
        ],
        "path": [
          "[DocId: 6]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[gateway]",
          "resources",
          "limits",
          "memory"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-8",
        "title": "Container is running with writable root filesystem",
        "severity": "low",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-8",
        "isGeneratedByCustomRule": false,
        "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
        "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
          "terraform": "Set `security_context.read_only_root_filesystem` to `true`"
        },
        "lineNumber": 152,
        "iacDescription": {
          "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
          "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`"
        },
        "publicId": "SNYK-CC-K8S-8",
        "msg": "spec.template.spec.containers[gateway].securityContext.readOnlyRootFilesystem",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 6]",
          "spec",
          "template",
          "spec",
          "containers[gateway]",
          "securityContext",
          "readOnlyRootFilesystem"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-5",
        "title": "Container has no CPU limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-5",
        "isGeneratedByCustomRule": false,
        "issue": "Container has no CPU limit",
        "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
        "resolve": "Add `resources.limits.cpu` field with required CPU limit value",
        "remediation": {
          "kubernetes": "Add `resources.limits.cpu` field with required CPU limit value",
          "terraform": "Add `spec.container.resources.limits.cpu` field with required CPU limit value"
        },
        "lineNumber": 152,
        "iacDescription": {
          "issue": "Container has no CPU limit",
          "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
          "resolve": "Add `resources.limits.cpu` field with required CPU limit value"
        },
        "publicId": "SNYK-CC-K8S-5",
        "msg": "input.spec.template.spec.containers[gateway].resources.limits.cpu",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-cpu-resource/",
          "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/cpu-default-namespace/",
          "https://github.com/kubernetes/design-proposals-archive/blob/8da1442ea29adccea40693357d04727127e045ed/node/resource-qos.md#compressible-resource-guaranteess"
        ],
        "path": [
          "[DocId: 6]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[gateway]",
          "resources",
          "limits",
          "cpu"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-44",
        "title": "Role or ClusterRole with too wide permissions",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Role",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-44",
        "isGeneratedByCustomRule": false,
        "issue": "The role uses wildcards, which grant the role permissions to the whole cluster",
        "impact": "The use of wildcard rights grants is likely to provide excessive rights to the Kubernetes API. For a ClusterRole this would be considered high severity.",
        "resolve": "Set only the necessary permissions required",
        "remediation": {
          "kubernetes": "Set only the necessary permissions required",
          "terraform": "Remove any wildcards [*] from `rule.verbs` and `rule.resources`"
        },
        "lineNumber": 209,
        "iacDescription": {
          "issue": "The role uses wildcards, which grant the role permissions to the whole cluster",
          "impact": "The use of wildcard rights grants is likely to provide excessive rights to the Kubernetes API. For a ClusterRole this would be considered high severity.",
          "resolve": "Set only the necessary permissions required"
        },
        "publicId": "SNYK-CC-K8S-44",
        "msg": "rules[0].verbs",
        "references": [
          "https://kubernetes.io/docs/reference/access-authn-authz/rbac/"
        ],
        "path": [
          "[DocId: 9]",
          "rules[0]",
          "verbs"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-41",
        "title": "Container is running without liveness probe",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-41",
        "isGeneratedByCustomRule": false,
        "issue": "Liveness probe is not defined",
        "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
        "resolve": "Add `livenessProbe` attribute",
        "remediation": {
          "kubernetes": "Add `livenessProbe` attribute",
          "terraform": "Add `liveness_probe` attribute"
        },
        "lineNumber": 256,
        "iacDescription": {
          "issue": "Liveness probe is not defined",
          "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
          "resolve": "Add `livenessProbe` attribute"
        },
        "publicId": "SNYK-CC-K8S-41",
        "msg": "spec.template.spec.containers[mastercard-processor].livenessProbe",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/",
          "https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/",
          "https://cloud.google.com/blog/products/gcp/kubernetes-best-practices-setting-up-health-checks-with-readiness-and-liveness-probes"
        ],
        "path": [
          "[DocId: 11]",
          "spec",
          "template",
          "spec",
          "containers[mastercard-processor]",
          "livenessProbe"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-11",
        "title": "Container's or Pod's  UID could clash with host's UID",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-11",
        "isGeneratedByCustomRule": false,
        "issue": "`runAsUser` value is set to low UID",
        "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
        "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
          "terraform": "Set `security_context.run_as_user` value to greater or equal than 10'000"
        },
        "lineNumber": 256,
        "iacDescription": {
          "issue": "`runAsUser` value is set to low UID",
          "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
          "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence"
        },
        "publicId": "SNYK-CC-K8S-11",
        "msg": "input.spec.template.spec.containers[mastercard-processor].securityContext.runAsUser",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container",
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod",
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 11]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[mastercard-processor]",
          "securityContext",
          "runAsUser"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-8",
        "title": "Container is running with writable root filesystem",
        "severity": "low",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-8",
        "isGeneratedByCustomRule": false,
        "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
        "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
          "terraform": "Set `security_context.read_only_root_filesystem` to `true`"
        },
        "lineNumber": 256,
        "iacDescription": {
          "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
          "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`"
        },
        "publicId": "SNYK-CC-K8S-8",
        "msg": "spec.template.spec.containers[mastercard-processor].securityContext.readOnlyRootFilesystem",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 11]",
          "spec",
          "template",
          "spec",
          "containers[mastercard-processor]",
          "securityContext",
          "readOnlyRootFilesystem"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-5",
        "title": "Container has no CPU limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-5",
        "isGeneratedByCustomRule": false,
        "issue": "Container has no CPU limit",
        "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
        "resolve": "Add `resources.limits.cpu` field with required CPU limit value",
        "remediation": {
          "kubernetes": "Add `resources.limits.cpu` field with required CPU limit value",
          "terraform": "Add `spec.container.resources.limits.cpu` field with required CPU limit value"
        },
        "lineNumber": 256,
        "iacDescription": {
          "issue": "Container has no CPU limit",
          "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
          "resolve": "Add `resources.limits.cpu` field with required CPU limit value"
        },
        "publicId": "SNYK-CC-K8S-5",
        "msg": "input.spec.template.spec.containers[mastercard-processor].resources.limits.cpu",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-cpu-resource/",
          "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/cpu-default-namespace/",
          "https://github.com/kubernetes/design-proposals-archive/blob/8da1442ea29adccea40693357d04727127e045ed/node/resource-qos.md#compressible-resource-guaranteess"
        ],
        "path": [
          "[DocId: 11]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[mastercard-processor]",
          "resources",
          "limits",
          "cpu"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-9",
        "title": "Container is running without privilege escalation control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-9",
        "isGeneratedByCustomRule": false,
        "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
        "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
          "terraform": "Set `spec.container.security_context.allow_privilege_escalation` to `false`"
        },
        "lineNumber": 256,
        "iacDescription": {
          "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
          "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`"
        },
        "publicId": "SNYK-CC-K8S-9",
        "msg": "spec.template.spec.containers[mastercard-processor].securityContext.allowPrivilegeEscalation",
        "references": [
          "https://www.kernel.org/doc/html/latest/userspace-api/no_new_privs.html"
        ],
        "path": [
          "[DocId: 11]",
          "spec",
          "template",
          "spec",
          "containers[mastercard-processor]",
          "securityContext",
          "allowPrivilegeEscalation"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-10",
        "title": "Container or Pod is running without root user control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-10",
        "isGeneratedByCustomRule": false,
        "issue": "Container or Pod is running without root user control",
        "impact": "Container or Pod could be running with full administrative privileges",
        "resolve": "Set `securityContext.runAsNonRoot` to `true`",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsNonRoot` to `true`",
          "terraform": "Set `security_context.run_as_non_root` to `true`"
        },
        "lineNumber": 256,
        "iacDescription": {
          "issue": "Container or Pod is running without root user control",
          "impact": "Container or Pod could be running with full administrative privileges",
          "resolve": "Set `securityContext.runAsNonRoot` to `true`"
        },
        "publicId": "SNYK-CC-K8S-10",
        "msg": "input.spec.template.spec.containers[mastercard-processor].securityContext.runAsNonRoot",
        "description": "",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 11]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[mastercard-processor]",
          "securityContext",
          "runAsNonRoot"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-6",
        "title": "Container does not drop all default capabilities",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-6",
        "isGeneratedByCustomRule": false,
        "issue": "All default capabilities are not explicitly dropped",
        "impact": "Containers are running with potentially unnecessary privileges",
        "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
        "remediation": {
          "kubernetes": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
          "terraform": "Add `ALL` to `spec.container.security_context.capabilities.drop` list, and add only required capabilities to `spec.container.security_context.capabilities.add`, ensuring it also does not contain `ALL`"
        },
        "lineNumber": 256,
        "iacDescription": {
          "issue": "All default capabilities are not explicitly dropped",
          "impact": "Containers are running with potentially unnecessary privileges",
          "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`"
        },
        "publicId": "SNYK-CC-K8S-6",
        "msg": "input.spec.template.spec.containers[mastercard-processor].securityContext.capabilities.drop",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
          "https://linux-audit.com/linux-capabilities-hardening-linux-binaries-by-removing-setuid/"
        ],
        "path": [
          "[DocId: 11]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[mastercard-processor]",
          "securityContext",
          "capabilities",
          "drop"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-4",
        "title": "Container is running without memory limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-4",
        "isGeneratedByCustomRule": false,
        "issue": "Memory limit is not defined",
        "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
        "resolve": "Set `resources.limits.memory` value",
        "remediation": {
          "kubernetes": "Set `resources.limits.memory` value",
          "terraform": "Set `resources.limits.memory` value"
        },
        "lineNumber": 256,
        "iacDescription": {
          "issue": "Memory limit is not defined",
          "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
          "resolve": "Set `resources.limits.memory` value"
        },
        "publicId": "SNYK-CC-K8S-4",
        "msg": "input.spec.template.spec.containers[mastercard-processor].resources.limits.memory",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/memory-default-namespace/"
        ],
        "path": [
          "[DocId: 11]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[mastercard-processor]",
          "resources",
          "limits",
          "memory"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-44",
        "title": "Role or ClusterRole with too wide permissions",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Role",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-44",
        "isGeneratedByCustomRule": false,
        "issue": "The role uses wildcards, which grant the role permissions to the whole cluster",
        "impact": "The use of wildcard rights grants is likely to provide excessive rights to the Kubernetes API. For a ClusterRole this would be considered high severity.",
        "resolve": "Set only the necessary permissions required",
        "remediation": {
          "kubernetes": "Set only the necessary permissions required",
          "terraform": "Remove any wildcards [*] from `rule.verbs` and `rule.resources`"
        },
        "lineNumber": 460,
        "iacDescription": {
          "issue": "The role uses wildcards, which grant the role permissions to the whole cluster",
          "impact": "The use of wildcard rights grants is likely to provide excessive rights to the Kubernetes API. For a ClusterRole this would be considered high severity.",
          "resolve": "Set only the necessary permissions required"
        },
        "publicId": "SNYK-CC-K8S-44",
        "msg": "rules[0].verbs",
        "references": [
          "https://kubernetes.io/docs/reference/access-authn-authz/rbac/"
        ],
        "path": [
          "[DocId: 13]",
          "rules[0]",
          "verbs"
        ],
        "compliance": []
      }
    ]
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles/ocp4_workload_stackrox_demo_pipeline/files/install/pipeline_subscription.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles/ocp4_workload_stackrox_demo_pipeline/files/install/pipeline_subscription.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles-infra/infra-aws-sandbox/files/CF-IAM.json",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles-infra/infra-aws-sandbox/files/CF-IAM.json",
    "packageManager": "cloudformationconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "cloudformationconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4-workload-cnad-app-modernization/files/bc-quarkus-trade-orders.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4-workload-cnad-app-modernization/files/bc-quarkus-trade-orders.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4-workload-cnad-app-modernization/files/crw-cluster.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4-workload-cnad-app-modernization/files/crw-cluster.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4-workload-cnad-app-modernization/files/crw-operator-group.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4-workload-cnad-app-modernization/files/crw-operator-group.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4-workload-cnad-app-modernization/files/crw-operator.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4-workload-cnad-app-modernization/files/crw-operator.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4-workload-cnad-app-modernization/files/dc-quarkus-trade-orders.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4-workload-cnad-app-modernization/files/dc-quarkus-trade-orders.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4-workload-cnad-app-modernization/files/image-puller-operator-group.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4-workload-cnad-app-modernization/files/image-puller-operator-group.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4-workload-cnad-app-modernization/files/image-puller-operator.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4-workload-cnad-app-modernization/files/image-puller-operator.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4-workload-cnad-app-modernization/files/image-puller.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4-workload-cnad-app-modernization/files/image-puller.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4-workload-cnad-app-modernization/files/is-quarkus-trade-orders.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4-workload-cnad-app-modernization/files/is-quarkus-trade-orders.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4-workload-cnad-app-modernization/files/kafdrop4.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4-workload-cnad-app-modernization/files/kafdrop4.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4-workload-cnad-app-modernization/files/kafka-connect.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4-workload-cnad-app-modernization/files/kafka-connect.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4-workload-cnad-app-modernization/files/kafka.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4-workload-cnad-app-modernization/files/kafka.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4-workload-cnad-app-modernization/files/mysqlconnector.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4-workload-cnad-app-modernization/files/mysqlconnector.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4-workload-cnad-app-modernization/files/operator-subscriptions.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4-workload-cnad-app-modernization/files/operator-subscriptions.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4-workload-cnad-app-modernization/files/operator-subscriptions.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4-workload-cnad-app-modernization/files/operator-subscriptions.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4-workload-cnad-app-modernization/files/operators.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4-workload-cnad-app-modernization/files/operators.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4-workload-cnad-app-modernization/files/quarkus-route.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4-workload-cnad-app-modernization/files/quarkus-route.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4-workload-cnad-app-modernization/files/sample-daytrader-route.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4-workload-cnad-app-modernization/files/sample-daytrader-route.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4-workload-cnad-app-modernization/files/service-trade-orders.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4-workload-cnad-app-modernization/files/service-trade-orders.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4-workload-fsi-risk-analytics/files/amq-cluster.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4-workload-fsi-risk-analytics/files/amq-cluster.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4-workload-fsi-risk-analytics/files/amq-operator-group.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4-workload-fsi-risk-analytics/files/amq-operator-group.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4-workload-fsi-risk-analytics/files/amq-streams-subs.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4-workload-fsi-risk-analytics/files/amq-streams-subs.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4-workload-fsi-risk-analytics/files/camel-k-subs-risk.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4-workload-fsi-risk-analytics/files/camel-k-subs-risk.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4-workload-fsi-risk-analytics/files/camel-k-subs.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4-workload-fsi-risk-analytics/files/camel-k-subs.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4-workload-fsi-risk-analytics/files/data-grid-group.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4-workload-fsi-risk-analytics/files/data-grid-group.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4-workload-fsi-risk-analytics/files/data-grid-load.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4-workload-fsi-risk-analytics/files/data-grid-load.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4-workload-fsi-risk-analytics/files/datagrid-cache.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4-workload-fsi-risk-analytics/files/datagrid-cache.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4-workload-fsi-risk-analytics/files/datagrid-ns.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4-workload-fsi-risk-analytics/files/datagrid-ns.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4-workload-fsi-risk-analytics/files/datagrid-secret.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4-workload-fsi-risk-analytics/files/datagrid-secret.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4-workload-fsi-risk-analytics/files/datagrid-subs.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4-workload-fsi-risk-analytics/files/datagrid-subs.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4-workload-fsi-risk-analytics/files/elastic-cluster.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4-workload-fsi-risk-analytics/files/elastic-cluster.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4-workload-fsi-risk-analytics/files/elastic-subs.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4-workload-fsi-risk-analytics/files/elastic-subs.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4-workload-fsi-risk-analytics/files/kafdrop4.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4-workload-fsi-risk-analytics/files/kafdrop4.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4-workload-fsi-risk-analytics/files/kibana-cluster.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4-workload-fsi-risk-analytics/files/kibana-cluster.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4-workload-fsi-risk-analytics/files/kibana-route.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4-workload-fsi-risk-analytics/files/kibana-route.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4-workload-fsi-risk-analytics/files/management-ui.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4-workload-fsi-risk-analytics/files/management-ui.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4-workload-fsi-risk-analytics/files/mgmt-route.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4-workload-fsi-risk-analytics/files/mgmt-route.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4-workload-fsi-risk-analytics/files/process-elastic.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4-workload-fsi-risk-analytics/files/process-elastic.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4-workload-fsi-risk-analytics/files/rhpam-kie-app.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4-workload-fsi-risk-analytics/files/rhpam-kie-app.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4-workload-fsi-risk-analytics/files/rhpam-subs.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4-workload-fsi-risk-analytics/files/rhpam-subs.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4-workload-fsi-risk-analytics/files/risk-officer-ui.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4-workload-fsi-risk-analytics/files/risk-officer-ui.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4-workload-fsi-risk-analytics/files/risk-route.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4-workload-fsi-risk-analytics/files/risk-route.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4-workload-fsi-risk-analytics/files/var-calc-deployment.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4-workload-fsi-risk-analytics/files/var-calc-deployment.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": false,
    "infrastructureAsCodeIssues": [
      {
        "id": "SNYK-CC-K8S-6",
        "title": "Container does not drop all default capabilities",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-6",
        "isGeneratedByCustomRule": false,
        "issue": "All default capabilities are not explicitly dropped",
        "impact": "Containers are running with potentially unnecessary privileges",
        "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
        "remediation": {
          "kubernetes": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
          "terraform": "Add `ALL` to `spec.container.security_context.capabilities.drop` list, and add only required capabilities to `spec.container.security_context.capabilities.add`, ensuring it also does not contain `ALL`"
        },
        "lineNumber": 19,
        "iacDescription": {
          "issue": "All default capabilities are not explicitly dropped",
          "impact": "Containers are running with potentially unnecessary privileges",
          "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`"
        },
        "publicId": "SNYK-CC-K8S-6",
        "msg": "input.spec.template.spec.containers[var-calc].securityContext.capabilities.drop",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
          "https://linux-audit.com/linux-capabilities-hardening-linux-binaries-by-removing-setuid/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[var-calc]",
          "securityContext",
          "capabilities",
          "drop"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-41",
        "title": "Container is running without liveness probe",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-41",
        "isGeneratedByCustomRule": false,
        "issue": "Liveness probe is not defined",
        "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
        "resolve": "Add `livenessProbe` attribute",
        "remediation": {
          "kubernetes": "Add `livenessProbe` attribute",
          "terraform": "Add `liveness_probe` attribute"
        },
        "lineNumber": 19,
        "iacDescription": {
          "issue": "Liveness probe is not defined",
          "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
          "resolve": "Add `livenessProbe` attribute"
        },
        "publicId": "SNYK-CC-K8S-41",
        "msg": "spec.template.spec.containers[var-calc].livenessProbe",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/",
          "https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/",
          "https://cloud.google.com/blog/products/gcp/kubernetes-best-practices-setting-up-health-checks-with-readiness-and-liveness-probes"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "containers[var-calc]",
          "livenessProbe"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-4",
        "title": "Container is running without memory limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-4",
        "isGeneratedByCustomRule": false,
        "issue": "Memory limit is not defined",
        "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
        "resolve": "Set `resources.limits.memory` value",
        "remediation": {
          "kubernetes": "Set `resources.limits.memory` value",
          "terraform": "Set `resources.limits.memory` value"
        },
        "lineNumber": 19,
        "iacDescription": {
          "issue": "Memory limit is not defined",
          "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
          "resolve": "Set `resources.limits.memory` value"
        },
        "publicId": "SNYK-CC-K8S-4",
        "msg": "input.spec.template.spec.containers[var-calc].resources.limits.memory",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/memory-default-namespace/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[var-calc]",
          "resources",
          "limits",
          "memory"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-8",
        "title": "Container is running with writable root filesystem",
        "severity": "low",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-8",
        "isGeneratedByCustomRule": false,
        "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
        "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
          "terraform": "Set `security_context.read_only_root_filesystem` to `true`"
        },
        "lineNumber": 19,
        "iacDescription": {
          "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
          "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`"
        },
        "publicId": "SNYK-CC-K8S-8",
        "msg": "spec.template.spec.containers[var-calc].securityContext.readOnlyRootFilesystem",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "containers[var-calc]",
          "securityContext",
          "readOnlyRootFilesystem"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-10",
        "title": "Container or Pod is running without root user control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-10",
        "isGeneratedByCustomRule": false,
        "issue": "Container or Pod is running without root user control",
        "impact": "Container or Pod could be running with full administrative privileges",
        "resolve": "Set `securityContext.runAsNonRoot` to `true`",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsNonRoot` to `true`",
          "terraform": "Set `security_context.run_as_non_root` to `true`"
        },
        "lineNumber": 19,
        "iacDescription": {
          "issue": "Container or Pod is running without root user control",
          "impact": "Container or Pod could be running with full administrative privileges",
          "resolve": "Set `securityContext.runAsNonRoot` to `true`"
        },
        "publicId": "SNYK-CC-K8S-10",
        "msg": "input.spec.template.spec.containers[var-calc].securityContext.runAsNonRoot",
        "description": "",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[var-calc]",
          "securityContext",
          "runAsNonRoot"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-11",
        "title": "Container's or Pod's  UID could clash with host's UID",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-11",
        "isGeneratedByCustomRule": false,
        "issue": "`runAsUser` value is set to low UID",
        "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
        "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
          "terraform": "Set `security_context.run_as_user` value to greater or equal than 10'000"
        },
        "lineNumber": 19,
        "iacDescription": {
          "issue": "`runAsUser` value is set to low UID",
          "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
          "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence"
        },
        "publicId": "SNYK-CC-K8S-11",
        "msg": "input.spec.template.spec.containers[var-calc].securityContext.runAsUser",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container",
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod",
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[var-calc]",
          "securityContext",
          "runAsUser"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-9",
        "title": "Container is running without privilege escalation control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-9",
        "isGeneratedByCustomRule": false,
        "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
        "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
          "terraform": "Set `spec.container.security_context.allow_privilege_escalation` to `false`"
        },
        "lineNumber": 19,
        "iacDescription": {
          "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
          "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`"
        },
        "publicId": "SNYK-CC-K8S-9",
        "msg": "spec.template.spec.containers[var-calc].securityContext.allowPrivilegeEscalation",
        "references": [
          "https://www.kernel.org/doc/html/latest/userspace-api/no_new_privs.html"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "containers[var-calc]",
          "securityContext",
          "allowPrivilegeEscalation"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-5",
        "title": "Container has no CPU limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-5",
        "isGeneratedByCustomRule": false,
        "issue": "Container has no CPU limit",
        "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
        "resolve": "Add `resources.limits.cpu` field with required CPU limit value",
        "remediation": {
          "kubernetes": "Add `resources.limits.cpu` field with required CPU limit value",
          "terraform": "Add `spec.container.resources.limits.cpu` field with required CPU limit value"
        },
        "lineNumber": 19,
        "iacDescription": {
          "issue": "Container has no CPU limit",
          "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
          "resolve": "Add `resources.limits.cpu` field with required CPU limit value"
        },
        "publicId": "SNYK-CC-K8S-5",
        "msg": "input.spec.template.spec.containers[var-calc].resources.limits.cpu",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-cpu-resource/",
          "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/cpu-default-namespace/",
          "https://github.com/kubernetes/design-proposals-archive/blob/8da1442ea29adccea40693357d04727127e045ed/node/resource-qos.md#compressible-resource-guaranteess"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[var-calc]",
          "resources",
          "limits",
          "cpu"
        ],
        "compliance": []
      }
    ]
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4-workload-fsi-risk-analytics/files/var-calc-ns.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4-workload-fsi-risk-analytics/files/var-calc-ns.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4-workload-fsi-risk-analytics/files/var-calc-service.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4-workload-fsi-risk-analytics/files/var-calc-service.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4-workload-fsi-risk-analytics/files/var-wrapper-deployment.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4-workload-fsi-risk-analytics/files/var-wrapper-deployment.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": false,
    "infrastructureAsCodeIssues": [
      {
        "id": "SNYK-CC-K8S-41",
        "title": "Container is running without liveness probe",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-41",
        "isGeneratedByCustomRule": false,
        "issue": "Liveness probe is not defined",
        "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
        "resolve": "Add `livenessProbe` attribute",
        "remediation": {
          "kubernetes": "Add `livenessProbe` attribute",
          "terraform": "Add `liveness_probe` attribute"
        },
        "lineNumber": 19,
        "iacDescription": {
          "issue": "Liveness probe is not defined",
          "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
          "resolve": "Add `livenessProbe` attribute"
        },
        "publicId": "SNYK-CC-K8S-41",
        "msg": "spec.template.spec.containers[var-wrapper].livenessProbe",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/",
          "https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/",
          "https://cloud.google.com/blog/products/gcp/kubernetes-best-practices-setting-up-health-checks-with-readiness-and-liveness-probes"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "containers[var-wrapper]",
          "livenessProbe"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-9",
        "title": "Container is running without privilege escalation control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-9",
        "isGeneratedByCustomRule": false,
        "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
        "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
          "terraform": "Set `spec.container.security_context.allow_privilege_escalation` to `false`"
        },
        "lineNumber": 19,
        "iacDescription": {
          "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
          "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`"
        },
        "publicId": "SNYK-CC-K8S-9",
        "msg": "spec.template.spec.containers[var-wrapper].securityContext.allowPrivilegeEscalation",
        "references": [
          "https://www.kernel.org/doc/html/latest/userspace-api/no_new_privs.html"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "containers[var-wrapper]",
          "securityContext",
          "allowPrivilegeEscalation"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-10",
        "title": "Container or Pod is running without root user control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-10",
        "isGeneratedByCustomRule": false,
        "issue": "Container or Pod is running without root user control",
        "impact": "Container or Pod could be running with full administrative privileges",
        "resolve": "Set `securityContext.runAsNonRoot` to `true`",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsNonRoot` to `true`",
          "terraform": "Set `security_context.run_as_non_root` to `true`"
        },
        "lineNumber": 19,
        "iacDescription": {
          "issue": "Container or Pod is running without root user control",
          "impact": "Container or Pod could be running with full administrative privileges",
          "resolve": "Set `securityContext.runAsNonRoot` to `true`"
        },
        "publicId": "SNYK-CC-K8S-10",
        "msg": "input.spec.template.spec.containers[var-wrapper].securityContext.runAsNonRoot",
        "description": "",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[var-wrapper]",
          "securityContext",
          "runAsNonRoot"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-4",
        "title": "Container is running without memory limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-4",
        "isGeneratedByCustomRule": false,
        "issue": "Memory limit is not defined",
        "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
        "resolve": "Set `resources.limits.memory` value",
        "remediation": {
          "kubernetes": "Set `resources.limits.memory` value",
          "terraform": "Set `resources.limits.memory` value"
        },
        "lineNumber": 19,
        "iacDescription": {
          "issue": "Memory limit is not defined",
          "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
          "resolve": "Set `resources.limits.memory` value"
        },
        "publicId": "SNYK-CC-K8S-4",
        "msg": "input.spec.template.spec.containers[var-wrapper].resources.limits.memory",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/memory-default-namespace/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[var-wrapper]",
          "resources",
          "limits",
          "memory"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-11",
        "title": "Container's or Pod's  UID could clash with host's UID",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-11",
        "isGeneratedByCustomRule": false,
        "issue": "`runAsUser` value is set to low UID",
        "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
        "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
          "terraform": "Set `security_context.run_as_user` value to greater or equal than 10'000"
        },
        "lineNumber": 19,
        "iacDescription": {
          "issue": "`runAsUser` value is set to low UID",
          "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
          "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence"
        },
        "publicId": "SNYK-CC-K8S-11",
        "msg": "input.spec.template.spec.containers[var-wrapper].securityContext.runAsUser",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container",
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod",
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[var-wrapper]",
          "securityContext",
          "runAsUser"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-5",
        "title": "Container has no CPU limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-5",
        "isGeneratedByCustomRule": false,
        "issue": "Container has no CPU limit",
        "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
        "resolve": "Add `resources.limits.cpu` field with required CPU limit value",
        "remediation": {
          "kubernetes": "Add `resources.limits.cpu` field with required CPU limit value",
          "terraform": "Add `spec.container.resources.limits.cpu` field with required CPU limit value"
        },
        "lineNumber": 19,
        "iacDescription": {
          "issue": "Container has no CPU limit",
          "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
          "resolve": "Add `resources.limits.cpu` field with required CPU limit value"
        },
        "publicId": "SNYK-CC-K8S-5",
        "msg": "input.spec.template.spec.containers[var-wrapper].resources.limits.cpu",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-cpu-resource/",
          "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/cpu-default-namespace/",
          "https://github.com/kubernetes/design-proposals-archive/blob/8da1442ea29adccea40693357d04727127e045ed/node/resource-qos.md#compressible-resource-guaranteess"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[var-wrapper]",
          "resources",
          "limits",
          "cpu"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-8",
        "title": "Container is running with writable root filesystem",
        "severity": "low",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-8",
        "isGeneratedByCustomRule": false,
        "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
        "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
          "terraform": "Set `security_context.read_only_root_filesystem` to `true`"
        },
        "lineNumber": 19,
        "iacDescription": {
          "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
          "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`"
        },
        "publicId": "SNYK-CC-K8S-8",
        "msg": "spec.template.spec.containers[var-wrapper].securityContext.readOnlyRootFilesystem",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "containers[var-wrapper]",
          "securityContext",
          "readOnlyRootFilesystem"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-6",
        "title": "Container does not drop all default capabilities",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-6",
        "isGeneratedByCustomRule": false,
        "issue": "All default capabilities are not explicitly dropped",
        "impact": "Containers are running with potentially unnecessary privileges",
        "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
        "remediation": {
          "kubernetes": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
          "terraform": "Add `ALL` to `spec.container.security_context.capabilities.drop` list, and add only required capabilities to `spec.container.security_context.capabilities.add`, ensuring it also does not contain `ALL`"
        },
        "lineNumber": 19,
        "iacDescription": {
          "issue": "All default capabilities are not explicitly dropped",
          "impact": "Containers are running with potentially unnecessary privileges",
          "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`"
        },
        "publicId": "SNYK-CC-K8S-6",
        "msg": "input.spec.template.spec.containers[var-wrapper].securityContext.capabilities.drop",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
          "https://linux-audit.com/linux-capabilities-hardening-linux-binaries-by-removing-setuid/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[var-wrapper]",
          "securityContext",
          "capabilities",
          "drop"
        ],
        "compliance": []
      }
    ]
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4-workload-fsi-risk-analytics/files/var-wrapper-ns.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4-workload-fsi-risk-analytics/files/var-wrapper-ns.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4-workload-fsi-risk-analytics/files/var-wrapper-service.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4-workload-fsi-risk-analytics/files/var-wrapper-service.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4-workload-fsi-risk-analytics/templates/credentials.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4-workload-fsi-risk-analytics/templates/credentials.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_3scale_workshop/files/location-service-template.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_3scale_workshop/files/location-service-template.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_3scale_workshop/files/redis-list.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_3scale_workshop/files/redis-list.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_3scale_workshop/files/solution-explorer-pvc.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_3scale_workshop/files/solution-explorer-pvc.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_3scale_workshop/files/solution-explorer-route.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_3scale_workshop/files/solution-explorer-route.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_3scale_workshop/files/solution-explorer-svc.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_3scale_workshop/files/solution-explorer-svc.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_3scale_workshop/templates/postgres-template.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_3scale_workshop/templates/postgres-template.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_adv_app_deploy_ilt/files/helm_chart_repository.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_adv_app_deploy_ilt/files/helm_chart_repository.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_amq_streams_dev_exp/files/kafka-cluster-provisioner.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_amq_streams_dev_exp/files/kafka-cluster-provisioner.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_amq_streams_dev_exp/files/openjdk-is.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_amq_streams_dev_exp/files/openjdk-is.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_app_deploy_ilt/files/gogs_admin_rules_cluster_role.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_app_deploy_ilt/files/gogs_admin_rules_cluster_role.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_app_deploy_ilt/files/gogs_crd.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_app_deploy_ilt/files/gogs_crd.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_aquasec/files/sockshop.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_aquasec/files/sockshop.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": false,
    "infrastructureAsCodeIssues": [
      {
        "id": "SNYK-CC-K8S-10",
        "title": "Container or Pod is running without root user control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-10",
        "isGeneratedByCustomRule": false,
        "issue": "Container or Pod is running without root user control",
        "impact": "Container or Pod could be running with full administrative privileges",
        "resolve": "Set `securityContext.runAsNonRoot` to `true`",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsNonRoot` to `true`",
          "terraform": "Set `security_context.run_as_non_root` to `true`"
        },
        "lineNumber": 20,
        "iacDescription": {
          "issue": "Container or Pod is running without root user control",
          "impact": "Container or Pod could be running with full administrative privileges",
          "resolve": "Set `securityContext.runAsNonRoot` to `true`"
        },
        "publicId": "SNYK-CC-K8S-10",
        "msg": "input.spec.template.spec.containers[carts-db].securityContext.runAsNonRoot",
        "description": "",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[carts-db]",
          "securityContext",
          "runAsNonRoot"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-9",
        "title": "Container is running without privilege escalation control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-9",
        "isGeneratedByCustomRule": false,
        "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
        "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
          "terraform": "Set `spec.container.security_context.allow_privilege_escalation` to `false`"
        },
        "lineNumber": 20,
        "iacDescription": {
          "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
          "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`"
        },
        "publicId": "SNYK-CC-K8S-9",
        "msg": "spec.template.spec.containers[carts-db].securityContext.allowPrivilegeEscalation",
        "references": [
          "https://www.kernel.org/doc/html/latest/userspace-api/no_new_privs.html"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "containers[carts-db]",
          "securityContext",
          "allowPrivilegeEscalation"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-41",
        "title": "Container is running without liveness probe",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-41",
        "isGeneratedByCustomRule": false,
        "issue": "Liveness probe is not defined",
        "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
        "resolve": "Add `livenessProbe` attribute",
        "remediation": {
          "kubernetes": "Add `livenessProbe` attribute",
          "terraform": "Add `liveness_probe` attribute"
        },
        "lineNumber": 20,
        "iacDescription": {
          "issue": "Liveness probe is not defined",
          "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
          "resolve": "Add `livenessProbe` attribute"
        },
        "publicId": "SNYK-CC-K8S-41",
        "msg": "spec.template.spec.containers[carts-db].livenessProbe",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/",
          "https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/",
          "https://cloud.google.com/blog/products/gcp/kubernetes-best-practices-setting-up-health-checks-with-readiness-and-liveness-probes"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "containers[carts-db]",
          "livenessProbe"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-4",
        "title": "Container is running without memory limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-4",
        "isGeneratedByCustomRule": false,
        "issue": "Memory limit is not defined",
        "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
        "resolve": "Set `resources.limits.memory` value",
        "remediation": {
          "kubernetes": "Set `resources.limits.memory` value",
          "terraform": "Set `resources.limits.memory` value"
        },
        "lineNumber": 20,
        "iacDescription": {
          "issue": "Memory limit is not defined",
          "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
          "resolve": "Set `resources.limits.memory` value"
        },
        "publicId": "SNYK-CC-K8S-4",
        "msg": "input.spec.template.spec.containers[carts-db].resources.limits.memory",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/memory-default-namespace/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[carts-db]",
          "resources",
          "limits",
          "memory"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-8",
        "title": "Container is running with writable root filesystem",
        "severity": "low",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-8",
        "isGeneratedByCustomRule": false,
        "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
        "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
          "terraform": "Set `security_context.read_only_root_filesystem` to `true`"
        },
        "lineNumber": 20,
        "iacDescription": {
          "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
          "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`"
        },
        "publicId": "SNYK-CC-K8S-8",
        "msg": "spec.template.spec.containers[carts-db].securityContext.readOnlyRootFilesystem",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "containers[carts-db]",
          "securityContext",
          "readOnlyRootFilesystem"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-6",
        "title": "Container does not drop all default capabilities",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-6",
        "isGeneratedByCustomRule": false,
        "issue": "All default capabilities are not explicitly dropped",
        "impact": "Containers are running with potentially unnecessary privileges",
        "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
        "remediation": {
          "kubernetes": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
          "terraform": "Add `ALL` to `spec.container.security_context.capabilities.drop` list, and add only required capabilities to `spec.container.security_context.capabilities.add`, ensuring it also does not contain `ALL`"
        },
        "lineNumber": 20,
        "iacDescription": {
          "issue": "All default capabilities are not explicitly dropped",
          "impact": "Containers are running with potentially unnecessary privileges",
          "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`"
        },
        "publicId": "SNYK-CC-K8S-6",
        "msg": "input.spec.template.spec.containers[carts-db].securityContext.capabilities.drop",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
          "https://linux-audit.com/linux-capabilities-hardening-linux-binaries-by-removing-setuid/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[carts-db]",
          "securityContext",
          "capabilities",
          "drop"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-11",
        "title": "Container's or Pod's  UID could clash with host's UID",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-11",
        "isGeneratedByCustomRule": false,
        "issue": "`runAsUser` value is set to low UID",
        "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
        "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
          "terraform": "Set `security_context.run_as_user` value to greater or equal than 10'000"
        },
        "lineNumber": 20,
        "iacDescription": {
          "issue": "`runAsUser` value is set to low UID",
          "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
          "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence"
        },
        "publicId": "SNYK-CC-K8S-11",
        "msg": "input.spec.template.spec.containers[carts-db].securityContext.runAsUser",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container",
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod",
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[carts-db]",
          "securityContext",
          "runAsUser"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-5",
        "title": "Container has no CPU limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-5",
        "isGeneratedByCustomRule": false,
        "issue": "Container has no CPU limit",
        "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
        "resolve": "Add `resources.limits.cpu` field with required CPU limit value",
        "remediation": {
          "kubernetes": "Add `resources.limits.cpu` field with required CPU limit value",
          "terraform": "Add `spec.container.resources.limits.cpu` field with required CPU limit value"
        },
        "lineNumber": 20,
        "iacDescription": {
          "issue": "Container has no CPU limit",
          "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
          "resolve": "Add `resources.limits.cpu` field with required CPU limit value"
        },
        "publicId": "SNYK-CC-K8S-5",
        "msg": "input.spec.template.spec.containers[carts-db].resources.limits.cpu",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-cpu-resource/",
          "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/cpu-default-namespace/",
          "https://github.com/kubernetes/design-proposals-archive/blob/8da1442ea29adccea40693357d04727127e045ed/node/resource-qos.md#compressible-resource-guaranteess"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[carts-db]",
          "resources",
          "limits",
          "cpu"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-42",
        "title": "Container could be running with outdated image",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-42",
        "isGeneratedByCustomRule": false,
        "issue": "The image policy does not prevent image reuse",
        "impact": "The container may run with outdated or unauthorized image",
        "resolve": "Set `imagePullPolicy` attribute to `Always`",
        "remediation": {
          "kubernetes": "Set `imagePullPolicy` attribute to `Always`",
          "terraform": "Set `image_pull_policy` attribute to `Always"
        },
        "lineNumber": 20,
        "iacDescription": {
          "issue": "The image policy does not prevent image reuse",
          "impact": "The container may run with outdated or unauthorized image",
          "resolve": "Set `imagePullPolicy` attribute to `Always`"
        },
        "publicId": "SNYK-CC-K8S-42",
        "msg": "spec.template.spec.containers[carts-db].imagePullPolicy",
        "references": [
          "https://kubernetes.io/docs/concepts/containers/images/",
          "https://kubernetes.io/docs/concepts/configuration/overview/#container-images"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "containers[carts-db]",
          "imagePullPolicy"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-8",
        "title": "Container is running with writable root filesystem",
        "severity": "low",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-8",
        "isGeneratedByCustomRule": false,
        "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
        "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
          "terraform": "Set `security_context.read_only_root_filesystem` to `true`"
        },
        "lineNumber": 77,
        "iacDescription": {
          "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
          "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`"
        },
        "publicId": "SNYK-CC-K8S-8",
        "msg": "spec.template.spec.containers[carts].securityContext.readOnlyRootFilesystem",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 2]",
          "spec",
          "template",
          "spec",
          "containers[carts]",
          "securityContext",
          "readOnlyRootFilesystem"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-10",
        "title": "Container or Pod is running without root user control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-10",
        "isGeneratedByCustomRule": false,
        "issue": "Container or Pod is running without root user control",
        "impact": "Container or Pod could be running with full administrative privileges",
        "resolve": "Set `securityContext.runAsNonRoot` to `true`",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsNonRoot` to `true`",
          "terraform": "Set `security_context.run_as_non_root` to `true`"
        },
        "lineNumber": 77,
        "iacDescription": {
          "issue": "Container or Pod is running without root user control",
          "impact": "Container or Pod could be running with full administrative privileges",
          "resolve": "Set `securityContext.runAsNonRoot` to `true`"
        },
        "publicId": "SNYK-CC-K8S-10",
        "msg": "input.spec.template.spec.containers[carts].securityContext.runAsNonRoot",
        "description": "",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 2]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[carts]",
          "securityContext",
          "runAsNonRoot"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-41",
        "title": "Container is running without liveness probe",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-41",
        "isGeneratedByCustomRule": false,
        "issue": "Liveness probe is not defined",
        "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
        "resolve": "Add `livenessProbe` attribute",
        "remediation": {
          "kubernetes": "Add `livenessProbe` attribute",
          "terraform": "Add `liveness_probe` attribute"
        },
        "lineNumber": 77,
        "iacDescription": {
          "issue": "Liveness probe is not defined",
          "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
          "resolve": "Add `livenessProbe` attribute"
        },
        "publicId": "SNYK-CC-K8S-41",
        "msg": "spec.template.spec.containers[carts].livenessProbe",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/",
          "https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/",
          "https://cloud.google.com/blog/products/gcp/kubernetes-best-practices-setting-up-health-checks-with-readiness-and-liveness-probes"
        ],
        "path": [
          "[DocId: 2]",
          "spec",
          "template",
          "spec",
          "containers[carts]",
          "livenessProbe"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-4",
        "title": "Container is running without memory limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-4",
        "isGeneratedByCustomRule": false,
        "issue": "Memory limit is not defined",
        "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
        "resolve": "Set `resources.limits.memory` value",
        "remediation": {
          "kubernetes": "Set `resources.limits.memory` value",
          "terraform": "Set `resources.limits.memory` value"
        },
        "lineNumber": 77,
        "iacDescription": {
          "issue": "Memory limit is not defined",
          "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
          "resolve": "Set `resources.limits.memory` value"
        },
        "publicId": "SNYK-CC-K8S-4",
        "msg": "input.spec.template.spec.containers[carts].resources.limits.memory",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/memory-default-namespace/"
        ],
        "path": [
          "[DocId: 2]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[carts]",
          "resources",
          "limits",
          "memory"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-42",
        "title": "Container could be running with outdated image",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-42",
        "isGeneratedByCustomRule": false,
        "issue": "The image policy does not prevent image reuse",
        "impact": "The container may run with outdated or unauthorized image",
        "resolve": "Set `imagePullPolicy` attribute to `Always`",
        "remediation": {
          "kubernetes": "Set `imagePullPolicy` attribute to `Always`",
          "terraform": "Set `image_pull_policy` attribute to `Always"
        },
        "lineNumber": 77,
        "iacDescription": {
          "issue": "The image policy does not prevent image reuse",
          "impact": "The container may run with outdated or unauthorized image",
          "resolve": "Set `imagePullPolicy` attribute to `Always`"
        },
        "publicId": "SNYK-CC-K8S-42",
        "msg": "spec.template.spec.containers[carts].imagePullPolicy",
        "references": [
          "https://kubernetes.io/docs/concepts/containers/images/",
          "https://kubernetes.io/docs/concepts/configuration/overview/#container-images"
        ],
        "path": [
          "[DocId: 2]",
          "spec",
          "template",
          "spec",
          "containers[carts]",
          "imagePullPolicy"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-9",
        "title": "Container is running without privilege escalation control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-9",
        "isGeneratedByCustomRule": false,
        "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
        "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
          "terraform": "Set `spec.container.security_context.allow_privilege_escalation` to `false`"
        },
        "lineNumber": 77,
        "iacDescription": {
          "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
          "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`"
        },
        "publicId": "SNYK-CC-K8S-9",
        "msg": "spec.template.spec.containers[carts].securityContext.allowPrivilegeEscalation",
        "references": [
          "https://www.kernel.org/doc/html/latest/userspace-api/no_new_privs.html"
        ],
        "path": [
          "[DocId: 2]",
          "spec",
          "template",
          "spec",
          "containers[carts]",
          "securityContext",
          "allowPrivilegeEscalation"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-11",
        "title": "Container's or Pod's  UID could clash with host's UID",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-11",
        "isGeneratedByCustomRule": false,
        "issue": "`runAsUser` value is set to low UID",
        "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
        "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
          "terraform": "Set `security_context.run_as_user` value to greater or equal than 10'000"
        },
        "lineNumber": 77,
        "iacDescription": {
          "issue": "`runAsUser` value is set to low UID",
          "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
          "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence"
        },
        "publicId": "SNYK-CC-K8S-11",
        "msg": "input.spec.template.spec.containers[carts].securityContext.runAsUser",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container",
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod",
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 2]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[carts]",
          "securityContext",
          "runAsUser"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-5",
        "title": "Container has no CPU limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-5",
        "isGeneratedByCustomRule": false,
        "issue": "Container has no CPU limit",
        "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
        "resolve": "Add `resources.limits.cpu` field with required CPU limit value",
        "remediation": {
          "kubernetes": "Add `resources.limits.cpu` field with required CPU limit value",
          "terraform": "Add `spec.container.resources.limits.cpu` field with required CPU limit value"
        },
        "lineNumber": 77,
        "iacDescription": {
          "issue": "Container has no CPU limit",
          "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
          "resolve": "Add `resources.limits.cpu` field with required CPU limit value"
        },
        "publicId": "SNYK-CC-K8S-5",
        "msg": "input.spec.template.spec.containers[carts].resources.limits.cpu",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-cpu-resource/",
          "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/cpu-default-namespace/",
          "https://github.com/kubernetes/design-proposals-archive/blob/8da1442ea29adccea40693357d04727127e045ed/node/resource-qos.md#compressible-resource-guaranteess"
        ],
        "path": [
          "[DocId: 2]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[carts]",
          "resources",
          "limits",
          "cpu"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-6",
        "title": "Container does not drop all default capabilities",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-6",
        "isGeneratedByCustomRule": false,
        "issue": "All default capabilities are not explicitly dropped",
        "impact": "Containers are running with potentially unnecessary privileges",
        "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
        "remediation": {
          "kubernetes": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
          "terraform": "Add `ALL` to `spec.container.security_context.capabilities.drop` list, and add only required capabilities to `spec.container.security_context.capabilities.add`, ensuring it also does not contain `ALL`"
        },
        "lineNumber": 77,
        "iacDescription": {
          "issue": "All default capabilities are not explicitly dropped",
          "impact": "Containers are running with potentially unnecessary privileges",
          "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`"
        },
        "publicId": "SNYK-CC-K8S-6",
        "msg": "input.spec.template.spec.containers[carts].securityContext.capabilities.drop",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
          "https://linux-audit.com/linux-capabilities-hardening-linux-binaries-by-removing-setuid/"
        ],
        "path": [
          "[DocId: 2]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[carts]",
          "securityContext",
          "capabilities",
          "drop"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-4",
        "title": "Container is running without memory limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-4",
        "isGeneratedByCustomRule": false,
        "issue": "Memory limit is not defined",
        "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
        "resolve": "Set `resources.limits.memory` value",
        "remediation": {
          "kubernetes": "Set `resources.limits.memory` value",
          "terraform": "Set `resources.limits.memory` value"
        },
        "lineNumber": 134,
        "iacDescription": {
          "issue": "Memory limit is not defined",
          "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
          "resolve": "Set `resources.limits.memory` value"
        },
        "publicId": "SNYK-CC-K8S-4",
        "msg": "input.spec.template.spec.containers[catalogue-db].resources.limits.memory",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/memory-default-namespace/"
        ],
        "path": [
          "[DocId: 4]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[catalogue-db]",
          "resources",
          "limits",
          "memory"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-42",
        "title": "Container could be running with outdated image",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-42",
        "isGeneratedByCustomRule": false,
        "issue": "The image policy does not prevent image reuse",
        "impact": "The container may run with outdated or unauthorized image",
        "resolve": "Set `imagePullPolicy` attribute to `Always`",
        "remediation": {
          "kubernetes": "Set `imagePullPolicy` attribute to `Always`",
          "terraform": "Set `image_pull_policy` attribute to `Always"
        },
        "lineNumber": 134,
        "iacDescription": {
          "issue": "The image policy does not prevent image reuse",
          "impact": "The container may run with outdated or unauthorized image",
          "resolve": "Set `imagePullPolicy` attribute to `Always`"
        },
        "publicId": "SNYK-CC-K8S-42",
        "msg": "spec.template.spec.containers[catalogue-db].imagePullPolicy",
        "references": [
          "https://kubernetes.io/docs/concepts/containers/images/",
          "https://kubernetes.io/docs/concepts/configuration/overview/#container-images"
        ],
        "path": [
          "[DocId: 4]",
          "spec",
          "template",
          "spec",
          "containers[catalogue-db]",
          "imagePullPolicy"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-9",
        "title": "Container is running without privilege escalation control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-9",
        "isGeneratedByCustomRule": false,
        "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
        "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
          "terraform": "Set `spec.container.security_context.allow_privilege_escalation` to `false`"
        },
        "lineNumber": 134,
        "iacDescription": {
          "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
          "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`"
        },
        "publicId": "SNYK-CC-K8S-9",
        "msg": "spec.template.spec.containers[catalogue-db].securityContext.allowPrivilegeEscalation",
        "references": [
          "https://www.kernel.org/doc/html/latest/userspace-api/no_new_privs.html"
        ],
        "path": [
          "[DocId: 4]",
          "spec",
          "template",
          "spec",
          "containers[catalogue-db]",
          "securityContext",
          "allowPrivilegeEscalation"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-41",
        "title": "Container is running without liveness probe",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-41",
        "isGeneratedByCustomRule": false,
        "issue": "Liveness probe is not defined",
        "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
        "resolve": "Add `livenessProbe` attribute",
        "remediation": {
          "kubernetes": "Add `livenessProbe` attribute",
          "terraform": "Add `liveness_probe` attribute"
        },
        "lineNumber": 134,
        "iacDescription": {
          "issue": "Liveness probe is not defined",
          "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
          "resolve": "Add `livenessProbe` attribute"
        },
        "publicId": "SNYK-CC-K8S-41",
        "msg": "spec.template.spec.containers[catalogue-db].livenessProbe",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/",
          "https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/",
          "https://cloud.google.com/blog/products/gcp/kubernetes-best-practices-setting-up-health-checks-with-readiness-and-liveness-probes"
        ],
        "path": [
          "[DocId: 4]",
          "spec",
          "template",
          "spec",
          "containers[catalogue-db]",
          "livenessProbe"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-5",
        "title": "Container has no CPU limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-5",
        "isGeneratedByCustomRule": false,
        "issue": "Container has no CPU limit",
        "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
        "resolve": "Add `resources.limits.cpu` field with required CPU limit value",
        "remediation": {
          "kubernetes": "Add `resources.limits.cpu` field with required CPU limit value",
          "terraform": "Add `spec.container.resources.limits.cpu` field with required CPU limit value"
        },
        "lineNumber": 134,
        "iacDescription": {
          "issue": "Container has no CPU limit",
          "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
          "resolve": "Add `resources.limits.cpu` field with required CPU limit value"
        },
        "publicId": "SNYK-CC-K8S-5",
        "msg": "input.spec.template.spec.containers[catalogue-db].resources.limits.cpu",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-cpu-resource/",
          "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/cpu-default-namespace/",
          "https://github.com/kubernetes/design-proposals-archive/blob/8da1442ea29adccea40693357d04727127e045ed/node/resource-qos.md#compressible-resource-guaranteess"
        ],
        "path": [
          "[DocId: 4]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[catalogue-db]",
          "resources",
          "limits",
          "cpu"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-11",
        "title": "Container's or Pod's  UID could clash with host's UID",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-11",
        "isGeneratedByCustomRule": false,
        "issue": "`runAsUser` value is set to low UID",
        "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
        "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
          "terraform": "Set `security_context.run_as_user` value to greater or equal than 10'000"
        },
        "lineNumber": 134,
        "iacDescription": {
          "issue": "`runAsUser` value is set to low UID",
          "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
          "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence"
        },
        "publicId": "SNYK-CC-K8S-11",
        "msg": "input.spec.template.spec.containers[catalogue-db].securityContext.runAsUser",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container",
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod",
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 4]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[catalogue-db]",
          "securityContext",
          "runAsUser"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-10",
        "title": "Container or Pod is running without root user control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-10",
        "isGeneratedByCustomRule": false,
        "issue": "Container or Pod is running without root user control",
        "impact": "Container or Pod could be running with full administrative privileges",
        "resolve": "Set `securityContext.runAsNonRoot` to `true`",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsNonRoot` to `true`",
          "terraform": "Set `security_context.run_as_non_root` to `true`"
        },
        "lineNumber": 134,
        "iacDescription": {
          "issue": "Container or Pod is running without root user control",
          "impact": "Container or Pod could be running with full administrative privileges",
          "resolve": "Set `securityContext.runAsNonRoot` to `true`"
        },
        "publicId": "SNYK-CC-K8S-10",
        "msg": "input.spec.template.spec.containers[catalogue-db].securityContext.runAsNonRoot",
        "description": "",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 4]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[catalogue-db]",
          "securityContext",
          "runAsNonRoot"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-8",
        "title": "Container is running with writable root filesystem",
        "severity": "low",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-8",
        "isGeneratedByCustomRule": false,
        "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
        "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
          "terraform": "Set `security_context.read_only_root_filesystem` to `true`"
        },
        "lineNumber": 134,
        "iacDescription": {
          "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
          "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`"
        },
        "publicId": "SNYK-CC-K8S-8",
        "msg": "spec.template.spec.containers[catalogue-db].securityContext.readOnlyRootFilesystem",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 4]",
          "spec",
          "template",
          "spec",
          "containers[catalogue-db]",
          "securityContext",
          "readOnlyRootFilesystem"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-6",
        "title": "Container does not drop all default capabilities",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-6",
        "isGeneratedByCustomRule": false,
        "issue": "All default capabilities are not explicitly dropped",
        "impact": "Containers are running with potentially unnecessary privileges",
        "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
        "remediation": {
          "kubernetes": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
          "terraform": "Add `ALL` to `spec.container.security_context.capabilities.drop` list, and add only required capabilities to `spec.container.security_context.capabilities.add`, ensuring it also does not contain `ALL`"
        },
        "lineNumber": 134,
        "iacDescription": {
          "issue": "All default capabilities are not explicitly dropped",
          "impact": "Containers are running with potentially unnecessary privileges",
          "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`"
        },
        "publicId": "SNYK-CC-K8S-6",
        "msg": "input.spec.template.spec.containers[catalogue-db].securityContext.capabilities.drop",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
          "https://linux-audit.com/linux-capabilities-hardening-linux-binaries-by-removing-setuid/"
        ],
        "path": [
          "[DocId: 4]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[catalogue-db]",
          "securityContext",
          "capabilities",
          "drop"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-11",
        "title": "Container's or Pod's  UID could clash with host's UID",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-11",
        "isGeneratedByCustomRule": false,
        "issue": "`runAsUser` value is set to low UID",
        "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
        "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
          "terraform": "Set `security_context.run_as_user` value to greater or equal than 10'000"
        },
        "lineNumber": 188,
        "iacDescription": {
          "issue": "`runAsUser` value is set to low UID",
          "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
          "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence"
        },
        "publicId": "SNYK-CC-K8S-11",
        "msg": "input.spec.template.spec.containers[catalogue].securityContext.runAsUser",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container",
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod",
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 6]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[catalogue]",
          "securityContext",
          "runAsUser"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-9",
        "title": "Container is running without privilege escalation control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-9",
        "isGeneratedByCustomRule": false,
        "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
        "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
          "terraform": "Set `spec.container.security_context.allow_privilege_escalation` to `false`"
        },
        "lineNumber": 188,
        "iacDescription": {
          "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
          "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`"
        },
        "publicId": "SNYK-CC-K8S-9",
        "msg": "spec.template.spec.containers[catalogue].securityContext.allowPrivilegeEscalation",
        "references": [
          "https://www.kernel.org/doc/html/latest/userspace-api/no_new_privs.html"
        ],
        "path": [
          "[DocId: 6]",
          "spec",
          "template",
          "spec",
          "containers[catalogue]",
          "securityContext",
          "allowPrivilegeEscalation"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-5",
        "title": "Container has no CPU limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-5",
        "isGeneratedByCustomRule": false,
        "issue": "Container has no CPU limit",
        "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
        "resolve": "Add `resources.limits.cpu` field with required CPU limit value",
        "remediation": {
          "kubernetes": "Add `resources.limits.cpu` field with required CPU limit value",
          "terraform": "Add `spec.container.resources.limits.cpu` field with required CPU limit value"
        },
        "lineNumber": 188,
        "iacDescription": {
          "issue": "Container has no CPU limit",
          "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
          "resolve": "Add `resources.limits.cpu` field with required CPU limit value"
        },
        "publicId": "SNYK-CC-K8S-5",
        "msg": "input.spec.template.spec.containers[catalogue].resources.limits.cpu",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-cpu-resource/",
          "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/cpu-default-namespace/",
          "https://github.com/kubernetes/design-proposals-archive/blob/8da1442ea29adccea40693357d04727127e045ed/node/resource-qos.md#compressible-resource-guaranteess"
        ],
        "path": [
          "[DocId: 6]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[catalogue]",
          "resources",
          "limits",
          "cpu"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-6",
        "title": "Container does not drop all default capabilities",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-6",
        "isGeneratedByCustomRule": false,
        "issue": "All default capabilities are not explicitly dropped",
        "impact": "Containers are running with potentially unnecessary privileges",
        "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
        "remediation": {
          "kubernetes": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
          "terraform": "Add `ALL` to `spec.container.security_context.capabilities.drop` list, and add only required capabilities to `spec.container.security_context.capabilities.add`, ensuring it also does not contain `ALL`"
        },
        "lineNumber": 188,
        "iacDescription": {
          "issue": "All default capabilities are not explicitly dropped",
          "impact": "Containers are running with potentially unnecessary privileges",
          "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`"
        },
        "publicId": "SNYK-CC-K8S-6",
        "msg": "input.spec.template.spec.containers[catalogue].securityContext.capabilities.drop",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
          "https://linux-audit.com/linux-capabilities-hardening-linux-binaries-by-removing-setuid/"
        ],
        "path": [
          "[DocId: 6]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[catalogue]",
          "securityContext",
          "capabilities",
          "drop"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-41",
        "title": "Container is running without liveness probe",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-41",
        "isGeneratedByCustomRule": false,
        "issue": "Liveness probe is not defined",
        "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
        "resolve": "Add `livenessProbe` attribute",
        "remediation": {
          "kubernetes": "Add `livenessProbe` attribute",
          "terraform": "Add `liveness_probe` attribute"
        },
        "lineNumber": 188,
        "iacDescription": {
          "issue": "Liveness probe is not defined",
          "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
          "resolve": "Add `livenessProbe` attribute"
        },
        "publicId": "SNYK-CC-K8S-41",
        "msg": "spec.template.spec.containers[catalogue].livenessProbe",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/",
          "https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/",
          "https://cloud.google.com/blog/products/gcp/kubernetes-best-practices-setting-up-health-checks-with-readiness-and-liveness-probes"
        ],
        "path": [
          "[DocId: 6]",
          "spec",
          "template",
          "spec",
          "containers[catalogue]",
          "livenessProbe"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-4",
        "title": "Container is running without memory limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-4",
        "isGeneratedByCustomRule": false,
        "issue": "Memory limit is not defined",
        "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
        "resolve": "Set `resources.limits.memory` value",
        "remediation": {
          "kubernetes": "Set `resources.limits.memory` value",
          "terraform": "Set `resources.limits.memory` value"
        },
        "lineNumber": 188,
        "iacDescription": {
          "issue": "Memory limit is not defined",
          "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
          "resolve": "Set `resources.limits.memory` value"
        },
        "publicId": "SNYK-CC-K8S-4",
        "msg": "input.spec.template.spec.containers[catalogue].resources.limits.memory",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/memory-default-namespace/"
        ],
        "path": [
          "[DocId: 6]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[catalogue]",
          "resources",
          "limits",
          "memory"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-42",
        "title": "Container could be running with outdated image",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-42",
        "isGeneratedByCustomRule": false,
        "issue": "The image policy does not prevent image reuse",
        "impact": "The container may run with outdated or unauthorized image",
        "resolve": "Set `imagePullPolicy` attribute to `Always`",
        "remediation": {
          "kubernetes": "Set `imagePullPolicy` attribute to `Always`",
          "terraform": "Set `image_pull_policy` attribute to `Always"
        },
        "lineNumber": 188,
        "iacDescription": {
          "issue": "The image policy does not prevent image reuse",
          "impact": "The container may run with outdated or unauthorized image",
          "resolve": "Set `imagePullPolicy` attribute to `Always`"
        },
        "publicId": "SNYK-CC-K8S-42",
        "msg": "spec.template.spec.containers[catalogue].imagePullPolicy",
        "references": [
          "https://kubernetes.io/docs/concepts/containers/images/",
          "https://kubernetes.io/docs/concepts/configuration/overview/#container-images"
        ],
        "path": [
          "[DocId: 6]",
          "spec",
          "template",
          "spec",
          "containers[catalogue]",
          "imagePullPolicy"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-8",
        "title": "Container is running with writable root filesystem",
        "severity": "low",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-8",
        "isGeneratedByCustomRule": false,
        "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
        "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
          "terraform": "Set `security_context.read_only_root_filesystem` to `true`"
        },
        "lineNumber": 188,
        "iacDescription": {
          "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
          "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`"
        },
        "publicId": "SNYK-CC-K8S-8",
        "msg": "spec.template.spec.containers[catalogue].securityContext.readOnlyRootFilesystem",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 6]",
          "spec",
          "template",
          "spec",
          "containers[catalogue]",
          "securityContext",
          "readOnlyRootFilesystem"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-10",
        "title": "Container or Pod is running without root user control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-10",
        "isGeneratedByCustomRule": false,
        "issue": "Container or Pod is running without root user control",
        "impact": "Container or Pod could be running with full administrative privileges",
        "resolve": "Set `securityContext.runAsNonRoot` to `true`",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsNonRoot` to `true`",
          "terraform": "Set `security_context.run_as_non_root` to `true`"
        },
        "lineNumber": 188,
        "iacDescription": {
          "issue": "Container or Pod is running without root user control",
          "impact": "Container or Pod could be running with full administrative privileges",
          "resolve": "Set `securityContext.runAsNonRoot` to `true`"
        },
        "publicId": "SNYK-CC-K8S-10",
        "msg": "input.spec.template.spec.containers[catalogue].securityContext.runAsNonRoot",
        "description": "",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 6]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[catalogue]",
          "securityContext",
          "runAsNonRoot"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-41",
        "title": "Container is running without liveness probe",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-41",
        "isGeneratedByCustomRule": false,
        "issue": "Liveness probe is not defined",
        "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
        "resolve": "Add `livenessProbe` attribute",
        "remediation": {
          "kubernetes": "Add `livenessProbe` attribute",
          "terraform": "Add `liveness_probe` attribute"
        },
        "lineNumber": 231,
        "iacDescription": {
          "issue": "Liveness probe is not defined",
          "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
          "resolve": "Add `livenessProbe` attribute"
        },
        "publicId": "SNYK-CC-K8S-41",
        "msg": "spec.template.spec.containers[front-end].livenessProbe",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/",
          "https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/",
          "https://cloud.google.com/blog/products/gcp/kubernetes-best-practices-setting-up-health-checks-with-readiness-and-liveness-probes"
        ],
        "path": [
          "[DocId: 8]",
          "spec",
          "template",
          "spec",
          "containers[front-end]",
          "livenessProbe"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-4",
        "title": "Container is running without memory limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-4",
        "isGeneratedByCustomRule": false,
        "issue": "Memory limit is not defined",
        "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
        "resolve": "Set `resources.limits.memory` value",
        "remediation": {
          "kubernetes": "Set `resources.limits.memory` value",
          "terraform": "Set `resources.limits.memory` value"
        },
        "lineNumber": 231,
        "iacDescription": {
          "issue": "Memory limit is not defined",
          "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
          "resolve": "Set `resources.limits.memory` value"
        },
        "publicId": "SNYK-CC-K8S-4",
        "msg": "input.spec.template.spec.containers[front-end].resources.limits.memory",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/memory-default-namespace/"
        ],
        "path": [
          "[DocId: 8]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[front-end]",
          "resources",
          "limits",
          "memory"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-11",
        "title": "Container's or Pod's  UID could clash with host's UID",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-11",
        "isGeneratedByCustomRule": false,
        "issue": "`runAsUser` value is set to low UID",
        "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
        "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
          "terraform": "Set `security_context.run_as_user` value to greater or equal than 10'000"
        },
        "lineNumber": 231,
        "iacDescription": {
          "issue": "`runAsUser` value is set to low UID",
          "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
          "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence"
        },
        "publicId": "SNYK-CC-K8S-11",
        "msg": "input.spec.template.spec.containers[front-end].securityContext.runAsUser",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container",
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod",
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 8]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[front-end]",
          "securityContext",
          "runAsUser"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-5",
        "title": "Container has no CPU limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-5",
        "isGeneratedByCustomRule": false,
        "issue": "Container has no CPU limit",
        "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
        "resolve": "Add `resources.limits.cpu` field with required CPU limit value",
        "remediation": {
          "kubernetes": "Add `resources.limits.cpu` field with required CPU limit value",
          "terraform": "Add `spec.container.resources.limits.cpu` field with required CPU limit value"
        },
        "lineNumber": 231,
        "iacDescription": {
          "issue": "Container has no CPU limit",
          "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
          "resolve": "Add `resources.limits.cpu` field with required CPU limit value"
        },
        "publicId": "SNYK-CC-K8S-5",
        "msg": "input.spec.template.spec.containers[front-end].resources.limits.cpu",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-cpu-resource/",
          "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/cpu-default-namespace/",
          "https://github.com/kubernetes/design-proposals-archive/blob/8da1442ea29adccea40693357d04727127e045ed/node/resource-qos.md#compressible-resource-guaranteess"
        ],
        "path": [
          "[DocId: 8]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[front-end]",
          "resources",
          "limits",
          "cpu"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-8",
        "title": "Container is running with writable root filesystem",
        "severity": "low",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-8",
        "isGeneratedByCustomRule": false,
        "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
        "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
          "terraform": "Set `security_context.read_only_root_filesystem` to `true`"
        },
        "lineNumber": 231,
        "iacDescription": {
          "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
          "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`"
        },
        "publicId": "SNYK-CC-K8S-8",
        "msg": "spec.template.spec.containers[front-end].securityContext.readOnlyRootFilesystem",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 8]",
          "spec",
          "template",
          "spec",
          "containers[front-end]",
          "securityContext",
          "readOnlyRootFilesystem"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-10",
        "title": "Container or Pod is running without root user control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-10",
        "isGeneratedByCustomRule": false,
        "issue": "Container or Pod is running without root user control",
        "impact": "Container or Pod could be running with full administrative privileges",
        "resolve": "Set `securityContext.runAsNonRoot` to `true`",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsNonRoot` to `true`",
          "terraform": "Set `security_context.run_as_non_root` to `true`"
        },
        "lineNumber": 231,
        "iacDescription": {
          "issue": "Container or Pod is running without root user control",
          "impact": "Container or Pod could be running with full administrative privileges",
          "resolve": "Set `securityContext.runAsNonRoot` to `true`"
        },
        "publicId": "SNYK-CC-K8S-10",
        "msg": "input.spec.template.spec.containers[front-end].securityContext.runAsNonRoot",
        "description": "",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 8]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[front-end]",
          "securityContext",
          "runAsNonRoot"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-6",
        "title": "Container does not drop all default capabilities",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-6",
        "isGeneratedByCustomRule": false,
        "issue": "All default capabilities are not explicitly dropped",
        "impact": "Containers are running with potentially unnecessary privileges",
        "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
        "remediation": {
          "kubernetes": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
          "terraform": "Add `ALL` to `spec.container.security_context.capabilities.drop` list, and add only required capabilities to `spec.container.security_context.capabilities.add`, ensuring it also does not contain `ALL`"
        },
        "lineNumber": 231,
        "iacDescription": {
          "issue": "All default capabilities are not explicitly dropped",
          "impact": "Containers are running with potentially unnecessary privileges",
          "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`"
        },
        "publicId": "SNYK-CC-K8S-6",
        "msg": "input.spec.template.spec.containers[front-end].securityContext.capabilities.drop",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
          "https://linux-audit.com/linux-capabilities-hardening-linux-binaries-by-removing-setuid/"
        ],
        "path": [
          "[DocId: 8]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[front-end]",
          "securityContext",
          "capabilities",
          "drop"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-42",
        "title": "Container could be running with outdated image",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-42",
        "isGeneratedByCustomRule": false,
        "issue": "The image policy does not prevent image reuse",
        "impact": "The container may run with outdated or unauthorized image",
        "resolve": "Set `imagePullPolicy` attribute to `Always`",
        "remediation": {
          "kubernetes": "Set `imagePullPolicy` attribute to `Always`",
          "terraform": "Set `image_pull_policy` attribute to `Always"
        },
        "lineNumber": 231,
        "iacDescription": {
          "issue": "The image policy does not prevent image reuse",
          "impact": "The container may run with outdated or unauthorized image",
          "resolve": "Set `imagePullPolicy` attribute to `Always`"
        },
        "publicId": "SNYK-CC-K8S-42",
        "msg": "spec.template.spec.containers[front-end].imagePullPolicy",
        "references": [
          "https://kubernetes.io/docs/concepts/containers/images/",
          "https://kubernetes.io/docs/concepts/configuration/overview/#container-images"
        ],
        "path": [
          "[DocId: 8]",
          "spec",
          "template",
          "spec",
          "containers[front-end]",
          "imagePullPolicy"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-9",
        "title": "Container is running without privilege escalation control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-9",
        "isGeneratedByCustomRule": false,
        "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
        "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
          "terraform": "Set `spec.container.security_context.allow_privilege_escalation` to `false`"
        },
        "lineNumber": 231,
        "iacDescription": {
          "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
          "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`"
        },
        "publicId": "SNYK-CC-K8S-9",
        "msg": "spec.template.spec.containers[front-end].securityContext.allowPrivilegeEscalation",
        "references": [
          "https://www.kernel.org/doc/html/latest/userspace-api/no_new_privs.html"
        ],
        "path": [
          "[DocId: 8]",
          "spec",
          "template",
          "spec",
          "containers[front-end]",
          "securityContext",
          "allowPrivilegeEscalation"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-4",
        "title": "Container is running without memory limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-4",
        "isGeneratedByCustomRule": false,
        "issue": "Memory limit is not defined",
        "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
        "resolve": "Set `resources.limits.memory` value",
        "remediation": {
          "kubernetes": "Set `resources.limits.memory` value",
          "terraform": "Set `resources.limits.memory` value"
        },
        "lineNumber": 273,
        "iacDescription": {
          "issue": "Memory limit is not defined",
          "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
          "resolve": "Set `resources.limits.memory` value"
        },
        "publicId": "SNYK-CC-K8S-4",
        "msg": "input.spec.template.spec.containers[orders-db].resources.limits.memory",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/memory-default-namespace/"
        ],
        "path": [
          "[DocId: 10]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[orders-db]",
          "resources",
          "limits",
          "memory"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-42",
        "title": "Container could be running with outdated image",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-42",
        "isGeneratedByCustomRule": false,
        "issue": "The image policy does not prevent image reuse",
        "impact": "The container may run with outdated or unauthorized image",
        "resolve": "Set `imagePullPolicy` attribute to `Always`",
        "remediation": {
          "kubernetes": "Set `imagePullPolicy` attribute to `Always`",
          "terraform": "Set `image_pull_policy` attribute to `Always"
        },
        "lineNumber": 273,
        "iacDescription": {
          "issue": "The image policy does not prevent image reuse",
          "impact": "The container may run with outdated or unauthorized image",
          "resolve": "Set `imagePullPolicy` attribute to `Always`"
        },
        "publicId": "SNYK-CC-K8S-42",
        "msg": "spec.template.spec.containers[orders-db].imagePullPolicy",
        "references": [
          "https://kubernetes.io/docs/concepts/containers/images/",
          "https://kubernetes.io/docs/concepts/configuration/overview/#container-images"
        ],
        "path": [
          "[DocId: 10]",
          "spec",
          "template",
          "spec",
          "containers[orders-db]",
          "imagePullPolicy"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-9",
        "title": "Container is running without privilege escalation control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-9",
        "isGeneratedByCustomRule": false,
        "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
        "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
          "terraform": "Set `spec.container.security_context.allow_privilege_escalation` to `false`"
        },
        "lineNumber": 273,
        "iacDescription": {
          "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
          "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`"
        },
        "publicId": "SNYK-CC-K8S-9",
        "msg": "spec.template.spec.containers[orders-db].securityContext.allowPrivilegeEscalation",
        "references": [
          "https://www.kernel.org/doc/html/latest/userspace-api/no_new_privs.html"
        ],
        "path": [
          "[DocId: 10]",
          "spec",
          "template",
          "spec",
          "containers[orders-db]",
          "securityContext",
          "allowPrivilegeEscalation"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-41",
        "title": "Container is running without liveness probe",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-41",
        "isGeneratedByCustomRule": false,
        "issue": "Liveness probe is not defined",
        "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
        "resolve": "Add `livenessProbe` attribute",
        "remediation": {
          "kubernetes": "Add `livenessProbe` attribute",
          "terraform": "Add `liveness_probe` attribute"
        },
        "lineNumber": 273,
        "iacDescription": {
          "issue": "Liveness probe is not defined",
          "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
          "resolve": "Add `livenessProbe` attribute"
        },
        "publicId": "SNYK-CC-K8S-41",
        "msg": "spec.template.spec.containers[orders-db].livenessProbe",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/",
          "https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/",
          "https://cloud.google.com/blog/products/gcp/kubernetes-best-practices-setting-up-health-checks-with-readiness-and-liveness-probes"
        ],
        "path": [
          "[DocId: 10]",
          "spec",
          "template",
          "spec",
          "containers[orders-db]",
          "livenessProbe"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-5",
        "title": "Container has no CPU limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-5",
        "isGeneratedByCustomRule": false,
        "issue": "Container has no CPU limit",
        "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
        "resolve": "Add `resources.limits.cpu` field with required CPU limit value",
        "remediation": {
          "kubernetes": "Add `resources.limits.cpu` field with required CPU limit value",
          "terraform": "Add `spec.container.resources.limits.cpu` field with required CPU limit value"
        },
        "lineNumber": 273,
        "iacDescription": {
          "issue": "Container has no CPU limit",
          "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
          "resolve": "Add `resources.limits.cpu` field with required CPU limit value"
        },
        "publicId": "SNYK-CC-K8S-5",
        "msg": "input.spec.template.spec.containers[orders-db].resources.limits.cpu",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-cpu-resource/",
          "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/cpu-default-namespace/",
          "https://github.com/kubernetes/design-proposals-archive/blob/8da1442ea29adccea40693357d04727127e045ed/node/resource-qos.md#compressible-resource-guaranteess"
        ],
        "path": [
          "[DocId: 10]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[orders-db]",
          "resources",
          "limits",
          "cpu"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-11",
        "title": "Container's or Pod's  UID could clash with host's UID",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-11",
        "isGeneratedByCustomRule": false,
        "issue": "`runAsUser` value is set to low UID",
        "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
        "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
          "terraform": "Set `security_context.run_as_user` value to greater or equal than 10'000"
        },
        "lineNumber": 273,
        "iacDescription": {
          "issue": "`runAsUser` value is set to low UID",
          "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
          "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence"
        },
        "publicId": "SNYK-CC-K8S-11",
        "msg": "input.spec.template.spec.containers[orders-db].securityContext.runAsUser",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container",
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod",
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 10]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[orders-db]",
          "securityContext",
          "runAsUser"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-10",
        "title": "Container or Pod is running without root user control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-10",
        "isGeneratedByCustomRule": false,
        "issue": "Container or Pod is running without root user control",
        "impact": "Container or Pod could be running with full administrative privileges",
        "resolve": "Set `securityContext.runAsNonRoot` to `true`",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsNonRoot` to `true`",
          "terraform": "Set `security_context.run_as_non_root` to `true`"
        },
        "lineNumber": 273,
        "iacDescription": {
          "issue": "Container or Pod is running without root user control",
          "impact": "Container or Pod could be running with full administrative privileges",
          "resolve": "Set `securityContext.runAsNonRoot` to `true`"
        },
        "publicId": "SNYK-CC-K8S-10",
        "msg": "input.spec.template.spec.containers[orders-db].securityContext.runAsNonRoot",
        "description": "",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 10]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[orders-db]",
          "securityContext",
          "runAsNonRoot"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-8",
        "title": "Container is running with writable root filesystem",
        "severity": "low",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-8",
        "isGeneratedByCustomRule": false,
        "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
        "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
          "terraform": "Set `security_context.read_only_root_filesystem` to `true`"
        },
        "lineNumber": 273,
        "iacDescription": {
          "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
          "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`"
        },
        "publicId": "SNYK-CC-K8S-8",
        "msg": "spec.template.spec.containers[orders-db].securityContext.readOnlyRootFilesystem",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 10]",
          "spec",
          "template",
          "spec",
          "containers[orders-db]",
          "securityContext",
          "readOnlyRootFilesystem"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-6",
        "title": "Container does not drop all default capabilities",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-6",
        "isGeneratedByCustomRule": false,
        "issue": "All default capabilities are not explicitly dropped",
        "impact": "Containers are running with potentially unnecessary privileges",
        "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
        "remediation": {
          "kubernetes": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
          "terraform": "Add `ALL` to `spec.container.security_context.capabilities.drop` list, and add only required capabilities to `spec.container.security_context.capabilities.add`, ensuring it also does not contain `ALL`"
        },
        "lineNumber": 273,
        "iacDescription": {
          "issue": "All default capabilities are not explicitly dropped",
          "impact": "Containers are running with potentially unnecessary privileges",
          "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`"
        },
        "publicId": "SNYK-CC-K8S-6",
        "msg": "input.spec.template.spec.containers[orders-db].securityContext.capabilities.drop",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
          "https://linux-audit.com/linux-capabilities-hardening-linux-binaries-by-removing-setuid/"
        ],
        "path": [
          "[DocId: 10]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[orders-db]",
          "securityContext",
          "capabilities",
          "drop"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-11",
        "title": "Container's or Pod's  UID could clash with host's UID",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-11",
        "isGeneratedByCustomRule": false,
        "issue": "`runAsUser` value is set to low UID",
        "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
        "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
          "terraform": "Set `security_context.run_as_user` value to greater or equal than 10'000"
        },
        "lineNumber": 330,
        "iacDescription": {
          "issue": "`runAsUser` value is set to low UID",
          "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
          "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence"
        },
        "publicId": "SNYK-CC-K8S-11",
        "msg": "input.spec.template.spec.containers[orders].securityContext.runAsUser",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container",
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod",
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 12]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[orders]",
          "securityContext",
          "runAsUser"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-9",
        "title": "Container is running without privilege escalation control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-9",
        "isGeneratedByCustomRule": false,
        "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
        "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
          "terraform": "Set `spec.container.security_context.allow_privilege_escalation` to `false`"
        },
        "lineNumber": 330,
        "iacDescription": {
          "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
          "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`"
        },
        "publicId": "SNYK-CC-K8S-9",
        "msg": "spec.template.spec.containers[orders].securityContext.allowPrivilegeEscalation",
        "references": [
          "https://www.kernel.org/doc/html/latest/userspace-api/no_new_privs.html"
        ],
        "path": [
          "[DocId: 12]",
          "spec",
          "template",
          "spec",
          "containers[orders]",
          "securityContext",
          "allowPrivilegeEscalation"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-5",
        "title": "Container has no CPU limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-5",
        "isGeneratedByCustomRule": false,
        "issue": "Container has no CPU limit",
        "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
        "resolve": "Add `resources.limits.cpu` field with required CPU limit value",
        "remediation": {
          "kubernetes": "Add `resources.limits.cpu` field with required CPU limit value",
          "terraform": "Add `spec.container.resources.limits.cpu` field with required CPU limit value"
        },
        "lineNumber": 330,
        "iacDescription": {
          "issue": "Container has no CPU limit",
          "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
          "resolve": "Add `resources.limits.cpu` field with required CPU limit value"
        },
        "publicId": "SNYK-CC-K8S-5",
        "msg": "input.spec.template.spec.containers[orders].resources.limits.cpu",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-cpu-resource/",
          "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/cpu-default-namespace/",
          "https://github.com/kubernetes/design-proposals-archive/blob/8da1442ea29adccea40693357d04727127e045ed/node/resource-qos.md#compressible-resource-guaranteess"
        ],
        "path": [
          "[DocId: 12]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[orders]",
          "resources",
          "limits",
          "cpu"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-6",
        "title": "Container does not drop all default capabilities",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-6",
        "isGeneratedByCustomRule": false,
        "issue": "All default capabilities are not explicitly dropped",
        "impact": "Containers are running with potentially unnecessary privileges",
        "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
        "remediation": {
          "kubernetes": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
          "terraform": "Add `ALL` to `spec.container.security_context.capabilities.drop` list, and add only required capabilities to `spec.container.security_context.capabilities.add`, ensuring it also does not contain `ALL`"
        },
        "lineNumber": 330,
        "iacDescription": {
          "issue": "All default capabilities are not explicitly dropped",
          "impact": "Containers are running with potentially unnecessary privileges",
          "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`"
        },
        "publicId": "SNYK-CC-K8S-6",
        "msg": "input.spec.template.spec.containers[orders].securityContext.capabilities.drop",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
          "https://linux-audit.com/linux-capabilities-hardening-linux-binaries-by-removing-setuid/"
        ],
        "path": [
          "[DocId: 12]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[orders]",
          "securityContext",
          "capabilities",
          "drop"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-41",
        "title": "Container is running without liveness probe",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-41",
        "isGeneratedByCustomRule": false,
        "issue": "Liveness probe is not defined",
        "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
        "resolve": "Add `livenessProbe` attribute",
        "remediation": {
          "kubernetes": "Add `livenessProbe` attribute",
          "terraform": "Add `liveness_probe` attribute"
        },
        "lineNumber": 330,
        "iacDescription": {
          "issue": "Liveness probe is not defined",
          "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
          "resolve": "Add `livenessProbe` attribute"
        },
        "publicId": "SNYK-CC-K8S-41",
        "msg": "spec.template.spec.containers[orders].livenessProbe",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/",
          "https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/",
          "https://cloud.google.com/blog/products/gcp/kubernetes-best-practices-setting-up-health-checks-with-readiness-and-liveness-probes"
        ],
        "path": [
          "[DocId: 12]",
          "spec",
          "template",
          "spec",
          "containers[orders]",
          "livenessProbe"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-4",
        "title": "Container is running without memory limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-4",
        "isGeneratedByCustomRule": false,
        "issue": "Memory limit is not defined",
        "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
        "resolve": "Set `resources.limits.memory` value",
        "remediation": {
          "kubernetes": "Set `resources.limits.memory` value",
          "terraform": "Set `resources.limits.memory` value"
        },
        "lineNumber": 330,
        "iacDescription": {
          "issue": "Memory limit is not defined",
          "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
          "resolve": "Set `resources.limits.memory` value"
        },
        "publicId": "SNYK-CC-K8S-4",
        "msg": "input.spec.template.spec.containers[orders].resources.limits.memory",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/memory-default-namespace/"
        ],
        "path": [
          "[DocId: 12]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[orders]",
          "resources",
          "limits",
          "memory"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-42",
        "title": "Container could be running with outdated image",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-42",
        "isGeneratedByCustomRule": false,
        "issue": "The image policy does not prevent image reuse",
        "impact": "The container may run with outdated or unauthorized image",
        "resolve": "Set `imagePullPolicy` attribute to `Always`",
        "remediation": {
          "kubernetes": "Set `imagePullPolicy` attribute to `Always`",
          "terraform": "Set `image_pull_policy` attribute to `Always"
        },
        "lineNumber": 330,
        "iacDescription": {
          "issue": "The image policy does not prevent image reuse",
          "impact": "The container may run with outdated or unauthorized image",
          "resolve": "Set `imagePullPolicy` attribute to `Always`"
        },
        "publicId": "SNYK-CC-K8S-42",
        "msg": "spec.template.spec.containers[orders].imagePullPolicy",
        "references": [
          "https://kubernetes.io/docs/concepts/containers/images/",
          "https://kubernetes.io/docs/concepts/configuration/overview/#container-images"
        ],
        "path": [
          "[DocId: 12]",
          "spec",
          "template",
          "spec",
          "containers[orders]",
          "imagePullPolicy"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-8",
        "title": "Container is running with writable root filesystem",
        "severity": "low",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-8",
        "isGeneratedByCustomRule": false,
        "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
        "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
          "terraform": "Set `security_context.read_only_root_filesystem` to `true`"
        },
        "lineNumber": 330,
        "iacDescription": {
          "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
          "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`"
        },
        "publicId": "SNYK-CC-K8S-8",
        "msg": "spec.template.spec.containers[orders].securityContext.readOnlyRootFilesystem",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 12]",
          "spec",
          "template",
          "spec",
          "containers[orders]",
          "securityContext",
          "readOnlyRootFilesystem"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-10",
        "title": "Container or Pod is running without root user control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-10",
        "isGeneratedByCustomRule": false,
        "issue": "Container or Pod is running without root user control",
        "impact": "Container or Pod could be running with full administrative privileges",
        "resolve": "Set `securityContext.runAsNonRoot` to `true`",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsNonRoot` to `true`",
          "terraform": "Set `security_context.run_as_non_root` to `true`"
        },
        "lineNumber": 330,
        "iacDescription": {
          "issue": "Container or Pod is running without root user control",
          "impact": "Container or Pod could be running with full administrative privileges",
          "resolve": "Set `securityContext.runAsNonRoot` to `true`"
        },
        "publicId": "SNYK-CC-K8S-10",
        "msg": "input.spec.template.spec.containers[orders].securityContext.runAsNonRoot",
        "description": "",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 12]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[orders]",
          "securityContext",
          "runAsNonRoot"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-11",
        "title": "Container's or Pod's  UID could clash with host's UID",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-11",
        "isGeneratedByCustomRule": false,
        "issue": "`runAsUser` value is set to low UID",
        "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
        "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
          "terraform": "Set `security_context.run_as_user` value to greater or equal than 10'000"
        },
        "lineNumber": 386,
        "iacDescription": {
          "issue": "`runAsUser` value is set to low UID",
          "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
          "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence"
        },
        "publicId": "SNYK-CC-K8S-11",
        "msg": "input.spec.template.spec.containers[payment].securityContext.runAsUser",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container",
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod",
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 14]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[payment]",
          "securityContext",
          "runAsUser"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-42",
        "title": "Container could be running with outdated image",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-42",
        "isGeneratedByCustomRule": false,
        "issue": "The image policy does not prevent image reuse",
        "impact": "The container may run with outdated or unauthorized image",
        "resolve": "Set `imagePullPolicy` attribute to `Always`",
        "remediation": {
          "kubernetes": "Set `imagePullPolicy` attribute to `Always`",
          "terraform": "Set `image_pull_policy` attribute to `Always"
        },
        "lineNumber": 386,
        "iacDescription": {
          "issue": "The image policy does not prevent image reuse",
          "impact": "The container may run with outdated or unauthorized image",
          "resolve": "Set `imagePullPolicy` attribute to `Always`"
        },
        "publicId": "SNYK-CC-K8S-42",
        "msg": "spec.template.spec.containers[payment].imagePullPolicy",
        "references": [
          "https://kubernetes.io/docs/concepts/containers/images/",
          "https://kubernetes.io/docs/concepts/configuration/overview/#container-images"
        ],
        "path": [
          "[DocId: 14]",
          "spec",
          "template",
          "spec",
          "containers[payment]",
          "imagePullPolicy"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-10",
        "title": "Container or Pod is running without root user control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-10",
        "isGeneratedByCustomRule": false,
        "issue": "Container or Pod is running without root user control",
        "impact": "Container or Pod could be running with full administrative privileges",
        "resolve": "Set `securityContext.runAsNonRoot` to `true`",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsNonRoot` to `true`",
          "terraform": "Set `security_context.run_as_non_root` to `true`"
        },
        "lineNumber": 386,
        "iacDescription": {
          "issue": "Container or Pod is running without root user control",
          "impact": "Container or Pod could be running with full administrative privileges",
          "resolve": "Set `securityContext.runAsNonRoot` to `true`"
        },
        "publicId": "SNYK-CC-K8S-10",
        "msg": "input.spec.template.spec.containers[payment].securityContext.runAsNonRoot",
        "description": "",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 14]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[payment]",
          "securityContext",
          "runAsNonRoot"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-6",
        "title": "Container does not drop all default capabilities",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-6",
        "isGeneratedByCustomRule": false,
        "issue": "All default capabilities are not explicitly dropped",
        "impact": "Containers are running with potentially unnecessary privileges",
        "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
        "remediation": {
          "kubernetes": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
          "terraform": "Add `ALL` to `spec.container.security_context.capabilities.drop` list, and add only required capabilities to `spec.container.security_context.capabilities.add`, ensuring it also does not contain `ALL`"
        },
        "lineNumber": 386,
        "iacDescription": {
          "issue": "All default capabilities are not explicitly dropped",
          "impact": "Containers are running with potentially unnecessary privileges",
          "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`"
        },
        "publicId": "SNYK-CC-K8S-6",
        "msg": "input.spec.template.spec.containers[payment].securityContext.capabilities.drop",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
          "https://linux-audit.com/linux-capabilities-hardening-linux-binaries-by-removing-setuid/"
        ],
        "path": [
          "[DocId: 14]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[payment]",
          "securityContext",
          "capabilities",
          "drop"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-9",
        "title": "Container is running without privilege escalation control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-9",
        "isGeneratedByCustomRule": false,
        "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
        "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
          "terraform": "Set `spec.container.security_context.allow_privilege_escalation` to `false`"
        },
        "lineNumber": 386,
        "iacDescription": {
          "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
          "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`"
        },
        "publicId": "SNYK-CC-K8S-9",
        "msg": "spec.template.spec.containers[payment].securityContext.allowPrivilegeEscalation",
        "references": [
          "https://www.kernel.org/doc/html/latest/userspace-api/no_new_privs.html"
        ],
        "path": [
          "[DocId: 14]",
          "spec",
          "template",
          "spec",
          "containers[payment]",
          "securityContext",
          "allowPrivilegeEscalation"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-41",
        "title": "Container is running without liveness probe",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-41",
        "isGeneratedByCustomRule": false,
        "issue": "Liveness probe is not defined",
        "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
        "resolve": "Add `livenessProbe` attribute",
        "remediation": {
          "kubernetes": "Add `livenessProbe` attribute",
          "terraform": "Add `liveness_probe` attribute"
        },
        "lineNumber": 386,
        "iacDescription": {
          "issue": "Liveness probe is not defined",
          "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
          "resolve": "Add `livenessProbe` attribute"
        },
        "publicId": "SNYK-CC-K8S-41",
        "msg": "spec.template.spec.containers[payment].livenessProbe",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/",
          "https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/",
          "https://cloud.google.com/blog/products/gcp/kubernetes-best-practices-setting-up-health-checks-with-readiness-and-liveness-probes"
        ],
        "path": [
          "[DocId: 14]",
          "spec",
          "template",
          "spec",
          "containers[payment]",
          "livenessProbe"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-4",
        "title": "Container is running without memory limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-4",
        "isGeneratedByCustomRule": false,
        "issue": "Memory limit is not defined",
        "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
        "resolve": "Set `resources.limits.memory` value",
        "remediation": {
          "kubernetes": "Set `resources.limits.memory` value",
          "terraform": "Set `resources.limits.memory` value"
        },
        "lineNumber": 386,
        "iacDescription": {
          "issue": "Memory limit is not defined",
          "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
          "resolve": "Set `resources.limits.memory` value"
        },
        "publicId": "SNYK-CC-K8S-4",
        "msg": "input.spec.template.spec.containers[payment].resources.limits.memory",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/memory-default-namespace/"
        ],
        "path": [
          "[DocId: 14]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[payment]",
          "resources",
          "limits",
          "memory"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-8",
        "title": "Container is running with writable root filesystem",
        "severity": "low",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-8",
        "isGeneratedByCustomRule": false,
        "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
        "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
          "terraform": "Set `security_context.read_only_root_filesystem` to `true`"
        },
        "lineNumber": 386,
        "iacDescription": {
          "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
          "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`"
        },
        "publicId": "SNYK-CC-K8S-8",
        "msg": "spec.template.spec.containers[payment].securityContext.readOnlyRootFilesystem",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 14]",
          "spec",
          "template",
          "spec",
          "containers[payment]",
          "securityContext",
          "readOnlyRootFilesystem"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-5",
        "title": "Container has no CPU limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-5",
        "isGeneratedByCustomRule": false,
        "issue": "Container has no CPU limit",
        "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
        "resolve": "Add `resources.limits.cpu` field with required CPU limit value",
        "remediation": {
          "kubernetes": "Add `resources.limits.cpu` field with required CPU limit value",
          "terraform": "Add `spec.container.resources.limits.cpu` field with required CPU limit value"
        },
        "lineNumber": 386,
        "iacDescription": {
          "issue": "Container has no CPU limit",
          "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
          "resolve": "Add `resources.limits.cpu` field with required CPU limit value"
        },
        "publicId": "SNYK-CC-K8S-5",
        "msg": "input.spec.template.spec.containers[payment].resources.limits.cpu",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-cpu-resource/",
          "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/cpu-default-namespace/",
          "https://github.com/kubernetes/design-proposals-archive/blob/8da1442ea29adccea40693357d04727127e045ed/node/resource-qos.md#compressible-resource-guaranteess"
        ],
        "path": [
          "[DocId: 14]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[payment]",
          "resources",
          "limits",
          "cpu"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-6",
        "title": "Container does not drop all default capabilities",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-6",
        "isGeneratedByCustomRule": false,
        "issue": "All default capabilities are not explicitly dropped",
        "impact": "Containers are running with potentially unnecessary privileges",
        "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
        "remediation": {
          "kubernetes": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
          "terraform": "Add `ALL` to `spec.container.security_context.capabilities.drop` list, and add only required capabilities to `spec.container.security_context.capabilities.add`, ensuring it also does not contain `ALL`"
        },
        "lineNumber": 429,
        "iacDescription": {
          "issue": "All default capabilities are not explicitly dropped",
          "impact": "Containers are running with potentially unnecessary privileges",
          "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`"
        },
        "publicId": "SNYK-CC-K8S-6",
        "msg": "input.spec.template.spec.containers[queue-master].securityContext.capabilities.drop",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
          "https://linux-audit.com/linux-capabilities-hardening-linux-binaries-by-removing-setuid/"
        ],
        "path": [
          "[DocId: 16]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[queue-master]",
          "securityContext",
          "capabilities",
          "drop"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-9",
        "title": "Container is running without privilege escalation control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-9",
        "isGeneratedByCustomRule": false,
        "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
        "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
          "terraform": "Set `spec.container.security_context.allow_privilege_escalation` to `false`"
        },
        "lineNumber": 429,
        "iacDescription": {
          "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
          "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`"
        },
        "publicId": "SNYK-CC-K8S-9",
        "msg": "spec.template.spec.containers[queue-master].securityContext.allowPrivilegeEscalation",
        "references": [
          "https://www.kernel.org/doc/html/latest/userspace-api/no_new_privs.html"
        ],
        "path": [
          "[DocId: 16]",
          "spec",
          "template",
          "spec",
          "containers[queue-master]",
          "securityContext",
          "allowPrivilegeEscalation"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-11",
        "title": "Container's or Pod's  UID could clash with host's UID",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-11",
        "isGeneratedByCustomRule": false,
        "issue": "`runAsUser` value is set to low UID",
        "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
        "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
          "terraform": "Set `security_context.run_as_user` value to greater or equal than 10'000"
        },
        "lineNumber": 429,
        "iacDescription": {
          "issue": "`runAsUser` value is set to low UID",
          "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
          "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence"
        },
        "publicId": "SNYK-CC-K8S-11",
        "msg": "input.spec.template.spec.containers[queue-master].securityContext.runAsUser",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container",
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod",
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 16]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[queue-master]",
          "securityContext",
          "runAsUser"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-41",
        "title": "Container is running without liveness probe",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-41",
        "isGeneratedByCustomRule": false,
        "issue": "Liveness probe is not defined",
        "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
        "resolve": "Add `livenessProbe` attribute",
        "remediation": {
          "kubernetes": "Add `livenessProbe` attribute",
          "terraform": "Add `liveness_probe` attribute"
        },
        "lineNumber": 429,
        "iacDescription": {
          "issue": "Liveness probe is not defined",
          "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
          "resolve": "Add `livenessProbe` attribute"
        },
        "publicId": "SNYK-CC-K8S-41",
        "msg": "spec.template.spec.containers[queue-master].livenessProbe",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/",
          "https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/",
          "https://cloud.google.com/blog/products/gcp/kubernetes-best-practices-setting-up-health-checks-with-readiness-and-liveness-probes"
        ],
        "path": [
          "[DocId: 16]",
          "spec",
          "template",
          "spec",
          "containers[queue-master]",
          "livenessProbe"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-5",
        "title": "Container has no CPU limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-5",
        "isGeneratedByCustomRule": false,
        "issue": "Container has no CPU limit",
        "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
        "resolve": "Add `resources.limits.cpu` field with required CPU limit value",
        "remediation": {
          "kubernetes": "Add `resources.limits.cpu` field with required CPU limit value",
          "terraform": "Add `spec.container.resources.limits.cpu` field with required CPU limit value"
        },
        "lineNumber": 429,
        "iacDescription": {
          "issue": "Container has no CPU limit",
          "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
          "resolve": "Add `resources.limits.cpu` field with required CPU limit value"
        },
        "publicId": "SNYK-CC-K8S-5",
        "msg": "input.spec.template.spec.containers[queue-master].resources.limits.cpu",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-cpu-resource/",
          "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/cpu-default-namespace/",
          "https://github.com/kubernetes/design-proposals-archive/blob/8da1442ea29adccea40693357d04727127e045ed/node/resource-qos.md#compressible-resource-guaranteess"
        ],
        "path": [
          "[DocId: 16]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[queue-master]",
          "resources",
          "limits",
          "cpu"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-10",
        "title": "Container or Pod is running without root user control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-10",
        "isGeneratedByCustomRule": false,
        "issue": "Container or Pod is running without root user control",
        "impact": "Container or Pod could be running with full administrative privileges",
        "resolve": "Set `securityContext.runAsNonRoot` to `true`",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsNonRoot` to `true`",
          "terraform": "Set `security_context.run_as_non_root` to `true`"
        },
        "lineNumber": 429,
        "iacDescription": {
          "issue": "Container or Pod is running without root user control",
          "impact": "Container or Pod could be running with full administrative privileges",
          "resolve": "Set `securityContext.runAsNonRoot` to `true`"
        },
        "publicId": "SNYK-CC-K8S-10",
        "msg": "input.spec.template.spec.containers[queue-master].securityContext.runAsNonRoot",
        "description": "",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 16]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[queue-master]",
          "securityContext",
          "runAsNonRoot"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-8",
        "title": "Container is running with writable root filesystem",
        "severity": "low",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-8",
        "isGeneratedByCustomRule": false,
        "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
        "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
          "terraform": "Set `security_context.read_only_root_filesystem` to `true`"
        },
        "lineNumber": 429,
        "iacDescription": {
          "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
          "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`"
        },
        "publicId": "SNYK-CC-K8S-8",
        "msg": "spec.template.spec.containers[queue-master].securityContext.readOnlyRootFilesystem",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 16]",
          "spec",
          "template",
          "spec",
          "containers[queue-master]",
          "securityContext",
          "readOnlyRootFilesystem"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-4",
        "title": "Container is running without memory limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-4",
        "isGeneratedByCustomRule": false,
        "issue": "Memory limit is not defined",
        "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
        "resolve": "Set `resources.limits.memory` value",
        "remediation": {
          "kubernetes": "Set `resources.limits.memory` value",
          "terraform": "Set `resources.limits.memory` value"
        },
        "lineNumber": 429,
        "iacDescription": {
          "issue": "Memory limit is not defined",
          "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
          "resolve": "Set `resources.limits.memory` value"
        },
        "publicId": "SNYK-CC-K8S-4",
        "msg": "input.spec.template.spec.containers[queue-master].resources.limits.memory",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/memory-default-namespace/"
        ],
        "path": [
          "[DocId: 16]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[queue-master]",
          "resources",
          "limits",
          "memory"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-42",
        "title": "Container could be running with outdated image",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-42",
        "isGeneratedByCustomRule": false,
        "issue": "The image policy does not prevent image reuse",
        "impact": "The container may run with outdated or unauthorized image",
        "resolve": "Set `imagePullPolicy` attribute to `Always`",
        "remediation": {
          "kubernetes": "Set `imagePullPolicy` attribute to `Always`",
          "terraform": "Set `image_pull_policy` attribute to `Always"
        },
        "lineNumber": 429,
        "iacDescription": {
          "issue": "The image policy does not prevent image reuse",
          "impact": "The container may run with outdated or unauthorized image",
          "resolve": "Set `imagePullPolicy` attribute to `Always`"
        },
        "publicId": "SNYK-CC-K8S-42",
        "msg": "spec.template.spec.containers[queue-master].imagePullPolicy",
        "references": [
          "https://kubernetes.io/docs/concepts/containers/images/",
          "https://kubernetes.io/docs/concepts/configuration/overview/#container-images"
        ],
        "path": [
          "[DocId: 16]",
          "spec",
          "template",
          "spec",
          "containers[queue-master]",
          "imagePullPolicy"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-8",
        "title": "Container is running with writable root filesystem",
        "severity": "low",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-8",
        "isGeneratedByCustomRule": false,
        "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
        "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
          "terraform": "Set `security_context.read_only_root_filesystem` to `true`"
        },
        "lineNumber": 471,
        "iacDescription": {
          "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
          "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`"
        },
        "publicId": "SNYK-CC-K8S-8",
        "msg": "spec.template.spec.containers[rabbitmq].securityContext.readOnlyRootFilesystem",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 18]",
          "spec",
          "template",
          "spec",
          "containers[rabbitmq]",
          "securityContext",
          "readOnlyRootFilesystem"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-4",
        "title": "Container is running without memory limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-4",
        "isGeneratedByCustomRule": false,
        "issue": "Memory limit is not defined",
        "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
        "resolve": "Set `resources.limits.memory` value",
        "remediation": {
          "kubernetes": "Set `resources.limits.memory` value",
          "terraform": "Set `resources.limits.memory` value"
        },
        "lineNumber": 471,
        "iacDescription": {
          "issue": "Memory limit is not defined",
          "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
          "resolve": "Set `resources.limits.memory` value"
        },
        "publicId": "SNYK-CC-K8S-4",
        "msg": "input.spec.template.spec.containers[rabbitmq].resources.limits.memory",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/memory-default-namespace/"
        ],
        "path": [
          "[DocId: 18]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[rabbitmq]",
          "resources",
          "limits",
          "memory"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-10",
        "title": "Container or Pod is running without root user control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-10",
        "isGeneratedByCustomRule": false,
        "issue": "Container or Pod is running without root user control",
        "impact": "Container or Pod could be running with full administrative privileges",
        "resolve": "Set `securityContext.runAsNonRoot` to `true`",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsNonRoot` to `true`",
          "terraform": "Set `security_context.run_as_non_root` to `true`"
        },
        "lineNumber": 471,
        "iacDescription": {
          "issue": "Container or Pod is running without root user control",
          "impact": "Container or Pod could be running with full administrative privileges",
          "resolve": "Set `securityContext.runAsNonRoot` to `true`"
        },
        "publicId": "SNYK-CC-K8S-10",
        "msg": "input.spec.template.spec.containers[rabbitmq].securityContext.runAsNonRoot",
        "description": "",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 18]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[rabbitmq]",
          "securityContext",
          "runAsNonRoot"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-42",
        "title": "Container could be running with outdated image",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-42",
        "isGeneratedByCustomRule": false,
        "issue": "The image policy does not prevent image reuse",
        "impact": "The container may run with outdated or unauthorized image",
        "resolve": "Set `imagePullPolicy` attribute to `Always`",
        "remediation": {
          "kubernetes": "Set `imagePullPolicy` attribute to `Always`",
          "terraform": "Set `image_pull_policy` attribute to `Always"
        },
        "lineNumber": 471,
        "iacDescription": {
          "issue": "The image policy does not prevent image reuse",
          "impact": "The container may run with outdated or unauthorized image",
          "resolve": "Set `imagePullPolicy` attribute to `Always`"
        },
        "publicId": "SNYK-CC-K8S-42",
        "msg": "spec.template.spec.containers[rabbitmq].imagePullPolicy",
        "references": [
          "https://kubernetes.io/docs/concepts/containers/images/",
          "https://kubernetes.io/docs/concepts/configuration/overview/#container-images"
        ],
        "path": [
          "[DocId: 18]",
          "spec",
          "template",
          "spec",
          "containers[rabbitmq]",
          "imagePullPolicy"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-5",
        "title": "Container has no CPU limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-5",
        "isGeneratedByCustomRule": false,
        "issue": "Container has no CPU limit",
        "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
        "resolve": "Add `resources.limits.cpu` field with required CPU limit value",
        "remediation": {
          "kubernetes": "Add `resources.limits.cpu` field with required CPU limit value",
          "terraform": "Add `spec.container.resources.limits.cpu` field with required CPU limit value"
        },
        "lineNumber": 471,
        "iacDescription": {
          "issue": "Container has no CPU limit",
          "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
          "resolve": "Add `resources.limits.cpu` field with required CPU limit value"
        },
        "publicId": "SNYK-CC-K8S-5",
        "msg": "input.spec.template.spec.containers[rabbitmq].resources.limits.cpu",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-cpu-resource/",
          "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/cpu-default-namespace/",
          "https://github.com/kubernetes/design-proposals-archive/blob/8da1442ea29adccea40693357d04727127e045ed/node/resource-qos.md#compressible-resource-guaranteess"
        ],
        "path": [
          "[DocId: 18]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[rabbitmq]",
          "resources",
          "limits",
          "cpu"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-9",
        "title": "Container is running without privilege escalation control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-9",
        "isGeneratedByCustomRule": false,
        "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
        "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
          "terraform": "Set `spec.container.security_context.allow_privilege_escalation` to `false`"
        },
        "lineNumber": 471,
        "iacDescription": {
          "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
          "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`"
        },
        "publicId": "SNYK-CC-K8S-9",
        "msg": "spec.template.spec.containers[rabbitmq].securityContext.allowPrivilegeEscalation",
        "references": [
          "https://www.kernel.org/doc/html/latest/userspace-api/no_new_privs.html"
        ],
        "path": [
          "[DocId: 18]",
          "spec",
          "template",
          "spec",
          "containers[rabbitmq]",
          "securityContext",
          "allowPrivilegeEscalation"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-11",
        "title": "Container's or Pod's  UID could clash with host's UID",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-11",
        "isGeneratedByCustomRule": false,
        "issue": "`runAsUser` value is set to low UID",
        "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
        "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
          "terraform": "Set `security_context.run_as_user` value to greater or equal than 10'000"
        },
        "lineNumber": 471,
        "iacDescription": {
          "issue": "`runAsUser` value is set to low UID",
          "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
          "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence"
        },
        "publicId": "SNYK-CC-K8S-11",
        "msg": "input.spec.template.spec.containers[rabbitmq].securityContext.runAsUser",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container",
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod",
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 18]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[rabbitmq]",
          "securityContext",
          "runAsUser"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-41",
        "title": "Container is running without liveness probe",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-41",
        "isGeneratedByCustomRule": false,
        "issue": "Liveness probe is not defined",
        "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
        "resolve": "Add `livenessProbe` attribute",
        "remediation": {
          "kubernetes": "Add `livenessProbe` attribute",
          "terraform": "Add `liveness_probe` attribute"
        },
        "lineNumber": 471,
        "iacDescription": {
          "issue": "Liveness probe is not defined",
          "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
          "resolve": "Add `livenessProbe` attribute"
        },
        "publicId": "SNYK-CC-K8S-41",
        "msg": "spec.template.spec.containers[rabbitmq].livenessProbe",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/",
          "https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/",
          "https://cloud.google.com/blog/products/gcp/kubernetes-best-practices-setting-up-health-checks-with-readiness-and-liveness-probes"
        ],
        "path": [
          "[DocId: 18]",
          "spec",
          "template",
          "spec",
          "containers[rabbitmq]",
          "livenessProbe"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-6",
        "title": "Container does not drop all default capabilities",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-6",
        "isGeneratedByCustomRule": false,
        "issue": "All default capabilities are not explicitly dropped",
        "impact": "Containers are running with potentially unnecessary privileges",
        "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
        "remediation": {
          "kubernetes": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
          "terraform": "Add `ALL` to `spec.container.security_context.capabilities.drop` list, and add only required capabilities to `spec.container.security_context.capabilities.add`, ensuring it also does not contain `ALL`"
        },
        "lineNumber": 471,
        "iacDescription": {
          "issue": "All default capabilities are not explicitly dropped",
          "impact": "Containers are running with potentially unnecessary privileges",
          "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`"
        },
        "publicId": "SNYK-CC-K8S-6",
        "msg": "input.spec.template.spec.containers[rabbitmq].securityContext.capabilities.drop",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
          "https://linux-audit.com/linux-capabilities-hardening-linux-binaries-by-removing-setuid/"
        ],
        "path": [
          "[DocId: 18]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[rabbitmq]",
          "securityContext",
          "capabilities",
          "drop"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-42",
        "title": "Container could be running with outdated image",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-42",
        "isGeneratedByCustomRule": false,
        "issue": "The image policy does not prevent image reuse",
        "impact": "The container may run with outdated or unauthorized image",
        "resolve": "Set `imagePullPolicy` attribute to `Always`",
        "remediation": {
          "kubernetes": "Set `imagePullPolicy` attribute to `Always`",
          "terraform": "Set `image_pull_policy` attribute to `Always"
        },
        "lineNumber": 514,
        "iacDescription": {
          "issue": "The image policy does not prevent image reuse",
          "impact": "The container may run with outdated or unauthorized image",
          "resolve": "Set `imagePullPolicy` attribute to `Always`"
        },
        "publicId": "SNYK-CC-K8S-42",
        "msg": "spec.template.spec.containers[shipping].imagePullPolicy",
        "references": [
          "https://kubernetes.io/docs/concepts/containers/images/",
          "https://kubernetes.io/docs/concepts/configuration/overview/#container-images"
        ],
        "path": [
          "[DocId: 20]",
          "spec",
          "template",
          "spec",
          "containers[shipping]",
          "imagePullPolicy"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-9",
        "title": "Container is running without privilege escalation control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-9",
        "isGeneratedByCustomRule": false,
        "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
        "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
          "terraform": "Set `spec.container.security_context.allow_privilege_escalation` to `false`"
        },
        "lineNumber": 514,
        "iacDescription": {
          "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
          "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`"
        },
        "publicId": "SNYK-CC-K8S-9",
        "msg": "spec.template.spec.containers[shipping].securityContext.allowPrivilegeEscalation",
        "references": [
          "https://www.kernel.org/doc/html/latest/userspace-api/no_new_privs.html"
        ],
        "path": [
          "[DocId: 20]",
          "spec",
          "template",
          "spec",
          "containers[shipping]",
          "securityContext",
          "allowPrivilegeEscalation"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-4",
        "title": "Container is running without memory limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-4",
        "isGeneratedByCustomRule": false,
        "issue": "Memory limit is not defined",
        "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
        "resolve": "Set `resources.limits.memory` value",
        "remediation": {
          "kubernetes": "Set `resources.limits.memory` value",
          "terraform": "Set `resources.limits.memory` value"
        },
        "lineNumber": 514,
        "iacDescription": {
          "issue": "Memory limit is not defined",
          "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
          "resolve": "Set `resources.limits.memory` value"
        },
        "publicId": "SNYK-CC-K8S-4",
        "msg": "input.spec.template.spec.containers[shipping].resources.limits.memory",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/memory-default-namespace/"
        ],
        "path": [
          "[DocId: 20]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[shipping]",
          "resources",
          "limits",
          "memory"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-10",
        "title": "Container or Pod is running without root user control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-10",
        "isGeneratedByCustomRule": false,
        "issue": "Container or Pod is running without root user control",
        "impact": "Container or Pod could be running with full administrative privileges",
        "resolve": "Set `securityContext.runAsNonRoot` to `true`",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsNonRoot` to `true`",
          "terraform": "Set `security_context.run_as_non_root` to `true`"
        },
        "lineNumber": 514,
        "iacDescription": {
          "issue": "Container or Pod is running without root user control",
          "impact": "Container or Pod could be running with full administrative privileges",
          "resolve": "Set `securityContext.runAsNonRoot` to `true`"
        },
        "publicId": "SNYK-CC-K8S-10",
        "msg": "input.spec.template.spec.containers[shipping].securityContext.runAsNonRoot",
        "description": "",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 20]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[shipping]",
          "securityContext",
          "runAsNonRoot"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-41",
        "title": "Container is running without liveness probe",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-41",
        "isGeneratedByCustomRule": false,
        "issue": "Liveness probe is not defined",
        "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
        "resolve": "Add `livenessProbe` attribute",
        "remediation": {
          "kubernetes": "Add `livenessProbe` attribute",
          "terraform": "Add `liveness_probe` attribute"
        },
        "lineNumber": 514,
        "iacDescription": {
          "issue": "Liveness probe is not defined",
          "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
          "resolve": "Add `livenessProbe` attribute"
        },
        "publicId": "SNYK-CC-K8S-41",
        "msg": "spec.template.spec.containers[shipping].livenessProbe",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/",
          "https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/",
          "https://cloud.google.com/blog/products/gcp/kubernetes-best-practices-setting-up-health-checks-with-readiness-and-liveness-probes"
        ],
        "path": [
          "[DocId: 20]",
          "spec",
          "template",
          "spec",
          "containers[shipping]",
          "livenessProbe"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-8",
        "title": "Container is running with writable root filesystem",
        "severity": "low",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-8",
        "isGeneratedByCustomRule": false,
        "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
        "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
          "terraform": "Set `security_context.read_only_root_filesystem` to `true`"
        },
        "lineNumber": 514,
        "iacDescription": {
          "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
          "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`"
        },
        "publicId": "SNYK-CC-K8S-8",
        "msg": "spec.template.spec.containers[shipping].securityContext.readOnlyRootFilesystem",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 20]",
          "spec",
          "template",
          "spec",
          "containers[shipping]",
          "securityContext",
          "readOnlyRootFilesystem"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-5",
        "title": "Container has no CPU limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-5",
        "isGeneratedByCustomRule": false,
        "issue": "Container has no CPU limit",
        "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
        "resolve": "Add `resources.limits.cpu` field with required CPU limit value",
        "remediation": {
          "kubernetes": "Add `resources.limits.cpu` field with required CPU limit value",
          "terraform": "Add `spec.container.resources.limits.cpu` field with required CPU limit value"
        },
        "lineNumber": 514,
        "iacDescription": {
          "issue": "Container has no CPU limit",
          "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
          "resolve": "Add `resources.limits.cpu` field with required CPU limit value"
        },
        "publicId": "SNYK-CC-K8S-5",
        "msg": "input.spec.template.spec.containers[shipping].resources.limits.cpu",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-cpu-resource/",
          "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/cpu-default-namespace/",
          "https://github.com/kubernetes/design-proposals-archive/blob/8da1442ea29adccea40693357d04727127e045ed/node/resource-qos.md#compressible-resource-guaranteess"
        ],
        "path": [
          "[DocId: 20]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[shipping]",
          "resources",
          "limits",
          "cpu"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-11",
        "title": "Container's or Pod's  UID could clash with host's UID",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-11",
        "isGeneratedByCustomRule": false,
        "issue": "`runAsUser` value is set to low UID",
        "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
        "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
          "terraform": "Set `security_context.run_as_user` value to greater or equal than 10'000"
        },
        "lineNumber": 514,
        "iacDescription": {
          "issue": "`runAsUser` value is set to low UID",
          "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
          "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence"
        },
        "publicId": "SNYK-CC-K8S-11",
        "msg": "input.spec.template.spec.containers[shipping].securityContext.runAsUser",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container",
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod",
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 20]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[shipping]",
          "securityContext",
          "runAsUser"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-6",
        "title": "Container does not drop all default capabilities",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-6",
        "isGeneratedByCustomRule": false,
        "issue": "All default capabilities are not explicitly dropped",
        "impact": "Containers are running with potentially unnecessary privileges",
        "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
        "remediation": {
          "kubernetes": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
          "terraform": "Add `ALL` to `spec.container.security_context.capabilities.drop` list, and add only required capabilities to `spec.container.security_context.capabilities.add`, ensuring it also does not contain `ALL`"
        },
        "lineNumber": 514,
        "iacDescription": {
          "issue": "All default capabilities are not explicitly dropped",
          "impact": "Containers are running with potentially unnecessary privileges",
          "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`"
        },
        "publicId": "SNYK-CC-K8S-6",
        "msg": "input.spec.template.spec.containers[shipping].securityContext.capabilities.drop",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
          "https://linux-audit.com/linux-capabilities-hardening-linux-binaries-by-removing-setuid/"
        ],
        "path": [
          "[DocId: 20]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[shipping]",
          "securityContext",
          "capabilities",
          "drop"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-4",
        "title": "Container is running without memory limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-4",
        "isGeneratedByCustomRule": false,
        "issue": "Memory limit is not defined",
        "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
        "resolve": "Set `resources.limits.memory` value",
        "remediation": {
          "kubernetes": "Set `resources.limits.memory` value",
          "terraform": "Set `resources.limits.memory` value"
        },
        "lineNumber": 569,
        "iacDescription": {
          "issue": "Memory limit is not defined",
          "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
          "resolve": "Set `resources.limits.memory` value"
        },
        "publicId": "SNYK-CC-K8S-4",
        "msg": "input.spec.template.spec.containers[user-db].resources.limits.memory",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/memory-default-namespace/"
        ],
        "path": [
          "[DocId: 22]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[user-db]",
          "resources",
          "limits",
          "memory"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-10",
        "title": "Container or Pod is running without root user control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-10",
        "isGeneratedByCustomRule": false,
        "issue": "Container or Pod is running without root user control",
        "impact": "Container or Pod could be running with full administrative privileges",
        "resolve": "Set `securityContext.runAsNonRoot` to `true`",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsNonRoot` to `true`",
          "terraform": "Set `security_context.run_as_non_root` to `true`"
        },
        "lineNumber": 569,
        "iacDescription": {
          "issue": "Container or Pod is running without root user control",
          "impact": "Container or Pod could be running with full administrative privileges",
          "resolve": "Set `securityContext.runAsNonRoot` to `true`"
        },
        "publicId": "SNYK-CC-K8S-10",
        "msg": "input.spec.template.spec.containers[user-db].securityContext.runAsNonRoot",
        "description": "",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 22]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[user-db]",
          "securityContext",
          "runAsNonRoot"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-8",
        "title": "Container is running with writable root filesystem",
        "severity": "low",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-8",
        "isGeneratedByCustomRule": false,
        "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
        "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
          "terraform": "Set `security_context.read_only_root_filesystem` to `true`"
        },
        "lineNumber": 569,
        "iacDescription": {
          "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
          "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`"
        },
        "publicId": "SNYK-CC-K8S-8",
        "msg": "spec.template.spec.containers[user-db].securityContext.readOnlyRootFilesystem",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 22]",
          "spec",
          "template",
          "spec",
          "containers[user-db]",
          "securityContext",
          "readOnlyRootFilesystem"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-6",
        "title": "Container does not drop all default capabilities",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-6",
        "isGeneratedByCustomRule": false,
        "issue": "All default capabilities are not explicitly dropped",
        "impact": "Containers are running with potentially unnecessary privileges",
        "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
        "remediation": {
          "kubernetes": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
          "terraform": "Add `ALL` to `spec.container.security_context.capabilities.drop` list, and add only required capabilities to `spec.container.security_context.capabilities.add`, ensuring it also does not contain `ALL`"
        },
        "lineNumber": 569,
        "iacDescription": {
          "issue": "All default capabilities are not explicitly dropped",
          "impact": "Containers are running with potentially unnecessary privileges",
          "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`"
        },
        "publicId": "SNYK-CC-K8S-6",
        "msg": "input.spec.template.spec.containers[user-db].securityContext.capabilities.drop",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
          "https://linux-audit.com/linux-capabilities-hardening-linux-binaries-by-removing-setuid/"
        ],
        "path": [
          "[DocId: 22]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[user-db]",
          "securityContext",
          "capabilities",
          "drop"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-11",
        "title": "Container's or Pod's  UID could clash with host's UID",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-11",
        "isGeneratedByCustomRule": false,
        "issue": "`runAsUser` value is set to low UID",
        "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
        "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
          "terraform": "Set `security_context.run_as_user` value to greater or equal than 10'000"
        },
        "lineNumber": 569,
        "iacDescription": {
          "issue": "`runAsUser` value is set to low UID",
          "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
          "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence"
        },
        "publicId": "SNYK-CC-K8S-11",
        "msg": "input.spec.template.spec.containers[user-db].securityContext.runAsUser",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container",
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod",
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 22]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[user-db]",
          "securityContext",
          "runAsUser"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-41",
        "title": "Container is running without liveness probe",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-41",
        "isGeneratedByCustomRule": false,
        "issue": "Liveness probe is not defined",
        "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
        "resolve": "Add `livenessProbe` attribute",
        "remediation": {
          "kubernetes": "Add `livenessProbe` attribute",
          "terraform": "Add `liveness_probe` attribute"
        },
        "lineNumber": 569,
        "iacDescription": {
          "issue": "Liveness probe is not defined",
          "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
          "resolve": "Add `livenessProbe` attribute"
        },
        "publicId": "SNYK-CC-K8S-41",
        "msg": "spec.template.spec.containers[user-db].livenessProbe",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/",
          "https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/",
          "https://cloud.google.com/blog/products/gcp/kubernetes-best-practices-setting-up-health-checks-with-readiness-and-liveness-probes"
        ],
        "path": [
          "[DocId: 22]",
          "spec",
          "template",
          "spec",
          "containers[user-db]",
          "livenessProbe"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-5",
        "title": "Container has no CPU limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-5",
        "isGeneratedByCustomRule": false,
        "issue": "Container has no CPU limit",
        "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
        "resolve": "Add `resources.limits.cpu` field with required CPU limit value",
        "remediation": {
          "kubernetes": "Add `resources.limits.cpu` field with required CPU limit value",
          "terraform": "Add `spec.container.resources.limits.cpu` field with required CPU limit value"
        },
        "lineNumber": 569,
        "iacDescription": {
          "issue": "Container has no CPU limit",
          "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
          "resolve": "Add `resources.limits.cpu` field with required CPU limit value"
        },
        "publicId": "SNYK-CC-K8S-5",
        "msg": "input.spec.template.spec.containers[user-db].resources.limits.cpu",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-cpu-resource/",
          "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/cpu-default-namespace/",
          "https://github.com/kubernetes/design-proposals-archive/blob/8da1442ea29adccea40693357d04727127e045ed/node/resource-qos.md#compressible-resource-guaranteess"
        ],
        "path": [
          "[DocId: 22]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[user-db]",
          "resources",
          "limits",
          "cpu"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-42",
        "title": "Container could be running with outdated image",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-42",
        "isGeneratedByCustomRule": false,
        "issue": "The image policy does not prevent image reuse",
        "impact": "The container may run with outdated or unauthorized image",
        "resolve": "Set `imagePullPolicy` attribute to `Always`",
        "remediation": {
          "kubernetes": "Set `imagePullPolicy` attribute to `Always`",
          "terraform": "Set `image_pull_policy` attribute to `Always"
        },
        "lineNumber": 569,
        "iacDescription": {
          "issue": "The image policy does not prevent image reuse",
          "impact": "The container may run with outdated or unauthorized image",
          "resolve": "Set `imagePullPolicy` attribute to `Always`"
        },
        "publicId": "SNYK-CC-K8S-42",
        "msg": "spec.template.spec.containers[user-db].imagePullPolicy",
        "references": [
          "https://kubernetes.io/docs/concepts/containers/images/",
          "https://kubernetes.io/docs/concepts/configuration/overview/#container-images"
        ],
        "path": [
          "[DocId: 22]",
          "spec",
          "template",
          "spec",
          "containers[user-db]",
          "imagePullPolicy"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-9",
        "title": "Container is running without privilege escalation control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-9",
        "isGeneratedByCustomRule": false,
        "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
        "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
          "terraform": "Set `spec.container.security_context.allow_privilege_escalation` to `false`"
        },
        "lineNumber": 569,
        "iacDescription": {
          "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
          "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`"
        },
        "publicId": "SNYK-CC-K8S-9",
        "msg": "spec.template.spec.containers[user-db].securityContext.allowPrivilegeEscalation",
        "references": [
          "https://www.kernel.org/doc/html/latest/userspace-api/no_new_privs.html"
        ],
        "path": [
          "[DocId: 22]",
          "spec",
          "template",
          "spec",
          "containers[user-db]",
          "securityContext",
          "allowPrivilegeEscalation"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-10",
        "title": "Container or Pod is running without root user control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-10",
        "isGeneratedByCustomRule": false,
        "issue": "Container or Pod is running without root user control",
        "impact": "Container or Pod could be running with full administrative privileges",
        "resolve": "Set `securityContext.runAsNonRoot` to `true`",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsNonRoot` to `true`",
          "terraform": "Set `security_context.run_as_non_root` to `true`"
        },
        "lineNumber": 631,
        "iacDescription": {
          "issue": "Container or Pod is running without root user control",
          "impact": "Container or Pod could be running with full administrative privileges",
          "resolve": "Set `securityContext.runAsNonRoot` to `true`"
        },
        "publicId": "SNYK-CC-K8S-10",
        "msg": "input.spec.template.spec.containers[user].securityContext.runAsNonRoot",
        "description": "",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 24]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[user]",
          "securityContext",
          "runAsNonRoot"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-6",
        "title": "Container does not drop all default capabilities",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-6",
        "isGeneratedByCustomRule": false,
        "issue": "All default capabilities are not explicitly dropped",
        "impact": "Containers are running with potentially unnecessary privileges",
        "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
        "remediation": {
          "kubernetes": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
          "terraform": "Add `ALL` to `spec.container.security_context.capabilities.drop` list, and add only required capabilities to `spec.container.security_context.capabilities.add`, ensuring it also does not contain `ALL`"
        },
        "lineNumber": 631,
        "iacDescription": {
          "issue": "All default capabilities are not explicitly dropped",
          "impact": "Containers are running with potentially unnecessary privileges",
          "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`"
        },
        "publicId": "SNYK-CC-K8S-6",
        "msg": "input.spec.template.spec.containers[user].securityContext.capabilities.drop",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
          "https://linux-audit.com/linux-capabilities-hardening-linux-binaries-by-removing-setuid/"
        ],
        "path": [
          "[DocId: 24]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[user]",
          "securityContext",
          "capabilities",
          "drop"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-41",
        "title": "Container is running without liveness probe",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-41",
        "isGeneratedByCustomRule": false,
        "issue": "Liveness probe is not defined",
        "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
        "resolve": "Add `livenessProbe` attribute",
        "remediation": {
          "kubernetes": "Add `livenessProbe` attribute",
          "terraform": "Add `liveness_probe` attribute"
        },
        "lineNumber": 631,
        "iacDescription": {
          "issue": "Liveness probe is not defined",
          "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
          "resolve": "Add `livenessProbe` attribute"
        },
        "publicId": "SNYK-CC-K8S-41",
        "msg": "spec.template.spec.containers[user].livenessProbe",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/",
          "https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/",
          "https://cloud.google.com/blog/products/gcp/kubernetes-best-practices-setting-up-health-checks-with-readiness-and-liveness-probes"
        ],
        "path": [
          "[DocId: 24]",
          "spec",
          "template",
          "spec",
          "containers[user]",
          "livenessProbe"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-8",
        "title": "Container is running with writable root filesystem",
        "severity": "low",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-8",
        "isGeneratedByCustomRule": false,
        "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
        "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
          "terraform": "Set `security_context.read_only_root_filesystem` to `true`"
        },
        "lineNumber": 631,
        "iacDescription": {
          "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
          "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`"
        },
        "publicId": "SNYK-CC-K8S-8",
        "msg": "spec.template.spec.containers[user].securityContext.readOnlyRootFilesystem",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 24]",
          "spec",
          "template",
          "spec",
          "containers[user]",
          "securityContext",
          "readOnlyRootFilesystem"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-4",
        "title": "Container is running without memory limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-4",
        "isGeneratedByCustomRule": false,
        "issue": "Memory limit is not defined",
        "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
        "resolve": "Set `resources.limits.memory` value",
        "remediation": {
          "kubernetes": "Set `resources.limits.memory` value",
          "terraform": "Set `resources.limits.memory` value"
        },
        "lineNumber": 631,
        "iacDescription": {
          "issue": "Memory limit is not defined",
          "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
          "resolve": "Set `resources.limits.memory` value"
        },
        "publicId": "SNYK-CC-K8S-4",
        "msg": "input.spec.template.spec.containers[user].resources.limits.memory",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/memory-default-namespace/"
        ],
        "path": [
          "[DocId: 24]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[user]",
          "resources",
          "limits",
          "memory"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-42",
        "title": "Container could be running with outdated image",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-42",
        "isGeneratedByCustomRule": false,
        "issue": "The image policy does not prevent image reuse",
        "impact": "The container may run with outdated or unauthorized image",
        "resolve": "Set `imagePullPolicy` attribute to `Always`",
        "remediation": {
          "kubernetes": "Set `imagePullPolicy` attribute to `Always`",
          "terraform": "Set `image_pull_policy` attribute to `Always"
        },
        "lineNumber": 631,
        "iacDescription": {
          "issue": "The image policy does not prevent image reuse",
          "impact": "The container may run with outdated or unauthorized image",
          "resolve": "Set `imagePullPolicy` attribute to `Always`"
        },
        "publicId": "SNYK-CC-K8S-42",
        "msg": "spec.template.spec.containers[user].imagePullPolicy",
        "references": [
          "https://kubernetes.io/docs/concepts/containers/images/",
          "https://kubernetes.io/docs/concepts/configuration/overview/#container-images"
        ],
        "path": [
          "[DocId: 24]",
          "spec",
          "template",
          "spec",
          "containers[user]",
          "imagePullPolicy"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-9",
        "title": "Container is running without privilege escalation control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-9",
        "isGeneratedByCustomRule": false,
        "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
        "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
          "terraform": "Set `spec.container.security_context.allow_privilege_escalation` to `false`"
        },
        "lineNumber": 631,
        "iacDescription": {
          "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
          "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`"
        },
        "publicId": "SNYK-CC-K8S-9",
        "msg": "spec.template.spec.containers[user].securityContext.allowPrivilegeEscalation",
        "references": [
          "https://www.kernel.org/doc/html/latest/userspace-api/no_new_privs.html"
        ],
        "path": [
          "[DocId: 24]",
          "spec",
          "template",
          "spec",
          "containers[user]",
          "securityContext",
          "allowPrivilegeEscalation"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-11",
        "title": "Container's or Pod's  UID could clash with host's UID",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-11",
        "isGeneratedByCustomRule": false,
        "issue": "`runAsUser` value is set to low UID",
        "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
        "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
          "terraform": "Set `security_context.run_as_user` value to greater or equal than 10'000"
        },
        "lineNumber": 631,
        "iacDescription": {
          "issue": "`runAsUser` value is set to low UID",
          "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
          "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence"
        },
        "publicId": "SNYK-CC-K8S-11",
        "msg": "input.spec.template.spec.containers[user].securityContext.runAsUser",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container",
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod",
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 24]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[user]",
          "securityContext",
          "runAsUser"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-5",
        "title": "Container has no CPU limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-5",
        "isGeneratedByCustomRule": false,
        "issue": "Container has no CPU limit",
        "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
        "resolve": "Add `resources.limits.cpu` field with required CPU limit value",
        "remediation": {
          "kubernetes": "Add `resources.limits.cpu` field with required CPU limit value",
          "terraform": "Add `spec.container.resources.limits.cpu` field with required CPU limit value"
        },
        "lineNumber": 631,
        "iacDescription": {
          "issue": "Container has no CPU limit",
          "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
          "resolve": "Add `resources.limits.cpu` field with required CPU limit value"
        },
        "publicId": "SNYK-CC-K8S-5",
        "msg": "input.spec.template.spec.containers[user].resources.limits.cpu",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-cpu-resource/",
          "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/cpu-default-namespace/",
          "https://github.com/kubernetes/design-proposals-archive/blob/8da1442ea29adccea40693357d04727127e045ed/node/resource-qos.md#compressible-resource-guaranteess"
        ],
        "path": [
          "[DocId: 24]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[user]",
          "resources",
          "limits",
          "cpu"
        ],
        "compliance": []
      }
    ]
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_authentication/files/oauth-htpasswd.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_authentication/files/oauth-htpasswd.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_big_demo/files/pr-manifest-task.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_big_demo/files/pr-manifest-task.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_big_demo/files/update-manifest-task.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_big_demo/files/update-manifest-task.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_coolstore_apac_summit/files/pr-manifest-task.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_coolstore_apac_summit/files/pr-manifest-task.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_coolstore_apac_summit/files/update-manifest-task.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_coolstore_apac_summit/files/update-manifest-task.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_coolstore_backoffice_demo_ohc/files/inventory-route.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_coolstore_backoffice_demo_ohc/files/inventory-route.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_coolstore_backoffice_demo_ohc/files/pr-manifest-task.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_coolstore_backoffice_demo_ohc/files/pr-manifest-task.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_coolstore_backoffice_demo_ohc/files/update-manifest-task.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_coolstore_backoffice_demo_ohc/files/update-manifest-task.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_coolstore_backoffice_demo_ohc/templates/cicd/app-ci-build-from-push-template.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_coolstore_backoffice_demo_ohc/templates/cicd/app-ci-build-from-push-template.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_coolstore_backoffice_demo_ohc/templates/cicd/deploy-scan-task.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_coolstore_backoffice_demo_ohc/templates/cicd/deploy-scan-task.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_coolstore_backoffice_demo_ohc/templates/cicd/dev-app-inventory-inventory-binding.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_coolstore_backoffice_demo_ohc/templates/cicd/dev-app-inventory-inventory-binding.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_coolstore_backoffice_demo_ohc/templates/cicd/image-check-task.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_coolstore_backoffice_demo_ohc/templates/cicd/image-check-task.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_coolstore_backoffice_demo_ohc/templates/cicd/image-scan-task.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_coolstore_backoffice_demo_ohc/templates/cicd/image-scan-task.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_coolstore_backoffice_demo_ohc/templates/cicd/sonarqube-scan-task.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_coolstore_backoffice_demo_ohc/templates/cicd/sonarqube-scan-task.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_devsecops_validated_pattern/files/stateful-set-vault.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_devsecops_validated_pattern/files/stateful-set-vault.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": false,
    "infrastructureAsCodeIssues": [
      {
        "id": "SNYK-CC-K8S-10",
        "title": "Container or Pod is running without root user control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-10",
        "isGeneratedByCustomRule": false,
        "issue": "Container or Pod is running without root user control",
        "impact": "Container or Pod could be running with full administrative privileges",
        "resolve": "Set `securityContext.runAsNonRoot` to `true`",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsNonRoot` to `true`",
          "terraform": "Set `security_context.run_as_non_root` to `true`"
        },
        "lineNumber": 36,
        "iacDescription": {
          "issue": "Container or Pod is running without root user control",
          "impact": "Container or Pod could be running with full administrative privileges",
          "resolve": "Set `securityContext.runAsNonRoot` to `true`"
        },
        "publicId": "SNYK-CC-K8S-10",
        "msg": "input.spec.template.spec.containers[vault].securityContext.runAsNonRoot",
        "description": "",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[vault]",
          "securityContext",
          "runAsNonRoot"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-8",
        "title": "Container is running with writable root filesystem",
        "severity": "low",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-8",
        "isGeneratedByCustomRule": false,
        "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
        "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
          "terraform": "Set `security_context.read_only_root_filesystem` to `true`"
        },
        "lineNumber": 36,
        "iacDescription": {
          "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
          "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`"
        },
        "publicId": "SNYK-CC-K8S-8",
        "msg": "spec.template.spec.containers[vault].securityContext.readOnlyRootFilesystem",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "containers[vault]",
          "securityContext",
          "readOnlyRootFilesystem"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-4",
        "title": "Container is running without memory limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-4",
        "isGeneratedByCustomRule": false,
        "issue": "Memory limit is not defined",
        "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
        "resolve": "Set `resources.limits.memory` value",
        "remediation": {
          "kubernetes": "Set `resources.limits.memory` value",
          "terraform": "Set `resources.limits.memory` value"
        },
        "lineNumber": 36,
        "iacDescription": {
          "issue": "Memory limit is not defined",
          "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
          "resolve": "Set `resources.limits.memory` value"
        },
        "publicId": "SNYK-CC-K8S-4",
        "msg": "input.spec.template.spec.containers[vault].resources.limits.memory",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/memory-default-namespace/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[vault]",
          "resources",
          "limits",
          "memory"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-36",
        "title": "Container is running with multiple open ports",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-36",
        "isGeneratedByCustomRule": false,
        "issue": "Container is declaring more than 2 listening ports",
        "impact": "Increases the attack surface of the application and the container.",
        "resolve": "Reduce `ports` count to 2",
        "remediation": {
          "kubernetes": "Reduce `ports` count to 2",
          "terraform": "Reduce `ports` count to 2"
        },
        "lineNumber": 108,
        "iacDescription": {
          "issue": "Container is declaring more than 2 listening ports",
          "impact": "Increases the attack surface of the application and the container.",
          "resolve": "Reduce `ports` count to 2"
        },
        "publicId": "SNYK-CC-K8S-36",
        "msg": "spec.template.spec.containers[vault].ports",
        "description": "",
        "references": [
          "https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "containers[vault]",
          "ports"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-6",
        "title": "Container does not drop all default capabilities",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-6",
        "isGeneratedByCustomRule": false,
        "issue": "All default capabilities are not explicitly dropped",
        "impact": "Containers are running with potentially unnecessary privileges",
        "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
        "remediation": {
          "kubernetes": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
          "terraform": "Add `ALL` to `spec.container.security_context.capabilities.drop` list, and add only required capabilities to `spec.container.security_context.capabilities.add`, ensuring it also does not contain `ALL`"
        },
        "lineNumber": 36,
        "iacDescription": {
          "issue": "All default capabilities are not explicitly dropped",
          "impact": "Containers are running with potentially unnecessary privileges",
          "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`"
        },
        "publicId": "SNYK-CC-K8S-6",
        "msg": "input.spec.template.spec.containers[vault].securityContext.capabilities.drop",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
          "https://linux-audit.com/linux-capabilities-hardening-linux-binaries-by-removing-setuid/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[vault]",
          "securityContext",
          "capabilities",
          "drop"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-9",
        "title": "Container is running without privilege escalation control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-9",
        "isGeneratedByCustomRule": false,
        "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
        "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
          "terraform": "Set `spec.container.security_context.allow_privilege_escalation` to `false`"
        },
        "lineNumber": 36,
        "iacDescription": {
          "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
          "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`"
        },
        "publicId": "SNYK-CC-K8S-9",
        "msg": "spec.template.spec.containers[vault].securityContext.allowPrivilegeEscalation",
        "references": [
          "https://www.kernel.org/doc/html/latest/userspace-api/no_new_privs.html"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "containers[vault]",
          "securityContext",
          "allowPrivilegeEscalation"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-11",
        "title": "Container's or Pod's  UID could clash with host's UID",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-11",
        "isGeneratedByCustomRule": false,
        "issue": "`runAsUser` value is set to low UID",
        "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
        "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
          "terraform": "Set `security_context.run_as_user` value to greater or equal than 10'000"
        },
        "lineNumber": 36,
        "iacDescription": {
          "issue": "`runAsUser` value is set to low UID",
          "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
          "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence"
        },
        "publicId": "SNYK-CC-K8S-11",
        "msg": "input.spec.template.spec.containers[vault].securityContext.runAsUser",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container",
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod",
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[vault]",
          "securityContext",
          "runAsUser"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-5",
        "title": "Container has no CPU limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-5",
        "isGeneratedByCustomRule": false,
        "issue": "Container has no CPU limit",
        "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
        "resolve": "Add `resources.limits.cpu` field with required CPU limit value",
        "remediation": {
          "kubernetes": "Add `resources.limits.cpu` field with required CPU limit value",
          "terraform": "Add `spec.container.resources.limits.cpu` field with required CPU limit value"
        },
        "lineNumber": 36,
        "iacDescription": {
          "issue": "Container has no CPU limit",
          "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
          "resolve": "Add `resources.limits.cpu` field with required CPU limit value"
        },
        "publicId": "SNYK-CC-K8S-5",
        "msg": "input.spec.template.spec.containers[vault].resources.limits.cpu",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-cpu-resource/",
          "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/cpu-default-namespace/",
          "https://github.com/kubernetes/design-proposals-archive/blob/8da1442ea29adccea40693357d04727127e045ed/node/resource-qos.md#compressible-resource-guaranteess"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[vault]",
          "resources",
          "limits",
          "cpu"
        ],
        "compliance": []
      }
    ]
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_dso/files/codeready_cr.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_dso/files/codeready_cr.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_dso/files/codeready_operatorgroup.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_dso/files/codeready_operatorgroup.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_dso/files/codeready_subscription.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_dso/files/codeready_subscription.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_dso/files/config.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_dso/files/config.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_dso/files/image-mgmt-cmap.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_dso/files/image-mgmt-cmap.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_dso/files/owasp-cmap.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_dso/files/owasp-cmap.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_dso/files/quay_cr.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_dso/files/quay_cr.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_dso/files/sonarqube-persistent-template.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_dso/files/sonarqube-persistent-template.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_dso/files/sonarqube-template.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_dso/files/sonarqube-template.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_dso/files/stack_imagestream.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_dso/files/stack_imagestream.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_dso/files/tkn-gogs-init-taskrun.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_dso/files/tkn-gogs-init-taskrun.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_dynatrace/files/example_app_template.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_dynatrace/files/example_app_template.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_example_dedicated_cluster/files/example_app_template.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_example_dedicated_cluster/files/example_app_template.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_example_shared_cluster/files/hello_openshift_deployment.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_example_shared_cluster/files/hello_openshift_deployment.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": false,
    "infrastructureAsCodeIssues": [
      {
        "id": "SNYK-CC-K8S-11",
        "title": "Container's or Pod's  UID could clash with host's UID",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-11",
        "isGeneratedByCustomRule": false,
        "issue": "`runAsUser` value is set to low UID",
        "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
        "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
          "terraform": "Set `security_context.run_as_user` value to greater or equal than 10'000"
        },
        "lineNumber": 16,
        "iacDescription": {
          "issue": "`runAsUser` value is set to low UID",
          "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
          "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence"
        },
        "publicId": "SNYK-CC-K8S-11",
        "msg": "input.spec.template.spec.containers[hello-openshift].securityContext.runAsUser",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container",
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod",
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[hello-openshift]",
          "securityContext",
          "runAsUser"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-41",
        "title": "Container is running without liveness probe",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-41",
        "isGeneratedByCustomRule": false,
        "issue": "Liveness probe is not defined",
        "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
        "resolve": "Add `livenessProbe` attribute",
        "remediation": {
          "kubernetes": "Add `livenessProbe` attribute",
          "terraform": "Add `liveness_probe` attribute"
        },
        "lineNumber": 16,
        "iacDescription": {
          "issue": "Liveness probe is not defined",
          "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
          "resolve": "Add `livenessProbe` attribute"
        },
        "publicId": "SNYK-CC-K8S-41",
        "msg": "spec.template.spec.containers[hello-openshift].livenessProbe",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/",
          "https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/",
          "https://cloud.google.com/blog/products/gcp/kubernetes-best-practices-setting-up-health-checks-with-readiness-and-liveness-probes"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "containers[hello-openshift]",
          "livenessProbe"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-42",
        "title": "Container could be running with outdated image",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-42",
        "isGeneratedByCustomRule": false,
        "issue": "The image policy does not prevent image reuse",
        "impact": "The container may run with outdated or unauthorized image",
        "resolve": "Set `imagePullPolicy` attribute to `Always`",
        "remediation": {
          "kubernetes": "Set `imagePullPolicy` attribute to `Always`",
          "terraform": "Set `image_pull_policy` attribute to `Always"
        },
        "lineNumber": 16,
        "iacDescription": {
          "issue": "The image policy does not prevent image reuse",
          "impact": "The container may run with outdated or unauthorized image",
          "resolve": "Set `imagePullPolicy` attribute to `Always`"
        },
        "publicId": "SNYK-CC-K8S-42",
        "msg": "spec.template.spec.containers[hello-openshift].imagePullPolicy",
        "references": [
          "https://kubernetes.io/docs/concepts/containers/images/",
          "https://kubernetes.io/docs/concepts/configuration/overview/#container-images"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "containers[hello-openshift]",
          "imagePullPolicy"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-5",
        "title": "Container has no CPU limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-5",
        "isGeneratedByCustomRule": false,
        "issue": "Container has no CPU limit",
        "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
        "resolve": "Add `resources.limits.cpu` field with required CPU limit value",
        "remediation": {
          "kubernetes": "Add `resources.limits.cpu` field with required CPU limit value",
          "terraform": "Add `spec.container.resources.limits.cpu` field with required CPU limit value"
        },
        "lineNumber": 16,
        "iacDescription": {
          "issue": "Container has no CPU limit",
          "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
          "resolve": "Add `resources.limits.cpu` field with required CPU limit value"
        },
        "publicId": "SNYK-CC-K8S-5",
        "msg": "input.spec.template.spec.containers[hello-openshift].resources.limits.cpu",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-cpu-resource/",
          "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/cpu-default-namespace/",
          "https://github.com/kubernetes/design-proposals-archive/blob/8da1442ea29adccea40693357d04727127e045ed/node/resource-qos.md#compressible-resource-guaranteess"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[hello-openshift]",
          "resources",
          "limits",
          "cpu"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-8",
        "title": "Container is running with writable root filesystem",
        "severity": "low",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-8",
        "isGeneratedByCustomRule": false,
        "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
        "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
          "terraform": "Set `security_context.read_only_root_filesystem` to `true`"
        },
        "lineNumber": 16,
        "iacDescription": {
          "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
          "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`"
        },
        "publicId": "SNYK-CC-K8S-8",
        "msg": "spec.template.spec.containers[hello-openshift].securityContext.readOnlyRootFilesystem",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "containers[hello-openshift]",
          "securityContext",
          "readOnlyRootFilesystem"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-6",
        "title": "Container does not drop all default capabilities",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-6",
        "isGeneratedByCustomRule": false,
        "issue": "All default capabilities are not explicitly dropped",
        "impact": "Containers are running with potentially unnecessary privileges",
        "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
        "remediation": {
          "kubernetes": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
          "terraform": "Add `ALL` to `spec.container.security_context.capabilities.drop` list, and add only required capabilities to `spec.container.security_context.capabilities.add`, ensuring it also does not contain `ALL`"
        },
        "lineNumber": 16,
        "iacDescription": {
          "issue": "All default capabilities are not explicitly dropped",
          "impact": "Containers are running with potentially unnecessary privileges",
          "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`"
        },
        "publicId": "SNYK-CC-K8S-6",
        "msg": "input.spec.template.spec.containers[hello-openshift].securityContext.capabilities.drop",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
          "https://linux-audit.com/linux-capabilities-hardening-linux-binaries-by-removing-setuid/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[hello-openshift]",
          "securityContext",
          "capabilities",
          "drop"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-4",
        "title": "Container is running without memory limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-4",
        "isGeneratedByCustomRule": false,
        "issue": "Memory limit is not defined",
        "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
        "resolve": "Set `resources.limits.memory` value",
        "remediation": {
          "kubernetes": "Set `resources.limits.memory` value",
          "terraform": "Set `resources.limits.memory` value"
        },
        "lineNumber": 16,
        "iacDescription": {
          "issue": "Memory limit is not defined",
          "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
          "resolve": "Set `resources.limits.memory` value"
        },
        "publicId": "SNYK-CC-K8S-4",
        "msg": "input.spec.template.spec.containers[hello-openshift].resources.limits.memory",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/memory-default-namespace/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[hello-openshift]",
          "resources",
          "limits",
          "memory"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-9",
        "title": "Container is running without privilege escalation control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-9",
        "isGeneratedByCustomRule": false,
        "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
        "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
          "terraform": "Set `spec.container.security_context.allow_privilege_escalation` to `false`"
        },
        "lineNumber": 16,
        "iacDescription": {
          "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
          "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`"
        },
        "publicId": "SNYK-CC-K8S-9",
        "msg": "spec.template.spec.containers[hello-openshift].securityContext.allowPrivilegeEscalation",
        "references": [
          "https://www.kernel.org/doc/html/latest/userspace-api/no_new_privs.html"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "containers[hello-openshift]",
          "securityContext",
          "allowPrivilegeEscalation"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-10",
        "title": "Container or Pod is running without root user control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-10",
        "isGeneratedByCustomRule": false,
        "issue": "Container or Pod is running without root user control",
        "impact": "Container or Pod could be running with full administrative privileges",
        "resolve": "Set `securityContext.runAsNonRoot` to `true`",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsNonRoot` to `true`",
          "terraform": "Set `security_context.run_as_non_root` to `true`"
        },
        "lineNumber": 16,
        "iacDescription": {
          "issue": "Container or Pod is running without root user control",
          "impact": "Container or Pod could be running with full administrative privileges",
          "resolve": "Set `securityContext.runAsNonRoot` to `true`"
        },
        "publicId": "SNYK-CC-K8S-10",
        "msg": "input.spec.template.spec.containers[hello-openshift].securityContext.runAsNonRoot",
        "description": "",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[hello-openshift]",
          "securityContext",
          "runAsNonRoot"
        ],
        "compliance": []
      }
    ]
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_example_shared_cluster/files/hello_openshift_route.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_example_shared_cluster/files/hello_openshift_route.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_example_shared_cluster/files/hello_openshift_service.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_example_shared_cluster/files/hello_openshift_service.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_fuse_online/files/amq-artemis-address-crd.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_fuse_online/files/amq-artemis-address-crd.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_fuse_online/files/amq-artemis-broker-crd.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_fuse_online/files/amq-artemis-broker-crd.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_fuse_online/files/amq-artemis-scaledown-crd.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_fuse_online/files/amq-artemis-scaledown-crd.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_fuse_online/files/amq-broker-address-incomingorders.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_fuse_online/files/amq-broker-address-incomingorders.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_fuse_online/files/amq-broker-address-notifications.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_fuse_online/files/amq-broker-address-notifications.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_fuse_online/files/amq-broker-cr.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_fuse_online/files/amq-broker-cr.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_fuse_online/files/amq-broker-operator-role.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_fuse_online/files/amq-broker-operator-role.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": false,
    "infrastructureAsCodeIssues": [
      {
        "id": "SNYK-CC-K8S-44",
        "title": "Role or ClusterRole with too wide permissions",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Role",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-44",
        "isGeneratedByCustomRule": false,
        "issue": "The role uses wildcards, which grant the role permissions to the whole cluster",
        "impact": "The use of wildcard rights grants is likely to provide excessive rights to the Kubernetes API. For a ClusterRole this would be considered high severity.",
        "resolve": "Set only the necessary permissions required",
        "remediation": {
          "kubernetes": "Set only the necessary permissions required",
          "terraform": "Remove any wildcards [*] from `rule.verbs` and `rule.resources`"
        },
        "lineNumber": 27,
        "iacDescription": {
          "issue": "The role uses wildcards, which grant the role permissions to the whole cluster",
          "impact": "The use of wildcard rights grants is likely to provide excessive rights to the Kubernetes API. For a ClusterRole this would be considered high severity.",
          "resolve": "Set only the necessary permissions required"
        },
        "publicId": "SNYK-CC-K8S-44",
        "msg": "rules[2].verbs",
        "references": [
          "https://kubernetes.io/docs/reference/access-authn-authz/rbac/"
        ],
        "path": [
          "[DocId: 0]",
          "rules[2]",
          "verbs"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-44",
        "title": "Role or ClusterRole with too wide permissions",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Role",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-44",
        "isGeneratedByCustomRule": false,
        "issue": "The role uses wildcards, which grant the role permissions to the whole cluster",
        "impact": "The use of wildcard rights grants is likely to provide excessive rights to the Kubernetes API. For a ClusterRole this would be considered high severity.",
        "resolve": "Set only the necessary permissions required",
        "remediation": {
          "kubernetes": "Set only the necessary permissions required",
          "terraform": "Remove any wildcards [*] from `rule.verbs` and `rule.resources`"
        },
        "lineNumber": 8,
        "iacDescription": {
          "issue": "The role uses wildcards, which grant the role permissions to the whole cluster",
          "impact": "The use of wildcard rights grants is likely to provide excessive rights to the Kubernetes API. For a ClusterRole this would be considered high severity.",
          "resolve": "Set only the necessary permissions required"
        },
        "publicId": "SNYK-CC-K8S-44",
        "msg": "rules[0].verbs",
        "references": [
          "https://kubernetes.io/docs/reference/access-authn-authz/rbac/"
        ],
        "path": [
          "[DocId: 0]",
          "rules[0]",
          "verbs"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-44",
        "title": "Role or ClusterRole with too wide permissions",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Role",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-44",
        "isGeneratedByCustomRule": false,
        "issue": "The role uses wildcards, which grant the role permissions to the whole cluster",
        "impact": "The use of wildcard rights grants is likely to provide excessive rights to the Kubernetes API. For a ClusterRole this would be considered high severity.",
        "resolve": "Set only the necessary permissions required",
        "remediation": {
          "kubernetes": "Set only the necessary permissions required",
          "terraform": "Remove any wildcards [*] from `rule.verbs` and `rule.resources`"
        },
        "lineNumber": 43,
        "iacDescription": {
          "issue": "The role uses wildcards, which grant the role permissions to the whole cluster",
          "impact": "The use of wildcard rights grants is likely to provide excessive rights to the Kubernetes API. For a ClusterRole this would be considered high severity.",
          "resolve": "Set only the necessary permissions required"
        },
        "publicId": "SNYK-CC-K8S-44",
        "msg": "rules[4].verbs",
        "references": [
          "https://kubernetes.io/docs/reference/access-authn-authz/rbac/"
        ],
        "path": [
          "[DocId: 0]",
          "rules[4]",
          "verbs"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-44",
        "title": "Role or ClusterRole with too wide permissions",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Role",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-44",
        "isGeneratedByCustomRule": false,
        "issue": "The role uses wildcards, which grant the role permissions to the whole cluster",
        "impact": "The use of wildcard rights grants is likely to provide excessive rights to the Kubernetes API. For a ClusterRole this would be considered high severity.",
        "resolve": "Set only the necessary permissions required",
        "remediation": {
          "kubernetes": "Set only the necessary permissions required",
          "terraform": "Remove any wildcards [*] from `rule.verbs` and `rule.resources`"
        },
        "lineNumber": 47,
        "iacDescription": {
          "issue": "The role uses wildcards, which grant the role permissions to the whole cluster",
          "impact": "The use of wildcard rights grants is likely to provide excessive rights to the Kubernetes API. For a ClusterRole this would be considered high severity.",
          "resolve": "Set only the necessary permissions required"
        },
        "publicId": "SNYK-CC-K8S-44",
        "msg": "rules[4].resources",
        "references": [
          "https://kubernetes.io/docs/reference/access-authn-authz/rbac/"
        ],
        "path": [
          "[DocId: 0]",
          "rules[4]",
          "resources"
        ],
        "compliance": []
      }
    ]
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_fuse_online/files/amq-broker-operator-rolebinding.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_fuse_online/files/amq-broker-operator-rolebinding.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_fuse_online/files/amq-broker-operator-serviceaccount.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_fuse_online/files/amq-broker-operator-serviceaccount.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_fuse_online/files/amq-broker-operator.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_fuse_online/files/amq-broker-operator.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": false,
    "infrastructureAsCodeIssues": [
      {
        "id": "SNYK-CC-K8S-4",
        "title": "Container is running without memory limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-4",
        "isGeneratedByCustomRule": false,
        "issue": "Memory limit is not defined",
        "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
        "resolve": "Set `resources.limits.memory` value",
        "remediation": {
          "kubernetes": "Set `resources.limits.memory` value",
          "terraform": "Set `resources.limits.memory` value"
        },
        "lineNumber": 36,
        "iacDescription": {
          "issue": "Memory limit is not defined",
          "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
          "resolve": "Set `resources.limits.memory` value"
        },
        "publicId": "SNYK-CC-K8S-4",
        "msg": "input.spec.template.spec.containers[amq-broker-operator].resources.limits.memory",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/memory-default-namespace/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[amq-broker-operator]",
          "resources",
          "limits",
          "memory"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-10",
        "title": "Container or Pod is running without root user control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-10",
        "isGeneratedByCustomRule": false,
        "issue": "Container or Pod is running without root user control",
        "impact": "Container or Pod could be running with full administrative privileges",
        "resolve": "Set `securityContext.runAsNonRoot` to `true`",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsNonRoot` to `true`",
          "terraform": "Set `security_context.run_as_non_root` to `true`"
        },
        "lineNumber": 19,
        "iacDescription": {
          "issue": "Container or Pod is running without root user control",
          "impact": "Container or Pod could be running with full administrative privileges",
          "resolve": "Set `securityContext.runAsNonRoot` to `true`"
        },
        "publicId": "SNYK-CC-K8S-10",
        "msg": "input.spec.template.spec.containers[amq-broker-operator].securityContext.runAsNonRoot",
        "description": "",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[amq-broker-operator]",
          "securityContext",
          "runAsNonRoot"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-8",
        "title": "Container is running with writable root filesystem",
        "severity": "low",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-8",
        "isGeneratedByCustomRule": false,
        "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
        "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
          "terraform": "Set `security_context.read_only_root_filesystem` to `true`"
        },
        "lineNumber": 19,
        "iacDescription": {
          "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
          "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`"
        },
        "publicId": "SNYK-CC-K8S-8",
        "msg": "spec.template.spec.containers[amq-broker-operator].securityContext.readOnlyRootFilesystem",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "containers[amq-broker-operator]",
          "securityContext",
          "readOnlyRootFilesystem"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-6",
        "title": "Container does not drop all default capabilities",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-6",
        "isGeneratedByCustomRule": false,
        "issue": "All default capabilities are not explicitly dropped",
        "impact": "Containers are running with potentially unnecessary privileges",
        "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
        "remediation": {
          "kubernetes": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
          "terraform": "Add `ALL` to `spec.container.security_context.capabilities.drop` list, and add only required capabilities to `spec.container.security_context.capabilities.add`, ensuring it also does not contain `ALL`"
        },
        "lineNumber": 19,
        "iacDescription": {
          "issue": "All default capabilities are not explicitly dropped",
          "impact": "Containers are running with potentially unnecessary privileges",
          "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`"
        },
        "publicId": "SNYK-CC-K8S-6",
        "msg": "input.spec.template.spec.containers[amq-broker-operator].securityContext.capabilities.drop",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
          "https://linux-audit.com/linux-capabilities-hardening-linux-binaries-by-removing-setuid/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[amq-broker-operator]",
          "securityContext",
          "capabilities",
          "drop"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-11",
        "title": "Container's or Pod's  UID could clash with host's UID",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-11",
        "isGeneratedByCustomRule": false,
        "issue": "`runAsUser` value is set to low UID",
        "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
        "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
          "terraform": "Set `security_context.run_as_user` value to greater or equal than 10'000"
        },
        "lineNumber": 19,
        "iacDescription": {
          "issue": "`runAsUser` value is set to low UID",
          "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
          "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence"
        },
        "publicId": "SNYK-CC-K8S-11",
        "msg": "input.spec.template.spec.containers[amq-broker-operator].securityContext.runAsUser",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container",
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod",
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[amq-broker-operator]",
          "securityContext",
          "runAsUser"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-41",
        "title": "Container is running without liveness probe",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-41",
        "isGeneratedByCustomRule": false,
        "issue": "Liveness probe is not defined",
        "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
        "resolve": "Add `livenessProbe` attribute",
        "remediation": {
          "kubernetes": "Add `livenessProbe` attribute",
          "terraform": "Add `liveness_probe` attribute"
        },
        "lineNumber": 19,
        "iacDescription": {
          "issue": "Liveness probe is not defined",
          "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
          "resolve": "Add `livenessProbe` attribute"
        },
        "publicId": "SNYK-CC-K8S-41",
        "msg": "spec.template.spec.containers[amq-broker-operator].livenessProbe",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/",
          "https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/",
          "https://cloud.google.com/blog/products/gcp/kubernetes-best-practices-setting-up-health-checks-with-readiness-and-liveness-probes"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "containers[amq-broker-operator]",
          "livenessProbe"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-5",
        "title": "Container has no CPU limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-5",
        "isGeneratedByCustomRule": false,
        "issue": "Container has no CPU limit",
        "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
        "resolve": "Add `resources.limits.cpu` field with required CPU limit value",
        "remediation": {
          "kubernetes": "Add `resources.limits.cpu` field with required CPU limit value",
          "terraform": "Add `spec.container.resources.limits.cpu` field with required CPU limit value"
        },
        "lineNumber": 36,
        "iacDescription": {
          "issue": "Container has no CPU limit",
          "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
          "resolve": "Add `resources.limits.cpu` field with required CPU limit value"
        },
        "publicId": "SNYK-CC-K8S-5",
        "msg": "input.spec.template.spec.containers[amq-broker-operator].resources.limits.cpu",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-cpu-resource/",
          "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/cpu-default-namespace/",
          "https://github.com/kubernetes/design-proposals-archive/blob/8da1442ea29adccea40693357d04727127e045ed/node/resource-qos.md#compressible-resource-guaranteess"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[amq-broker-operator]",
          "resources",
          "limits",
          "cpu"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-9",
        "title": "Container is running without privilege escalation control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-9",
        "isGeneratedByCustomRule": false,
        "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
        "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
          "terraform": "Set `spec.container.security_context.allow_privilege_escalation` to `false`"
        },
        "lineNumber": 19,
        "iacDescription": {
          "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
          "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`"
        },
        "publicId": "SNYK-CC-K8S-9",
        "msg": "spec.template.spec.containers[amq-broker-operator].securityContext.allowPrivilegeEscalation",
        "references": [
          "https://www.kernel.org/doc/html/latest/userspace-api/no_new_privs.html"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "containers[amq-broker-operator]",
          "securityContext",
          "allowPrivilegeEscalation"
        ],
        "compliance": []
      }
    ]
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_fuse_online/files/role-default-view.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_fuse_online/files/role-default-view.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": false,
    "infrastructureAsCodeIssues": [
      {
        "id": "SNYK-CC-K8S-45",
        "title": "RoleBinding or ClusterRoleBinding to the default service account",
        "severity": "medium",
        "isIgnored": false,
        "subType": "RoleBinding",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-45",
        "isGeneratedByCustomRule": false,
        "issue": "A binding was found between a role and the default service account",
        "impact": "The use of default service account is discouraged. For a ClusterRoleBinding this would be considered high severity.",
        "resolve": "Set `subject.name` to a service account other than `default`",
        "remediation": {
          "kubernetes": "Set `subject.name` to a service account other than `default`",
          "terraform": "Set `subject.name` to a service account other than `default`"
        },
        "lineNumber": 8,
        "iacDescription": {
          "issue": "A binding was found between a role and the default service account",
          "impact": "The use of default service account is discouraged. For a ClusterRoleBinding this would be considered high severity.",
          "resolve": "Set `subject.name` to a service account other than `default`"
        },
        "publicId": "SNYK-CC-K8S-45",
        "msg": "subjects[0].name",
        "references": [
          "https://kubernetes.io/docs/reference/access-authn-authz/rbac/"
        ],
        "path": [
          "[DocId: 0]",
          "subjects[0]",
          "name"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-46",
        "title": "RoleBinding or ClusterRoleBinding is using a pre-defined role",
        "severity": "medium",
        "isIgnored": false,
        "subType": "RoleBinding",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-46",
        "isGeneratedByCustomRule": false,
        "issue": "A RoleBinding or ClusterRoleBinding was found using one of the default user facing roles, `cluster-admin`, `admin`, `edit` or `view`.",
        "impact": "Using a default user facing role may be overly permissive. For a ClusterRoleBinding this would be considered high severity.",
        "resolve": "Update roleRef.name to a specific role name with only the necessary permissions",
        "remediation": {
          "kubernetes": "Update roleRef.name to a specific role name with only the necessary permissions"
        },
        "lineNumber": 12,
        "iacDescription": {
          "issue": "A RoleBinding or ClusterRoleBinding was found using one of the default user facing roles, `cluster-admin`, `admin`, `edit` or `view`.",
          "impact": "Using a default user facing role may be overly permissive. For a ClusterRoleBinding this would be considered high severity.",
          "resolve": "Update roleRef.name to a specific role name with only the necessary permissions"
        },
        "publicId": "SNYK-CC-K8S-46",
        "msg": "roleRef.name",
        "references": [
          "https://kubernetes.io/docs/reference/access-authn-authz/rbac/"
        ],
        "path": [
          "[DocId: 0]",
          "roleRef",
          "name"
        ],
        "compliance": []
      }
    ]
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_fuse_online/files/syndesis-cr.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_fuse_online/files/syndesis-cr.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_fuse_online/files/syndesis-crd.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_fuse_online/files/syndesis-crd.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_fuse_online/files/syndesis-installer-role.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_fuse_online/files/syndesis-installer-role.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": false,
    "infrastructureAsCodeIssues": [
      {
        "id": "SNYK-CC-K8S-44",
        "title": "Role or ClusterRole with too wide permissions",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Role",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-44",
        "isGeneratedByCustomRule": false,
        "issue": "The role uses wildcards, which grant the role permissions to the whole cluster",
        "impact": "The use of wildcard rights grants is likely to provide excessive rights to the Kubernetes API. For a ClusterRole this would be considered high severity.",
        "resolve": "Set only the necessary permissions required",
        "remediation": {
          "kubernetes": "Set only the necessary permissions required",
          "terraform": "Remove any wildcards [*] from `rule.verbs` and `rule.resources`"
        },
        "lineNumber": 322,
        "iacDescription": {
          "issue": "The role uses wildcards, which grant the role permissions to the whole cluster",
          "impact": "The use of wildcard rights grants is likely to provide excessive rights to the Kubernetes API. For a ClusterRole this would be considered high severity.",
          "resolve": "Set only the necessary permissions required"
        },
        "publicId": "SNYK-CC-K8S-44",
        "msg": "rules[25].resources",
        "references": [
          "https://kubernetes.io/docs/reference/access-authn-authz/rbac/"
        ],
        "path": [
          "[DocId: 0]",
          "rules[25]",
          "resources"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-47",
        "title": "Role or ClusterRole with dangerous permissions",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Role",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-47",
        "isGeneratedByCustomRule": false,
        "issue": "A role was found using a dangerous permissions",
        "impact": "Using this role grants dangerous permissions. For a ClusterRole this would be considered high severity.",
        "resolve": "Consider removing these permissions",
        "remediation": {
          "kubernetes": "Consider removing these permissions",
          "terraform": "Consider removing these permissions"
        },
        "lineNumber": 335,
        "iacDescription": {
          "issue": "A role was found using a dangerous permissions",
          "impact": "Using this role grants dangerous permissions. For a ClusterRole this would be considered high severity.",
          "resolve": "Consider removing these permissions"
        },
        "publicId": "SNYK-CC-K8S-47",
        "msg": "rules[26].resources",
        "references": [
          "https://kubernetes.io/docs/reference/access-authn-authz/rbac/"
        ],
        "path": [
          "[DocId: 0]",
          "rules[26]",
          "resources"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-47",
        "title": "Role or ClusterRole with dangerous permissions",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Role",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-47",
        "isGeneratedByCustomRule": false,
        "issue": "A role was found using a dangerous permissions",
        "impact": "Using this role grants dangerous permissions. For a ClusterRole this would be considered high severity.",
        "resolve": "Consider removing these permissions",
        "remediation": {
          "kubernetes": "Consider removing these permissions",
          "terraform": "Consider removing these permissions"
        },
        "lineNumber": 55,
        "iacDescription": {
          "issue": "A role was found using a dangerous permissions",
          "impact": "Using this role grants dangerous permissions. For a ClusterRole this would be considered high severity.",
          "resolve": "Consider removing these permissions"
        },
        "publicId": "SNYK-CC-K8S-47",
        "msg": "rules[4].resources",
        "references": [
          "https://kubernetes.io/docs/reference/access-authn-authz/rbac/"
        ],
        "path": [
          "[DocId: 0]",
          "rules[4]",
          "resources"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-44",
        "title": "Role or ClusterRole with too wide permissions",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Role",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-44",
        "isGeneratedByCustomRule": false,
        "issue": "The role uses wildcards, which grant the role permissions to the whole cluster",
        "impact": "The use of wildcard rights grants is likely to provide excessive rights to the Kubernetes API. For a ClusterRole this would be considered high severity.",
        "resolve": "Set only the necessary permissions required",
        "remediation": {
          "kubernetes": "Set only the necessary permissions required",
          "terraform": "Remove any wildcards [*] from `rule.verbs` and `rule.resources`"
        },
        "lineNumber": 517,
        "iacDescription": {
          "issue": "The role uses wildcards, which grant the role permissions to the whole cluster",
          "impact": "The use of wildcard rights grants is likely to provide excessive rights to the Kubernetes API. For a ClusterRole this would be considered high severity.",
          "resolve": "Set only the necessary permissions required"
        },
        "publicId": "SNYK-CC-K8S-44",
        "msg": "rules[40].resources",
        "references": [
          "https://kubernetes.io/docs/reference/access-authn-authz/rbac/"
        ],
        "path": [
          "[DocId: 0]",
          "rules[40]",
          "resources"
        ],
        "compliance": []
      }
    ]
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_fuse_online/files/syndesis-operator-install-rolebinding.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_fuse_online/files/syndesis-operator-install-rolebinding.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_fuse_online/files/syndesis-operator-role.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_fuse_online/files/syndesis-operator-role.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": false,
    "infrastructureAsCodeIssues": [
      {
        "id": "SNYK-CC-K8S-44",
        "title": "Role or ClusterRole with too wide permissions",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Role",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-44",
        "isGeneratedByCustomRule": false,
        "issue": "The role uses wildcards, which grant the role permissions to the whole cluster",
        "impact": "The use of wildcard rights grants is likely to provide excessive rights to the Kubernetes API. For a ClusterRole this would be considered high severity.",
        "resolve": "Set only the necessary permissions required",
        "remediation": {
          "kubernetes": "Set only the necessary permissions required",
          "terraform": "Remove any wildcards [*] from `rule.verbs` and `rule.resources`"
        },
        "lineNumber": 481,
        "iacDescription": {
          "issue": "The role uses wildcards, which grant the role permissions to the whole cluster",
          "impact": "The use of wildcard rights grants is likely to provide excessive rights to the Kubernetes API. For a ClusterRole this would be considered high severity.",
          "resolve": "Set only the necessary permissions required"
        },
        "publicId": "SNYK-CC-K8S-44",
        "msg": "rules[36].resources",
        "references": [
          "https://kubernetes.io/docs/reference/access-authn-authz/rbac/"
        ],
        "path": [
          "[DocId: 0]",
          "rules[36]",
          "resources"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-44",
        "title": "Role or ClusterRole with too wide permissions",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Role",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-44",
        "isGeneratedByCustomRule": false,
        "issue": "The role uses wildcards, which grant the role permissions to the whole cluster",
        "impact": "The use of wildcard rights grants is likely to provide excessive rights to the Kubernetes API. For a ClusterRole this would be considered high severity.",
        "resolve": "Set only the necessary permissions required",
        "remediation": {
          "kubernetes": "Set only the necessary permissions required",
          "terraform": "Remove any wildcards [*] from `rule.verbs` and `rule.resources`"
        },
        "lineNumber": 286,
        "iacDescription": {
          "issue": "The role uses wildcards, which grant the role permissions to the whole cluster",
          "impact": "The use of wildcard rights grants is likely to provide excessive rights to the Kubernetes API. For a ClusterRole this would be considered high severity.",
          "resolve": "Set only the necessary permissions required"
        },
        "publicId": "SNYK-CC-K8S-44",
        "msg": "rules[21].resources",
        "references": [
          "https://kubernetes.io/docs/reference/access-authn-authz/rbac/"
        ],
        "path": [
          "[DocId: 0]",
          "rules[21]",
          "resources"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-47",
        "title": "Role or ClusterRole with dangerous permissions",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Role",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-47",
        "isGeneratedByCustomRule": false,
        "issue": "A role was found using a dangerous permissions",
        "impact": "Using this role grants dangerous permissions. For a ClusterRole this would be considered high severity.",
        "resolve": "Consider removing these permissions",
        "remediation": {
          "kubernetes": "Consider removing these permissions",
          "terraform": "Consider removing these permissions"
        },
        "lineNumber": 299,
        "iacDescription": {
          "issue": "A role was found using a dangerous permissions",
          "impact": "Using this role grants dangerous permissions. For a ClusterRole this would be considered high severity.",
          "resolve": "Consider removing these permissions"
        },
        "publicId": "SNYK-CC-K8S-47",
        "msg": "rules[22].resources",
        "references": [
          "https://kubernetes.io/docs/reference/access-authn-authz/rbac/"
        ],
        "path": [
          "[DocId: 0]",
          "rules[22]",
          "resources"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-47",
        "title": "Role or ClusterRole with dangerous permissions",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Role",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-47",
        "isGeneratedByCustomRule": false,
        "issue": "A role was found using a dangerous permissions",
        "impact": "Using this role grants dangerous permissions. For a ClusterRole this would be considered high severity.",
        "resolve": "Consider removing these permissions",
        "remediation": {
          "kubernetes": "Consider removing these permissions",
          "terraform": "Consider removing these permissions"
        },
        "lineNumber": 44,
        "iacDescription": {
          "issue": "A role was found using a dangerous permissions",
          "impact": "Using this role grants dangerous permissions. For a ClusterRole this would be considered high severity.",
          "resolve": "Consider removing these permissions"
        },
        "publicId": "SNYK-CC-K8S-47",
        "msg": "rules[3].resources",
        "references": [
          "https://kubernetes.io/docs/reference/access-authn-authz/rbac/"
        ],
        "path": [
          "[DocId: 0]",
          "rules[3]",
          "resources"
        ],
        "compliance": []
      }
    ]
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_fuse_online/files/syndesis-operator.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_fuse_online/files/syndesis-operator.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": false,
    "infrastructureAsCodeIssues": [
      {
        "id": "SNYK-CC-K8S-11",
        "title": "Container's or Pod's  UID could clash with host's UID",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-11",
        "isGeneratedByCustomRule": false,
        "issue": "`runAsUser` value is set to low UID",
        "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
        "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
          "terraform": "Set `security_context.run_as_user` value to greater or equal than 10'000"
        },
        "lineNumber": 40,
        "iacDescription": {
          "issue": "`runAsUser` value is set to low UID",
          "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
          "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence"
        },
        "publicId": "SNYK-CC-K8S-11",
        "msg": "input.spec.template.spec.containers[syndesis-operator].securityContext.runAsUser",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container",
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod",
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[syndesis-operator]",
          "securityContext",
          "runAsUser"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-6",
        "title": "Container does not drop all default capabilities",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-6",
        "isGeneratedByCustomRule": false,
        "issue": "All default capabilities are not explicitly dropped",
        "impact": "Containers are running with potentially unnecessary privileges",
        "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
        "remediation": {
          "kubernetes": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
          "terraform": "Add `ALL` to `spec.container.security_context.capabilities.drop` list, and add only required capabilities to `spec.container.security_context.capabilities.add`, ensuring it also does not contain `ALL`"
        },
        "lineNumber": 25,
        "iacDescription": {
          "issue": "All default capabilities are not explicitly dropped",
          "impact": "Containers are running with potentially unnecessary privileges",
          "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`"
        },
        "publicId": "SNYK-CC-K8S-6",
        "msg": "input.spec.template.spec.initContainers[postgres-version].securityContext.capabilities.drop",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
          "https://linux-audit.com/linux-capabilities-hardening-linux-binaries-by-removing-setuid/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "initContainers[postgres-version]",
          "securityContext",
          "capabilities",
          "drop"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-11",
        "title": "Container's or Pod's  UID could clash with host's UID",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-11",
        "isGeneratedByCustomRule": false,
        "issue": "`runAsUser` value is set to low UID",
        "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
        "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
          "terraform": "Set `security_context.run_as_user` value to greater or equal than 10'000"
        },
        "lineNumber": 25,
        "iacDescription": {
          "issue": "`runAsUser` value is set to low UID",
          "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
          "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence"
        },
        "publicId": "SNYK-CC-K8S-11",
        "msg": "input.spec.template.spec.initContainers[postgres-version].securityContext.runAsUser",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container",
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod",
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "initContainers[postgres-version]",
          "securityContext",
          "runAsUser"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-5",
        "title": "Container has no CPU limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-5",
        "isGeneratedByCustomRule": false,
        "issue": "Container has no CPU limit",
        "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
        "resolve": "Add `resources.limits.cpu` field with required CPU limit value",
        "remediation": {
          "kubernetes": "Add `resources.limits.cpu` field with required CPU limit value",
          "terraform": "Add `spec.container.resources.limits.cpu` field with required CPU limit value"
        },
        "lineNumber": 59,
        "iacDescription": {
          "issue": "Container has no CPU limit",
          "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
          "resolve": "Add `resources.limits.cpu` field with required CPU limit value"
        },
        "publicId": "SNYK-CC-K8S-5",
        "msg": "input.spec.template.spec.containers[syndesis-operator].resources.limits.cpu",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-cpu-resource/",
          "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/cpu-default-namespace/",
          "https://github.com/kubernetes/design-proposals-archive/blob/8da1442ea29adccea40693357d04727127e045ed/node/resource-qos.md#compressible-resource-guaranteess"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[syndesis-operator]",
          "resources",
          "limits",
          "cpu"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-9",
        "title": "Container is running without privilege escalation control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-9",
        "isGeneratedByCustomRule": false,
        "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
        "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
          "terraform": "Set `spec.container.security_context.allow_privilege_escalation` to `false`"
        },
        "lineNumber": 25,
        "iacDescription": {
          "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
          "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`"
        },
        "publicId": "SNYK-CC-K8S-9",
        "msg": "spec.template.spec.initContainers[postgres-version].securityContext.allowPrivilegeEscalation",
        "references": [
          "https://www.kernel.org/doc/html/latest/userspace-api/no_new_privs.html"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "initContainers[postgres-version]",
          "securityContext",
          "allowPrivilegeEscalation"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-10",
        "title": "Container or Pod is running without root user control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-10",
        "isGeneratedByCustomRule": false,
        "issue": "Container or Pod is running without root user control",
        "impact": "Container or Pod could be running with full administrative privileges",
        "resolve": "Set `securityContext.runAsNonRoot` to `true`",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsNonRoot` to `true`",
          "terraform": "Set `security_context.run_as_non_root` to `true`"
        },
        "lineNumber": 25,
        "iacDescription": {
          "issue": "Container or Pod is running without root user control",
          "impact": "Container or Pod could be running with full administrative privileges",
          "resolve": "Set `securityContext.runAsNonRoot` to `true`"
        },
        "publicId": "SNYK-CC-K8S-10",
        "msg": "input.spec.template.spec.initContainers[postgres-version].securityContext.runAsNonRoot",
        "description": "",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "initContainers[postgres-version]",
          "securityContext",
          "runAsNonRoot"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-8",
        "title": "Container is running with writable root filesystem",
        "severity": "low",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-8",
        "isGeneratedByCustomRule": false,
        "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
        "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
          "terraform": "Set `security_context.read_only_root_filesystem` to `true`"
        },
        "lineNumber": 40,
        "iacDescription": {
          "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
          "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`"
        },
        "publicId": "SNYK-CC-K8S-8",
        "msg": "spec.template.spec.containers[syndesis-operator].securityContext.readOnlyRootFilesystem",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "containers[syndesis-operator]",
          "securityContext",
          "readOnlyRootFilesystem"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-4",
        "title": "Container is running without memory limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-4",
        "isGeneratedByCustomRule": false,
        "issue": "Memory limit is not defined",
        "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
        "resolve": "Set `resources.limits.memory` value",
        "remediation": {
          "kubernetes": "Set `resources.limits.memory` value",
          "terraform": "Set `resources.limits.memory` value"
        },
        "lineNumber": 59,
        "iacDescription": {
          "issue": "Memory limit is not defined",
          "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
          "resolve": "Set `resources.limits.memory` value"
        },
        "publicId": "SNYK-CC-K8S-4",
        "msg": "input.spec.template.spec.containers[syndesis-operator].resources.limits.memory",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/memory-default-namespace/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[syndesis-operator]",
          "resources",
          "limits",
          "memory"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-8",
        "title": "Container is running with writable root filesystem",
        "severity": "low",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-8",
        "isGeneratedByCustomRule": false,
        "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
        "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
          "terraform": "Set `security_context.read_only_root_filesystem` to `true`"
        },
        "lineNumber": 25,
        "iacDescription": {
          "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
          "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`"
        },
        "publicId": "SNYK-CC-K8S-8",
        "msg": "spec.template.spec.initContainers[postgres-version].securityContext.readOnlyRootFilesystem",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "initContainers[postgres-version]",
          "securityContext",
          "readOnlyRootFilesystem"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-41",
        "title": "Container is running without liveness probe",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-41",
        "isGeneratedByCustomRule": false,
        "issue": "Liveness probe is not defined",
        "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
        "resolve": "Add `livenessProbe` attribute",
        "remediation": {
          "kubernetes": "Add `livenessProbe` attribute",
          "terraform": "Add `liveness_probe` attribute"
        },
        "lineNumber": 40,
        "iacDescription": {
          "issue": "Liveness probe is not defined",
          "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
          "resolve": "Add `livenessProbe` attribute"
        },
        "publicId": "SNYK-CC-K8S-41",
        "msg": "spec.template.spec.containers[syndesis-operator].livenessProbe",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/",
          "https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/",
          "https://cloud.google.com/blog/products/gcp/kubernetes-best-practices-setting-up-health-checks-with-readiness-and-liveness-probes"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "containers[syndesis-operator]",
          "livenessProbe"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-10",
        "title": "Container or Pod is running without root user control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-10",
        "isGeneratedByCustomRule": false,
        "issue": "Container or Pod is running without root user control",
        "impact": "Container or Pod could be running with full administrative privileges",
        "resolve": "Set `securityContext.runAsNonRoot` to `true`",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsNonRoot` to `true`",
          "terraform": "Set `security_context.run_as_non_root` to `true`"
        },
        "lineNumber": 40,
        "iacDescription": {
          "issue": "Container or Pod is running without root user control",
          "impact": "Container or Pod could be running with full administrative privileges",
          "resolve": "Set `securityContext.runAsNonRoot` to `true`"
        },
        "publicId": "SNYK-CC-K8S-10",
        "msg": "input.spec.template.spec.containers[syndesis-operator].securityContext.runAsNonRoot",
        "description": "",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[syndesis-operator]",
          "securityContext",
          "runAsNonRoot"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-4",
        "title": "Container is running without memory limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-4",
        "isGeneratedByCustomRule": false,
        "issue": "Memory limit is not defined",
        "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
        "resolve": "Set `resources.limits.memory` value",
        "remediation": {
          "kubernetes": "Set `resources.limits.memory` value",
          "terraform": "Set `resources.limits.memory` value"
        },
        "lineNumber": 31,
        "iacDescription": {
          "issue": "Memory limit is not defined",
          "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
          "resolve": "Set `resources.limits.memory` value"
        },
        "publicId": "SNYK-CC-K8S-4",
        "msg": "input.spec.template.spec.initContainers[postgres-version].resources.limits.memory",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/memory-default-namespace/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "initContainers[postgres-version]",
          "resources",
          "limits",
          "memory"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-5",
        "title": "Container has no CPU limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-5",
        "isGeneratedByCustomRule": false,
        "issue": "Container has no CPU limit",
        "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
        "resolve": "Add `resources.limits.cpu` field with required CPU limit value",
        "remediation": {
          "kubernetes": "Add `resources.limits.cpu` field with required CPU limit value",
          "terraform": "Add `spec.container.resources.limits.cpu` field with required CPU limit value"
        },
        "lineNumber": 31,
        "iacDescription": {
          "issue": "Container has no CPU limit",
          "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
          "resolve": "Add `resources.limits.cpu` field with required CPU limit value"
        },
        "publicId": "SNYK-CC-K8S-5",
        "msg": "input.spec.template.spec.initContainers[postgres-version].resources.limits.cpu",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-cpu-resource/",
          "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/cpu-default-namespace/",
          "https://github.com/kubernetes/design-proposals-archive/blob/8da1442ea29adccea40693357d04727127e045ed/node/resource-qos.md#compressible-resource-guaranteess"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "initContainers[postgres-version]",
          "resources",
          "limits",
          "cpu"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-6",
        "title": "Container does not drop all default capabilities",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-6",
        "isGeneratedByCustomRule": false,
        "issue": "All default capabilities are not explicitly dropped",
        "impact": "Containers are running with potentially unnecessary privileges",
        "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
        "remediation": {
          "kubernetes": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
          "terraform": "Add `ALL` to `spec.container.security_context.capabilities.drop` list, and add only required capabilities to `spec.container.security_context.capabilities.add`, ensuring it also does not contain `ALL`"
        },
        "lineNumber": 40,
        "iacDescription": {
          "issue": "All default capabilities are not explicitly dropped",
          "impact": "Containers are running with potentially unnecessary privileges",
          "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`"
        },
        "publicId": "SNYK-CC-K8S-6",
        "msg": "input.spec.template.spec.containers[syndesis-operator].securityContext.capabilities.drop",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
          "https://linux-audit.com/linux-capabilities-hardening-linux-binaries-by-removing-setuid/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[syndesis-operator]",
          "securityContext",
          "capabilities",
          "drop"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-9",
        "title": "Container is running without privilege escalation control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-9",
        "isGeneratedByCustomRule": false,
        "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
        "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
          "terraform": "Set `spec.container.security_context.allow_privilege_escalation` to `false`"
        },
        "lineNumber": 40,
        "iacDescription": {
          "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
          "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`"
        },
        "publicId": "SNYK-CC-K8S-9",
        "msg": "spec.template.spec.containers[syndesis-operator].securityContext.allowPrivilegeEscalation",
        "references": [
          "https://www.kernel.org/doc/html/latest/userspace-api/no_new_privs.html"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "containers[syndesis-operator]",
          "securityContext",
          "allowPrivilegeEscalation"
        ],
        "compliance": []
      }
    ]
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_fuse_online/files/syndesis-serviceaccount.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_fuse_online/files/syndesis-serviceaccount.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_gitops_cluster_mgmt_workshop/files/devworkspacetemplate.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_gitops_cluster_mgmt_workshop/files/devworkspacetemplate.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_gitops_workshop/files/devworkspacetemplate.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_gitops_workshop/files/devworkspacetemplate.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_hands_on_openshift_48/files/clusterlogforwarder_multinamespace.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_hands_on_openshift_48/files/clusterlogforwarder_multinamespace.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_hands_on_openshift_48/files/dev_barista_buildconfig.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_hands_on_openshift_48/files/dev_barista_buildconfig.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_hands_on_openshift_48/files/dev_barista_deployment.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_hands_on_openshift_48/files/dev_barista_deployment.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": false,
    "infrastructureAsCodeIssues": [
      {
        "id": "SNYK-CC-K8S-4",
        "title": "Container is running without memory limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-4",
        "isGeneratedByCustomRule": false,
        "issue": "Memory limit is not defined",
        "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
        "resolve": "Set `resources.limits.memory` value",
        "remediation": {
          "kubernetes": "Set `resources.limits.memory` value",
          "terraform": "Set `resources.limits.memory` value"
        },
        "lineNumber": 45,
        "iacDescription": {
          "issue": "Memory limit is not defined",
          "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
          "resolve": "Set `resources.limits.memory` value"
        },
        "publicId": "SNYK-CC-K8S-4",
        "msg": "input.spec.template.spec.containers[barista].resources.limits.memory",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/memory-default-namespace/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[barista]",
          "resources",
          "limits",
          "memory"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-8",
        "title": "Container is running with writable root filesystem",
        "severity": "low",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-8",
        "isGeneratedByCustomRule": false,
        "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
        "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
          "terraform": "Set `security_context.read_only_root_filesystem` to `true`"
        },
        "lineNumber": 35,
        "iacDescription": {
          "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
          "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`"
        },
        "publicId": "SNYK-CC-K8S-8",
        "msg": "spec.template.spec.containers[barista].securityContext.readOnlyRootFilesystem",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "containers[barista]",
          "securityContext",
          "readOnlyRootFilesystem"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-5",
        "title": "Container has no CPU limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-5",
        "isGeneratedByCustomRule": false,
        "issue": "Container has no CPU limit",
        "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
        "resolve": "Add `resources.limits.cpu` field with required CPU limit value",
        "remediation": {
          "kubernetes": "Add `resources.limits.cpu` field with required CPU limit value",
          "terraform": "Add `spec.container.resources.limits.cpu` field with required CPU limit value"
        },
        "lineNumber": 45,
        "iacDescription": {
          "issue": "Container has no CPU limit",
          "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
          "resolve": "Add `resources.limits.cpu` field with required CPU limit value"
        },
        "publicId": "SNYK-CC-K8S-5",
        "msg": "input.spec.template.spec.containers[barista].resources.limits.cpu",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-cpu-resource/",
          "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/cpu-default-namespace/",
          "https://github.com/kubernetes/design-proposals-archive/blob/8da1442ea29adccea40693357d04727127e045ed/node/resource-qos.md#compressible-resource-guaranteess"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[barista]",
          "resources",
          "limits",
          "cpu"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-11",
        "title": "Container's or Pod's  UID could clash with host's UID",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-11",
        "isGeneratedByCustomRule": false,
        "issue": "`runAsUser` value is set to low UID",
        "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
        "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
          "terraform": "Set `security_context.run_as_user` value to greater or equal than 10'000"
        },
        "lineNumber": 35,
        "iacDescription": {
          "issue": "`runAsUser` value is set to low UID",
          "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
          "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence"
        },
        "publicId": "SNYK-CC-K8S-11",
        "msg": "input.spec.template.spec.containers[barista].securityContext.runAsUser",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container",
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod",
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[barista]",
          "securityContext",
          "runAsUser"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-42",
        "title": "Container could be running with outdated image",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-42",
        "isGeneratedByCustomRule": false,
        "issue": "The image policy does not prevent image reuse",
        "impact": "The container may run with outdated or unauthorized image",
        "resolve": "Set `imagePullPolicy` attribute to `Always`",
        "remediation": {
          "kubernetes": "Set `imagePullPolicy` attribute to `Always`",
          "terraform": "Set `image_pull_policy` attribute to `Always"
        },
        "lineNumber": 36,
        "iacDescription": {
          "issue": "The image policy does not prevent image reuse",
          "impact": "The container may run with outdated or unauthorized image",
          "resolve": "Set `imagePullPolicy` attribute to `Always`"
        },
        "publicId": "SNYK-CC-K8S-42",
        "msg": "spec.template.spec.containers[barista].imagePullPolicy",
        "references": [
          "https://kubernetes.io/docs/concepts/containers/images/",
          "https://kubernetes.io/docs/concepts/configuration/overview/#container-images"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "containers[barista]",
          "imagePullPolicy"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-10",
        "title": "Container or Pod is running without root user control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-10",
        "isGeneratedByCustomRule": false,
        "issue": "Container or Pod is running without root user control",
        "impact": "Container or Pod could be running with full administrative privileges",
        "resolve": "Set `securityContext.runAsNonRoot` to `true`",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsNonRoot` to `true`",
          "terraform": "Set `security_context.run_as_non_root` to `true`"
        },
        "lineNumber": 35,
        "iacDescription": {
          "issue": "Container or Pod is running without root user control",
          "impact": "Container or Pod could be running with full administrative privileges",
          "resolve": "Set `securityContext.runAsNonRoot` to `true`"
        },
        "publicId": "SNYK-CC-K8S-10",
        "msg": "input.spec.template.spec.containers[barista].securityContext.runAsNonRoot",
        "description": "",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[barista]",
          "securityContext",
          "runAsNonRoot"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-36",
        "title": "Container is running with multiple open ports",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-36",
        "isGeneratedByCustomRule": false,
        "issue": "Container is declaring more than 2 listening ports",
        "impact": "Increases the attack surface of the application and the container.",
        "resolve": "Reduce `ports` count to 2",
        "remediation": {
          "kubernetes": "Reduce `ports` count to 2",
          "terraform": "Reduce `ports` count to 2"
        },
        "lineNumber": 39,
        "iacDescription": {
          "issue": "Container is declaring more than 2 listening ports",
          "impact": "Increases the attack surface of the application and the container.",
          "resolve": "Reduce `ports` count to 2"
        },
        "publicId": "SNYK-CC-K8S-36",
        "msg": "spec.template.spec.containers[barista].ports",
        "description": "",
        "references": [
          "https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "containers[barista]",
          "ports"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-6",
        "title": "Container does not drop all default capabilities",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-6",
        "isGeneratedByCustomRule": false,
        "issue": "All default capabilities are not explicitly dropped",
        "impact": "Containers are running with potentially unnecessary privileges",
        "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
        "remediation": {
          "kubernetes": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
          "terraform": "Add `ALL` to `spec.container.security_context.capabilities.drop` list, and add only required capabilities to `spec.container.security_context.capabilities.add`, ensuring it also does not contain `ALL`"
        },
        "lineNumber": 35,
        "iacDescription": {
          "issue": "All default capabilities are not explicitly dropped",
          "impact": "Containers are running with potentially unnecessary privileges",
          "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`"
        },
        "publicId": "SNYK-CC-K8S-6",
        "msg": "input.spec.template.spec.containers[barista].securityContext.capabilities.drop",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
          "https://linux-audit.com/linux-capabilities-hardening-linux-binaries-by-removing-setuid/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[barista]",
          "securityContext",
          "capabilities",
          "drop"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-9",
        "title": "Container is running without privilege escalation control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-9",
        "isGeneratedByCustomRule": false,
        "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
        "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
          "terraform": "Set `spec.container.security_context.allow_privilege_escalation` to `false`"
        },
        "lineNumber": 35,
        "iacDescription": {
          "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
          "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`"
        },
        "publicId": "SNYK-CC-K8S-9",
        "msg": "spec.template.spec.containers[barista].securityContext.allowPrivilegeEscalation",
        "references": [
          "https://www.kernel.org/doc/html/latest/userspace-api/no_new_privs.html"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "containers[barista]",
          "securityContext",
          "allowPrivilegeEscalation"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-41",
        "title": "Container is running without liveness probe",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-41",
        "isGeneratedByCustomRule": false,
        "issue": "Liveness probe is not defined",
        "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
        "resolve": "Add `livenessProbe` attribute",
        "remediation": {
          "kubernetes": "Add `livenessProbe` attribute",
          "terraform": "Add `liveness_probe` attribute"
        },
        "lineNumber": 35,
        "iacDescription": {
          "issue": "Liveness probe is not defined",
          "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
          "resolve": "Add `livenessProbe` attribute"
        },
        "publicId": "SNYK-CC-K8S-41",
        "msg": "spec.template.spec.containers[barista].livenessProbe",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/",
          "https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/",
          "https://cloud.google.com/blog/products/gcp/kubernetes-best-practices-setting-up-health-checks-with-readiness-and-liveness-probes"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "containers[barista]",
          "livenessProbe"
        ],
        "compliance": []
      }
    ]
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_hands_on_openshift_48/files/dev_barista_imagestream.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_hands_on_openshift_48/files/dev_barista_imagestream.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_hands_on_openshift_48/files/dev_barista_knative_service.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_hands_on_openshift_48/files/dev_barista_knative_service.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_hands_on_openshift_48/files/dev_barista_route.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_hands_on_openshift_48/files/dev_barista_route.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_hands_on_openshift_48/files/dev_barista_service.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_hands_on_openshift_48/files/dev_barista_service.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_hands_on_openshift_48/files/dev_coffeeshop_configmap.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_hands_on_openshift_48/files/dev_coffeeshop_configmap.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_hands_on_openshift_48/files/dev_coffeeshop_cronjob.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_hands_on_openshift_48/files/dev_coffeeshop_cronjob.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": false,
    "infrastructureAsCodeIssues": [
      {
        "id": "SNYK-CC-K8S-4",
        "title": "Container is running without memory limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-4",
        "isGeneratedByCustomRule": false,
        "issue": "Memory limit is not defined",
        "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
        "resolve": "Set `resources.limits.memory` value",
        "remediation": {
          "kubernetes": "Set `resources.limits.memory` value",
          "terraform": "Set `resources.limits.memory` value"
        },
        "lineNumber": 13,
        "iacDescription": {
          "issue": "Memory limit is not defined",
          "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
          "resolve": "Set `resources.limits.memory` value"
        },
        "publicId": "SNYK-CC-K8S-4",
        "msg": "input.spec.jobTemplate.spec.template.spec.containers[hello].resources.limits.memory",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/memory-default-namespace/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "jobTemplate",
          "spec",
          "template",
          "spec",
          "containers[hello]",
          "resources",
          "limits",
          "memory"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-10",
        "title": "Container or Pod is running without root user control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-10",
        "isGeneratedByCustomRule": false,
        "issue": "Container or Pod is running without root user control",
        "impact": "Container or Pod could be running with full administrative privileges",
        "resolve": "Set `securityContext.runAsNonRoot` to `true`",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsNonRoot` to `true`",
          "terraform": "Set `security_context.run_as_non_root` to `true`"
        },
        "lineNumber": 13,
        "iacDescription": {
          "issue": "Container or Pod is running without root user control",
          "impact": "Container or Pod could be running with full administrative privileges",
          "resolve": "Set `securityContext.runAsNonRoot` to `true`"
        },
        "publicId": "SNYK-CC-K8S-10",
        "msg": "input.spec.jobTemplate.spec.template.spec.containers[hello].securityContext.runAsNonRoot",
        "description": "",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "jobTemplate",
          "spec",
          "template",
          "spec",
          "containers[hello]",
          "securityContext",
          "runAsNonRoot"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-6",
        "title": "Container does not drop all default capabilities",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-6",
        "isGeneratedByCustomRule": false,
        "issue": "All default capabilities are not explicitly dropped",
        "impact": "Containers are running with potentially unnecessary privileges",
        "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
        "remediation": {
          "kubernetes": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
          "terraform": "Add `ALL` to `spec.container.security_context.capabilities.drop` list, and add only required capabilities to `spec.container.security_context.capabilities.add`, ensuring it also does not contain `ALL`"
        },
        "lineNumber": 13,
        "iacDescription": {
          "issue": "All default capabilities are not explicitly dropped",
          "impact": "Containers are running with potentially unnecessary privileges",
          "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`"
        },
        "publicId": "SNYK-CC-K8S-6",
        "msg": "input.spec.jobTemplate.spec.template.spec.containers[hello].securityContext.capabilities.drop",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
          "https://linux-audit.com/linux-capabilities-hardening-linux-binaries-by-removing-setuid/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "jobTemplate",
          "spec",
          "template",
          "spec",
          "containers[hello]",
          "securityContext",
          "capabilities",
          "drop"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-9",
        "title": "Container is running without privilege escalation control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-9",
        "isGeneratedByCustomRule": false,
        "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
        "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
          "terraform": "Set `spec.container.security_context.allow_privilege_escalation` to `false`"
        },
        "lineNumber": 13,
        "iacDescription": {
          "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
          "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`"
        },
        "publicId": "SNYK-CC-K8S-9",
        "msg": "spec.jobTemplate.spec.template.spec.containers[hello].securityContext.allowPrivilegeEscalation",
        "references": [
          "https://www.kernel.org/doc/html/latest/userspace-api/no_new_privs.html"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "jobTemplate",
          "spec",
          "template",
          "spec",
          "containers[hello]",
          "securityContext",
          "allowPrivilegeEscalation"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-11",
        "title": "Container's or Pod's  UID could clash with host's UID",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-11",
        "isGeneratedByCustomRule": false,
        "issue": "`runAsUser` value is set to low UID",
        "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
        "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
          "terraform": "Set `security_context.run_as_user` value to greater or equal than 10'000"
        },
        "lineNumber": 13,
        "iacDescription": {
          "issue": "`runAsUser` value is set to low UID",
          "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
          "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence"
        },
        "publicId": "SNYK-CC-K8S-11",
        "msg": "input.spec.jobTemplate.spec.template.spec.containers[hello].securityContext.runAsUser",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container",
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod",
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "jobTemplate",
          "spec",
          "template",
          "spec",
          "containers[hello]",
          "securityContext",
          "runAsUser"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-5",
        "title": "Container has no CPU limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-5",
        "isGeneratedByCustomRule": false,
        "issue": "Container has no CPU limit",
        "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
        "resolve": "Add `resources.limits.cpu` field with required CPU limit value",
        "remediation": {
          "kubernetes": "Add `resources.limits.cpu` field with required CPU limit value",
          "terraform": "Add `spec.container.resources.limits.cpu` field with required CPU limit value"
        },
        "lineNumber": 13,
        "iacDescription": {
          "issue": "Container has no CPU limit",
          "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
          "resolve": "Add `resources.limits.cpu` field with required CPU limit value"
        },
        "publicId": "SNYK-CC-K8S-5",
        "msg": "input.spec.jobTemplate.spec.template.spec.containers[hello].resources.limits.cpu",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-cpu-resource/",
          "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/cpu-default-namespace/",
          "https://github.com/kubernetes/design-proposals-archive/blob/8da1442ea29adccea40693357d04727127e045ed/node/resource-qos.md#compressible-resource-guaranteess"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "jobTemplate",
          "spec",
          "template",
          "spec",
          "containers[hello]",
          "resources",
          "limits",
          "cpu"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-8",
        "title": "Container is running with writable root filesystem",
        "severity": "low",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-8",
        "isGeneratedByCustomRule": false,
        "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
        "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
          "terraform": "Set `security_context.read_only_root_filesystem` to `true`"
        },
        "lineNumber": 13,
        "iacDescription": {
          "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
          "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`"
        },
        "publicId": "SNYK-CC-K8S-8",
        "msg": "spec.jobTemplate.spec.template.spec.containers[hello].securityContext.readOnlyRootFilesystem",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "jobTemplate",
          "spec",
          "template",
          "spec",
          "containers[hello]",
          "securityContext",
          "readOnlyRootFilesystem"
        ],
        "compliance": []
      }
    ]
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_hands_on_openshift_48/files/dev_coffeeshop_deployment.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_hands_on_openshift_48/files/dev_coffeeshop_deployment.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": false,
    "infrastructureAsCodeIssues": [
      {
        "id": "SNYK-CC-K8S-4",
        "title": "Container is running without memory limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-4",
        "isGeneratedByCustomRule": false,
        "issue": "Memory limit is not defined",
        "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
        "resolve": "Set `resources.limits.memory` value",
        "remediation": {
          "kubernetes": "Set `resources.limits.memory` value",
          "terraform": "Set `resources.limits.memory` value"
        },
        "lineNumber": 94,
        "iacDescription": {
          "issue": "Memory limit is not defined",
          "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
          "resolve": "Set `resources.limits.memory` value"
        },
        "publicId": "SNYK-CC-K8S-4",
        "msg": "input.spec.template.spec.containers[coffee-shop].resources.limits.memory",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/memory-default-namespace/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[coffee-shop]",
          "resources",
          "limits",
          "memory"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-11",
        "title": "Container's or Pod's  UID could clash with host's UID",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-11",
        "isGeneratedByCustomRule": false,
        "issue": "`runAsUser` value is set to low UID",
        "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
        "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
          "terraform": "Set `security_context.run_as_user` value to greater or equal than 10'000"
        },
        "lineNumber": 40,
        "iacDescription": {
          "issue": "`runAsUser` value is set to low UID",
          "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
          "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence"
        },
        "publicId": "SNYK-CC-K8S-11",
        "msg": "input.spec.template.spec.containers[coffee-shop].securityContext.runAsUser",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container",
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod",
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[coffee-shop]",
          "securityContext",
          "runAsUser"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-5",
        "title": "Container has no CPU limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-5",
        "isGeneratedByCustomRule": false,
        "issue": "Container has no CPU limit",
        "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
        "resolve": "Add `resources.limits.cpu` field with required CPU limit value",
        "remediation": {
          "kubernetes": "Add `resources.limits.cpu` field with required CPU limit value",
          "terraform": "Add `spec.container.resources.limits.cpu` field with required CPU limit value"
        },
        "lineNumber": 94,
        "iacDescription": {
          "issue": "Container has no CPU limit",
          "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
          "resolve": "Add `resources.limits.cpu` field with required CPU limit value"
        },
        "publicId": "SNYK-CC-K8S-5",
        "msg": "input.spec.template.spec.containers[coffee-shop].resources.limits.cpu",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-cpu-resource/",
          "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/cpu-default-namespace/",
          "https://github.com/kubernetes/design-proposals-archive/blob/8da1442ea29adccea40693357d04727127e045ed/node/resource-qos.md#compressible-resource-guaranteess"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[coffee-shop]",
          "resources",
          "limits",
          "cpu"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-6",
        "title": "Container does not drop all default capabilities",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-6",
        "isGeneratedByCustomRule": false,
        "issue": "All default capabilities are not explicitly dropped",
        "impact": "Containers are running with potentially unnecessary privileges",
        "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
        "remediation": {
          "kubernetes": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
          "terraform": "Add `ALL` to `spec.container.security_context.capabilities.drop` list, and add only required capabilities to `spec.container.security_context.capabilities.add`, ensuring it also does not contain `ALL`"
        },
        "lineNumber": 40,
        "iacDescription": {
          "issue": "All default capabilities are not explicitly dropped",
          "impact": "Containers are running with potentially unnecessary privileges",
          "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`"
        },
        "publicId": "SNYK-CC-K8S-6",
        "msg": "input.spec.template.spec.containers[coffee-shop].securityContext.capabilities.drop",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
          "https://linux-audit.com/linux-capabilities-hardening-linux-binaries-by-removing-setuid/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[coffee-shop]",
          "securityContext",
          "capabilities",
          "drop"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-8",
        "title": "Container is running with writable root filesystem",
        "severity": "low",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-8",
        "isGeneratedByCustomRule": false,
        "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
        "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
          "terraform": "Set `security_context.read_only_root_filesystem` to `true`"
        },
        "lineNumber": 40,
        "iacDescription": {
          "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
          "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`"
        },
        "publicId": "SNYK-CC-K8S-8",
        "msg": "spec.template.spec.containers[coffee-shop].securityContext.readOnlyRootFilesystem",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "containers[coffee-shop]",
          "securityContext",
          "readOnlyRootFilesystem"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-36",
        "title": "Container is running with multiple open ports",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-36",
        "isGeneratedByCustomRule": false,
        "issue": "Container is declaring more than 2 listening ports",
        "impact": "Increases the attack surface of the application and the container.",
        "resolve": "Reduce `ports` count to 2",
        "remediation": {
          "kubernetes": "Reduce `ports` count to 2",
          "terraform": "Reduce `ports` count to 2"
        },
        "lineNumber": 79,
        "iacDescription": {
          "issue": "Container is declaring more than 2 listening ports",
          "impact": "Increases the attack surface of the application and the container.",
          "resolve": "Reduce `ports` count to 2"
        },
        "publicId": "SNYK-CC-K8S-36",
        "msg": "spec.template.spec.containers[coffee-shop].ports",
        "description": "",
        "references": [
          "https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "containers[coffee-shop]",
          "ports"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-42",
        "title": "Container could be running with outdated image",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-42",
        "isGeneratedByCustomRule": false,
        "issue": "The image policy does not prevent image reuse",
        "impact": "The container may run with outdated or unauthorized image",
        "resolve": "Set `imagePullPolicy` attribute to `Always`",
        "remediation": {
          "kubernetes": "Set `imagePullPolicy` attribute to `Always`",
          "terraform": "Set `image_pull_policy` attribute to `Always"
        },
        "lineNumber": 67,
        "iacDescription": {
          "issue": "The image policy does not prevent image reuse",
          "impact": "The container may run with outdated or unauthorized image",
          "resolve": "Set `imagePullPolicy` attribute to `Always`"
        },
        "publicId": "SNYK-CC-K8S-42",
        "msg": "spec.template.spec.containers[coffee-shop].imagePullPolicy",
        "references": [
          "https://kubernetes.io/docs/concepts/containers/images/",
          "https://kubernetes.io/docs/concepts/configuration/overview/#container-images"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "containers[coffee-shop]",
          "imagePullPolicy"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-9",
        "title": "Container is running without privilege escalation control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-9",
        "isGeneratedByCustomRule": false,
        "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
        "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
          "terraform": "Set `spec.container.security_context.allow_privilege_escalation` to `false`"
        },
        "lineNumber": 40,
        "iacDescription": {
          "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
          "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`"
        },
        "publicId": "SNYK-CC-K8S-9",
        "msg": "spec.template.spec.containers[coffee-shop].securityContext.allowPrivilegeEscalation",
        "references": [
          "https://www.kernel.org/doc/html/latest/userspace-api/no_new_privs.html"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "containers[coffee-shop]",
          "securityContext",
          "allowPrivilegeEscalation"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-10",
        "title": "Container or Pod is running without root user control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-10",
        "isGeneratedByCustomRule": false,
        "issue": "Container or Pod is running without root user control",
        "impact": "Container or Pod could be running with full administrative privileges",
        "resolve": "Set `securityContext.runAsNonRoot` to `true`",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsNonRoot` to `true`",
          "terraform": "Set `security_context.run_as_non_root` to `true`"
        },
        "lineNumber": 40,
        "iacDescription": {
          "issue": "Container or Pod is running without root user control",
          "impact": "Container or Pod could be running with full administrative privileges",
          "resolve": "Set `securityContext.runAsNonRoot` to `true`"
        },
        "publicId": "SNYK-CC-K8S-10",
        "msg": "input.spec.template.spec.containers[coffee-shop].securityContext.runAsNonRoot",
        "description": "",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[coffee-shop]",
          "securityContext",
          "runAsNonRoot"
        ],
        "compliance": []
      }
    ]
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_hands_on_openshift_48/files/dev_coffeeshop_job.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_hands_on_openshift_48/files/dev_coffeeshop_job.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": false,
    "infrastructureAsCodeIssues": [
      {
        "id": "SNYK-CC-K8S-5",
        "title": "Container has no CPU limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-5",
        "isGeneratedByCustomRule": false,
        "issue": "Container has no CPU limit",
        "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
        "resolve": "Add `resources.limits.cpu` field with required CPU limit value",
        "remediation": {
          "kubernetes": "Add `resources.limits.cpu` field with required CPU limit value",
          "terraform": "Add `spec.container.resources.limits.cpu` field with required CPU limit value"
        },
        "lineNumber": 13,
        "iacDescription": {
          "issue": "Container has no CPU limit",
          "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
          "resolve": "Add `resources.limits.cpu` field with required CPU limit value"
        },
        "publicId": "SNYK-CC-K8S-5",
        "msg": "input.spec.template.spec.containers[curlme].resources.limits.cpu",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-cpu-resource/",
          "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/cpu-default-namespace/",
          "https://github.com/kubernetes/design-proposals-archive/blob/8da1442ea29adccea40693357d04727127e045ed/node/resource-qos.md#compressible-resource-guaranteess"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[curlme]",
          "resources",
          "limits",
          "cpu"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-8",
        "title": "Container is running with writable root filesystem",
        "severity": "low",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-8",
        "isGeneratedByCustomRule": false,
        "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
        "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
          "terraform": "Set `security_context.read_only_root_filesystem` to `true`"
        },
        "lineNumber": 13,
        "iacDescription": {
          "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
          "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`"
        },
        "publicId": "SNYK-CC-K8S-8",
        "msg": "spec.template.spec.containers[curlme].securityContext.readOnlyRootFilesystem",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "containers[curlme]",
          "securityContext",
          "readOnlyRootFilesystem"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-4",
        "title": "Container is running without memory limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-4",
        "isGeneratedByCustomRule": false,
        "issue": "Memory limit is not defined",
        "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
        "resolve": "Set `resources.limits.memory` value",
        "remediation": {
          "kubernetes": "Set `resources.limits.memory` value",
          "terraform": "Set `resources.limits.memory` value"
        },
        "lineNumber": 13,
        "iacDescription": {
          "issue": "Memory limit is not defined",
          "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
          "resolve": "Set `resources.limits.memory` value"
        },
        "publicId": "SNYK-CC-K8S-4",
        "msg": "input.spec.template.spec.containers[curlme].resources.limits.memory",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/memory-default-namespace/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[curlme]",
          "resources",
          "limits",
          "memory"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-10",
        "title": "Container or Pod is running without root user control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-10",
        "isGeneratedByCustomRule": false,
        "issue": "Container or Pod is running without root user control",
        "impact": "Container or Pod could be running with full administrative privileges",
        "resolve": "Set `securityContext.runAsNonRoot` to `true`",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsNonRoot` to `true`",
          "terraform": "Set `security_context.run_as_non_root` to `true`"
        },
        "lineNumber": 13,
        "iacDescription": {
          "issue": "Container or Pod is running without root user control",
          "impact": "Container or Pod could be running with full administrative privileges",
          "resolve": "Set `securityContext.runAsNonRoot` to `true`"
        },
        "publicId": "SNYK-CC-K8S-10",
        "msg": "input.spec.template.spec.containers[curlme].securityContext.runAsNonRoot",
        "description": "",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[curlme]",
          "securityContext",
          "runAsNonRoot"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-6",
        "title": "Container does not drop all default capabilities",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-6",
        "isGeneratedByCustomRule": false,
        "issue": "All default capabilities are not explicitly dropped",
        "impact": "Containers are running with potentially unnecessary privileges",
        "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
        "remediation": {
          "kubernetes": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
          "terraform": "Add `ALL` to `spec.container.security_context.capabilities.drop` list, and add only required capabilities to `spec.container.security_context.capabilities.add`, ensuring it also does not contain `ALL`"
        },
        "lineNumber": 13,
        "iacDescription": {
          "issue": "All default capabilities are not explicitly dropped",
          "impact": "Containers are running with potentially unnecessary privileges",
          "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`"
        },
        "publicId": "SNYK-CC-K8S-6",
        "msg": "input.spec.template.spec.containers[curlme].securityContext.capabilities.drop",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
          "https://linux-audit.com/linux-capabilities-hardening-linux-binaries-by-removing-setuid/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[curlme]",
          "securityContext",
          "capabilities",
          "drop"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-9",
        "title": "Container is running without privilege escalation control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-9",
        "isGeneratedByCustomRule": false,
        "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
        "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
          "terraform": "Set `spec.container.security_context.allow_privilege_escalation` to `false`"
        },
        "lineNumber": 13,
        "iacDescription": {
          "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
          "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`"
        },
        "publicId": "SNYK-CC-K8S-9",
        "msg": "spec.template.spec.containers[curlme].securityContext.allowPrivilegeEscalation",
        "references": [
          "https://www.kernel.org/doc/html/latest/userspace-api/no_new_privs.html"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "containers[curlme]",
          "securityContext",
          "allowPrivilegeEscalation"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-11",
        "title": "Container's or Pod's  UID could clash with host's UID",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-11",
        "isGeneratedByCustomRule": false,
        "issue": "`runAsUser` value is set to low UID",
        "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
        "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
          "terraform": "Set `security_context.run_as_user` value to greater or equal than 10'000"
        },
        "lineNumber": 13,
        "iacDescription": {
          "issue": "`runAsUser` value is set to low UID",
          "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
          "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence"
        },
        "publicId": "SNYK-CC-K8S-11",
        "msg": "input.spec.template.spec.containers[curlme].securityContext.runAsUser",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container",
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod",
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[curlme]",
          "securityContext",
          "runAsUser"
        ],
        "compliance": []
      }
    ]
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_hands_on_openshift_48/files/dev_coffeeshop_namespace.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_hands_on_openshift_48/files/dev_coffeeshop_namespace.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_hands_on_openshift_48/files/dev_coffeeshop_role_binding_pipeline_edit.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_hands_on_openshift_48/files/dev_coffeeshop_role_binding_pipeline_edit.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": false,
    "infrastructureAsCodeIssues": [
      {
        "id": "SNYK-CC-K8S-46",
        "title": "RoleBinding or ClusterRoleBinding is using a pre-defined role",
        "severity": "medium",
        "isIgnored": false,
        "subType": "RoleBinding",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-46",
        "isGeneratedByCustomRule": false,
        "issue": "A RoleBinding or ClusterRoleBinding was found using one of the default user facing roles, `cluster-admin`, `admin`, `edit` or `view`.",
        "impact": "Using a default user facing role may be overly permissive. For a ClusterRoleBinding this would be considered high severity.",
        "resolve": "Update roleRef.name to a specific role name with only the necessary permissions",
        "remediation": {
          "kubernetes": "Update roleRef.name to a specific role name with only the necessary permissions"
        },
        "lineNumber": 9,
        "iacDescription": {
          "issue": "A RoleBinding or ClusterRoleBinding was found using one of the default user facing roles, `cluster-admin`, `admin`, `edit` or `view`.",
          "impact": "Using a default user facing role may be overly permissive. For a ClusterRoleBinding this would be considered high severity.",
          "resolve": "Update roleRef.name to a specific role name with only the necessary permissions"
        },
        "publicId": "SNYK-CC-K8S-46",
        "msg": "roleRef.name",
        "references": [
          "https://kubernetes.io/docs/reference/access-authn-authz/rbac/"
        ],
        "path": [
          "[DocId: 0]",
          "roleRef",
          "name"
        ],
        "compliance": []
      }
    ]
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_hands_on_openshift_48/files/dev_coffeeshop_route.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_hands_on_openshift_48/files/dev_coffeeshop_route.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_hands_on_openshift_48/files/dev_coffeeshop_scrt.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_hands_on_openshift_48/files/dev_coffeeshop_scrt.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_hands_on_openshift_48/files/dev_coffeeshop_service.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_hands_on_openshift_48/files/dev_coffeeshop_service.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_hands_on_openshift_48/files/dev_database_deployment.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_hands_on_openshift_48/files/dev_database_deployment.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": false,
    "infrastructureAsCodeIssues": [
      {
        "id": "SNYK-CC-K8S-42",
        "title": "Container could be running with outdated image",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-42",
        "isGeneratedByCustomRule": false,
        "issue": "The image policy does not prevent image reuse",
        "impact": "The container may run with outdated or unauthorized image",
        "resolve": "Set `imagePullPolicy` attribute to `Always`",
        "remediation": {
          "kubernetes": "Set `imagePullPolicy` attribute to `Always`",
          "terraform": "Set `image_pull_policy` attribute to `Always"
        },
        "lineNumber": 33,
        "iacDescription": {
          "issue": "The image policy does not prevent image reuse",
          "impact": "The container may run with outdated or unauthorized image",
          "resolve": "Set `imagePullPolicy` attribute to `Always`"
        },
        "publicId": "SNYK-CC-K8S-42",
        "msg": "spec.template.spec.containers[postgresql].imagePullPolicy",
        "references": [
          "https://kubernetes.io/docs/concepts/containers/images/",
          "https://kubernetes.io/docs/concepts/configuration/overview/#container-images"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "containers[postgresql]",
          "imagePullPolicy"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-5",
        "title": "Container has no CPU limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-5",
        "isGeneratedByCustomRule": false,
        "issue": "Container has no CPU limit",
        "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
        "resolve": "Add `resources.limits.cpu` field with required CPU limit value",
        "remediation": {
          "kubernetes": "Add `resources.limits.cpu` field with required CPU limit value",
          "terraform": "Add `spec.container.resources.limits.cpu` field with required CPU limit value"
        },
        "lineNumber": 58,
        "iacDescription": {
          "issue": "Container has no CPU limit",
          "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
          "resolve": "Add `resources.limits.cpu` field with required CPU limit value"
        },
        "publicId": "SNYK-CC-K8S-5",
        "msg": "input.spec.template.spec.containers[postgresql].resources.limits.cpu",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-cpu-resource/",
          "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/cpu-default-namespace/",
          "https://github.com/kubernetes/design-proposals-archive/blob/8da1442ea29adccea40693357d04727127e045ed/node/resource-qos.md#compressible-resource-guaranteess"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[postgresql]",
          "resources",
          "limits",
          "cpu"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-9",
        "title": "Container is running without privilege escalation control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-9",
        "isGeneratedByCustomRule": false,
        "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
        "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
          "terraform": "Set `spec.container.security_context.allow_privilege_escalation` to `false`"
        },
        "lineNumber": 60,
        "iacDescription": {
          "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
          "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`"
        },
        "publicId": "SNYK-CC-K8S-9",
        "msg": "spec.template.spec.containers[postgresql].securityContext.allowPrivilegeEscalation",
        "references": [
          "https://www.kernel.org/doc/html/latest/userspace-api/no_new_privs.html"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "containers[postgresql]",
          "securityContext",
          "allowPrivilegeEscalation"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-11",
        "title": "Container's or Pod's  UID could clash with host's UID",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-11",
        "isGeneratedByCustomRule": false,
        "issue": "`runAsUser` value is set to low UID",
        "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
        "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
          "terraform": "Set `security_context.run_as_user` value to greater or equal than 10'000"
        },
        "lineNumber": 60,
        "iacDescription": {
          "issue": "`runAsUser` value is set to low UID",
          "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
          "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence"
        },
        "publicId": "SNYK-CC-K8S-11",
        "msg": "input.spec.template.spec.containers[postgresql].securityContext.runAsUser",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container",
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod",
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[postgresql]",
          "securityContext",
          "runAsUser"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-6",
        "title": "Container does not drop all default capabilities",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-6",
        "isGeneratedByCustomRule": false,
        "issue": "All default capabilities are not explicitly dropped",
        "impact": "Containers are running with potentially unnecessary privileges",
        "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
        "remediation": {
          "kubernetes": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
          "terraform": "Add `ALL` to `spec.container.security_context.capabilities.drop` list, and add only required capabilities to `spec.container.security_context.capabilities.add`, ensuring it also does not contain `ALL`"
        },
        "lineNumber": 60,
        "iacDescription": {
          "issue": "All default capabilities are not explicitly dropped",
          "impact": "Containers are running with potentially unnecessary privileges",
          "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`"
        },
        "publicId": "SNYK-CC-K8S-6",
        "msg": "input.spec.template.spec.containers[postgresql].securityContext.capabilities.drop",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
          "https://linux-audit.com/linux-capabilities-hardening-linux-binaries-by-removing-setuid/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[postgresql]",
          "securityContext",
          "capabilities",
          "drop"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-8",
        "title": "Container is running with writable root filesystem",
        "severity": "low",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-8",
        "isGeneratedByCustomRule": false,
        "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
        "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
          "terraform": "Set `security_context.read_only_root_filesystem` to `true`"
        },
        "lineNumber": 60,
        "iacDescription": {
          "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
          "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`"
        },
        "publicId": "SNYK-CC-K8S-8",
        "msg": "spec.template.spec.containers[postgresql].securityContext.readOnlyRootFilesystem",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "containers[postgresql]",
          "securityContext",
          "readOnlyRootFilesystem"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-10",
        "title": "Container or Pod is running without root user control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-10",
        "isGeneratedByCustomRule": false,
        "issue": "Container or Pod is running without root user control",
        "impact": "Container or Pod could be running with full administrative privileges",
        "resolve": "Set `securityContext.runAsNonRoot` to `true`",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsNonRoot` to `true`",
          "terraform": "Set `security_context.run_as_non_root` to `true`"
        },
        "lineNumber": 60,
        "iacDescription": {
          "issue": "Container or Pod is running without root user control",
          "impact": "Container or Pod could be running with full administrative privileges",
          "resolve": "Set `securityContext.runAsNonRoot` to `true`"
        },
        "publicId": "SNYK-CC-K8S-10",
        "msg": "input.spec.template.spec.containers[postgresql].securityContext.runAsNonRoot",
        "description": "",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[postgresql]",
          "securityContext",
          "runAsNonRoot"
        ],
        "compliance": []
      }
    ]
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_hands_on_openshift_48/files/dev_database_pvc.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_hands_on_openshift_48/files/dev_database_pvc.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_hands_on_openshift_48/files/dev_database_scrt.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_hands_on_openshift_48/files/dev_database_scrt.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_hands_on_openshift_48/files/dev_database_service.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_hands_on_openshift_48/files/dev_database_service.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_hands_on_openshift_48/files/json_logs_clusterlogforwarder.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_hands_on_openshift_48/files/json_logs_clusterlogforwarder.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_hands_on_openshift_48/files/json_logs_namespace.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_hands_on_openshift_48/files/json_logs_namespace.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_hands_on_openshift_48/files/json_logs_pod.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_hands_on_openshift_48/files/json_logs_pod.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": false,
    "infrastructureAsCodeIssues": [
      {
        "id": "SNYK-CC-K8S-5",
        "title": "Container has no CPU limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-5",
        "isGeneratedByCustomRule": false,
        "issue": "Container has no CPU limit",
        "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
        "resolve": "Add `resources.limits.cpu` field with required CPU limit value",
        "remediation": {
          "kubernetes": "Add `resources.limits.cpu` field with required CPU limit value",
          "terraform": "Add `spec.container.resources.limits.cpu` field with required CPU limit value"
        },
        "lineNumber": 36,
        "iacDescription": {
          "issue": "Container has no CPU limit",
          "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
          "resolve": "Add `resources.limits.cpu` field with required CPU limit value"
        },
        "publicId": "SNYK-CC-K8S-5",
        "msg": "input.spec.containers[log-generator].resources.limits.cpu",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-cpu-resource/",
          "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/cpu-default-namespace/",
          "https://github.com/kubernetes/design-proposals-archive/blob/8da1442ea29adccea40693357d04727127e045ed/node/resource-qos.md#compressible-resource-guaranteess"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "containers[log-generator]",
          "resources",
          "limits",
          "cpu"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-8",
        "title": "Container is running with writable root filesystem",
        "severity": "low",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-8",
        "isGeneratedByCustomRule": false,
        "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
        "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
          "terraform": "Set `security_context.read_only_root_filesystem` to `true`"
        },
        "lineNumber": 11,
        "iacDescription": {
          "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
          "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`"
        },
        "publicId": "SNYK-CC-K8S-8",
        "msg": "spec.containers[log-generator].securityContext.readOnlyRootFilesystem",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "containers[log-generator]",
          "securityContext",
          "readOnlyRootFilesystem"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-10",
        "title": "Container or Pod is running without root user control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-10",
        "isGeneratedByCustomRule": false,
        "issue": "Container or Pod is running without root user control",
        "impact": "Container or Pod could be running with full administrative privileges",
        "resolve": "Set `securityContext.runAsNonRoot` to `true`",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsNonRoot` to `true`",
          "terraform": "Set `security_context.run_as_non_root` to `true`"
        },
        "lineNumber": 11,
        "iacDescription": {
          "issue": "Container or Pod is running without root user control",
          "impact": "Container or Pod could be running with full administrative privileges",
          "resolve": "Set `securityContext.runAsNonRoot` to `true`"
        },
        "publicId": "SNYK-CC-K8S-10",
        "msg": "input.spec.containers[log-generator].securityContext.runAsNonRoot",
        "description": "",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "containers[log-generator]",
          "securityContext",
          "runAsNonRoot"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-6",
        "title": "Container does not drop all default capabilities",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-6",
        "isGeneratedByCustomRule": false,
        "issue": "All default capabilities are not explicitly dropped",
        "impact": "Containers are running with potentially unnecessary privileges",
        "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
        "remediation": {
          "kubernetes": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
          "terraform": "Add `ALL` to `spec.container.security_context.capabilities.drop` list, and add only required capabilities to `spec.container.security_context.capabilities.add`, ensuring it also does not contain `ALL`"
        },
        "lineNumber": 11,
        "iacDescription": {
          "issue": "All default capabilities are not explicitly dropped",
          "impact": "Containers are running with potentially unnecessary privileges",
          "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`"
        },
        "publicId": "SNYK-CC-K8S-6",
        "msg": "input.spec.containers[log-generator].securityContext.capabilities.drop",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
          "https://linux-audit.com/linux-capabilities-hardening-linux-binaries-by-removing-setuid/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "containers[log-generator]",
          "securityContext",
          "capabilities",
          "drop"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-41",
        "title": "Container is running without liveness probe",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-41",
        "isGeneratedByCustomRule": false,
        "issue": "Liveness probe is not defined",
        "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
        "resolve": "Add `livenessProbe` attribute",
        "remediation": {
          "kubernetes": "Add `livenessProbe` attribute",
          "terraform": "Add `liveness_probe` attribute"
        },
        "lineNumber": 11,
        "iacDescription": {
          "issue": "Liveness probe is not defined",
          "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
          "resolve": "Add `livenessProbe` attribute"
        },
        "publicId": "SNYK-CC-K8S-41",
        "msg": "spec.containers[log-generator].livenessProbe",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/",
          "https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/",
          "https://cloud.google.com/blog/products/gcp/kubernetes-best-practices-setting-up-health-checks-with-readiness-and-liveness-probes"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "containers[log-generator]",
          "livenessProbe"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-4",
        "title": "Container is running without memory limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-4",
        "isGeneratedByCustomRule": false,
        "issue": "Memory limit is not defined",
        "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
        "resolve": "Set `resources.limits.memory` value",
        "remediation": {
          "kubernetes": "Set `resources.limits.memory` value",
          "terraform": "Set `resources.limits.memory` value"
        },
        "lineNumber": 36,
        "iacDescription": {
          "issue": "Memory limit is not defined",
          "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
          "resolve": "Set `resources.limits.memory` value"
        },
        "publicId": "SNYK-CC-K8S-4",
        "msg": "input.spec.containers[log-generator].resources.limits.memory",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/memory-default-namespace/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "containers[log-generator]",
          "resources",
          "limits",
          "memory"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-9",
        "title": "Container is running without privilege escalation control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-9",
        "isGeneratedByCustomRule": false,
        "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
        "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
          "terraform": "Set `spec.container.security_context.allow_privilege_escalation` to `false`"
        },
        "lineNumber": 11,
        "iacDescription": {
          "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
          "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`"
        },
        "publicId": "SNYK-CC-K8S-9",
        "msg": "spec.containers[log-generator].securityContext.allowPrivilegeEscalation",
        "references": [
          "https://www.kernel.org/doc/html/latest/userspace-api/no_new_privs.html"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "containers[log-generator]",
          "securityContext",
          "allowPrivilegeEscalation"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-11",
        "title": "Container's or Pod's  UID could clash with host's UID",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-11",
        "isGeneratedByCustomRule": false,
        "issue": "`runAsUser` value is set to low UID",
        "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
        "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
          "terraform": "Set `security_context.run_as_user` value to greater or equal than 10'000"
        },
        "lineNumber": 11,
        "iacDescription": {
          "issue": "`runAsUser` value is set to low UID",
          "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
          "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence"
        },
        "publicId": "SNYK-CC-K8S-11",
        "msg": "input.spec.containers[log-generator].securityContext.runAsUser",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container",
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod",
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "containers[log-generator]",
          "securityContext",
          "runAsUser"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-42",
        "title": "Container could be running with outdated image",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-42",
        "isGeneratedByCustomRule": false,
        "issue": "The image policy does not prevent image reuse",
        "impact": "The container may run with outdated or unauthorized image",
        "resolve": "Set `imagePullPolicy` attribute to `Always`",
        "remediation": {
          "kubernetes": "Set `imagePullPolicy` attribute to `Always`",
          "terraform": "Set `image_pull_policy` attribute to `Always"
        },
        "lineNumber": 34,
        "iacDescription": {
          "issue": "The image policy does not prevent image reuse",
          "impact": "The container may run with outdated or unauthorized image",
          "resolve": "Set `imagePullPolicy` attribute to `Always`"
        },
        "publicId": "SNYK-CC-K8S-42",
        "msg": "spec.containers[log-generator].imagePullPolicy",
        "references": [
          "https://kubernetes.io/docs/concepts/containers/images/",
          "https://kubernetes.io/docs/concepts/configuration/overview/#container-images"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "containers[log-generator]",
          "imagePullPolicy"
        ],
        "compliance": []
      }
    ]
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_hands_on_openshift_48/files/pipelines_namespace.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_hands_on_openshift_48/files/pipelines_namespace.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_hands_on_openshift_48/files/pipelines_role_binding_argocd_edit.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_hands_on_openshift_48/files/pipelines_role_binding_argocd_edit.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": false,
    "infrastructureAsCodeIssues": [
      {
        "id": "SNYK-CC-K8S-46",
        "title": "RoleBinding or ClusterRoleBinding is using a pre-defined role",
        "severity": "medium",
        "isIgnored": false,
        "subType": "RoleBinding",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-46",
        "isGeneratedByCustomRule": false,
        "issue": "A RoleBinding or ClusterRoleBinding was found using one of the default user facing roles, `cluster-admin`, `admin`, `edit` or `view`.",
        "impact": "Using a default user facing role may be overly permissive. For a ClusterRoleBinding this would be considered high severity.",
        "resolve": "Update roleRef.name to a specific role name with only the necessary permissions",
        "remediation": {
          "kubernetes": "Update roleRef.name to a specific role name with only the necessary permissions"
        },
        "lineNumber": 9,
        "iacDescription": {
          "issue": "A RoleBinding or ClusterRoleBinding was found using one of the default user facing roles, `cluster-admin`, `admin`, `edit` or `view`.",
          "impact": "Using a default user facing role may be overly permissive. For a ClusterRoleBinding this would be considered high severity.",
          "resolve": "Update roleRef.name to a specific role name with only the necessary permissions"
        },
        "publicId": "SNYK-CC-K8S-46",
        "msg": "roleRef.name",
        "references": [
          "https://kubernetes.io/docs/reference/access-authn-authz/rbac/"
        ],
        "path": [
          "[DocId: 0]",
          "roleRef",
          "name"
        ],
        "compliance": []
      }
    ]
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_hands_on_openshift_48/files/pipelines_service_account.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_hands_on_openshift_48/files/pipelines_service_account.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_hands_on_openshift_48/files/prod_coffeeshop_cronjob.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_hands_on_openshift_48/files/prod_coffeeshop_cronjob.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": false,
    "infrastructureAsCodeIssues": [
      {
        "id": "SNYK-CC-K8S-4",
        "title": "Container is running without memory limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-4",
        "isGeneratedByCustomRule": false,
        "issue": "Memory limit is not defined",
        "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
        "resolve": "Set `resources.limits.memory` value",
        "remediation": {
          "kubernetes": "Set `resources.limits.memory` value",
          "terraform": "Set `resources.limits.memory` value"
        },
        "lineNumber": 13,
        "iacDescription": {
          "issue": "Memory limit is not defined",
          "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
          "resolve": "Set `resources.limits.memory` value"
        },
        "publicId": "SNYK-CC-K8S-4",
        "msg": "input.spec.jobTemplate.spec.template.spec.containers[hello].resources.limits.memory",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/memory-default-namespace/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "jobTemplate",
          "spec",
          "template",
          "spec",
          "containers[hello]",
          "resources",
          "limits",
          "memory"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-10",
        "title": "Container or Pod is running without root user control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-10",
        "isGeneratedByCustomRule": false,
        "issue": "Container or Pod is running without root user control",
        "impact": "Container or Pod could be running with full administrative privileges",
        "resolve": "Set `securityContext.runAsNonRoot` to `true`",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsNonRoot` to `true`",
          "terraform": "Set `security_context.run_as_non_root` to `true`"
        },
        "lineNumber": 13,
        "iacDescription": {
          "issue": "Container or Pod is running without root user control",
          "impact": "Container or Pod could be running with full administrative privileges",
          "resolve": "Set `securityContext.runAsNonRoot` to `true`"
        },
        "publicId": "SNYK-CC-K8S-10",
        "msg": "input.spec.jobTemplate.spec.template.spec.containers[hello].securityContext.runAsNonRoot",
        "description": "",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "jobTemplate",
          "spec",
          "template",
          "spec",
          "containers[hello]",
          "securityContext",
          "runAsNonRoot"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-6",
        "title": "Container does not drop all default capabilities",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-6",
        "isGeneratedByCustomRule": false,
        "issue": "All default capabilities are not explicitly dropped",
        "impact": "Containers are running with potentially unnecessary privileges",
        "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
        "remediation": {
          "kubernetes": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
          "terraform": "Add `ALL` to `spec.container.security_context.capabilities.drop` list, and add only required capabilities to `spec.container.security_context.capabilities.add`, ensuring it also does not contain `ALL`"
        },
        "lineNumber": 13,
        "iacDescription": {
          "issue": "All default capabilities are not explicitly dropped",
          "impact": "Containers are running with potentially unnecessary privileges",
          "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`"
        },
        "publicId": "SNYK-CC-K8S-6",
        "msg": "input.spec.jobTemplate.spec.template.spec.containers[hello].securityContext.capabilities.drop",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
          "https://linux-audit.com/linux-capabilities-hardening-linux-binaries-by-removing-setuid/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "jobTemplate",
          "spec",
          "template",
          "spec",
          "containers[hello]",
          "securityContext",
          "capabilities",
          "drop"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-9",
        "title": "Container is running without privilege escalation control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-9",
        "isGeneratedByCustomRule": false,
        "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
        "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
          "terraform": "Set `spec.container.security_context.allow_privilege_escalation` to `false`"
        },
        "lineNumber": 13,
        "iacDescription": {
          "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
          "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`"
        },
        "publicId": "SNYK-CC-K8S-9",
        "msg": "spec.jobTemplate.spec.template.spec.containers[hello].securityContext.allowPrivilegeEscalation",
        "references": [
          "https://www.kernel.org/doc/html/latest/userspace-api/no_new_privs.html"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "jobTemplate",
          "spec",
          "template",
          "spec",
          "containers[hello]",
          "securityContext",
          "allowPrivilegeEscalation"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-11",
        "title": "Container's or Pod's  UID could clash with host's UID",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-11",
        "isGeneratedByCustomRule": false,
        "issue": "`runAsUser` value is set to low UID",
        "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
        "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
          "terraform": "Set `security_context.run_as_user` value to greater or equal than 10'000"
        },
        "lineNumber": 13,
        "iacDescription": {
          "issue": "`runAsUser` value is set to low UID",
          "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
          "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence"
        },
        "publicId": "SNYK-CC-K8S-11",
        "msg": "input.spec.jobTemplate.spec.template.spec.containers[hello].securityContext.runAsUser",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container",
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod",
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "jobTemplate",
          "spec",
          "template",
          "spec",
          "containers[hello]",
          "securityContext",
          "runAsUser"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-5",
        "title": "Container has no CPU limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-5",
        "isGeneratedByCustomRule": false,
        "issue": "Container has no CPU limit",
        "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
        "resolve": "Add `resources.limits.cpu` field with required CPU limit value",
        "remediation": {
          "kubernetes": "Add `resources.limits.cpu` field with required CPU limit value",
          "terraform": "Add `spec.container.resources.limits.cpu` field with required CPU limit value"
        },
        "lineNumber": 13,
        "iacDescription": {
          "issue": "Container has no CPU limit",
          "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
          "resolve": "Add `resources.limits.cpu` field with required CPU limit value"
        },
        "publicId": "SNYK-CC-K8S-5",
        "msg": "input.spec.jobTemplate.spec.template.spec.containers[hello].resources.limits.cpu",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-cpu-resource/",
          "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/cpu-default-namespace/",
          "https://github.com/kubernetes/design-proposals-archive/blob/8da1442ea29adccea40693357d04727127e045ed/node/resource-qos.md#compressible-resource-guaranteess"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "jobTemplate",
          "spec",
          "template",
          "spec",
          "containers[hello]",
          "resources",
          "limits",
          "cpu"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-8",
        "title": "Container is running with writable root filesystem",
        "severity": "low",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-8",
        "isGeneratedByCustomRule": false,
        "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
        "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
          "terraform": "Set `security_context.read_only_root_filesystem` to `true`"
        },
        "lineNumber": 13,
        "iacDescription": {
          "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
          "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`"
        },
        "publicId": "SNYK-CC-K8S-8",
        "msg": "spec.jobTemplate.spec.template.spec.containers[hello].securityContext.readOnlyRootFilesystem",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "jobTemplate",
          "spec",
          "template",
          "spec",
          "containers[hello]",
          "securityContext",
          "readOnlyRootFilesystem"
        ],
        "compliance": []
      }
    ]
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_hands_on_openshift_48/files/prod_coffeeshop_namespace.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_hands_on_openshift_48/files/prod_coffeeshop_namespace.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_hands_on_openshift_48/files/prod_coffeeshop_role_binding_argocd_edit.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_hands_on_openshift_48/files/prod_coffeeshop_role_binding_argocd_edit.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": false,
    "infrastructureAsCodeIssues": [
      {
        "id": "SNYK-CC-K8S-46",
        "title": "RoleBinding or ClusterRoleBinding is using a pre-defined role",
        "severity": "medium",
        "isIgnored": false,
        "subType": "RoleBinding",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-46",
        "isGeneratedByCustomRule": false,
        "issue": "A RoleBinding or ClusterRoleBinding was found using one of the default user facing roles, `cluster-admin`, `admin`, `edit` or `view`.",
        "impact": "Using a default user facing role may be overly permissive. For a ClusterRoleBinding this would be considered high severity.",
        "resolve": "Update roleRef.name to a specific role name with only the necessary permissions",
        "remediation": {
          "kubernetes": "Update roleRef.name to a specific role name with only the necessary permissions"
        },
        "lineNumber": 9,
        "iacDescription": {
          "issue": "A RoleBinding or ClusterRoleBinding was found using one of the default user facing roles, `cluster-admin`, `admin`, `edit` or `view`.",
          "impact": "Using a default user facing role may be overly permissive. For a ClusterRoleBinding this would be considered high severity.",
          "resolve": "Update roleRef.name to a specific role name with only the necessary permissions"
        },
        "publicId": "SNYK-CC-K8S-46",
        "msg": "roleRef.name",
        "references": [
          "https://kubernetes.io/docs/reference/access-authn-authz/rbac/"
        ],
        "path": [
          "[DocId: 0]",
          "roleRef",
          "name"
        ],
        "compliance": []
      }
    ]
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_hands_on_openshift_48/files/prod_database_deployment.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_hands_on_openshift_48/files/prod_database_deployment.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": false,
    "infrastructureAsCodeIssues": [
      {
        "id": "SNYK-CC-K8S-42",
        "title": "Container could be running with outdated image",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-42",
        "isGeneratedByCustomRule": false,
        "issue": "The image policy does not prevent image reuse",
        "impact": "The container may run with outdated or unauthorized image",
        "resolve": "Set `imagePullPolicy` attribute to `Always`",
        "remediation": {
          "kubernetes": "Set `imagePullPolicy` attribute to `Always`",
          "terraform": "Set `image_pull_policy` attribute to `Always"
        },
        "lineNumber": 33,
        "iacDescription": {
          "issue": "The image policy does not prevent image reuse",
          "impact": "The container may run with outdated or unauthorized image",
          "resolve": "Set `imagePullPolicy` attribute to `Always`"
        },
        "publicId": "SNYK-CC-K8S-42",
        "msg": "spec.template.spec.containers[postgresql].imagePullPolicy",
        "references": [
          "https://kubernetes.io/docs/concepts/containers/images/",
          "https://kubernetes.io/docs/concepts/configuration/overview/#container-images"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "containers[postgresql]",
          "imagePullPolicy"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-5",
        "title": "Container has no CPU limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-5",
        "isGeneratedByCustomRule": false,
        "issue": "Container has no CPU limit",
        "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
        "resolve": "Add `resources.limits.cpu` field with required CPU limit value",
        "remediation": {
          "kubernetes": "Add `resources.limits.cpu` field with required CPU limit value",
          "terraform": "Add `spec.container.resources.limits.cpu` field with required CPU limit value"
        },
        "lineNumber": 58,
        "iacDescription": {
          "issue": "Container has no CPU limit",
          "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
          "resolve": "Add `resources.limits.cpu` field with required CPU limit value"
        },
        "publicId": "SNYK-CC-K8S-5",
        "msg": "input.spec.template.spec.containers[postgresql].resources.limits.cpu",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-cpu-resource/",
          "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/cpu-default-namespace/",
          "https://github.com/kubernetes/design-proposals-archive/blob/8da1442ea29adccea40693357d04727127e045ed/node/resource-qos.md#compressible-resource-guaranteess"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[postgresql]",
          "resources",
          "limits",
          "cpu"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-9",
        "title": "Container is running without privilege escalation control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-9",
        "isGeneratedByCustomRule": false,
        "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
        "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
          "terraform": "Set `spec.container.security_context.allow_privilege_escalation` to `false`"
        },
        "lineNumber": 60,
        "iacDescription": {
          "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
          "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`"
        },
        "publicId": "SNYK-CC-K8S-9",
        "msg": "spec.template.spec.containers[postgresql].securityContext.allowPrivilegeEscalation",
        "references": [
          "https://www.kernel.org/doc/html/latest/userspace-api/no_new_privs.html"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "containers[postgresql]",
          "securityContext",
          "allowPrivilegeEscalation"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-11",
        "title": "Container's or Pod's  UID could clash with host's UID",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-11",
        "isGeneratedByCustomRule": false,
        "issue": "`runAsUser` value is set to low UID",
        "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
        "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
          "terraform": "Set `security_context.run_as_user` value to greater or equal than 10'000"
        },
        "lineNumber": 60,
        "iacDescription": {
          "issue": "`runAsUser` value is set to low UID",
          "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
          "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence"
        },
        "publicId": "SNYK-CC-K8S-11",
        "msg": "input.spec.template.spec.containers[postgresql].securityContext.runAsUser",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container",
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod",
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[postgresql]",
          "securityContext",
          "runAsUser"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-6",
        "title": "Container does not drop all default capabilities",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-6",
        "isGeneratedByCustomRule": false,
        "issue": "All default capabilities are not explicitly dropped",
        "impact": "Containers are running with potentially unnecessary privileges",
        "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
        "remediation": {
          "kubernetes": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
          "terraform": "Add `ALL` to `spec.container.security_context.capabilities.drop` list, and add only required capabilities to `spec.container.security_context.capabilities.add`, ensuring it also does not contain `ALL`"
        },
        "lineNumber": 60,
        "iacDescription": {
          "issue": "All default capabilities are not explicitly dropped",
          "impact": "Containers are running with potentially unnecessary privileges",
          "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`"
        },
        "publicId": "SNYK-CC-K8S-6",
        "msg": "input.spec.template.spec.containers[postgresql].securityContext.capabilities.drop",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
          "https://linux-audit.com/linux-capabilities-hardening-linux-binaries-by-removing-setuid/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[postgresql]",
          "securityContext",
          "capabilities",
          "drop"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-8",
        "title": "Container is running with writable root filesystem",
        "severity": "low",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-8",
        "isGeneratedByCustomRule": false,
        "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
        "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
          "terraform": "Set `security_context.read_only_root_filesystem` to `true`"
        },
        "lineNumber": 60,
        "iacDescription": {
          "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
          "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`"
        },
        "publicId": "SNYK-CC-K8S-8",
        "msg": "spec.template.spec.containers[postgresql].securityContext.readOnlyRootFilesystem",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "containers[postgresql]",
          "securityContext",
          "readOnlyRootFilesystem"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-10",
        "title": "Container or Pod is running without root user control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-10",
        "isGeneratedByCustomRule": false,
        "issue": "Container or Pod is running without root user control",
        "impact": "Container or Pod could be running with full administrative privileges",
        "resolve": "Set `securityContext.runAsNonRoot` to `true`",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsNonRoot` to `true`",
          "terraform": "Set `security_context.run_as_non_root` to `true`"
        },
        "lineNumber": 60,
        "iacDescription": {
          "issue": "Container or Pod is running without root user control",
          "impact": "Container or Pod could be running with full administrative privileges",
          "resolve": "Set `securityContext.runAsNonRoot` to `true`"
        },
        "publicId": "SNYK-CC-K8S-10",
        "msg": "input.spec.template.spec.containers[postgresql].securityContext.runAsNonRoot",
        "description": "",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[postgresql]",
          "securityContext",
          "runAsNonRoot"
        ],
        "compliance": []
      }
    ]
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_hands_on_openshift_48/files/prod_database_pvc.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_hands_on_openshift_48/files/prod_database_pvc.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_hands_on_openshift_48/files/prod_database_scrt.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_hands_on_openshift_48/files/prod_database_scrt.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_hands_on_openshift_48/files/prod_database_service.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_hands_on_openshift_48/files/prod_database_service.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_le_certificates/files/router-without-certs.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_le_certificates/files/router-without-certs.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_logging/files/eo_namespace.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_logging/files/eo_namespace.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_logging/files/eo_operatorgroup.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_logging/files/eo_operatorgroup.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_logging/files/eo_role.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_logging/files/eo_role.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_logging/files/eo_rolebinding.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_logging/files/eo_rolebinding.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_logging/files/logging_curator_configmap.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_logging/files/logging_curator_configmap.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_logging/files/logging_namespace.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_logging/files/logging_namespace.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_logging/files/logging_operatorgroup.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_logging/files/logging_operatorgroup.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_lpe_fuse/files/fuse-image-streams.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_lpe_fuse/files/fuse-image-streams.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_machinesets/files/cluster-monitoring-config.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_machinesets/files/cluster-monitoring-config.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_microshift/files/vm-microshift-export.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_microshift/files/vm-microshift-export.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_mtv/files/forkliftcontroller.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_mtv/files/forkliftcontroller.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_openshift_gitops/files/clusterrolebinding.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_openshift_gitops/files/clusterrolebinding.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": false,
    "infrastructureAsCodeIssues": [
      {
        "id": "SNYK-CC-K8S-46",
        "title": "RoleBinding or ClusterRoleBinding is using a pre-defined role",
        "severity": "high",
        "isIgnored": false,
        "subType": "ClusterRoleBinding",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-46",
        "isGeneratedByCustomRule": false,
        "issue": "A RoleBinding or ClusterRoleBinding was found using one of the default user facing roles, `cluster-admin`, `admin`, `edit` or `view`.",
        "impact": "Using a default user facing role may be overly permissive. For a ClusterRoleBinding this would be considered high severity.",
        "resolve": "Update roleRef.name to a specific role name with only the necessary permissions",
        "remediation": {
          "kubernetes": "Update roleRef.name to a specific role name with only the necessary permissions"
        },
        "lineNumber": 9,
        "iacDescription": {
          "issue": "A RoleBinding or ClusterRoleBinding was found using one of the default user facing roles, `cluster-admin`, `admin`, `edit` or `view`.",
          "impact": "Using a default user facing role may be overly permissive. For a ClusterRoleBinding this would be considered high severity.",
          "resolve": "Update roleRef.name to a specific role name with only the necessary permissions"
        },
        "publicId": "SNYK-CC-K8S-46",
        "msg": "roleRef.name",
        "references": [
          "https://kubernetes.io/docs/reference/access-authn-authz/rbac/"
        ],
        "path": [
          "[DocId: 0]",
          "roleRef",
          "name"
        ],
        "compliance": []
      }
    ]
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_opentlc_production/files/image_pruner.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_opentlc_production/files/image_pruner.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_opentlc_production/files/image_registry.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_opentlc_production/files/image_registry.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_opentlc_production/templates/build_defaults.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_opentlc_production/templates/build_defaults.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_opentlc_webconsole/files/oauth_cluster.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_opentlc_webconsole/files/oauth_cluster.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_paloalto_prismacloud/files/sockshop.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_paloalto_prismacloud/files/sockshop.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": false,
    "infrastructureAsCodeIssues": [
      {
        "id": "SNYK-CC-K8S-10",
        "title": "Container or Pod is running without root user control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-10",
        "isGeneratedByCustomRule": false,
        "issue": "Container or Pod is running without root user control",
        "impact": "Container or Pod could be running with full administrative privileges",
        "resolve": "Set `securityContext.runAsNonRoot` to `true`",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsNonRoot` to `true`",
          "terraform": "Set `security_context.run_as_non_root` to `true`"
        },
        "lineNumber": 20,
        "iacDescription": {
          "issue": "Container or Pod is running without root user control",
          "impact": "Container or Pod could be running with full administrative privileges",
          "resolve": "Set `securityContext.runAsNonRoot` to `true`"
        },
        "publicId": "SNYK-CC-K8S-10",
        "msg": "input.spec.template.spec.containers[carts-db].securityContext.runAsNonRoot",
        "description": "",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[carts-db]",
          "securityContext",
          "runAsNonRoot"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-9",
        "title": "Container is running without privilege escalation control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-9",
        "isGeneratedByCustomRule": false,
        "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
        "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
          "terraform": "Set `spec.container.security_context.allow_privilege_escalation` to `false`"
        },
        "lineNumber": 20,
        "iacDescription": {
          "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
          "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`"
        },
        "publicId": "SNYK-CC-K8S-9",
        "msg": "spec.template.spec.containers[carts-db].securityContext.allowPrivilegeEscalation",
        "references": [
          "https://www.kernel.org/doc/html/latest/userspace-api/no_new_privs.html"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "containers[carts-db]",
          "securityContext",
          "allowPrivilegeEscalation"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-41",
        "title": "Container is running without liveness probe",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-41",
        "isGeneratedByCustomRule": false,
        "issue": "Liveness probe is not defined",
        "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
        "resolve": "Add `livenessProbe` attribute",
        "remediation": {
          "kubernetes": "Add `livenessProbe` attribute",
          "terraform": "Add `liveness_probe` attribute"
        },
        "lineNumber": 20,
        "iacDescription": {
          "issue": "Liveness probe is not defined",
          "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
          "resolve": "Add `livenessProbe` attribute"
        },
        "publicId": "SNYK-CC-K8S-41",
        "msg": "spec.template.spec.containers[carts-db].livenessProbe",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/",
          "https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/",
          "https://cloud.google.com/blog/products/gcp/kubernetes-best-practices-setting-up-health-checks-with-readiness-and-liveness-probes"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "containers[carts-db]",
          "livenessProbe"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-4",
        "title": "Container is running without memory limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-4",
        "isGeneratedByCustomRule": false,
        "issue": "Memory limit is not defined",
        "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
        "resolve": "Set `resources.limits.memory` value",
        "remediation": {
          "kubernetes": "Set `resources.limits.memory` value",
          "terraform": "Set `resources.limits.memory` value"
        },
        "lineNumber": 20,
        "iacDescription": {
          "issue": "Memory limit is not defined",
          "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
          "resolve": "Set `resources.limits.memory` value"
        },
        "publicId": "SNYK-CC-K8S-4",
        "msg": "input.spec.template.spec.containers[carts-db].resources.limits.memory",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/memory-default-namespace/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[carts-db]",
          "resources",
          "limits",
          "memory"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-8",
        "title": "Container is running with writable root filesystem",
        "severity": "low",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-8",
        "isGeneratedByCustomRule": false,
        "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
        "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
          "terraform": "Set `security_context.read_only_root_filesystem` to `true`"
        },
        "lineNumber": 20,
        "iacDescription": {
          "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
          "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`"
        },
        "publicId": "SNYK-CC-K8S-8",
        "msg": "spec.template.spec.containers[carts-db].securityContext.readOnlyRootFilesystem",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "containers[carts-db]",
          "securityContext",
          "readOnlyRootFilesystem"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-6",
        "title": "Container does not drop all default capabilities",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-6",
        "isGeneratedByCustomRule": false,
        "issue": "All default capabilities are not explicitly dropped",
        "impact": "Containers are running with potentially unnecessary privileges",
        "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
        "remediation": {
          "kubernetes": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
          "terraform": "Add `ALL` to `spec.container.security_context.capabilities.drop` list, and add only required capabilities to `spec.container.security_context.capabilities.add`, ensuring it also does not contain `ALL`"
        },
        "lineNumber": 20,
        "iacDescription": {
          "issue": "All default capabilities are not explicitly dropped",
          "impact": "Containers are running with potentially unnecessary privileges",
          "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`"
        },
        "publicId": "SNYK-CC-K8S-6",
        "msg": "input.spec.template.spec.containers[carts-db].securityContext.capabilities.drop",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
          "https://linux-audit.com/linux-capabilities-hardening-linux-binaries-by-removing-setuid/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[carts-db]",
          "securityContext",
          "capabilities",
          "drop"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-11",
        "title": "Container's or Pod's  UID could clash with host's UID",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-11",
        "isGeneratedByCustomRule": false,
        "issue": "`runAsUser` value is set to low UID",
        "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
        "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
          "terraform": "Set `security_context.run_as_user` value to greater or equal than 10'000"
        },
        "lineNumber": 20,
        "iacDescription": {
          "issue": "`runAsUser` value is set to low UID",
          "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
          "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence"
        },
        "publicId": "SNYK-CC-K8S-11",
        "msg": "input.spec.template.spec.containers[carts-db].securityContext.runAsUser",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container",
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod",
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[carts-db]",
          "securityContext",
          "runAsUser"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-5",
        "title": "Container has no CPU limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-5",
        "isGeneratedByCustomRule": false,
        "issue": "Container has no CPU limit",
        "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
        "resolve": "Add `resources.limits.cpu` field with required CPU limit value",
        "remediation": {
          "kubernetes": "Add `resources.limits.cpu` field with required CPU limit value",
          "terraform": "Add `spec.container.resources.limits.cpu` field with required CPU limit value"
        },
        "lineNumber": 20,
        "iacDescription": {
          "issue": "Container has no CPU limit",
          "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
          "resolve": "Add `resources.limits.cpu` field with required CPU limit value"
        },
        "publicId": "SNYK-CC-K8S-5",
        "msg": "input.spec.template.spec.containers[carts-db].resources.limits.cpu",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-cpu-resource/",
          "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/cpu-default-namespace/",
          "https://github.com/kubernetes/design-proposals-archive/blob/8da1442ea29adccea40693357d04727127e045ed/node/resource-qos.md#compressible-resource-guaranteess"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[carts-db]",
          "resources",
          "limits",
          "cpu"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-42",
        "title": "Container could be running with outdated image",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-42",
        "isGeneratedByCustomRule": false,
        "issue": "The image policy does not prevent image reuse",
        "impact": "The container may run with outdated or unauthorized image",
        "resolve": "Set `imagePullPolicy` attribute to `Always`",
        "remediation": {
          "kubernetes": "Set `imagePullPolicy` attribute to `Always`",
          "terraform": "Set `image_pull_policy` attribute to `Always"
        },
        "lineNumber": 20,
        "iacDescription": {
          "issue": "The image policy does not prevent image reuse",
          "impact": "The container may run with outdated or unauthorized image",
          "resolve": "Set `imagePullPolicy` attribute to `Always`"
        },
        "publicId": "SNYK-CC-K8S-42",
        "msg": "spec.template.spec.containers[carts-db].imagePullPolicy",
        "references": [
          "https://kubernetes.io/docs/concepts/containers/images/",
          "https://kubernetes.io/docs/concepts/configuration/overview/#container-images"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "containers[carts-db]",
          "imagePullPolicy"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-8",
        "title": "Container is running with writable root filesystem",
        "severity": "low",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-8",
        "isGeneratedByCustomRule": false,
        "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
        "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
          "terraform": "Set `security_context.read_only_root_filesystem` to `true`"
        },
        "lineNumber": 77,
        "iacDescription": {
          "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
          "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`"
        },
        "publicId": "SNYK-CC-K8S-8",
        "msg": "spec.template.spec.containers[carts].securityContext.readOnlyRootFilesystem",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 2]",
          "spec",
          "template",
          "spec",
          "containers[carts]",
          "securityContext",
          "readOnlyRootFilesystem"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-10",
        "title": "Container or Pod is running without root user control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-10",
        "isGeneratedByCustomRule": false,
        "issue": "Container or Pod is running without root user control",
        "impact": "Container or Pod could be running with full administrative privileges",
        "resolve": "Set `securityContext.runAsNonRoot` to `true`",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsNonRoot` to `true`",
          "terraform": "Set `security_context.run_as_non_root` to `true`"
        },
        "lineNumber": 77,
        "iacDescription": {
          "issue": "Container or Pod is running without root user control",
          "impact": "Container or Pod could be running with full administrative privileges",
          "resolve": "Set `securityContext.runAsNonRoot` to `true`"
        },
        "publicId": "SNYK-CC-K8S-10",
        "msg": "input.spec.template.spec.containers[carts].securityContext.runAsNonRoot",
        "description": "",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 2]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[carts]",
          "securityContext",
          "runAsNonRoot"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-41",
        "title": "Container is running without liveness probe",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-41",
        "isGeneratedByCustomRule": false,
        "issue": "Liveness probe is not defined",
        "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
        "resolve": "Add `livenessProbe` attribute",
        "remediation": {
          "kubernetes": "Add `livenessProbe` attribute",
          "terraform": "Add `liveness_probe` attribute"
        },
        "lineNumber": 77,
        "iacDescription": {
          "issue": "Liveness probe is not defined",
          "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
          "resolve": "Add `livenessProbe` attribute"
        },
        "publicId": "SNYK-CC-K8S-41",
        "msg": "spec.template.spec.containers[carts].livenessProbe",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/",
          "https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/",
          "https://cloud.google.com/blog/products/gcp/kubernetes-best-practices-setting-up-health-checks-with-readiness-and-liveness-probes"
        ],
        "path": [
          "[DocId: 2]",
          "spec",
          "template",
          "spec",
          "containers[carts]",
          "livenessProbe"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-4",
        "title": "Container is running without memory limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-4",
        "isGeneratedByCustomRule": false,
        "issue": "Memory limit is not defined",
        "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
        "resolve": "Set `resources.limits.memory` value",
        "remediation": {
          "kubernetes": "Set `resources.limits.memory` value",
          "terraform": "Set `resources.limits.memory` value"
        },
        "lineNumber": 77,
        "iacDescription": {
          "issue": "Memory limit is not defined",
          "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
          "resolve": "Set `resources.limits.memory` value"
        },
        "publicId": "SNYK-CC-K8S-4",
        "msg": "input.spec.template.spec.containers[carts].resources.limits.memory",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/memory-default-namespace/"
        ],
        "path": [
          "[DocId: 2]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[carts]",
          "resources",
          "limits",
          "memory"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-42",
        "title": "Container could be running with outdated image",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-42",
        "isGeneratedByCustomRule": false,
        "issue": "The image policy does not prevent image reuse",
        "impact": "The container may run with outdated or unauthorized image",
        "resolve": "Set `imagePullPolicy` attribute to `Always`",
        "remediation": {
          "kubernetes": "Set `imagePullPolicy` attribute to `Always`",
          "terraform": "Set `image_pull_policy` attribute to `Always"
        },
        "lineNumber": 77,
        "iacDescription": {
          "issue": "The image policy does not prevent image reuse",
          "impact": "The container may run with outdated or unauthorized image",
          "resolve": "Set `imagePullPolicy` attribute to `Always`"
        },
        "publicId": "SNYK-CC-K8S-42",
        "msg": "spec.template.spec.containers[carts].imagePullPolicy",
        "references": [
          "https://kubernetes.io/docs/concepts/containers/images/",
          "https://kubernetes.io/docs/concepts/configuration/overview/#container-images"
        ],
        "path": [
          "[DocId: 2]",
          "spec",
          "template",
          "spec",
          "containers[carts]",
          "imagePullPolicy"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-9",
        "title": "Container is running without privilege escalation control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-9",
        "isGeneratedByCustomRule": false,
        "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
        "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
          "terraform": "Set `spec.container.security_context.allow_privilege_escalation` to `false`"
        },
        "lineNumber": 77,
        "iacDescription": {
          "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
          "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`"
        },
        "publicId": "SNYK-CC-K8S-9",
        "msg": "spec.template.spec.containers[carts].securityContext.allowPrivilegeEscalation",
        "references": [
          "https://www.kernel.org/doc/html/latest/userspace-api/no_new_privs.html"
        ],
        "path": [
          "[DocId: 2]",
          "spec",
          "template",
          "spec",
          "containers[carts]",
          "securityContext",
          "allowPrivilegeEscalation"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-11",
        "title": "Container's or Pod's  UID could clash with host's UID",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-11",
        "isGeneratedByCustomRule": false,
        "issue": "`runAsUser` value is set to low UID",
        "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
        "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
          "terraform": "Set `security_context.run_as_user` value to greater or equal than 10'000"
        },
        "lineNumber": 77,
        "iacDescription": {
          "issue": "`runAsUser` value is set to low UID",
          "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
          "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence"
        },
        "publicId": "SNYK-CC-K8S-11",
        "msg": "input.spec.template.spec.containers[carts].securityContext.runAsUser",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container",
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod",
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 2]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[carts]",
          "securityContext",
          "runAsUser"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-5",
        "title": "Container has no CPU limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-5",
        "isGeneratedByCustomRule": false,
        "issue": "Container has no CPU limit",
        "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
        "resolve": "Add `resources.limits.cpu` field with required CPU limit value",
        "remediation": {
          "kubernetes": "Add `resources.limits.cpu` field with required CPU limit value",
          "terraform": "Add `spec.container.resources.limits.cpu` field with required CPU limit value"
        },
        "lineNumber": 77,
        "iacDescription": {
          "issue": "Container has no CPU limit",
          "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
          "resolve": "Add `resources.limits.cpu` field with required CPU limit value"
        },
        "publicId": "SNYK-CC-K8S-5",
        "msg": "input.spec.template.spec.containers[carts].resources.limits.cpu",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-cpu-resource/",
          "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/cpu-default-namespace/",
          "https://github.com/kubernetes/design-proposals-archive/blob/8da1442ea29adccea40693357d04727127e045ed/node/resource-qos.md#compressible-resource-guaranteess"
        ],
        "path": [
          "[DocId: 2]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[carts]",
          "resources",
          "limits",
          "cpu"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-6",
        "title": "Container does not drop all default capabilities",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-6",
        "isGeneratedByCustomRule": false,
        "issue": "All default capabilities are not explicitly dropped",
        "impact": "Containers are running with potentially unnecessary privileges",
        "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
        "remediation": {
          "kubernetes": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
          "terraform": "Add `ALL` to `spec.container.security_context.capabilities.drop` list, and add only required capabilities to `spec.container.security_context.capabilities.add`, ensuring it also does not contain `ALL`"
        },
        "lineNumber": 77,
        "iacDescription": {
          "issue": "All default capabilities are not explicitly dropped",
          "impact": "Containers are running with potentially unnecessary privileges",
          "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`"
        },
        "publicId": "SNYK-CC-K8S-6",
        "msg": "input.spec.template.spec.containers[carts].securityContext.capabilities.drop",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
          "https://linux-audit.com/linux-capabilities-hardening-linux-binaries-by-removing-setuid/"
        ],
        "path": [
          "[DocId: 2]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[carts]",
          "securityContext",
          "capabilities",
          "drop"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-4",
        "title": "Container is running without memory limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-4",
        "isGeneratedByCustomRule": false,
        "issue": "Memory limit is not defined",
        "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
        "resolve": "Set `resources.limits.memory` value",
        "remediation": {
          "kubernetes": "Set `resources.limits.memory` value",
          "terraform": "Set `resources.limits.memory` value"
        },
        "lineNumber": 134,
        "iacDescription": {
          "issue": "Memory limit is not defined",
          "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
          "resolve": "Set `resources.limits.memory` value"
        },
        "publicId": "SNYK-CC-K8S-4",
        "msg": "input.spec.template.spec.containers[catalogue-db].resources.limits.memory",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/memory-default-namespace/"
        ],
        "path": [
          "[DocId: 4]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[catalogue-db]",
          "resources",
          "limits",
          "memory"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-42",
        "title": "Container could be running with outdated image",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-42",
        "isGeneratedByCustomRule": false,
        "issue": "The image policy does not prevent image reuse",
        "impact": "The container may run with outdated or unauthorized image",
        "resolve": "Set `imagePullPolicy` attribute to `Always`",
        "remediation": {
          "kubernetes": "Set `imagePullPolicy` attribute to `Always`",
          "terraform": "Set `image_pull_policy` attribute to `Always"
        },
        "lineNumber": 134,
        "iacDescription": {
          "issue": "The image policy does not prevent image reuse",
          "impact": "The container may run with outdated or unauthorized image",
          "resolve": "Set `imagePullPolicy` attribute to `Always`"
        },
        "publicId": "SNYK-CC-K8S-42",
        "msg": "spec.template.spec.containers[catalogue-db].imagePullPolicy",
        "references": [
          "https://kubernetes.io/docs/concepts/containers/images/",
          "https://kubernetes.io/docs/concepts/configuration/overview/#container-images"
        ],
        "path": [
          "[DocId: 4]",
          "spec",
          "template",
          "spec",
          "containers[catalogue-db]",
          "imagePullPolicy"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-9",
        "title": "Container is running without privilege escalation control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-9",
        "isGeneratedByCustomRule": false,
        "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
        "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
          "terraform": "Set `spec.container.security_context.allow_privilege_escalation` to `false`"
        },
        "lineNumber": 134,
        "iacDescription": {
          "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
          "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`"
        },
        "publicId": "SNYK-CC-K8S-9",
        "msg": "spec.template.spec.containers[catalogue-db].securityContext.allowPrivilegeEscalation",
        "references": [
          "https://www.kernel.org/doc/html/latest/userspace-api/no_new_privs.html"
        ],
        "path": [
          "[DocId: 4]",
          "spec",
          "template",
          "spec",
          "containers[catalogue-db]",
          "securityContext",
          "allowPrivilegeEscalation"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-41",
        "title": "Container is running without liveness probe",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-41",
        "isGeneratedByCustomRule": false,
        "issue": "Liveness probe is not defined",
        "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
        "resolve": "Add `livenessProbe` attribute",
        "remediation": {
          "kubernetes": "Add `livenessProbe` attribute",
          "terraform": "Add `liveness_probe` attribute"
        },
        "lineNumber": 134,
        "iacDescription": {
          "issue": "Liveness probe is not defined",
          "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
          "resolve": "Add `livenessProbe` attribute"
        },
        "publicId": "SNYK-CC-K8S-41",
        "msg": "spec.template.spec.containers[catalogue-db].livenessProbe",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/",
          "https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/",
          "https://cloud.google.com/blog/products/gcp/kubernetes-best-practices-setting-up-health-checks-with-readiness-and-liveness-probes"
        ],
        "path": [
          "[DocId: 4]",
          "spec",
          "template",
          "spec",
          "containers[catalogue-db]",
          "livenessProbe"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-5",
        "title": "Container has no CPU limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-5",
        "isGeneratedByCustomRule": false,
        "issue": "Container has no CPU limit",
        "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
        "resolve": "Add `resources.limits.cpu` field with required CPU limit value",
        "remediation": {
          "kubernetes": "Add `resources.limits.cpu` field with required CPU limit value",
          "terraform": "Add `spec.container.resources.limits.cpu` field with required CPU limit value"
        },
        "lineNumber": 134,
        "iacDescription": {
          "issue": "Container has no CPU limit",
          "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
          "resolve": "Add `resources.limits.cpu` field with required CPU limit value"
        },
        "publicId": "SNYK-CC-K8S-5",
        "msg": "input.spec.template.spec.containers[catalogue-db].resources.limits.cpu",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-cpu-resource/",
          "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/cpu-default-namespace/",
          "https://github.com/kubernetes/design-proposals-archive/blob/8da1442ea29adccea40693357d04727127e045ed/node/resource-qos.md#compressible-resource-guaranteess"
        ],
        "path": [
          "[DocId: 4]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[catalogue-db]",
          "resources",
          "limits",
          "cpu"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-11",
        "title": "Container's or Pod's  UID could clash with host's UID",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-11",
        "isGeneratedByCustomRule": false,
        "issue": "`runAsUser` value is set to low UID",
        "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
        "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
          "terraform": "Set `security_context.run_as_user` value to greater or equal than 10'000"
        },
        "lineNumber": 134,
        "iacDescription": {
          "issue": "`runAsUser` value is set to low UID",
          "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
          "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence"
        },
        "publicId": "SNYK-CC-K8S-11",
        "msg": "input.spec.template.spec.containers[catalogue-db].securityContext.runAsUser",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container",
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod",
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 4]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[catalogue-db]",
          "securityContext",
          "runAsUser"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-10",
        "title": "Container or Pod is running without root user control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-10",
        "isGeneratedByCustomRule": false,
        "issue": "Container or Pod is running without root user control",
        "impact": "Container or Pod could be running with full administrative privileges",
        "resolve": "Set `securityContext.runAsNonRoot` to `true`",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsNonRoot` to `true`",
          "terraform": "Set `security_context.run_as_non_root` to `true`"
        },
        "lineNumber": 134,
        "iacDescription": {
          "issue": "Container or Pod is running without root user control",
          "impact": "Container or Pod could be running with full administrative privileges",
          "resolve": "Set `securityContext.runAsNonRoot` to `true`"
        },
        "publicId": "SNYK-CC-K8S-10",
        "msg": "input.spec.template.spec.containers[catalogue-db].securityContext.runAsNonRoot",
        "description": "",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 4]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[catalogue-db]",
          "securityContext",
          "runAsNonRoot"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-8",
        "title": "Container is running with writable root filesystem",
        "severity": "low",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-8",
        "isGeneratedByCustomRule": false,
        "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
        "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
          "terraform": "Set `security_context.read_only_root_filesystem` to `true`"
        },
        "lineNumber": 134,
        "iacDescription": {
          "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
          "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`"
        },
        "publicId": "SNYK-CC-K8S-8",
        "msg": "spec.template.spec.containers[catalogue-db].securityContext.readOnlyRootFilesystem",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 4]",
          "spec",
          "template",
          "spec",
          "containers[catalogue-db]",
          "securityContext",
          "readOnlyRootFilesystem"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-6",
        "title": "Container does not drop all default capabilities",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-6",
        "isGeneratedByCustomRule": false,
        "issue": "All default capabilities are not explicitly dropped",
        "impact": "Containers are running with potentially unnecessary privileges",
        "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
        "remediation": {
          "kubernetes": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
          "terraform": "Add `ALL` to `spec.container.security_context.capabilities.drop` list, and add only required capabilities to `spec.container.security_context.capabilities.add`, ensuring it also does not contain `ALL`"
        },
        "lineNumber": 134,
        "iacDescription": {
          "issue": "All default capabilities are not explicitly dropped",
          "impact": "Containers are running with potentially unnecessary privileges",
          "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`"
        },
        "publicId": "SNYK-CC-K8S-6",
        "msg": "input.spec.template.spec.containers[catalogue-db].securityContext.capabilities.drop",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
          "https://linux-audit.com/linux-capabilities-hardening-linux-binaries-by-removing-setuid/"
        ],
        "path": [
          "[DocId: 4]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[catalogue-db]",
          "securityContext",
          "capabilities",
          "drop"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-11",
        "title": "Container's or Pod's  UID could clash with host's UID",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-11",
        "isGeneratedByCustomRule": false,
        "issue": "`runAsUser` value is set to low UID",
        "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
        "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
          "terraform": "Set `security_context.run_as_user` value to greater or equal than 10'000"
        },
        "lineNumber": 188,
        "iacDescription": {
          "issue": "`runAsUser` value is set to low UID",
          "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
          "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence"
        },
        "publicId": "SNYK-CC-K8S-11",
        "msg": "input.spec.template.spec.containers[catalogue].securityContext.runAsUser",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container",
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod",
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 6]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[catalogue]",
          "securityContext",
          "runAsUser"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-9",
        "title": "Container is running without privilege escalation control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-9",
        "isGeneratedByCustomRule": false,
        "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
        "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
          "terraform": "Set `spec.container.security_context.allow_privilege_escalation` to `false`"
        },
        "lineNumber": 188,
        "iacDescription": {
          "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
          "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`"
        },
        "publicId": "SNYK-CC-K8S-9",
        "msg": "spec.template.spec.containers[catalogue].securityContext.allowPrivilegeEscalation",
        "references": [
          "https://www.kernel.org/doc/html/latest/userspace-api/no_new_privs.html"
        ],
        "path": [
          "[DocId: 6]",
          "spec",
          "template",
          "spec",
          "containers[catalogue]",
          "securityContext",
          "allowPrivilegeEscalation"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-5",
        "title": "Container has no CPU limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-5",
        "isGeneratedByCustomRule": false,
        "issue": "Container has no CPU limit",
        "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
        "resolve": "Add `resources.limits.cpu` field with required CPU limit value",
        "remediation": {
          "kubernetes": "Add `resources.limits.cpu` field with required CPU limit value",
          "terraform": "Add `spec.container.resources.limits.cpu` field with required CPU limit value"
        },
        "lineNumber": 188,
        "iacDescription": {
          "issue": "Container has no CPU limit",
          "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
          "resolve": "Add `resources.limits.cpu` field with required CPU limit value"
        },
        "publicId": "SNYK-CC-K8S-5",
        "msg": "input.spec.template.spec.containers[catalogue].resources.limits.cpu",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-cpu-resource/",
          "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/cpu-default-namespace/",
          "https://github.com/kubernetes/design-proposals-archive/blob/8da1442ea29adccea40693357d04727127e045ed/node/resource-qos.md#compressible-resource-guaranteess"
        ],
        "path": [
          "[DocId: 6]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[catalogue]",
          "resources",
          "limits",
          "cpu"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-6",
        "title": "Container does not drop all default capabilities",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-6",
        "isGeneratedByCustomRule": false,
        "issue": "All default capabilities are not explicitly dropped",
        "impact": "Containers are running with potentially unnecessary privileges",
        "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
        "remediation": {
          "kubernetes": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
          "terraform": "Add `ALL` to `spec.container.security_context.capabilities.drop` list, and add only required capabilities to `spec.container.security_context.capabilities.add`, ensuring it also does not contain `ALL`"
        },
        "lineNumber": 188,
        "iacDescription": {
          "issue": "All default capabilities are not explicitly dropped",
          "impact": "Containers are running with potentially unnecessary privileges",
          "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`"
        },
        "publicId": "SNYK-CC-K8S-6",
        "msg": "input.spec.template.spec.containers[catalogue].securityContext.capabilities.drop",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
          "https://linux-audit.com/linux-capabilities-hardening-linux-binaries-by-removing-setuid/"
        ],
        "path": [
          "[DocId: 6]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[catalogue]",
          "securityContext",
          "capabilities",
          "drop"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-41",
        "title": "Container is running without liveness probe",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-41",
        "isGeneratedByCustomRule": false,
        "issue": "Liveness probe is not defined",
        "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
        "resolve": "Add `livenessProbe` attribute",
        "remediation": {
          "kubernetes": "Add `livenessProbe` attribute",
          "terraform": "Add `liveness_probe` attribute"
        },
        "lineNumber": 188,
        "iacDescription": {
          "issue": "Liveness probe is not defined",
          "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
          "resolve": "Add `livenessProbe` attribute"
        },
        "publicId": "SNYK-CC-K8S-41",
        "msg": "spec.template.spec.containers[catalogue].livenessProbe",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/",
          "https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/",
          "https://cloud.google.com/blog/products/gcp/kubernetes-best-practices-setting-up-health-checks-with-readiness-and-liveness-probes"
        ],
        "path": [
          "[DocId: 6]",
          "spec",
          "template",
          "spec",
          "containers[catalogue]",
          "livenessProbe"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-4",
        "title": "Container is running without memory limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-4",
        "isGeneratedByCustomRule": false,
        "issue": "Memory limit is not defined",
        "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
        "resolve": "Set `resources.limits.memory` value",
        "remediation": {
          "kubernetes": "Set `resources.limits.memory` value",
          "terraform": "Set `resources.limits.memory` value"
        },
        "lineNumber": 188,
        "iacDescription": {
          "issue": "Memory limit is not defined",
          "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
          "resolve": "Set `resources.limits.memory` value"
        },
        "publicId": "SNYK-CC-K8S-4",
        "msg": "input.spec.template.spec.containers[catalogue].resources.limits.memory",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/memory-default-namespace/"
        ],
        "path": [
          "[DocId: 6]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[catalogue]",
          "resources",
          "limits",
          "memory"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-42",
        "title": "Container could be running with outdated image",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-42",
        "isGeneratedByCustomRule": false,
        "issue": "The image policy does not prevent image reuse",
        "impact": "The container may run with outdated or unauthorized image",
        "resolve": "Set `imagePullPolicy` attribute to `Always`",
        "remediation": {
          "kubernetes": "Set `imagePullPolicy` attribute to `Always`",
          "terraform": "Set `image_pull_policy` attribute to `Always"
        },
        "lineNumber": 188,
        "iacDescription": {
          "issue": "The image policy does not prevent image reuse",
          "impact": "The container may run with outdated or unauthorized image",
          "resolve": "Set `imagePullPolicy` attribute to `Always`"
        },
        "publicId": "SNYK-CC-K8S-42",
        "msg": "spec.template.spec.containers[catalogue].imagePullPolicy",
        "references": [
          "https://kubernetes.io/docs/concepts/containers/images/",
          "https://kubernetes.io/docs/concepts/configuration/overview/#container-images"
        ],
        "path": [
          "[DocId: 6]",
          "spec",
          "template",
          "spec",
          "containers[catalogue]",
          "imagePullPolicy"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-8",
        "title": "Container is running with writable root filesystem",
        "severity": "low",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-8",
        "isGeneratedByCustomRule": false,
        "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
        "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
          "terraform": "Set `security_context.read_only_root_filesystem` to `true`"
        },
        "lineNumber": 188,
        "iacDescription": {
          "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
          "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`"
        },
        "publicId": "SNYK-CC-K8S-8",
        "msg": "spec.template.spec.containers[catalogue].securityContext.readOnlyRootFilesystem",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 6]",
          "spec",
          "template",
          "spec",
          "containers[catalogue]",
          "securityContext",
          "readOnlyRootFilesystem"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-10",
        "title": "Container or Pod is running without root user control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-10",
        "isGeneratedByCustomRule": false,
        "issue": "Container or Pod is running without root user control",
        "impact": "Container or Pod could be running with full administrative privileges",
        "resolve": "Set `securityContext.runAsNonRoot` to `true`",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsNonRoot` to `true`",
          "terraform": "Set `security_context.run_as_non_root` to `true`"
        },
        "lineNumber": 188,
        "iacDescription": {
          "issue": "Container or Pod is running without root user control",
          "impact": "Container or Pod could be running with full administrative privileges",
          "resolve": "Set `securityContext.runAsNonRoot` to `true`"
        },
        "publicId": "SNYK-CC-K8S-10",
        "msg": "input.spec.template.spec.containers[catalogue].securityContext.runAsNonRoot",
        "description": "",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 6]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[catalogue]",
          "securityContext",
          "runAsNonRoot"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-41",
        "title": "Container is running without liveness probe",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-41",
        "isGeneratedByCustomRule": false,
        "issue": "Liveness probe is not defined",
        "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
        "resolve": "Add `livenessProbe` attribute",
        "remediation": {
          "kubernetes": "Add `livenessProbe` attribute",
          "terraform": "Add `liveness_probe` attribute"
        },
        "lineNumber": 231,
        "iacDescription": {
          "issue": "Liveness probe is not defined",
          "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
          "resolve": "Add `livenessProbe` attribute"
        },
        "publicId": "SNYK-CC-K8S-41",
        "msg": "spec.template.spec.containers[front-end].livenessProbe",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/",
          "https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/",
          "https://cloud.google.com/blog/products/gcp/kubernetes-best-practices-setting-up-health-checks-with-readiness-and-liveness-probes"
        ],
        "path": [
          "[DocId: 8]",
          "spec",
          "template",
          "spec",
          "containers[front-end]",
          "livenessProbe"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-4",
        "title": "Container is running without memory limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-4",
        "isGeneratedByCustomRule": false,
        "issue": "Memory limit is not defined",
        "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
        "resolve": "Set `resources.limits.memory` value",
        "remediation": {
          "kubernetes": "Set `resources.limits.memory` value",
          "terraform": "Set `resources.limits.memory` value"
        },
        "lineNumber": 231,
        "iacDescription": {
          "issue": "Memory limit is not defined",
          "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
          "resolve": "Set `resources.limits.memory` value"
        },
        "publicId": "SNYK-CC-K8S-4",
        "msg": "input.spec.template.spec.containers[front-end].resources.limits.memory",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/memory-default-namespace/"
        ],
        "path": [
          "[DocId: 8]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[front-end]",
          "resources",
          "limits",
          "memory"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-11",
        "title": "Container's or Pod's  UID could clash with host's UID",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-11",
        "isGeneratedByCustomRule": false,
        "issue": "`runAsUser` value is set to low UID",
        "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
        "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
          "terraform": "Set `security_context.run_as_user` value to greater or equal than 10'000"
        },
        "lineNumber": 231,
        "iacDescription": {
          "issue": "`runAsUser` value is set to low UID",
          "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
          "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence"
        },
        "publicId": "SNYK-CC-K8S-11",
        "msg": "input.spec.template.spec.containers[front-end].securityContext.runAsUser",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container",
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod",
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 8]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[front-end]",
          "securityContext",
          "runAsUser"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-5",
        "title": "Container has no CPU limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-5",
        "isGeneratedByCustomRule": false,
        "issue": "Container has no CPU limit",
        "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
        "resolve": "Add `resources.limits.cpu` field with required CPU limit value",
        "remediation": {
          "kubernetes": "Add `resources.limits.cpu` field with required CPU limit value",
          "terraform": "Add `spec.container.resources.limits.cpu` field with required CPU limit value"
        },
        "lineNumber": 231,
        "iacDescription": {
          "issue": "Container has no CPU limit",
          "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
          "resolve": "Add `resources.limits.cpu` field with required CPU limit value"
        },
        "publicId": "SNYK-CC-K8S-5",
        "msg": "input.spec.template.spec.containers[front-end].resources.limits.cpu",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-cpu-resource/",
          "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/cpu-default-namespace/",
          "https://github.com/kubernetes/design-proposals-archive/blob/8da1442ea29adccea40693357d04727127e045ed/node/resource-qos.md#compressible-resource-guaranteess"
        ],
        "path": [
          "[DocId: 8]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[front-end]",
          "resources",
          "limits",
          "cpu"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-8",
        "title": "Container is running with writable root filesystem",
        "severity": "low",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-8",
        "isGeneratedByCustomRule": false,
        "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
        "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
          "terraform": "Set `security_context.read_only_root_filesystem` to `true`"
        },
        "lineNumber": 231,
        "iacDescription": {
          "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
          "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`"
        },
        "publicId": "SNYK-CC-K8S-8",
        "msg": "spec.template.spec.containers[front-end].securityContext.readOnlyRootFilesystem",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 8]",
          "spec",
          "template",
          "spec",
          "containers[front-end]",
          "securityContext",
          "readOnlyRootFilesystem"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-10",
        "title": "Container or Pod is running without root user control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-10",
        "isGeneratedByCustomRule": false,
        "issue": "Container or Pod is running without root user control",
        "impact": "Container or Pod could be running with full administrative privileges",
        "resolve": "Set `securityContext.runAsNonRoot` to `true`",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsNonRoot` to `true`",
          "terraform": "Set `security_context.run_as_non_root` to `true`"
        },
        "lineNumber": 231,
        "iacDescription": {
          "issue": "Container or Pod is running without root user control",
          "impact": "Container or Pod could be running with full administrative privileges",
          "resolve": "Set `securityContext.runAsNonRoot` to `true`"
        },
        "publicId": "SNYK-CC-K8S-10",
        "msg": "input.spec.template.spec.containers[front-end].securityContext.runAsNonRoot",
        "description": "",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 8]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[front-end]",
          "securityContext",
          "runAsNonRoot"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-6",
        "title": "Container does not drop all default capabilities",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-6",
        "isGeneratedByCustomRule": false,
        "issue": "All default capabilities are not explicitly dropped",
        "impact": "Containers are running with potentially unnecessary privileges",
        "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
        "remediation": {
          "kubernetes": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
          "terraform": "Add `ALL` to `spec.container.security_context.capabilities.drop` list, and add only required capabilities to `spec.container.security_context.capabilities.add`, ensuring it also does not contain `ALL`"
        },
        "lineNumber": 231,
        "iacDescription": {
          "issue": "All default capabilities are not explicitly dropped",
          "impact": "Containers are running with potentially unnecessary privileges",
          "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`"
        },
        "publicId": "SNYK-CC-K8S-6",
        "msg": "input.spec.template.spec.containers[front-end].securityContext.capabilities.drop",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
          "https://linux-audit.com/linux-capabilities-hardening-linux-binaries-by-removing-setuid/"
        ],
        "path": [
          "[DocId: 8]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[front-end]",
          "securityContext",
          "capabilities",
          "drop"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-42",
        "title": "Container could be running with outdated image",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-42",
        "isGeneratedByCustomRule": false,
        "issue": "The image policy does not prevent image reuse",
        "impact": "The container may run with outdated or unauthorized image",
        "resolve": "Set `imagePullPolicy` attribute to `Always`",
        "remediation": {
          "kubernetes": "Set `imagePullPolicy` attribute to `Always`",
          "terraform": "Set `image_pull_policy` attribute to `Always"
        },
        "lineNumber": 231,
        "iacDescription": {
          "issue": "The image policy does not prevent image reuse",
          "impact": "The container may run with outdated or unauthorized image",
          "resolve": "Set `imagePullPolicy` attribute to `Always`"
        },
        "publicId": "SNYK-CC-K8S-42",
        "msg": "spec.template.spec.containers[front-end].imagePullPolicy",
        "references": [
          "https://kubernetes.io/docs/concepts/containers/images/",
          "https://kubernetes.io/docs/concepts/configuration/overview/#container-images"
        ],
        "path": [
          "[DocId: 8]",
          "spec",
          "template",
          "spec",
          "containers[front-end]",
          "imagePullPolicy"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-9",
        "title": "Container is running without privilege escalation control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-9",
        "isGeneratedByCustomRule": false,
        "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
        "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
          "terraform": "Set `spec.container.security_context.allow_privilege_escalation` to `false`"
        },
        "lineNumber": 231,
        "iacDescription": {
          "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
          "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`"
        },
        "publicId": "SNYK-CC-K8S-9",
        "msg": "spec.template.spec.containers[front-end].securityContext.allowPrivilegeEscalation",
        "references": [
          "https://www.kernel.org/doc/html/latest/userspace-api/no_new_privs.html"
        ],
        "path": [
          "[DocId: 8]",
          "spec",
          "template",
          "spec",
          "containers[front-end]",
          "securityContext",
          "allowPrivilegeEscalation"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-4",
        "title": "Container is running without memory limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-4",
        "isGeneratedByCustomRule": false,
        "issue": "Memory limit is not defined",
        "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
        "resolve": "Set `resources.limits.memory` value",
        "remediation": {
          "kubernetes": "Set `resources.limits.memory` value",
          "terraform": "Set `resources.limits.memory` value"
        },
        "lineNumber": 273,
        "iacDescription": {
          "issue": "Memory limit is not defined",
          "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
          "resolve": "Set `resources.limits.memory` value"
        },
        "publicId": "SNYK-CC-K8S-4",
        "msg": "input.spec.template.spec.containers[orders-db].resources.limits.memory",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/memory-default-namespace/"
        ],
        "path": [
          "[DocId: 10]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[orders-db]",
          "resources",
          "limits",
          "memory"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-42",
        "title": "Container could be running with outdated image",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-42",
        "isGeneratedByCustomRule": false,
        "issue": "The image policy does not prevent image reuse",
        "impact": "The container may run with outdated or unauthorized image",
        "resolve": "Set `imagePullPolicy` attribute to `Always`",
        "remediation": {
          "kubernetes": "Set `imagePullPolicy` attribute to `Always`",
          "terraform": "Set `image_pull_policy` attribute to `Always"
        },
        "lineNumber": 273,
        "iacDescription": {
          "issue": "The image policy does not prevent image reuse",
          "impact": "The container may run with outdated or unauthorized image",
          "resolve": "Set `imagePullPolicy` attribute to `Always`"
        },
        "publicId": "SNYK-CC-K8S-42",
        "msg": "spec.template.spec.containers[orders-db].imagePullPolicy",
        "references": [
          "https://kubernetes.io/docs/concepts/containers/images/",
          "https://kubernetes.io/docs/concepts/configuration/overview/#container-images"
        ],
        "path": [
          "[DocId: 10]",
          "spec",
          "template",
          "spec",
          "containers[orders-db]",
          "imagePullPolicy"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-9",
        "title": "Container is running without privilege escalation control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-9",
        "isGeneratedByCustomRule": false,
        "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
        "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
          "terraform": "Set `spec.container.security_context.allow_privilege_escalation` to `false`"
        },
        "lineNumber": 273,
        "iacDescription": {
          "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
          "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`"
        },
        "publicId": "SNYK-CC-K8S-9",
        "msg": "spec.template.spec.containers[orders-db].securityContext.allowPrivilegeEscalation",
        "references": [
          "https://www.kernel.org/doc/html/latest/userspace-api/no_new_privs.html"
        ],
        "path": [
          "[DocId: 10]",
          "spec",
          "template",
          "spec",
          "containers[orders-db]",
          "securityContext",
          "allowPrivilegeEscalation"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-41",
        "title": "Container is running without liveness probe",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-41",
        "isGeneratedByCustomRule": false,
        "issue": "Liveness probe is not defined",
        "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
        "resolve": "Add `livenessProbe` attribute",
        "remediation": {
          "kubernetes": "Add `livenessProbe` attribute",
          "terraform": "Add `liveness_probe` attribute"
        },
        "lineNumber": 273,
        "iacDescription": {
          "issue": "Liveness probe is not defined",
          "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
          "resolve": "Add `livenessProbe` attribute"
        },
        "publicId": "SNYK-CC-K8S-41",
        "msg": "spec.template.spec.containers[orders-db].livenessProbe",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/",
          "https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/",
          "https://cloud.google.com/blog/products/gcp/kubernetes-best-practices-setting-up-health-checks-with-readiness-and-liveness-probes"
        ],
        "path": [
          "[DocId: 10]",
          "spec",
          "template",
          "spec",
          "containers[orders-db]",
          "livenessProbe"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-5",
        "title": "Container has no CPU limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-5",
        "isGeneratedByCustomRule": false,
        "issue": "Container has no CPU limit",
        "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
        "resolve": "Add `resources.limits.cpu` field with required CPU limit value",
        "remediation": {
          "kubernetes": "Add `resources.limits.cpu` field with required CPU limit value",
          "terraform": "Add `spec.container.resources.limits.cpu` field with required CPU limit value"
        },
        "lineNumber": 273,
        "iacDescription": {
          "issue": "Container has no CPU limit",
          "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
          "resolve": "Add `resources.limits.cpu` field with required CPU limit value"
        },
        "publicId": "SNYK-CC-K8S-5",
        "msg": "input.spec.template.spec.containers[orders-db].resources.limits.cpu",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-cpu-resource/",
          "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/cpu-default-namespace/",
          "https://github.com/kubernetes/design-proposals-archive/blob/8da1442ea29adccea40693357d04727127e045ed/node/resource-qos.md#compressible-resource-guaranteess"
        ],
        "path": [
          "[DocId: 10]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[orders-db]",
          "resources",
          "limits",
          "cpu"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-11",
        "title": "Container's or Pod's  UID could clash with host's UID",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-11",
        "isGeneratedByCustomRule": false,
        "issue": "`runAsUser` value is set to low UID",
        "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
        "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
          "terraform": "Set `security_context.run_as_user` value to greater or equal than 10'000"
        },
        "lineNumber": 273,
        "iacDescription": {
          "issue": "`runAsUser` value is set to low UID",
          "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
          "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence"
        },
        "publicId": "SNYK-CC-K8S-11",
        "msg": "input.spec.template.spec.containers[orders-db].securityContext.runAsUser",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container",
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod",
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 10]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[orders-db]",
          "securityContext",
          "runAsUser"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-10",
        "title": "Container or Pod is running without root user control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-10",
        "isGeneratedByCustomRule": false,
        "issue": "Container or Pod is running without root user control",
        "impact": "Container or Pod could be running with full administrative privileges",
        "resolve": "Set `securityContext.runAsNonRoot` to `true`",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsNonRoot` to `true`",
          "terraform": "Set `security_context.run_as_non_root` to `true`"
        },
        "lineNumber": 273,
        "iacDescription": {
          "issue": "Container or Pod is running without root user control",
          "impact": "Container or Pod could be running with full administrative privileges",
          "resolve": "Set `securityContext.runAsNonRoot` to `true`"
        },
        "publicId": "SNYK-CC-K8S-10",
        "msg": "input.spec.template.spec.containers[orders-db].securityContext.runAsNonRoot",
        "description": "",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 10]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[orders-db]",
          "securityContext",
          "runAsNonRoot"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-8",
        "title": "Container is running with writable root filesystem",
        "severity": "low",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-8",
        "isGeneratedByCustomRule": false,
        "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
        "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
          "terraform": "Set `security_context.read_only_root_filesystem` to `true`"
        },
        "lineNumber": 273,
        "iacDescription": {
          "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
          "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`"
        },
        "publicId": "SNYK-CC-K8S-8",
        "msg": "spec.template.spec.containers[orders-db].securityContext.readOnlyRootFilesystem",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 10]",
          "spec",
          "template",
          "spec",
          "containers[orders-db]",
          "securityContext",
          "readOnlyRootFilesystem"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-6",
        "title": "Container does not drop all default capabilities",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-6",
        "isGeneratedByCustomRule": false,
        "issue": "All default capabilities are not explicitly dropped",
        "impact": "Containers are running with potentially unnecessary privileges",
        "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
        "remediation": {
          "kubernetes": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
          "terraform": "Add `ALL` to `spec.container.security_context.capabilities.drop` list, and add only required capabilities to `spec.container.security_context.capabilities.add`, ensuring it also does not contain `ALL`"
        },
        "lineNumber": 273,
        "iacDescription": {
          "issue": "All default capabilities are not explicitly dropped",
          "impact": "Containers are running with potentially unnecessary privileges",
          "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`"
        },
        "publicId": "SNYK-CC-K8S-6",
        "msg": "input.spec.template.spec.containers[orders-db].securityContext.capabilities.drop",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
          "https://linux-audit.com/linux-capabilities-hardening-linux-binaries-by-removing-setuid/"
        ],
        "path": [
          "[DocId: 10]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[orders-db]",
          "securityContext",
          "capabilities",
          "drop"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-11",
        "title": "Container's or Pod's  UID could clash with host's UID",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-11",
        "isGeneratedByCustomRule": false,
        "issue": "`runAsUser` value is set to low UID",
        "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
        "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
          "terraform": "Set `security_context.run_as_user` value to greater or equal than 10'000"
        },
        "lineNumber": 330,
        "iacDescription": {
          "issue": "`runAsUser` value is set to low UID",
          "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
          "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence"
        },
        "publicId": "SNYK-CC-K8S-11",
        "msg": "input.spec.template.spec.containers[orders].securityContext.runAsUser",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container",
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod",
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 12]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[orders]",
          "securityContext",
          "runAsUser"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-9",
        "title": "Container is running without privilege escalation control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-9",
        "isGeneratedByCustomRule": false,
        "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
        "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
          "terraform": "Set `spec.container.security_context.allow_privilege_escalation` to `false`"
        },
        "lineNumber": 330,
        "iacDescription": {
          "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
          "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`"
        },
        "publicId": "SNYK-CC-K8S-9",
        "msg": "spec.template.spec.containers[orders].securityContext.allowPrivilegeEscalation",
        "references": [
          "https://www.kernel.org/doc/html/latest/userspace-api/no_new_privs.html"
        ],
        "path": [
          "[DocId: 12]",
          "spec",
          "template",
          "spec",
          "containers[orders]",
          "securityContext",
          "allowPrivilegeEscalation"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-5",
        "title": "Container has no CPU limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-5",
        "isGeneratedByCustomRule": false,
        "issue": "Container has no CPU limit",
        "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
        "resolve": "Add `resources.limits.cpu` field with required CPU limit value",
        "remediation": {
          "kubernetes": "Add `resources.limits.cpu` field with required CPU limit value",
          "terraform": "Add `spec.container.resources.limits.cpu` field with required CPU limit value"
        },
        "lineNumber": 330,
        "iacDescription": {
          "issue": "Container has no CPU limit",
          "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
          "resolve": "Add `resources.limits.cpu` field with required CPU limit value"
        },
        "publicId": "SNYK-CC-K8S-5",
        "msg": "input.spec.template.spec.containers[orders].resources.limits.cpu",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-cpu-resource/",
          "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/cpu-default-namespace/",
          "https://github.com/kubernetes/design-proposals-archive/blob/8da1442ea29adccea40693357d04727127e045ed/node/resource-qos.md#compressible-resource-guaranteess"
        ],
        "path": [
          "[DocId: 12]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[orders]",
          "resources",
          "limits",
          "cpu"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-6",
        "title": "Container does not drop all default capabilities",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-6",
        "isGeneratedByCustomRule": false,
        "issue": "All default capabilities are not explicitly dropped",
        "impact": "Containers are running with potentially unnecessary privileges",
        "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
        "remediation": {
          "kubernetes": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
          "terraform": "Add `ALL` to `spec.container.security_context.capabilities.drop` list, and add only required capabilities to `spec.container.security_context.capabilities.add`, ensuring it also does not contain `ALL`"
        },
        "lineNumber": 330,
        "iacDescription": {
          "issue": "All default capabilities are not explicitly dropped",
          "impact": "Containers are running with potentially unnecessary privileges",
          "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`"
        },
        "publicId": "SNYK-CC-K8S-6",
        "msg": "input.spec.template.spec.containers[orders].securityContext.capabilities.drop",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
          "https://linux-audit.com/linux-capabilities-hardening-linux-binaries-by-removing-setuid/"
        ],
        "path": [
          "[DocId: 12]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[orders]",
          "securityContext",
          "capabilities",
          "drop"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-41",
        "title": "Container is running without liveness probe",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-41",
        "isGeneratedByCustomRule": false,
        "issue": "Liveness probe is not defined",
        "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
        "resolve": "Add `livenessProbe` attribute",
        "remediation": {
          "kubernetes": "Add `livenessProbe` attribute",
          "terraform": "Add `liveness_probe` attribute"
        },
        "lineNumber": 330,
        "iacDescription": {
          "issue": "Liveness probe is not defined",
          "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
          "resolve": "Add `livenessProbe` attribute"
        },
        "publicId": "SNYK-CC-K8S-41",
        "msg": "spec.template.spec.containers[orders].livenessProbe",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/",
          "https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/",
          "https://cloud.google.com/blog/products/gcp/kubernetes-best-practices-setting-up-health-checks-with-readiness-and-liveness-probes"
        ],
        "path": [
          "[DocId: 12]",
          "spec",
          "template",
          "spec",
          "containers[orders]",
          "livenessProbe"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-4",
        "title": "Container is running without memory limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-4",
        "isGeneratedByCustomRule": false,
        "issue": "Memory limit is not defined",
        "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
        "resolve": "Set `resources.limits.memory` value",
        "remediation": {
          "kubernetes": "Set `resources.limits.memory` value",
          "terraform": "Set `resources.limits.memory` value"
        },
        "lineNumber": 330,
        "iacDescription": {
          "issue": "Memory limit is not defined",
          "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
          "resolve": "Set `resources.limits.memory` value"
        },
        "publicId": "SNYK-CC-K8S-4",
        "msg": "input.spec.template.spec.containers[orders].resources.limits.memory",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/memory-default-namespace/"
        ],
        "path": [
          "[DocId: 12]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[orders]",
          "resources",
          "limits",
          "memory"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-42",
        "title": "Container could be running with outdated image",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-42",
        "isGeneratedByCustomRule": false,
        "issue": "The image policy does not prevent image reuse",
        "impact": "The container may run with outdated or unauthorized image",
        "resolve": "Set `imagePullPolicy` attribute to `Always`",
        "remediation": {
          "kubernetes": "Set `imagePullPolicy` attribute to `Always`",
          "terraform": "Set `image_pull_policy` attribute to `Always"
        },
        "lineNumber": 330,
        "iacDescription": {
          "issue": "The image policy does not prevent image reuse",
          "impact": "The container may run with outdated or unauthorized image",
          "resolve": "Set `imagePullPolicy` attribute to `Always`"
        },
        "publicId": "SNYK-CC-K8S-42",
        "msg": "spec.template.spec.containers[orders].imagePullPolicy",
        "references": [
          "https://kubernetes.io/docs/concepts/containers/images/",
          "https://kubernetes.io/docs/concepts/configuration/overview/#container-images"
        ],
        "path": [
          "[DocId: 12]",
          "spec",
          "template",
          "spec",
          "containers[orders]",
          "imagePullPolicy"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-8",
        "title": "Container is running with writable root filesystem",
        "severity": "low",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-8",
        "isGeneratedByCustomRule": false,
        "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
        "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
          "terraform": "Set `security_context.read_only_root_filesystem` to `true`"
        },
        "lineNumber": 330,
        "iacDescription": {
          "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
          "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`"
        },
        "publicId": "SNYK-CC-K8S-8",
        "msg": "spec.template.spec.containers[orders].securityContext.readOnlyRootFilesystem",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 12]",
          "spec",
          "template",
          "spec",
          "containers[orders]",
          "securityContext",
          "readOnlyRootFilesystem"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-10",
        "title": "Container or Pod is running without root user control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-10",
        "isGeneratedByCustomRule": false,
        "issue": "Container or Pod is running without root user control",
        "impact": "Container or Pod could be running with full administrative privileges",
        "resolve": "Set `securityContext.runAsNonRoot` to `true`",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsNonRoot` to `true`",
          "terraform": "Set `security_context.run_as_non_root` to `true`"
        },
        "lineNumber": 330,
        "iacDescription": {
          "issue": "Container or Pod is running without root user control",
          "impact": "Container or Pod could be running with full administrative privileges",
          "resolve": "Set `securityContext.runAsNonRoot` to `true`"
        },
        "publicId": "SNYK-CC-K8S-10",
        "msg": "input.spec.template.spec.containers[orders].securityContext.runAsNonRoot",
        "description": "",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 12]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[orders]",
          "securityContext",
          "runAsNonRoot"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-11",
        "title": "Container's or Pod's  UID could clash with host's UID",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-11",
        "isGeneratedByCustomRule": false,
        "issue": "`runAsUser` value is set to low UID",
        "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
        "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
          "terraform": "Set `security_context.run_as_user` value to greater or equal than 10'000"
        },
        "lineNumber": 386,
        "iacDescription": {
          "issue": "`runAsUser` value is set to low UID",
          "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
          "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence"
        },
        "publicId": "SNYK-CC-K8S-11",
        "msg": "input.spec.template.spec.containers[payment].securityContext.runAsUser",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container",
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod",
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 14]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[payment]",
          "securityContext",
          "runAsUser"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-42",
        "title": "Container could be running with outdated image",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-42",
        "isGeneratedByCustomRule": false,
        "issue": "The image policy does not prevent image reuse",
        "impact": "The container may run with outdated or unauthorized image",
        "resolve": "Set `imagePullPolicy` attribute to `Always`",
        "remediation": {
          "kubernetes": "Set `imagePullPolicy` attribute to `Always`",
          "terraform": "Set `image_pull_policy` attribute to `Always"
        },
        "lineNumber": 386,
        "iacDescription": {
          "issue": "The image policy does not prevent image reuse",
          "impact": "The container may run with outdated or unauthorized image",
          "resolve": "Set `imagePullPolicy` attribute to `Always`"
        },
        "publicId": "SNYK-CC-K8S-42",
        "msg": "spec.template.spec.containers[payment].imagePullPolicy",
        "references": [
          "https://kubernetes.io/docs/concepts/containers/images/",
          "https://kubernetes.io/docs/concepts/configuration/overview/#container-images"
        ],
        "path": [
          "[DocId: 14]",
          "spec",
          "template",
          "spec",
          "containers[payment]",
          "imagePullPolicy"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-10",
        "title": "Container or Pod is running without root user control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-10",
        "isGeneratedByCustomRule": false,
        "issue": "Container or Pod is running without root user control",
        "impact": "Container or Pod could be running with full administrative privileges",
        "resolve": "Set `securityContext.runAsNonRoot` to `true`",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsNonRoot` to `true`",
          "terraform": "Set `security_context.run_as_non_root` to `true`"
        },
        "lineNumber": 386,
        "iacDescription": {
          "issue": "Container or Pod is running without root user control",
          "impact": "Container or Pod could be running with full administrative privileges",
          "resolve": "Set `securityContext.runAsNonRoot` to `true`"
        },
        "publicId": "SNYK-CC-K8S-10",
        "msg": "input.spec.template.spec.containers[payment].securityContext.runAsNonRoot",
        "description": "",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 14]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[payment]",
          "securityContext",
          "runAsNonRoot"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-6",
        "title": "Container does not drop all default capabilities",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-6",
        "isGeneratedByCustomRule": false,
        "issue": "All default capabilities are not explicitly dropped",
        "impact": "Containers are running with potentially unnecessary privileges",
        "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
        "remediation": {
          "kubernetes": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
          "terraform": "Add `ALL` to `spec.container.security_context.capabilities.drop` list, and add only required capabilities to `spec.container.security_context.capabilities.add`, ensuring it also does not contain `ALL`"
        },
        "lineNumber": 386,
        "iacDescription": {
          "issue": "All default capabilities are not explicitly dropped",
          "impact": "Containers are running with potentially unnecessary privileges",
          "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`"
        },
        "publicId": "SNYK-CC-K8S-6",
        "msg": "input.spec.template.spec.containers[payment].securityContext.capabilities.drop",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
          "https://linux-audit.com/linux-capabilities-hardening-linux-binaries-by-removing-setuid/"
        ],
        "path": [
          "[DocId: 14]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[payment]",
          "securityContext",
          "capabilities",
          "drop"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-9",
        "title": "Container is running without privilege escalation control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-9",
        "isGeneratedByCustomRule": false,
        "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
        "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
          "terraform": "Set `spec.container.security_context.allow_privilege_escalation` to `false`"
        },
        "lineNumber": 386,
        "iacDescription": {
          "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
          "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`"
        },
        "publicId": "SNYK-CC-K8S-9",
        "msg": "spec.template.spec.containers[payment].securityContext.allowPrivilegeEscalation",
        "references": [
          "https://www.kernel.org/doc/html/latest/userspace-api/no_new_privs.html"
        ],
        "path": [
          "[DocId: 14]",
          "spec",
          "template",
          "spec",
          "containers[payment]",
          "securityContext",
          "allowPrivilegeEscalation"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-41",
        "title": "Container is running without liveness probe",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-41",
        "isGeneratedByCustomRule": false,
        "issue": "Liveness probe is not defined",
        "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
        "resolve": "Add `livenessProbe` attribute",
        "remediation": {
          "kubernetes": "Add `livenessProbe` attribute",
          "terraform": "Add `liveness_probe` attribute"
        },
        "lineNumber": 386,
        "iacDescription": {
          "issue": "Liveness probe is not defined",
          "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
          "resolve": "Add `livenessProbe` attribute"
        },
        "publicId": "SNYK-CC-K8S-41",
        "msg": "spec.template.spec.containers[payment].livenessProbe",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/",
          "https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/",
          "https://cloud.google.com/blog/products/gcp/kubernetes-best-practices-setting-up-health-checks-with-readiness-and-liveness-probes"
        ],
        "path": [
          "[DocId: 14]",
          "spec",
          "template",
          "spec",
          "containers[payment]",
          "livenessProbe"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-4",
        "title": "Container is running without memory limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-4",
        "isGeneratedByCustomRule": false,
        "issue": "Memory limit is not defined",
        "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
        "resolve": "Set `resources.limits.memory` value",
        "remediation": {
          "kubernetes": "Set `resources.limits.memory` value",
          "terraform": "Set `resources.limits.memory` value"
        },
        "lineNumber": 386,
        "iacDescription": {
          "issue": "Memory limit is not defined",
          "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
          "resolve": "Set `resources.limits.memory` value"
        },
        "publicId": "SNYK-CC-K8S-4",
        "msg": "input.spec.template.spec.containers[payment].resources.limits.memory",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/memory-default-namespace/"
        ],
        "path": [
          "[DocId: 14]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[payment]",
          "resources",
          "limits",
          "memory"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-8",
        "title": "Container is running with writable root filesystem",
        "severity": "low",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-8",
        "isGeneratedByCustomRule": false,
        "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
        "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
          "terraform": "Set `security_context.read_only_root_filesystem` to `true`"
        },
        "lineNumber": 386,
        "iacDescription": {
          "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
          "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`"
        },
        "publicId": "SNYK-CC-K8S-8",
        "msg": "spec.template.spec.containers[payment].securityContext.readOnlyRootFilesystem",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 14]",
          "spec",
          "template",
          "spec",
          "containers[payment]",
          "securityContext",
          "readOnlyRootFilesystem"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-5",
        "title": "Container has no CPU limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-5",
        "isGeneratedByCustomRule": false,
        "issue": "Container has no CPU limit",
        "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
        "resolve": "Add `resources.limits.cpu` field with required CPU limit value",
        "remediation": {
          "kubernetes": "Add `resources.limits.cpu` field with required CPU limit value",
          "terraform": "Add `spec.container.resources.limits.cpu` field with required CPU limit value"
        },
        "lineNumber": 386,
        "iacDescription": {
          "issue": "Container has no CPU limit",
          "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
          "resolve": "Add `resources.limits.cpu` field with required CPU limit value"
        },
        "publicId": "SNYK-CC-K8S-5",
        "msg": "input.spec.template.spec.containers[payment].resources.limits.cpu",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-cpu-resource/",
          "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/cpu-default-namespace/",
          "https://github.com/kubernetes/design-proposals-archive/blob/8da1442ea29adccea40693357d04727127e045ed/node/resource-qos.md#compressible-resource-guaranteess"
        ],
        "path": [
          "[DocId: 14]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[payment]",
          "resources",
          "limits",
          "cpu"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-6",
        "title": "Container does not drop all default capabilities",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-6",
        "isGeneratedByCustomRule": false,
        "issue": "All default capabilities are not explicitly dropped",
        "impact": "Containers are running with potentially unnecessary privileges",
        "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
        "remediation": {
          "kubernetes": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
          "terraform": "Add `ALL` to `spec.container.security_context.capabilities.drop` list, and add only required capabilities to `spec.container.security_context.capabilities.add`, ensuring it also does not contain `ALL`"
        },
        "lineNumber": 429,
        "iacDescription": {
          "issue": "All default capabilities are not explicitly dropped",
          "impact": "Containers are running with potentially unnecessary privileges",
          "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`"
        },
        "publicId": "SNYK-CC-K8S-6",
        "msg": "input.spec.template.spec.containers[queue-master].securityContext.capabilities.drop",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
          "https://linux-audit.com/linux-capabilities-hardening-linux-binaries-by-removing-setuid/"
        ],
        "path": [
          "[DocId: 16]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[queue-master]",
          "securityContext",
          "capabilities",
          "drop"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-9",
        "title": "Container is running without privilege escalation control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-9",
        "isGeneratedByCustomRule": false,
        "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
        "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
          "terraform": "Set `spec.container.security_context.allow_privilege_escalation` to `false`"
        },
        "lineNumber": 429,
        "iacDescription": {
          "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
          "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`"
        },
        "publicId": "SNYK-CC-K8S-9",
        "msg": "spec.template.spec.containers[queue-master].securityContext.allowPrivilegeEscalation",
        "references": [
          "https://www.kernel.org/doc/html/latest/userspace-api/no_new_privs.html"
        ],
        "path": [
          "[DocId: 16]",
          "spec",
          "template",
          "spec",
          "containers[queue-master]",
          "securityContext",
          "allowPrivilegeEscalation"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-11",
        "title": "Container's or Pod's  UID could clash with host's UID",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-11",
        "isGeneratedByCustomRule": false,
        "issue": "`runAsUser` value is set to low UID",
        "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
        "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
          "terraform": "Set `security_context.run_as_user` value to greater or equal than 10'000"
        },
        "lineNumber": 429,
        "iacDescription": {
          "issue": "`runAsUser` value is set to low UID",
          "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
          "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence"
        },
        "publicId": "SNYK-CC-K8S-11",
        "msg": "input.spec.template.spec.containers[queue-master].securityContext.runAsUser",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container",
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod",
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 16]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[queue-master]",
          "securityContext",
          "runAsUser"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-41",
        "title": "Container is running without liveness probe",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-41",
        "isGeneratedByCustomRule": false,
        "issue": "Liveness probe is not defined",
        "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
        "resolve": "Add `livenessProbe` attribute",
        "remediation": {
          "kubernetes": "Add `livenessProbe` attribute",
          "terraform": "Add `liveness_probe` attribute"
        },
        "lineNumber": 429,
        "iacDescription": {
          "issue": "Liveness probe is not defined",
          "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
          "resolve": "Add `livenessProbe` attribute"
        },
        "publicId": "SNYK-CC-K8S-41",
        "msg": "spec.template.spec.containers[queue-master].livenessProbe",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/",
          "https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/",
          "https://cloud.google.com/blog/products/gcp/kubernetes-best-practices-setting-up-health-checks-with-readiness-and-liveness-probes"
        ],
        "path": [
          "[DocId: 16]",
          "spec",
          "template",
          "spec",
          "containers[queue-master]",
          "livenessProbe"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-5",
        "title": "Container has no CPU limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-5",
        "isGeneratedByCustomRule": false,
        "issue": "Container has no CPU limit",
        "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
        "resolve": "Add `resources.limits.cpu` field with required CPU limit value",
        "remediation": {
          "kubernetes": "Add `resources.limits.cpu` field with required CPU limit value",
          "terraform": "Add `spec.container.resources.limits.cpu` field with required CPU limit value"
        },
        "lineNumber": 429,
        "iacDescription": {
          "issue": "Container has no CPU limit",
          "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
          "resolve": "Add `resources.limits.cpu` field with required CPU limit value"
        },
        "publicId": "SNYK-CC-K8S-5",
        "msg": "input.spec.template.spec.containers[queue-master].resources.limits.cpu",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-cpu-resource/",
          "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/cpu-default-namespace/",
          "https://github.com/kubernetes/design-proposals-archive/blob/8da1442ea29adccea40693357d04727127e045ed/node/resource-qos.md#compressible-resource-guaranteess"
        ],
        "path": [
          "[DocId: 16]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[queue-master]",
          "resources",
          "limits",
          "cpu"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-10",
        "title": "Container or Pod is running without root user control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-10",
        "isGeneratedByCustomRule": false,
        "issue": "Container or Pod is running without root user control",
        "impact": "Container or Pod could be running with full administrative privileges",
        "resolve": "Set `securityContext.runAsNonRoot` to `true`",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsNonRoot` to `true`",
          "terraform": "Set `security_context.run_as_non_root` to `true`"
        },
        "lineNumber": 429,
        "iacDescription": {
          "issue": "Container or Pod is running without root user control",
          "impact": "Container or Pod could be running with full administrative privileges",
          "resolve": "Set `securityContext.runAsNonRoot` to `true`"
        },
        "publicId": "SNYK-CC-K8S-10",
        "msg": "input.spec.template.spec.containers[queue-master].securityContext.runAsNonRoot",
        "description": "",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 16]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[queue-master]",
          "securityContext",
          "runAsNonRoot"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-8",
        "title": "Container is running with writable root filesystem",
        "severity": "low",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-8",
        "isGeneratedByCustomRule": false,
        "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
        "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
          "terraform": "Set `security_context.read_only_root_filesystem` to `true`"
        },
        "lineNumber": 429,
        "iacDescription": {
          "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
          "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`"
        },
        "publicId": "SNYK-CC-K8S-8",
        "msg": "spec.template.spec.containers[queue-master].securityContext.readOnlyRootFilesystem",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 16]",
          "spec",
          "template",
          "spec",
          "containers[queue-master]",
          "securityContext",
          "readOnlyRootFilesystem"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-4",
        "title": "Container is running without memory limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-4",
        "isGeneratedByCustomRule": false,
        "issue": "Memory limit is not defined",
        "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
        "resolve": "Set `resources.limits.memory` value",
        "remediation": {
          "kubernetes": "Set `resources.limits.memory` value",
          "terraform": "Set `resources.limits.memory` value"
        },
        "lineNumber": 429,
        "iacDescription": {
          "issue": "Memory limit is not defined",
          "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
          "resolve": "Set `resources.limits.memory` value"
        },
        "publicId": "SNYK-CC-K8S-4",
        "msg": "input.spec.template.spec.containers[queue-master].resources.limits.memory",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/memory-default-namespace/"
        ],
        "path": [
          "[DocId: 16]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[queue-master]",
          "resources",
          "limits",
          "memory"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-42",
        "title": "Container could be running with outdated image",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-42",
        "isGeneratedByCustomRule": false,
        "issue": "The image policy does not prevent image reuse",
        "impact": "The container may run with outdated or unauthorized image",
        "resolve": "Set `imagePullPolicy` attribute to `Always`",
        "remediation": {
          "kubernetes": "Set `imagePullPolicy` attribute to `Always`",
          "terraform": "Set `image_pull_policy` attribute to `Always"
        },
        "lineNumber": 429,
        "iacDescription": {
          "issue": "The image policy does not prevent image reuse",
          "impact": "The container may run with outdated or unauthorized image",
          "resolve": "Set `imagePullPolicy` attribute to `Always`"
        },
        "publicId": "SNYK-CC-K8S-42",
        "msg": "spec.template.spec.containers[queue-master].imagePullPolicy",
        "references": [
          "https://kubernetes.io/docs/concepts/containers/images/",
          "https://kubernetes.io/docs/concepts/configuration/overview/#container-images"
        ],
        "path": [
          "[DocId: 16]",
          "spec",
          "template",
          "spec",
          "containers[queue-master]",
          "imagePullPolicy"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-8",
        "title": "Container is running with writable root filesystem",
        "severity": "low",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-8",
        "isGeneratedByCustomRule": false,
        "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
        "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
          "terraform": "Set `security_context.read_only_root_filesystem` to `true`"
        },
        "lineNumber": 471,
        "iacDescription": {
          "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
          "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`"
        },
        "publicId": "SNYK-CC-K8S-8",
        "msg": "spec.template.spec.containers[rabbitmq].securityContext.readOnlyRootFilesystem",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 18]",
          "spec",
          "template",
          "spec",
          "containers[rabbitmq]",
          "securityContext",
          "readOnlyRootFilesystem"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-4",
        "title": "Container is running without memory limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-4",
        "isGeneratedByCustomRule": false,
        "issue": "Memory limit is not defined",
        "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
        "resolve": "Set `resources.limits.memory` value",
        "remediation": {
          "kubernetes": "Set `resources.limits.memory` value",
          "terraform": "Set `resources.limits.memory` value"
        },
        "lineNumber": 471,
        "iacDescription": {
          "issue": "Memory limit is not defined",
          "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
          "resolve": "Set `resources.limits.memory` value"
        },
        "publicId": "SNYK-CC-K8S-4",
        "msg": "input.spec.template.spec.containers[rabbitmq].resources.limits.memory",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/memory-default-namespace/"
        ],
        "path": [
          "[DocId: 18]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[rabbitmq]",
          "resources",
          "limits",
          "memory"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-10",
        "title": "Container or Pod is running without root user control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-10",
        "isGeneratedByCustomRule": false,
        "issue": "Container or Pod is running without root user control",
        "impact": "Container or Pod could be running with full administrative privileges",
        "resolve": "Set `securityContext.runAsNonRoot` to `true`",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsNonRoot` to `true`",
          "terraform": "Set `security_context.run_as_non_root` to `true`"
        },
        "lineNumber": 471,
        "iacDescription": {
          "issue": "Container or Pod is running without root user control",
          "impact": "Container or Pod could be running with full administrative privileges",
          "resolve": "Set `securityContext.runAsNonRoot` to `true`"
        },
        "publicId": "SNYK-CC-K8S-10",
        "msg": "input.spec.template.spec.containers[rabbitmq].securityContext.runAsNonRoot",
        "description": "",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 18]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[rabbitmq]",
          "securityContext",
          "runAsNonRoot"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-42",
        "title": "Container could be running with outdated image",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-42",
        "isGeneratedByCustomRule": false,
        "issue": "The image policy does not prevent image reuse",
        "impact": "The container may run with outdated or unauthorized image",
        "resolve": "Set `imagePullPolicy` attribute to `Always`",
        "remediation": {
          "kubernetes": "Set `imagePullPolicy` attribute to `Always`",
          "terraform": "Set `image_pull_policy` attribute to `Always"
        },
        "lineNumber": 471,
        "iacDescription": {
          "issue": "The image policy does not prevent image reuse",
          "impact": "The container may run with outdated or unauthorized image",
          "resolve": "Set `imagePullPolicy` attribute to `Always`"
        },
        "publicId": "SNYK-CC-K8S-42",
        "msg": "spec.template.spec.containers[rabbitmq].imagePullPolicy",
        "references": [
          "https://kubernetes.io/docs/concepts/containers/images/",
          "https://kubernetes.io/docs/concepts/configuration/overview/#container-images"
        ],
        "path": [
          "[DocId: 18]",
          "spec",
          "template",
          "spec",
          "containers[rabbitmq]",
          "imagePullPolicy"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-5",
        "title": "Container has no CPU limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-5",
        "isGeneratedByCustomRule": false,
        "issue": "Container has no CPU limit",
        "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
        "resolve": "Add `resources.limits.cpu` field with required CPU limit value",
        "remediation": {
          "kubernetes": "Add `resources.limits.cpu` field with required CPU limit value",
          "terraform": "Add `spec.container.resources.limits.cpu` field with required CPU limit value"
        },
        "lineNumber": 471,
        "iacDescription": {
          "issue": "Container has no CPU limit",
          "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
          "resolve": "Add `resources.limits.cpu` field with required CPU limit value"
        },
        "publicId": "SNYK-CC-K8S-5",
        "msg": "input.spec.template.spec.containers[rabbitmq].resources.limits.cpu",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-cpu-resource/",
          "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/cpu-default-namespace/",
          "https://github.com/kubernetes/design-proposals-archive/blob/8da1442ea29adccea40693357d04727127e045ed/node/resource-qos.md#compressible-resource-guaranteess"
        ],
        "path": [
          "[DocId: 18]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[rabbitmq]",
          "resources",
          "limits",
          "cpu"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-9",
        "title": "Container is running without privilege escalation control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-9",
        "isGeneratedByCustomRule": false,
        "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
        "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
          "terraform": "Set `spec.container.security_context.allow_privilege_escalation` to `false`"
        },
        "lineNumber": 471,
        "iacDescription": {
          "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
          "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`"
        },
        "publicId": "SNYK-CC-K8S-9",
        "msg": "spec.template.spec.containers[rabbitmq].securityContext.allowPrivilegeEscalation",
        "references": [
          "https://www.kernel.org/doc/html/latest/userspace-api/no_new_privs.html"
        ],
        "path": [
          "[DocId: 18]",
          "spec",
          "template",
          "spec",
          "containers[rabbitmq]",
          "securityContext",
          "allowPrivilegeEscalation"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-11",
        "title": "Container's or Pod's  UID could clash with host's UID",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-11",
        "isGeneratedByCustomRule": false,
        "issue": "`runAsUser` value is set to low UID",
        "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
        "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
          "terraform": "Set `security_context.run_as_user` value to greater or equal than 10'000"
        },
        "lineNumber": 471,
        "iacDescription": {
          "issue": "`runAsUser` value is set to low UID",
          "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
          "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence"
        },
        "publicId": "SNYK-CC-K8S-11",
        "msg": "input.spec.template.spec.containers[rabbitmq].securityContext.runAsUser",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container",
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod",
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 18]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[rabbitmq]",
          "securityContext",
          "runAsUser"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-41",
        "title": "Container is running without liveness probe",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-41",
        "isGeneratedByCustomRule": false,
        "issue": "Liveness probe is not defined",
        "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
        "resolve": "Add `livenessProbe` attribute",
        "remediation": {
          "kubernetes": "Add `livenessProbe` attribute",
          "terraform": "Add `liveness_probe` attribute"
        },
        "lineNumber": 471,
        "iacDescription": {
          "issue": "Liveness probe is not defined",
          "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
          "resolve": "Add `livenessProbe` attribute"
        },
        "publicId": "SNYK-CC-K8S-41",
        "msg": "spec.template.spec.containers[rabbitmq].livenessProbe",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/",
          "https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/",
          "https://cloud.google.com/blog/products/gcp/kubernetes-best-practices-setting-up-health-checks-with-readiness-and-liveness-probes"
        ],
        "path": [
          "[DocId: 18]",
          "spec",
          "template",
          "spec",
          "containers[rabbitmq]",
          "livenessProbe"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-6",
        "title": "Container does not drop all default capabilities",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-6",
        "isGeneratedByCustomRule": false,
        "issue": "All default capabilities are not explicitly dropped",
        "impact": "Containers are running with potentially unnecessary privileges",
        "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
        "remediation": {
          "kubernetes": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
          "terraform": "Add `ALL` to `spec.container.security_context.capabilities.drop` list, and add only required capabilities to `spec.container.security_context.capabilities.add`, ensuring it also does not contain `ALL`"
        },
        "lineNumber": 471,
        "iacDescription": {
          "issue": "All default capabilities are not explicitly dropped",
          "impact": "Containers are running with potentially unnecessary privileges",
          "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`"
        },
        "publicId": "SNYK-CC-K8S-6",
        "msg": "input.spec.template.spec.containers[rabbitmq].securityContext.capabilities.drop",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
          "https://linux-audit.com/linux-capabilities-hardening-linux-binaries-by-removing-setuid/"
        ],
        "path": [
          "[DocId: 18]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[rabbitmq]",
          "securityContext",
          "capabilities",
          "drop"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-42",
        "title": "Container could be running with outdated image",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-42",
        "isGeneratedByCustomRule": false,
        "issue": "The image policy does not prevent image reuse",
        "impact": "The container may run with outdated or unauthorized image",
        "resolve": "Set `imagePullPolicy` attribute to `Always`",
        "remediation": {
          "kubernetes": "Set `imagePullPolicy` attribute to `Always`",
          "terraform": "Set `image_pull_policy` attribute to `Always"
        },
        "lineNumber": 514,
        "iacDescription": {
          "issue": "The image policy does not prevent image reuse",
          "impact": "The container may run with outdated or unauthorized image",
          "resolve": "Set `imagePullPolicy` attribute to `Always`"
        },
        "publicId": "SNYK-CC-K8S-42",
        "msg": "spec.template.spec.containers[shipping].imagePullPolicy",
        "references": [
          "https://kubernetes.io/docs/concepts/containers/images/",
          "https://kubernetes.io/docs/concepts/configuration/overview/#container-images"
        ],
        "path": [
          "[DocId: 20]",
          "spec",
          "template",
          "spec",
          "containers[shipping]",
          "imagePullPolicy"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-9",
        "title": "Container is running without privilege escalation control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-9",
        "isGeneratedByCustomRule": false,
        "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
        "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
          "terraform": "Set `spec.container.security_context.allow_privilege_escalation` to `false`"
        },
        "lineNumber": 514,
        "iacDescription": {
          "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
          "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`"
        },
        "publicId": "SNYK-CC-K8S-9",
        "msg": "spec.template.spec.containers[shipping].securityContext.allowPrivilegeEscalation",
        "references": [
          "https://www.kernel.org/doc/html/latest/userspace-api/no_new_privs.html"
        ],
        "path": [
          "[DocId: 20]",
          "spec",
          "template",
          "spec",
          "containers[shipping]",
          "securityContext",
          "allowPrivilegeEscalation"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-4",
        "title": "Container is running without memory limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-4",
        "isGeneratedByCustomRule": false,
        "issue": "Memory limit is not defined",
        "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
        "resolve": "Set `resources.limits.memory` value",
        "remediation": {
          "kubernetes": "Set `resources.limits.memory` value",
          "terraform": "Set `resources.limits.memory` value"
        },
        "lineNumber": 514,
        "iacDescription": {
          "issue": "Memory limit is not defined",
          "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
          "resolve": "Set `resources.limits.memory` value"
        },
        "publicId": "SNYK-CC-K8S-4",
        "msg": "input.spec.template.spec.containers[shipping].resources.limits.memory",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/memory-default-namespace/"
        ],
        "path": [
          "[DocId: 20]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[shipping]",
          "resources",
          "limits",
          "memory"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-10",
        "title": "Container or Pod is running without root user control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-10",
        "isGeneratedByCustomRule": false,
        "issue": "Container or Pod is running without root user control",
        "impact": "Container or Pod could be running with full administrative privileges",
        "resolve": "Set `securityContext.runAsNonRoot` to `true`",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsNonRoot` to `true`",
          "terraform": "Set `security_context.run_as_non_root` to `true`"
        },
        "lineNumber": 514,
        "iacDescription": {
          "issue": "Container or Pod is running without root user control",
          "impact": "Container or Pod could be running with full administrative privileges",
          "resolve": "Set `securityContext.runAsNonRoot` to `true`"
        },
        "publicId": "SNYK-CC-K8S-10",
        "msg": "input.spec.template.spec.containers[shipping].securityContext.runAsNonRoot",
        "description": "",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 20]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[shipping]",
          "securityContext",
          "runAsNonRoot"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-41",
        "title": "Container is running without liveness probe",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-41",
        "isGeneratedByCustomRule": false,
        "issue": "Liveness probe is not defined",
        "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
        "resolve": "Add `livenessProbe` attribute",
        "remediation": {
          "kubernetes": "Add `livenessProbe` attribute",
          "terraform": "Add `liveness_probe` attribute"
        },
        "lineNumber": 514,
        "iacDescription": {
          "issue": "Liveness probe is not defined",
          "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
          "resolve": "Add `livenessProbe` attribute"
        },
        "publicId": "SNYK-CC-K8S-41",
        "msg": "spec.template.spec.containers[shipping].livenessProbe",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/",
          "https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/",
          "https://cloud.google.com/blog/products/gcp/kubernetes-best-practices-setting-up-health-checks-with-readiness-and-liveness-probes"
        ],
        "path": [
          "[DocId: 20]",
          "spec",
          "template",
          "spec",
          "containers[shipping]",
          "livenessProbe"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-8",
        "title": "Container is running with writable root filesystem",
        "severity": "low",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-8",
        "isGeneratedByCustomRule": false,
        "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
        "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
          "terraform": "Set `security_context.read_only_root_filesystem` to `true`"
        },
        "lineNumber": 514,
        "iacDescription": {
          "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
          "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`"
        },
        "publicId": "SNYK-CC-K8S-8",
        "msg": "spec.template.spec.containers[shipping].securityContext.readOnlyRootFilesystem",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 20]",
          "spec",
          "template",
          "spec",
          "containers[shipping]",
          "securityContext",
          "readOnlyRootFilesystem"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-5",
        "title": "Container has no CPU limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-5",
        "isGeneratedByCustomRule": false,
        "issue": "Container has no CPU limit",
        "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
        "resolve": "Add `resources.limits.cpu` field with required CPU limit value",
        "remediation": {
          "kubernetes": "Add `resources.limits.cpu` field with required CPU limit value",
          "terraform": "Add `spec.container.resources.limits.cpu` field with required CPU limit value"
        },
        "lineNumber": 514,
        "iacDescription": {
          "issue": "Container has no CPU limit",
          "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
          "resolve": "Add `resources.limits.cpu` field with required CPU limit value"
        },
        "publicId": "SNYK-CC-K8S-5",
        "msg": "input.spec.template.spec.containers[shipping].resources.limits.cpu",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-cpu-resource/",
          "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/cpu-default-namespace/",
          "https://github.com/kubernetes/design-proposals-archive/blob/8da1442ea29adccea40693357d04727127e045ed/node/resource-qos.md#compressible-resource-guaranteess"
        ],
        "path": [
          "[DocId: 20]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[shipping]",
          "resources",
          "limits",
          "cpu"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-11",
        "title": "Container's or Pod's  UID could clash with host's UID",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-11",
        "isGeneratedByCustomRule": false,
        "issue": "`runAsUser` value is set to low UID",
        "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
        "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
          "terraform": "Set `security_context.run_as_user` value to greater or equal than 10'000"
        },
        "lineNumber": 514,
        "iacDescription": {
          "issue": "`runAsUser` value is set to low UID",
          "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
          "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence"
        },
        "publicId": "SNYK-CC-K8S-11",
        "msg": "input.spec.template.spec.containers[shipping].securityContext.runAsUser",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container",
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod",
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 20]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[shipping]",
          "securityContext",
          "runAsUser"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-6",
        "title": "Container does not drop all default capabilities",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-6",
        "isGeneratedByCustomRule": false,
        "issue": "All default capabilities are not explicitly dropped",
        "impact": "Containers are running with potentially unnecessary privileges",
        "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
        "remediation": {
          "kubernetes": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
          "terraform": "Add `ALL` to `spec.container.security_context.capabilities.drop` list, and add only required capabilities to `spec.container.security_context.capabilities.add`, ensuring it also does not contain `ALL`"
        },
        "lineNumber": 514,
        "iacDescription": {
          "issue": "All default capabilities are not explicitly dropped",
          "impact": "Containers are running with potentially unnecessary privileges",
          "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`"
        },
        "publicId": "SNYK-CC-K8S-6",
        "msg": "input.spec.template.spec.containers[shipping].securityContext.capabilities.drop",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
          "https://linux-audit.com/linux-capabilities-hardening-linux-binaries-by-removing-setuid/"
        ],
        "path": [
          "[DocId: 20]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[shipping]",
          "securityContext",
          "capabilities",
          "drop"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-4",
        "title": "Container is running without memory limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-4",
        "isGeneratedByCustomRule": false,
        "issue": "Memory limit is not defined",
        "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
        "resolve": "Set `resources.limits.memory` value",
        "remediation": {
          "kubernetes": "Set `resources.limits.memory` value",
          "terraform": "Set `resources.limits.memory` value"
        },
        "lineNumber": 569,
        "iacDescription": {
          "issue": "Memory limit is not defined",
          "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
          "resolve": "Set `resources.limits.memory` value"
        },
        "publicId": "SNYK-CC-K8S-4",
        "msg": "input.spec.template.spec.containers[user-db].resources.limits.memory",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/memory-default-namespace/"
        ],
        "path": [
          "[DocId: 22]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[user-db]",
          "resources",
          "limits",
          "memory"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-10",
        "title": "Container or Pod is running without root user control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-10",
        "isGeneratedByCustomRule": false,
        "issue": "Container or Pod is running without root user control",
        "impact": "Container or Pod could be running with full administrative privileges",
        "resolve": "Set `securityContext.runAsNonRoot` to `true`",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsNonRoot` to `true`",
          "terraform": "Set `security_context.run_as_non_root` to `true`"
        },
        "lineNumber": 569,
        "iacDescription": {
          "issue": "Container or Pod is running without root user control",
          "impact": "Container or Pod could be running with full administrative privileges",
          "resolve": "Set `securityContext.runAsNonRoot` to `true`"
        },
        "publicId": "SNYK-CC-K8S-10",
        "msg": "input.spec.template.spec.containers[user-db].securityContext.runAsNonRoot",
        "description": "",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 22]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[user-db]",
          "securityContext",
          "runAsNonRoot"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-8",
        "title": "Container is running with writable root filesystem",
        "severity": "low",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-8",
        "isGeneratedByCustomRule": false,
        "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
        "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
          "terraform": "Set `security_context.read_only_root_filesystem` to `true`"
        },
        "lineNumber": 569,
        "iacDescription": {
          "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
          "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`"
        },
        "publicId": "SNYK-CC-K8S-8",
        "msg": "spec.template.spec.containers[user-db].securityContext.readOnlyRootFilesystem",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 22]",
          "spec",
          "template",
          "spec",
          "containers[user-db]",
          "securityContext",
          "readOnlyRootFilesystem"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-6",
        "title": "Container does not drop all default capabilities",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-6",
        "isGeneratedByCustomRule": false,
        "issue": "All default capabilities are not explicitly dropped",
        "impact": "Containers are running with potentially unnecessary privileges",
        "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
        "remediation": {
          "kubernetes": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
          "terraform": "Add `ALL` to `spec.container.security_context.capabilities.drop` list, and add only required capabilities to `spec.container.security_context.capabilities.add`, ensuring it also does not contain `ALL`"
        },
        "lineNumber": 569,
        "iacDescription": {
          "issue": "All default capabilities are not explicitly dropped",
          "impact": "Containers are running with potentially unnecessary privileges",
          "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`"
        },
        "publicId": "SNYK-CC-K8S-6",
        "msg": "input.spec.template.spec.containers[user-db].securityContext.capabilities.drop",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
          "https://linux-audit.com/linux-capabilities-hardening-linux-binaries-by-removing-setuid/"
        ],
        "path": [
          "[DocId: 22]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[user-db]",
          "securityContext",
          "capabilities",
          "drop"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-11",
        "title": "Container's or Pod's  UID could clash with host's UID",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-11",
        "isGeneratedByCustomRule": false,
        "issue": "`runAsUser` value is set to low UID",
        "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
        "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
          "terraform": "Set `security_context.run_as_user` value to greater or equal than 10'000"
        },
        "lineNumber": 569,
        "iacDescription": {
          "issue": "`runAsUser` value is set to low UID",
          "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
          "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence"
        },
        "publicId": "SNYK-CC-K8S-11",
        "msg": "input.spec.template.spec.containers[user-db].securityContext.runAsUser",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container",
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod",
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 22]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[user-db]",
          "securityContext",
          "runAsUser"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-41",
        "title": "Container is running without liveness probe",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-41",
        "isGeneratedByCustomRule": false,
        "issue": "Liveness probe is not defined",
        "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
        "resolve": "Add `livenessProbe` attribute",
        "remediation": {
          "kubernetes": "Add `livenessProbe` attribute",
          "terraform": "Add `liveness_probe` attribute"
        },
        "lineNumber": 569,
        "iacDescription": {
          "issue": "Liveness probe is not defined",
          "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
          "resolve": "Add `livenessProbe` attribute"
        },
        "publicId": "SNYK-CC-K8S-41",
        "msg": "spec.template.spec.containers[user-db].livenessProbe",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/",
          "https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/",
          "https://cloud.google.com/blog/products/gcp/kubernetes-best-practices-setting-up-health-checks-with-readiness-and-liveness-probes"
        ],
        "path": [
          "[DocId: 22]",
          "spec",
          "template",
          "spec",
          "containers[user-db]",
          "livenessProbe"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-5",
        "title": "Container has no CPU limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-5",
        "isGeneratedByCustomRule": false,
        "issue": "Container has no CPU limit",
        "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
        "resolve": "Add `resources.limits.cpu` field with required CPU limit value",
        "remediation": {
          "kubernetes": "Add `resources.limits.cpu` field with required CPU limit value",
          "terraform": "Add `spec.container.resources.limits.cpu` field with required CPU limit value"
        },
        "lineNumber": 569,
        "iacDescription": {
          "issue": "Container has no CPU limit",
          "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
          "resolve": "Add `resources.limits.cpu` field with required CPU limit value"
        },
        "publicId": "SNYK-CC-K8S-5",
        "msg": "input.spec.template.spec.containers[user-db].resources.limits.cpu",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-cpu-resource/",
          "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/cpu-default-namespace/",
          "https://github.com/kubernetes/design-proposals-archive/blob/8da1442ea29adccea40693357d04727127e045ed/node/resource-qos.md#compressible-resource-guaranteess"
        ],
        "path": [
          "[DocId: 22]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[user-db]",
          "resources",
          "limits",
          "cpu"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-42",
        "title": "Container could be running with outdated image",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-42",
        "isGeneratedByCustomRule": false,
        "issue": "The image policy does not prevent image reuse",
        "impact": "The container may run with outdated or unauthorized image",
        "resolve": "Set `imagePullPolicy` attribute to `Always`",
        "remediation": {
          "kubernetes": "Set `imagePullPolicy` attribute to `Always`",
          "terraform": "Set `image_pull_policy` attribute to `Always"
        },
        "lineNumber": 569,
        "iacDescription": {
          "issue": "The image policy does not prevent image reuse",
          "impact": "The container may run with outdated or unauthorized image",
          "resolve": "Set `imagePullPolicy` attribute to `Always`"
        },
        "publicId": "SNYK-CC-K8S-42",
        "msg": "spec.template.spec.containers[user-db].imagePullPolicy",
        "references": [
          "https://kubernetes.io/docs/concepts/containers/images/",
          "https://kubernetes.io/docs/concepts/configuration/overview/#container-images"
        ],
        "path": [
          "[DocId: 22]",
          "spec",
          "template",
          "spec",
          "containers[user-db]",
          "imagePullPolicy"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-9",
        "title": "Container is running without privilege escalation control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-9",
        "isGeneratedByCustomRule": false,
        "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
        "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
          "terraform": "Set `spec.container.security_context.allow_privilege_escalation` to `false`"
        },
        "lineNumber": 569,
        "iacDescription": {
          "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
          "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`"
        },
        "publicId": "SNYK-CC-K8S-9",
        "msg": "spec.template.spec.containers[user-db].securityContext.allowPrivilegeEscalation",
        "references": [
          "https://www.kernel.org/doc/html/latest/userspace-api/no_new_privs.html"
        ],
        "path": [
          "[DocId: 22]",
          "spec",
          "template",
          "spec",
          "containers[user-db]",
          "securityContext",
          "allowPrivilegeEscalation"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-10",
        "title": "Container or Pod is running without root user control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-10",
        "isGeneratedByCustomRule": false,
        "issue": "Container or Pod is running without root user control",
        "impact": "Container or Pod could be running with full administrative privileges",
        "resolve": "Set `securityContext.runAsNonRoot` to `true`",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsNonRoot` to `true`",
          "terraform": "Set `security_context.run_as_non_root` to `true`"
        },
        "lineNumber": 631,
        "iacDescription": {
          "issue": "Container or Pod is running without root user control",
          "impact": "Container or Pod could be running with full administrative privileges",
          "resolve": "Set `securityContext.runAsNonRoot` to `true`"
        },
        "publicId": "SNYK-CC-K8S-10",
        "msg": "input.spec.template.spec.containers[user].securityContext.runAsNonRoot",
        "description": "",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 24]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[user]",
          "securityContext",
          "runAsNonRoot"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-6",
        "title": "Container does not drop all default capabilities",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-6",
        "isGeneratedByCustomRule": false,
        "issue": "All default capabilities are not explicitly dropped",
        "impact": "Containers are running with potentially unnecessary privileges",
        "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
        "remediation": {
          "kubernetes": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
          "terraform": "Add `ALL` to `spec.container.security_context.capabilities.drop` list, and add only required capabilities to `spec.container.security_context.capabilities.add`, ensuring it also does not contain `ALL`"
        },
        "lineNumber": 631,
        "iacDescription": {
          "issue": "All default capabilities are not explicitly dropped",
          "impact": "Containers are running with potentially unnecessary privileges",
          "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`"
        },
        "publicId": "SNYK-CC-K8S-6",
        "msg": "input.spec.template.spec.containers[user].securityContext.capabilities.drop",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
          "https://linux-audit.com/linux-capabilities-hardening-linux-binaries-by-removing-setuid/"
        ],
        "path": [
          "[DocId: 24]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[user]",
          "securityContext",
          "capabilities",
          "drop"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-41",
        "title": "Container is running without liveness probe",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-41",
        "isGeneratedByCustomRule": false,
        "issue": "Liveness probe is not defined",
        "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
        "resolve": "Add `livenessProbe` attribute",
        "remediation": {
          "kubernetes": "Add `livenessProbe` attribute",
          "terraform": "Add `liveness_probe` attribute"
        },
        "lineNumber": 631,
        "iacDescription": {
          "issue": "Liveness probe is not defined",
          "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
          "resolve": "Add `livenessProbe` attribute"
        },
        "publicId": "SNYK-CC-K8S-41",
        "msg": "spec.template.spec.containers[user].livenessProbe",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/",
          "https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/",
          "https://cloud.google.com/blog/products/gcp/kubernetes-best-practices-setting-up-health-checks-with-readiness-and-liveness-probes"
        ],
        "path": [
          "[DocId: 24]",
          "spec",
          "template",
          "spec",
          "containers[user]",
          "livenessProbe"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-8",
        "title": "Container is running with writable root filesystem",
        "severity": "low",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-8",
        "isGeneratedByCustomRule": false,
        "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
        "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
          "terraform": "Set `security_context.read_only_root_filesystem` to `true`"
        },
        "lineNumber": 631,
        "iacDescription": {
          "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
          "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`"
        },
        "publicId": "SNYK-CC-K8S-8",
        "msg": "spec.template.spec.containers[user].securityContext.readOnlyRootFilesystem",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 24]",
          "spec",
          "template",
          "spec",
          "containers[user]",
          "securityContext",
          "readOnlyRootFilesystem"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-4",
        "title": "Container is running without memory limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-4",
        "isGeneratedByCustomRule": false,
        "issue": "Memory limit is not defined",
        "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
        "resolve": "Set `resources.limits.memory` value",
        "remediation": {
          "kubernetes": "Set `resources.limits.memory` value",
          "terraform": "Set `resources.limits.memory` value"
        },
        "lineNumber": 631,
        "iacDescription": {
          "issue": "Memory limit is not defined",
          "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
          "resolve": "Set `resources.limits.memory` value"
        },
        "publicId": "SNYK-CC-K8S-4",
        "msg": "input.spec.template.spec.containers[user].resources.limits.memory",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/memory-default-namespace/"
        ],
        "path": [
          "[DocId: 24]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[user]",
          "resources",
          "limits",
          "memory"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-42",
        "title": "Container could be running with outdated image",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-42",
        "isGeneratedByCustomRule": false,
        "issue": "The image policy does not prevent image reuse",
        "impact": "The container may run with outdated or unauthorized image",
        "resolve": "Set `imagePullPolicy` attribute to `Always`",
        "remediation": {
          "kubernetes": "Set `imagePullPolicy` attribute to `Always`",
          "terraform": "Set `image_pull_policy` attribute to `Always"
        },
        "lineNumber": 631,
        "iacDescription": {
          "issue": "The image policy does not prevent image reuse",
          "impact": "The container may run with outdated or unauthorized image",
          "resolve": "Set `imagePullPolicy` attribute to `Always`"
        },
        "publicId": "SNYK-CC-K8S-42",
        "msg": "spec.template.spec.containers[user].imagePullPolicy",
        "references": [
          "https://kubernetes.io/docs/concepts/containers/images/",
          "https://kubernetes.io/docs/concepts/configuration/overview/#container-images"
        ],
        "path": [
          "[DocId: 24]",
          "spec",
          "template",
          "spec",
          "containers[user]",
          "imagePullPolicy"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-9",
        "title": "Container is running without privilege escalation control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-9",
        "isGeneratedByCustomRule": false,
        "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
        "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
          "terraform": "Set `spec.container.security_context.allow_privilege_escalation` to `false`"
        },
        "lineNumber": 631,
        "iacDescription": {
          "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
          "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`"
        },
        "publicId": "SNYK-CC-K8S-9",
        "msg": "spec.template.spec.containers[user].securityContext.allowPrivilegeEscalation",
        "references": [
          "https://www.kernel.org/doc/html/latest/userspace-api/no_new_privs.html"
        ],
        "path": [
          "[DocId: 24]",
          "spec",
          "template",
          "spec",
          "containers[user]",
          "securityContext",
          "allowPrivilegeEscalation"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-11",
        "title": "Container's or Pod's  UID could clash with host's UID",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-11",
        "isGeneratedByCustomRule": false,
        "issue": "`runAsUser` value is set to low UID",
        "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
        "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
          "terraform": "Set `security_context.run_as_user` value to greater or equal than 10'000"
        },
        "lineNumber": 631,
        "iacDescription": {
          "issue": "`runAsUser` value is set to low UID",
          "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
          "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence"
        },
        "publicId": "SNYK-CC-K8S-11",
        "msg": "input.spec.template.spec.containers[user].securityContext.runAsUser",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container",
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod",
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 24]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[user]",
          "securityContext",
          "runAsUser"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-5",
        "title": "Container has no CPU limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-5",
        "isGeneratedByCustomRule": false,
        "issue": "Container has no CPU limit",
        "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
        "resolve": "Add `resources.limits.cpu` field with required CPU limit value",
        "remediation": {
          "kubernetes": "Add `resources.limits.cpu` field with required CPU limit value",
          "terraform": "Add `spec.container.resources.limits.cpu` field with required CPU limit value"
        },
        "lineNumber": 631,
        "iacDescription": {
          "issue": "Container has no CPU limit",
          "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
          "resolve": "Add `resources.limits.cpu` field with required CPU limit value"
        },
        "publicId": "SNYK-CC-K8S-5",
        "msg": "input.spec.template.spec.containers[user].resources.limits.cpu",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-cpu-resource/",
          "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/cpu-default-namespace/",
          "https://github.com/kubernetes/design-proposals-archive/blob/8da1442ea29adccea40693357d04727127e045ed/node/resource-qos.md#compressible-resource-guaranteess"
        ],
        "path": [
          "[DocId: 24]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[user]",
          "resources",
          "limits",
          "cpu"
        ],
        "compliance": []
      }
    ]
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_performance_monitoring/files/cluster-monitoring-configmap.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_performance_monitoring/files/cluster-monitoring-configmap.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_performance_monitoring/files/cluster_logging_loki.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_performance_monitoring/files/cluster_logging_loki.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_performance_monitoring/files/crunchy-instance.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_performance_monitoring/files/crunchy-instance.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_performance_monitoring/files/knative-config-deployment.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_performance_monitoring/files/knative-config-deployment.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_performance_monitoring/files/knative-config-gc.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_performance_monitoring/files/knative-config-gc.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_performance_monitoring/files/loki_obc.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_performance_monitoring/files/loki_obc.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_performance_monitoring/files/noobaa.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_performance_monitoring/files/noobaa.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_performance_monitoring/files/noobaa_bucketclass.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_performance_monitoring/files/noobaa_bucketclass.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_performance_monitoring/files/noobaa_role.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_performance_monitoring/files/noobaa_role.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_performance_monitoring/files/registry-pull-role.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_performance_monitoring/files/registry-pull-role.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": false,
    "infrastructureAsCodeIssues": [
      {
        "id": "SNYK-CC-K8S-47",
        "title": "Role or ClusterRole with dangerous permissions",
        "severity": "high",
        "isIgnored": false,
        "subType": "ClusterRole",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-47",
        "isGeneratedByCustomRule": false,
        "issue": "A role was found using a dangerous permissions",
        "impact": "Using this role grants dangerous permissions. For a ClusterRole this would be considered high severity.",
        "resolve": "Consider removing these permissions",
        "remediation": {
          "kubernetes": "Consider removing these permissions",
          "terraform": "Consider removing these permissions"
        },
        "lineNumber": 9,
        "iacDescription": {
          "issue": "A role was found using a dangerous permissions",
          "impact": "Using this role grants dangerous permissions. For a ClusterRole this would be considered high severity.",
          "resolve": "Consider removing these permissions"
        },
        "publicId": "SNYK-CC-K8S-47",
        "msg": "rules[0].resources",
        "references": [
          "https://kubernetes.io/docs/reference/access-authn-authz/rbac/"
        ],
        "path": [
          "[DocId: 0]",
          "rules[0]",
          "resources"
        ],
        "compliance": []
      }
    ]
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_performance_monitoring/files/self-provisioner.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_performance_monitoring/files/self-provisioner.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_performance_monitoring/files/serverless_role.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_performance_monitoring/files/serverless_role.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_performance_monitoring/files/sonatype-nexus.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_performance_monitoring/files/sonatype-nexus.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_performance_monitoring/files/tekton_role.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_performance_monitoring/files/tekton_role.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": false,
    "infrastructureAsCodeIssues": [
      {
        "id": "SNYK-CC-K8S-47",
        "title": "Role or ClusterRole with dangerous permissions",
        "severity": "high",
        "isIgnored": false,
        "subType": "ClusterRole",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-47",
        "isGeneratedByCustomRule": false,
        "issue": "A role was found using a dangerous permissions",
        "impact": "Using this role grants dangerous permissions. For a ClusterRole this would be considered high severity.",
        "resolve": "Consider removing these permissions",
        "remediation": {
          "kubernetes": "Consider removing these permissions",
          "terraform": "Consider removing these permissions"
        },
        "lineNumber": 26,
        "iacDescription": {
          "issue": "A role was found using a dangerous permissions",
          "impact": "Using this role grants dangerous permissions. For a ClusterRole this would be considered high severity.",
          "resolve": "Consider removing these permissions"
        },
        "publicId": "SNYK-CC-K8S-47",
        "msg": "rules[1].resources",
        "references": [
          "https://kubernetes.io/docs/reference/access-authn-authz/rbac/"
        ],
        "path": [
          "[DocId: 0]",
          "rules[1]",
          "resources"
        ],
        "compliance": []
      }
    ]
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_plus/files/argocd-ocp-tools-project.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_plus/files/argocd-ocp-tools-project.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_plus/files/argocd-rbac.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_plus/files/argocd-rbac.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": false,
    "infrastructureAsCodeIssues": [
      {
        "id": "SNYK-CC-K8S-46",
        "title": "RoleBinding or ClusterRoleBinding is using a pre-defined role",
        "severity": "high",
        "isIgnored": false,
        "subType": "ClusterRoleBinding",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-46",
        "isGeneratedByCustomRule": false,
        "issue": "A RoleBinding or ClusterRoleBinding was found using one of the default user facing roles, `cluster-admin`, `admin`, `edit` or `view`.",
        "impact": "Using a default user facing role may be overly permissive. For a ClusterRoleBinding this would be considered high severity.",
        "resolve": "Update roleRef.name to a specific role name with only the necessary permissions",
        "remediation": {
          "kubernetes": "Update roleRef.name to a specific role name with only the necessary permissions"
        },
        "lineNumber": 11,
        "iacDescription": {
          "issue": "A RoleBinding or ClusterRoleBinding was found using one of the default user facing roles, `cluster-admin`, `admin`, `edit` or `view`.",
          "impact": "Using a default user facing role may be overly permissive. For a ClusterRoleBinding this would be considered high severity.",
          "resolve": "Update roleRef.name to a specific role name with only the necessary permissions"
        },
        "publicId": "SNYK-CC-K8S-46",
        "msg": "roleRef.name",
        "references": [
          "https://kubernetes.io/docs/reference/access-authn-authz/rbac/"
        ],
        "path": [
          "[DocId: 0]",
          "roleRef",
          "name"
        ],
        "compliance": []
      }
    ]
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_plus/files/acm/deploy-acm.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_plus/files/acm/deploy-acm.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_plus/files/acm/mch/acm-mch-wait-finish-job.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_plus/files/acm/mch/acm-mch-wait-finish-job.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": false,
    "infrastructureAsCodeIssues": [
      {
        "id": "SNYK-CC-K8S-4",
        "title": "Container is running without memory limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-4",
        "isGeneratedByCustomRule": false,
        "issue": "Memory limit is not defined",
        "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
        "resolve": "Set `resources.limits.memory` value",
        "remediation": {
          "kubernetes": "Set `resources.limits.memory` value",
          "terraform": "Set `resources.limits.memory` value"
        },
        "lineNumber": 17,
        "iacDescription": {
          "issue": "Memory limit is not defined",
          "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
          "resolve": "Set `resources.limits.memory` value"
        },
        "publicId": "SNYK-CC-K8S-4",
        "msg": "input.spec.template.spec.containers[acm-mch-wait-job].resources.limits.memory",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/memory-default-namespace/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[acm-mch-wait-job]",
          "resources",
          "limits",
          "memory"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-8",
        "title": "Container is running with writable root filesystem",
        "severity": "low",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-8",
        "isGeneratedByCustomRule": false,
        "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
        "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
          "terraform": "Set `security_context.read_only_root_filesystem` to `true`"
        },
        "lineNumber": 17,
        "iacDescription": {
          "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
          "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`"
        },
        "publicId": "SNYK-CC-K8S-8",
        "msg": "spec.template.spec.containers[acm-mch-wait-job].securityContext.readOnlyRootFilesystem",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "containers[acm-mch-wait-job]",
          "securityContext",
          "readOnlyRootFilesystem"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-5",
        "title": "Container has no CPU limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-5",
        "isGeneratedByCustomRule": false,
        "issue": "Container has no CPU limit",
        "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
        "resolve": "Add `resources.limits.cpu` field with required CPU limit value",
        "remediation": {
          "kubernetes": "Add `resources.limits.cpu` field with required CPU limit value",
          "terraform": "Add `spec.container.resources.limits.cpu` field with required CPU limit value"
        },
        "lineNumber": 17,
        "iacDescription": {
          "issue": "Container has no CPU limit",
          "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
          "resolve": "Add `resources.limits.cpu` field with required CPU limit value"
        },
        "publicId": "SNYK-CC-K8S-5",
        "msg": "input.spec.template.spec.containers[acm-mch-wait-job].resources.limits.cpu",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-cpu-resource/",
          "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/cpu-default-namespace/",
          "https://github.com/kubernetes/design-proposals-archive/blob/8da1442ea29adccea40693357d04727127e045ed/node/resource-qos.md#compressible-resource-guaranteess"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[acm-mch-wait-job]",
          "resources",
          "limits",
          "cpu"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-11",
        "title": "Container's or Pod's  UID could clash with host's UID",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-11",
        "isGeneratedByCustomRule": false,
        "issue": "`runAsUser` value is set to low UID",
        "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
        "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
          "terraform": "Set `security_context.run_as_user` value to greater or equal than 10'000"
        },
        "lineNumber": 17,
        "iacDescription": {
          "issue": "`runAsUser` value is set to low UID",
          "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
          "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence"
        },
        "publicId": "SNYK-CC-K8S-11",
        "msg": "input.spec.template.spec.containers[acm-mch-wait-job].securityContext.runAsUser",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container",
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod",
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[acm-mch-wait-job]",
          "securityContext",
          "runAsUser"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-10",
        "title": "Container or Pod is running without root user control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-10",
        "isGeneratedByCustomRule": false,
        "issue": "Container or Pod is running without root user control",
        "impact": "Container or Pod could be running with full administrative privileges",
        "resolve": "Set `securityContext.runAsNonRoot` to `true`",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsNonRoot` to `true`",
          "terraform": "Set `security_context.run_as_non_root` to `true`"
        },
        "lineNumber": 17,
        "iacDescription": {
          "issue": "Container or Pod is running without root user control",
          "impact": "Container or Pod could be running with full administrative privileges",
          "resolve": "Set `securityContext.runAsNonRoot` to `true`"
        },
        "publicId": "SNYK-CC-K8S-10",
        "msg": "input.spec.template.spec.containers[acm-mch-wait-job].securityContext.runAsNonRoot",
        "description": "",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[acm-mch-wait-job]",
          "securityContext",
          "runAsNonRoot"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-6",
        "title": "Container does not drop all default capabilities",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-6",
        "isGeneratedByCustomRule": false,
        "issue": "All default capabilities are not explicitly dropped",
        "impact": "Containers are running with potentially unnecessary privileges",
        "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
        "remediation": {
          "kubernetes": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
          "terraform": "Add `ALL` to `spec.container.security_context.capabilities.drop` list, and add only required capabilities to `spec.container.security_context.capabilities.add`, ensuring it also does not contain `ALL`"
        },
        "lineNumber": 17,
        "iacDescription": {
          "issue": "All default capabilities are not explicitly dropped",
          "impact": "Containers are running with potentially unnecessary privileges",
          "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`"
        },
        "publicId": "SNYK-CC-K8S-6",
        "msg": "input.spec.template.spec.containers[acm-mch-wait-job].securityContext.capabilities.drop",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
          "https://linux-audit.com/linux-capabilities-hardening-linux-binaries-by-removing-setuid/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[acm-mch-wait-job]",
          "securityContext",
          "capabilities",
          "drop"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-9",
        "title": "Container is running without privilege escalation control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-9",
        "isGeneratedByCustomRule": false,
        "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
        "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
          "terraform": "Set `spec.container.security_context.allow_privilege_escalation` to `false`"
        },
        "lineNumber": 17,
        "iacDescription": {
          "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
          "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`"
        },
        "publicId": "SNYK-CC-K8S-9",
        "msg": "spec.template.spec.containers[acm-mch-wait-job].securityContext.allowPrivilegeEscalation",
        "references": [
          "https://www.kernel.org/doc/html/latest/userspace-api/no_new_privs.html"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "containers[acm-mch-wait-job]",
          "securityContext",
          "allowPrivilegeEscalation"
        ],
        "compliance": []
      }
    ]
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_plus/files/acm/mch/acm-mch.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_plus/files/acm/mch/acm-mch.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_plus/files/acm/operator/acm-og.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_plus/files/acm/operator/acm-og.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_plus/files/acm/operator/acm-sub.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_plus/files/acm/operator/acm-sub.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_plus/files/acm/operator/argocd-rbac.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_plus/files/acm/operator/argocd-rbac.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": false,
    "infrastructureAsCodeIssues": [
      {
        "id": "SNYK-CC-K8S-47",
        "title": "Role or ClusterRole with dangerous permissions",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Role",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-47",
        "isGeneratedByCustomRule": false,
        "issue": "A role was found using a dangerous permissions",
        "impact": "Using this role grants dangerous permissions. For a ClusterRole this would be considered high severity.",
        "resolve": "Consider removing these permissions",
        "remediation": {
          "kubernetes": "Consider removing these permissions",
          "terraform": "Consider removing these permissions"
        },
        "lineNumber": 23,
        "iacDescription": {
          "issue": "A role was found using a dangerous permissions",
          "impact": "Using this role grants dangerous permissions. For a ClusterRole this would be considered high severity.",
          "resolve": "Consider removing these permissions"
        },
        "publicId": "SNYK-CC-K8S-47",
        "msg": "rules[0].resources",
        "references": [
          "https://kubernetes.io/docs/reference/access-authn-authz/rbac/"
        ],
        "path": [
          "[DocId: 1]",
          "rules[0]",
          "resources"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-46",
        "title": "RoleBinding or ClusterRoleBinding is using a pre-defined role",
        "severity": "medium",
        "isIgnored": false,
        "subType": "RoleBinding",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-46",
        "isGeneratedByCustomRule": false,
        "issue": "A RoleBinding or ClusterRoleBinding was found using one of the default user facing roles, `cluster-admin`, `admin`, `edit` or `view`.",
        "impact": "Using a default user facing role may be overly permissive. For a ClusterRoleBinding this would be considered high severity.",
        "resolve": "Update roleRef.name to a specific role name with only the necessary permissions",
        "remediation": {
          "kubernetes": "Update roleRef.name to a specific role name with only the necessary permissions"
        },
        "lineNumber": 39,
        "iacDescription": {
          "issue": "A RoleBinding or ClusterRoleBinding was found using one of the default user facing roles, `cluster-admin`, `admin`, `edit` or `view`.",
          "impact": "Using a default user facing role may be overly permissive. For a ClusterRoleBinding this would be considered high severity.",
          "resolve": "Update roleRef.name to a specific role name with only the necessary permissions"
        },
        "publicId": "SNYK-CC-K8S-46",
        "msg": "roleRef.name",
        "references": [
          "https://kubernetes.io/docs/reference/access-authn-authz/rbac/"
        ],
        "path": [
          "[DocId: 2]",
          "roleRef",
          "name"
        ],
        "compliance": []
      }
    ]
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_plus/files/acm/operator/namespace.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_plus/files/acm/operator/namespace.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_plus/files/acm/operator/pull-secret-job.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_plus/files/acm/operator/pull-secret-job.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": false,
    "infrastructureAsCodeIssues": [
      {
        "id": "SNYK-CC-K8S-5",
        "title": "Container has no CPU limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-5",
        "isGeneratedByCustomRule": false,
        "issue": "Container has no CPU limit",
        "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
        "resolve": "Add `resources.limits.cpu` field with required CPU limit value",
        "remediation": {
          "kubernetes": "Add `resources.limits.cpu` field with required CPU limit value",
          "terraform": "Add `spec.container.resources.limits.cpu` field with required CPU limit value"
        },
        "lineNumber": 16,
        "iacDescription": {
          "issue": "Container has no CPU limit",
          "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
          "resolve": "Add `resources.limits.cpu` field with required CPU limit value"
        },
        "publicId": "SNYK-CC-K8S-5",
        "msg": "input.spec.template.spec.containers[pull-secret-job].resources.limits.cpu",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-cpu-resource/",
          "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/cpu-default-namespace/",
          "https://github.com/kubernetes/design-proposals-archive/blob/8da1442ea29adccea40693357d04727127e045ed/node/resource-qos.md#compressible-resource-guaranteess"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[pull-secret-job]",
          "resources",
          "limits",
          "cpu"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-9",
        "title": "Container is running without privilege escalation control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-9",
        "isGeneratedByCustomRule": false,
        "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
        "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
          "terraform": "Set `spec.container.security_context.allow_privilege_escalation` to `false`"
        },
        "lineNumber": 16,
        "iacDescription": {
          "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
          "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`"
        },
        "publicId": "SNYK-CC-K8S-9",
        "msg": "spec.template.spec.containers[pull-secret-job].securityContext.allowPrivilegeEscalation",
        "references": [
          "https://www.kernel.org/doc/html/latest/userspace-api/no_new_privs.html"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "containers[pull-secret-job]",
          "securityContext",
          "allowPrivilegeEscalation"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-8",
        "title": "Container is running with writable root filesystem",
        "severity": "low",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-8",
        "isGeneratedByCustomRule": false,
        "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
        "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
          "terraform": "Set `security_context.read_only_root_filesystem` to `true`"
        },
        "lineNumber": 16,
        "iacDescription": {
          "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
          "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`"
        },
        "publicId": "SNYK-CC-K8S-8",
        "msg": "spec.template.spec.containers[pull-secret-job].securityContext.readOnlyRootFilesystem",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "containers[pull-secret-job]",
          "securityContext",
          "readOnlyRootFilesystem"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-4",
        "title": "Container is running without memory limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-4",
        "isGeneratedByCustomRule": false,
        "issue": "Memory limit is not defined",
        "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
        "resolve": "Set `resources.limits.memory` value",
        "remediation": {
          "kubernetes": "Set `resources.limits.memory` value",
          "terraform": "Set `resources.limits.memory` value"
        },
        "lineNumber": 16,
        "iacDescription": {
          "issue": "Memory limit is not defined",
          "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
          "resolve": "Set `resources.limits.memory` value"
        },
        "publicId": "SNYK-CC-K8S-4",
        "msg": "input.spec.template.spec.containers[pull-secret-job].resources.limits.memory",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/memory-default-namespace/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[pull-secret-job]",
          "resources",
          "limits",
          "memory"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-10",
        "title": "Container or Pod is running without root user control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-10",
        "isGeneratedByCustomRule": false,
        "issue": "Container or Pod is running without root user control",
        "impact": "Container or Pod could be running with full administrative privileges",
        "resolve": "Set `securityContext.runAsNonRoot` to `true`",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsNonRoot` to `true`",
          "terraform": "Set `security_context.run_as_non_root` to `true`"
        },
        "lineNumber": 16,
        "iacDescription": {
          "issue": "Container or Pod is running without root user control",
          "impact": "Container or Pod could be running with full administrative privileges",
          "resolve": "Set `securityContext.runAsNonRoot` to `true`"
        },
        "publicId": "SNYK-CC-K8S-10",
        "msg": "input.spec.template.spec.containers[pull-secret-job].securityContext.runAsNonRoot",
        "description": "",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[pull-secret-job]",
          "securityContext",
          "runAsNonRoot"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-6",
        "title": "Container does not drop all default capabilities",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-6",
        "isGeneratedByCustomRule": false,
        "issue": "All default capabilities are not explicitly dropped",
        "impact": "Containers are running with potentially unnecessary privileges",
        "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
        "remediation": {
          "kubernetes": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
          "terraform": "Add `ALL` to `spec.container.security_context.capabilities.drop` list, and add only required capabilities to `spec.container.security_context.capabilities.add`, ensuring it also does not contain `ALL`"
        },
        "lineNumber": 16,
        "iacDescription": {
          "issue": "All default capabilities are not explicitly dropped",
          "impact": "Containers are running with potentially unnecessary privileges",
          "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`"
        },
        "publicId": "SNYK-CC-K8S-6",
        "msg": "input.spec.template.spec.containers[pull-secret-job].securityContext.capabilities.drop",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
          "https://linux-audit.com/linux-capabilities-hardening-linux-binaries-by-removing-setuid/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[pull-secret-job]",
          "securityContext",
          "capabilities",
          "drop"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-11",
        "title": "Container's or Pod's  UID could clash with host's UID",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-11",
        "isGeneratedByCustomRule": false,
        "issue": "`runAsUser` value is set to low UID",
        "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
        "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
          "terraform": "Set `security_context.run_as_user` value to greater or equal than 10'000"
        },
        "lineNumber": 16,
        "iacDescription": {
          "issue": "`runAsUser` value is set to low UID",
          "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
          "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence"
        },
        "publicId": "SNYK-CC-K8S-11",
        "msg": "input.spec.template.spec.containers[pull-secret-job].securityContext.runAsUser",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container",
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod",
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[pull-secret-job]",
          "securityContext",
          "runAsUser"
        ],
        "compliance": []
      }
    ]
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_plus/files/acm/operator/sleep-job.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_plus/files/acm/operator/sleep-job.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": false,
    "infrastructureAsCodeIssues": [
      {
        "id": "SNYK-CC-K8S-11",
        "title": "Container's or Pod's  UID could clash with host's UID",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-11",
        "isGeneratedByCustomRule": false,
        "issue": "`runAsUser` value is set to low UID",
        "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
        "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
          "terraform": "Set `security_context.run_as_user` value to greater or equal than 10'000"
        },
        "lineNumber": 16,
        "iacDescription": {
          "issue": "`runAsUser` value is set to low UID",
          "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
          "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence"
        },
        "publicId": "SNYK-CC-K8S-11",
        "msg": "input.spec.template.spec.containers[sleep-job].securityContext.runAsUser",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container",
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod",
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[sleep-job]",
          "securityContext",
          "runAsUser"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-8",
        "title": "Container is running with writable root filesystem",
        "severity": "low",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-8",
        "isGeneratedByCustomRule": false,
        "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
        "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
          "terraform": "Set `security_context.read_only_root_filesystem` to `true`"
        },
        "lineNumber": 16,
        "iacDescription": {
          "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
          "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`"
        },
        "publicId": "SNYK-CC-K8S-8",
        "msg": "spec.template.spec.containers[sleep-job].securityContext.readOnlyRootFilesystem",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "containers[sleep-job]",
          "securityContext",
          "readOnlyRootFilesystem"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-5",
        "title": "Container has no CPU limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-5",
        "isGeneratedByCustomRule": false,
        "issue": "Container has no CPU limit",
        "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
        "resolve": "Add `resources.limits.cpu` field with required CPU limit value",
        "remediation": {
          "kubernetes": "Add `resources.limits.cpu` field with required CPU limit value",
          "terraform": "Add `spec.container.resources.limits.cpu` field with required CPU limit value"
        },
        "lineNumber": 16,
        "iacDescription": {
          "issue": "Container has no CPU limit",
          "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
          "resolve": "Add `resources.limits.cpu` field with required CPU limit value"
        },
        "publicId": "SNYK-CC-K8S-5",
        "msg": "input.spec.template.spec.containers[sleep-job].resources.limits.cpu",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-cpu-resource/",
          "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/cpu-default-namespace/",
          "https://github.com/kubernetes/design-proposals-archive/blob/8da1442ea29adccea40693357d04727127e045ed/node/resource-qos.md#compressible-resource-guaranteess"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[sleep-job]",
          "resources",
          "limits",
          "cpu"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-9",
        "title": "Container is running without privilege escalation control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-9",
        "isGeneratedByCustomRule": false,
        "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
        "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
          "terraform": "Set `spec.container.security_context.allow_privilege_escalation` to `false`"
        },
        "lineNumber": 16,
        "iacDescription": {
          "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
          "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`"
        },
        "publicId": "SNYK-CC-K8S-9",
        "msg": "spec.template.spec.containers[sleep-job].securityContext.allowPrivilegeEscalation",
        "references": [
          "https://www.kernel.org/doc/html/latest/userspace-api/no_new_privs.html"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "containers[sleep-job]",
          "securityContext",
          "allowPrivilegeEscalation"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-10",
        "title": "Container or Pod is running without root user control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-10",
        "isGeneratedByCustomRule": false,
        "issue": "Container or Pod is running without root user control",
        "impact": "Container or Pod could be running with full administrative privileges",
        "resolve": "Set `securityContext.runAsNonRoot` to `true`",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsNonRoot` to `true`",
          "terraform": "Set `security_context.run_as_non_root` to `true`"
        },
        "lineNumber": 16,
        "iacDescription": {
          "issue": "Container or Pod is running without root user control",
          "impact": "Container or Pod could be running with full administrative privileges",
          "resolve": "Set `securityContext.runAsNonRoot` to `true`"
        },
        "publicId": "SNYK-CC-K8S-10",
        "msg": "input.spec.template.spec.containers[sleep-job].securityContext.runAsNonRoot",
        "description": "",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[sleep-job]",
          "securityContext",
          "runAsNonRoot"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-6",
        "title": "Container does not drop all default capabilities",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-6",
        "isGeneratedByCustomRule": false,
        "issue": "All default capabilities are not explicitly dropped",
        "impact": "Containers are running with potentially unnecessary privileges",
        "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
        "remediation": {
          "kubernetes": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
          "terraform": "Add `ALL` to `spec.container.security_context.capabilities.drop` list, and add only required capabilities to `spec.container.security_context.capabilities.add`, ensuring it also does not contain `ALL`"
        },
        "lineNumber": 16,
        "iacDescription": {
          "issue": "All default capabilities are not explicitly dropped",
          "impact": "Containers are running with potentially unnecessary privileges",
          "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`"
        },
        "publicId": "SNYK-CC-K8S-6",
        "msg": "input.spec.template.spec.containers[sleep-job].securityContext.capabilities.drop",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
          "https://linux-audit.com/linux-capabilities-hardening-linux-binaries-by-removing-setuid/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[sleep-job]",
          "securityContext",
          "capabilities",
          "drop"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-4",
        "title": "Container is running without memory limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-4",
        "isGeneratedByCustomRule": false,
        "issue": "Memory limit is not defined",
        "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
        "resolve": "Set `resources.limits.memory` value",
        "remediation": {
          "kubernetes": "Set `resources.limits.memory` value",
          "terraform": "Set `resources.limits.memory` value"
        },
        "lineNumber": 16,
        "iacDescription": {
          "issue": "Memory limit is not defined",
          "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
          "resolve": "Set `resources.limits.memory` value"
        },
        "publicId": "SNYK-CC-K8S-4",
        "msg": "input.spec.template.spec.containers[sleep-job].resources.limits.memory",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/memory-default-namespace/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[sleep-job]",
          "resources",
          "limits",
          "memory"
        ],
        "compliance": []
      }
    ]
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_plus/files/acs/deploy-acs.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_plus/files/acs/deploy-acs.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_plus/files/acs/deploy/acs-central-wait-finish-job.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_plus/files/acs/deploy/acs-central-wait-finish-job.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": false,
    "infrastructureAsCodeIssues": [
      {
        "id": "SNYK-CC-K8S-10",
        "title": "Container or Pod is running without root user control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-10",
        "isGeneratedByCustomRule": false,
        "issue": "Container or Pod is running without root user control",
        "impact": "Container or Pod could be running with full administrative privileges",
        "resolve": "Set `securityContext.runAsNonRoot` to `true`",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsNonRoot` to `true`",
          "terraform": "Set `security_context.run_as_non_root` to `true`"
        },
        "lineNumber": 17,
        "iacDescription": {
          "issue": "Container or Pod is running without root user control",
          "impact": "Container or Pod could be running with full administrative privileges",
          "resolve": "Set `securityContext.runAsNonRoot` to `true`"
        },
        "publicId": "SNYK-CC-K8S-10",
        "msg": "input.spec.template.spec.containers[acs-central-wait-job].securityContext.runAsNonRoot",
        "description": "",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[acs-central-wait-job]",
          "securityContext",
          "runAsNonRoot"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-8",
        "title": "Container is running with writable root filesystem",
        "severity": "low",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-8",
        "isGeneratedByCustomRule": false,
        "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
        "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
          "terraform": "Set `security_context.read_only_root_filesystem` to `true`"
        },
        "lineNumber": 17,
        "iacDescription": {
          "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
          "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`"
        },
        "publicId": "SNYK-CC-K8S-8",
        "msg": "spec.template.spec.containers[acs-central-wait-job].securityContext.readOnlyRootFilesystem",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "containers[acs-central-wait-job]",
          "securityContext",
          "readOnlyRootFilesystem"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-4",
        "title": "Container is running without memory limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-4",
        "isGeneratedByCustomRule": false,
        "issue": "Memory limit is not defined",
        "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
        "resolve": "Set `resources.limits.memory` value",
        "remediation": {
          "kubernetes": "Set `resources.limits.memory` value",
          "terraform": "Set `resources.limits.memory` value"
        },
        "lineNumber": 17,
        "iacDescription": {
          "issue": "Memory limit is not defined",
          "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
          "resolve": "Set `resources.limits.memory` value"
        },
        "publicId": "SNYK-CC-K8S-4",
        "msg": "input.spec.template.spec.containers[acs-central-wait-job].resources.limits.memory",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/memory-default-namespace/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[acs-central-wait-job]",
          "resources",
          "limits",
          "memory"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-11",
        "title": "Container's or Pod's  UID could clash with host's UID",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-11",
        "isGeneratedByCustomRule": false,
        "issue": "`runAsUser` value is set to low UID",
        "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
        "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
          "terraform": "Set `security_context.run_as_user` value to greater or equal than 10'000"
        },
        "lineNumber": 17,
        "iacDescription": {
          "issue": "`runAsUser` value is set to low UID",
          "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
          "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence"
        },
        "publicId": "SNYK-CC-K8S-11",
        "msg": "input.spec.template.spec.containers[acs-central-wait-job].securityContext.runAsUser",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container",
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod",
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[acs-central-wait-job]",
          "securityContext",
          "runAsUser"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-5",
        "title": "Container has no CPU limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-5",
        "isGeneratedByCustomRule": false,
        "issue": "Container has no CPU limit",
        "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
        "resolve": "Add `resources.limits.cpu` field with required CPU limit value",
        "remediation": {
          "kubernetes": "Add `resources.limits.cpu` field with required CPU limit value",
          "terraform": "Add `spec.container.resources.limits.cpu` field with required CPU limit value"
        },
        "lineNumber": 17,
        "iacDescription": {
          "issue": "Container has no CPU limit",
          "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
          "resolve": "Add `resources.limits.cpu` field with required CPU limit value"
        },
        "publicId": "SNYK-CC-K8S-5",
        "msg": "input.spec.template.spec.containers[acs-central-wait-job].resources.limits.cpu",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-cpu-resource/",
          "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/cpu-default-namespace/",
          "https://github.com/kubernetes/design-proposals-archive/blob/8da1442ea29adccea40693357d04727127e045ed/node/resource-qos.md#compressible-resource-guaranteess"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[acs-central-wait-job]",
          "resources",
          "limits",
          "cpu"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-9",
        "title": "Container is running without privilege escalation control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-9",
        "isGeneratedByCustomRule": false,
        "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
        "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
          "terraform": "Set `spec.container.security_context.allow_privilege_escalation` to `false`"
        },
        "lineNumber": 17,
        "iacDescription": {
          "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
          "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`"
        },
        "publicId": "SNYK-CC-K8S-9",
        "msg": "spec.template.spec.containers[acs-central-wait-job].securityContext.allowPrivilegeEscalation",
        "references": [
          "https://www.kernel.org/doc/html/latest/userspace-api/no_new_privs.html"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "containers[acs-central-wait-job]",
          "securityContext",
          "allowPrivilegeEscalation"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-6",
        "title": "Container does not drop all default capabilities",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-6",
        "isGeneratedByCustomRule": false,
        "issue": "All default capabilities are not explicitly dropped",
        "impact": "Containers are running with potentially unnecessary privileges",
        "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
        "remediation": {
          "kubernetes": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
          "terraform": "Add `ALL` to `spec.container.security_context.capabilities.drop` list, and add only required capabilities to `spec.container.security_context.capabilities.add`, ensuring it also does not contain `ALL`"
        },
        "lineNumber": 17,
        "iacDescription": {
          "issue": "All default capabilities are not explicitly dropped",
          "impact": "Containers are running with potentially unnecessary privileges",
          "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`"
        },
        "publicId": "SNYK-CC-K8S-6",
        "msg": "input.spec.template.spec.containers[acs-central-wait-job].securityContext.capabilities.drop",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
          "https://linux-audit.com/linux-capabilities-hardening-linux-binaries-by-removing-setuid/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[acs-central-wait-job]",
          "securityContext",
          "capabilities",
          "drop"
        ],
        "compliance": []
      }
    ]
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_plus/files/acs/deploy/acs-central.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_plus/files/acs/deploy/acs-central.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_plus/files/acs/deploy/argocd-rbac.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_plus/files/acs/deploy/argocd-rbac.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": false,
    "infrastructureAsCodeIssues": [
      {
        "id": "SNYK-CC-K8S-46",
        "title": "RoleBinding or ClusterRoleBinding is using a pre-defined role",
        "severity": "medium",
        "isIgnored": false,
        "subType": "RoleBinding",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-46",
        "isGeneratedByCustomRule": false,
        "issue": "A RoleBinding or ClusterRoleBinding was found using one of the default user facing roles, `cluster-admin`, `admin`, `edit` or `view`.",
        "impact": "Using a default user facing role may be overly permissive. For a ClusterRoleBinding this would be considered high severity.",
        "resolve": "Update roleRef.name to a specific role name with only the necessary permissions",
        "remediation": {
          "kubernetes": "Update roleRef.name to a specific role name with only the necessary permissions"
        },
        "lineNumber": 25,
        "iacDescription": {
          "issue": "A RoleBinding or ClusterRoleBinding was found using one of the default user facing roles, `cluster-admin`, `admin`, `edit` or `view`.",
          "impact": "Using a default user facing role may be overly permissive. For a ClusterRoleBinding this would be considered high severity.",
          "resolve": "Update roleRef.name to a specific role name with only the necessary permissions"
        },
        "publicId": "SNYK-CC-K8S-46",
        "msg": "roleRef.name",
        "references": [
          "https://kubernetes.io/docs/reference/access-authn-authz/rbac/"
        ],
        "path": [
          "[DocId: 1]",
          "roleRef",
          "name"
        ],
        "compliance": []
      }
    ]
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_plus/files/acs/deploy/init-bundle-setup-job.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_plus/files/acs/deploy/init-bundle-setup-job.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": false,
    "infrastructureAsCodeIssues": [
      {
        "id": "SNYK-CC-K8S-8",
        "title": "Container is running with writable root filesystem",
        "severity": "low",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-8",
        "isGeneratedByCustomRule": false,
        "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
        "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
          "terraform": "Set `security_context.read_only_root_filesystem` to `true`"
        },
        "lineNumber": 17,
        "iacDescription": {
          "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
          "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`"
        },
        "publicId": "SNYK-CC-K8S-8",
        "msg": "spec.template.spec.containers[init-bundle-setup-job].securityContext.readOnlyRootFilesystem",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "containers[init-bundle-setup-job]",
          "securityContext",
          "readOnlyRootFilesystem"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-10",
        "title": "Container or Pod is running without root user control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-10",
        "isGeneratedByCustomRule": false,
        "issue": "Container or Pod is running without root user control",
        "impact": "Container or Pod could be running with full administrative privileges",
        "resolve": "Set `securityContext.runAsNonRoot` to `true`",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsNonRoot` to `true`",
          "terraform": "Set `security_context.run_as_non_root` to `true`"
        },
        "lineNumber": 17,
        "iacDescription": {
          "issue": "Container or Pod is running without root user control",
          "impact": "Container or Pod could be running with full administrative privileges",
          "resolve": "Set `securityContext.runAsNonRoot` to `true`"
        },
        "publicId": "SNYK-CC-K8S-10",
        "msg": "input.spec.template.spec.containers[init-bundle-setup-job].securityContext.runAsNonRoot",
        "description": "",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[init-bundle-setup-job]",
          "securityContext",
          "runAsNonRoot"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-6",
        "title": "Container does not drop all default capabilities",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-6",
        "isGeneratedByCustomRule": false,
        "issue": "All default capabilities are not explicitly dropped",
        "impact": "Containers are running with potentially unnecessary privileges",
        "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
        "remediation": {
          "kubernetes": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
          "terraform": "Add `ALL` to `spec.container.security_context.capabilities.drop` list, and add only required capabilities to `spec.container.security_context.capabilities.add`, ensuring it also does not contain `ALL`"
        },
        "lineNumber": 17,
        "iacDescription": {
          "issue": "All default capabilities are not explicitly dropped",
          "impact": "Containers are running with potentially unnecessary privileges",
          "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`"
        },
        "publicId": "SNYK-CC-K8S-6",
        "msg": "input.spec.template.spec.containers[init-bundle-setup-job].securityContext.capabilities.drop",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
          "https://linux-audit.com/linux-capabilities-hardening-linux-binaries-by-removing-setuid/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[init-bundle-setup-job]",
          "securityContext",
          "capabilities",
          "drop"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-9",
        "title": "Container is running without privilege escalation control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-9",
        "isGeneratedByCustomRule": false,
        "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
        "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
          "terraform": "Set `spec.container.security_context.allow_privilege_escalation` to `false`"
        },
        "lineNumber": 17,
        "iacDescription": {
          "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
          "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`"
        },
        "publicId": "SNYK-CC-K8S-9",
        "msg": "spec.template.spec.containers[init-bundle-setup-job].securityContext.allowPrivilegeEscalation",
        "references": [
          "https://www.kernel.org/doc/html/latest/userspace-api/no_new_privs.html"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "containers[init-bundle-setup-job]",
          "securityContext",
          "allowPrivilegeEscalation"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-4",
        "title": "Container is running without memory limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-4",
        "isGeneratedByCustomRule": false,
        "issue": "Memory limit is not defined",
        "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
        "resolve": "Set `resources.limits.memory` value",
        "remediation": {
          "kubernetes": "Set `resources.limits.memory` value",
          "terraform": "Set `resources.limits.memory` value"
        },
        "lineNumber": 17,
        "iacDescription": {
          "issue": "Memory limit is not defined",
          "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
          "resolve": "Set `resources.limits.memory` value"
        },
        "publicId": "SNYK-CC-K8S-4",
        "msg": "input.spec.template.spec.containers[init-bundle-setup-job].resources.limits.memory",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/memory-default-namespace/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[init-bundle-setup-job]",
          "resources",
          "limits",
          "memory"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-11",
        "title": "Container's or Pod's  UID could clash with host's UID",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-11",
        "isGeneratedByCustomRule": false,
        "issue": "`runAsUser` value is set to low UID",
        "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
        "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
          "terraform": "Set `security_context.run_as_user` value to greater or equal than 10'000"
        },
        "lineNumber": 17,
        "iacDescription": {
          "issue": "`runAsUser` value is set to low UID",
          "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
          "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence"
        },
        "publicId": "SNYK-CC-K8S-11",
        "msg": "input.spec.template.spec.containers[init-bundle-setup-job].securityContext.runAsUser",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container",
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod",
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[init-bundle-setup-job]",
          "securityContext",
          "runAsUser"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-5",
        "title": "Container has no CPU limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-5",
        "isGeneratedByCustomRule": false,
        "issue": "Container has no CPU limit",
        "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
        "resolve": "Add `resources.limits.cpu` field with required CPU limit value",
        "remediation": {
          "kubernetes": "Add `resources.limits.cpu` field with required CPU limit value",
          "terraform": "Add `spec.container.resources.limits.cpu` field with required CPU limit value"
        },
        "lineNumber": 17,
        "iacDescription": {
          "issue": "Container has no CPU limit",
          "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
          "resolve": "Add `resources.limits.cpu` field with required CPU limit value"
        },
        "publicId": "SNYK-CC-K8S-5",
        "msg": "input.spec.template.spec.containers[init-bundle-setup-job].resources.limits.cpu",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-cpu-resource/",
          "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/cpu-default-namespace/",
          "https://github.com/kubernetes/design-proposals-archive/blob/8da1442ea29adccea40693357d04727127e045ed/node/resource-qos.md#compressible-resource-guaranteess"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[init-bundle-setup-job]",
          "resources",
          "limits",
          "cpu"
        ],
        "compliance": []
      }
    ]
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_plus/files/acs/deploy/namespace.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_plus/files/acs/deploy/namespace.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_plus/files/acs/deploy/secured-cluster.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_plus/files/acs/deploy/secured-cluster.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_plus/files/acs/operator/acs-sub.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_plus/files/acs/operator/acs-sub.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_plus/files/acs/operator/sleep-job.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_plus/files/acs/operator/sleep-job.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": false,
    "infrastructureAsCodeIssues": [
      {
        "id": "SNYK-CC-K8S-11",
        "title": "Container's or Pod's  UID could clash with host's UID",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-11",
        "isGeneratedByCustomRule": false,
        "issue": "`runAsUser` value is set to low UID",
        "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
        "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
          "terraform": "Set `security_context.run_as_user` value to greater or equal than 10'000"
        },
        "lineNumber": 17,
        "iacDescription": {
          "issue": "`runAsUser` value is set to low UID",
          "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
          "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence"
        },
        "publicId": "SNYK-CC-K8S-11",
        "msg": "input.spec.template.spec.containers[sleep-job].securityContext.runAsUser",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container",
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod",
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[sleep-job]",
          "securityContext",
          "runAsUser"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-8",
        "title": "Container is running with writable root filesystem",
        "severity": "low",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-8",
        "isGeneratedByCustomRule": false,
        "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
        "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
          "terraform": "Set `security_context.read_only_root_filesystem` to `true`"
        },
        "lineNumber": 17,
        "iacDescription": {
          "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
          "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`"
        },
        "publicId": "SNYK-CC-K8S-8",
        "msg": "spec.template.spec.containers[sleep-job].securityContext.readOnlyRootFilesystem",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "containers[sleep-job]",
          "securityContext",
          "readOnlyRootFilesystem"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-5",
        "title": "Container has no CPU limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-5",
        "isGeneratedByCustomRule": false,
        "issue": "Container has no CPU limit",
        "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
        "resolve": "Add `resources.limits.cpu` field with required CPU limit value",
        "remediation": {
          "kubernetes": "Add `resources.limits.cpu` field with required CPU limit value",
          "terraform": "Add `spec.container.resources.limits.cpu` field with required CPU limit value"
        },
        "lineNumber": 17,
        "iacDescription": {
          "issue": "Container has no CPU limit",
          "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
          "resolve": "Add `resources.limits.cpu` field with required CPU limit value"
        },
        "publicId": "SNYK-CC-K8S-5",
        "msg": "input.spec.template.spec.containers[sleep-job].resources.limits.cpu",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-cpu-resource/",
          "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/cpu-default-namespace/",
          "https://github.com/kubernetes/design-proposals-archive/blob/8da1442ea29adccea40693357d04727127e045ed/node/resource-qos.md#compressible-resource-guaranteess"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[sleep-job]",
          "resources",
          "limits",
          "cpu"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-9",
        "title": "Container is running without privilege escalation control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-9",
        "isGeneratedByCustomRule": false,
        "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
        "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
          "terraform": "Set `spec.container.security_context.allow_privilege_escalation` to `false`"
        },
        "lineNumber": 17,
        "iacDescription": {
          "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
          "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`"
        },
        "publicId": "SNYK-CC-K8S-9",
        "msg": "spec.template.spec.containers[sleep-job].securityContext.allowPrivilegeEscalation",
        "references": [
          "https://www.kernel.org/doc/html/latest/userspace-api/no_new_privs.html"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "containers[sleep-job]",
          "securityContext",
          "allowPrivilegeEscalation"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-10",
        "title": "Container or Pod is running without root user control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-10",
        "isGeneratedByCustomRule": false,
        "issue": "Container or Pod is running without root user control",
        "impact": "Container or Pod could be running with full administrative privileges",
        "resolve": "Set `securityContext.runAsNonRoot` to `true`",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsNonRoot` to `true`",
          "terraform": "Set `security_context.run_as_non_root` to `true`"
        },
        "lineNumber": 17,
        "iacDescription": {
          "issue": "Container or Pod is running without root user control",
          "impact": "Container or Pod could be running with full administrative privileges",
          "resolve": "Set `securityContext.runAsNonRoot` to `true`"
        },
        "publicId": "SNYK-CC-K8S-10",
        "msg": "input.spec.template.spec.containers[sleep-job].securityContext.runAsNonRoot",
        "description": "",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[sleep-job]",
          "securityContext",
          "runAsNonRoot"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-6",
        "title": "Container does not drop all default capabilities",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-6",
        "isGeneratedByCustomRule": false,
        "issue": "All default capabilities are not explicitly dropped",
        "impact": "Containers are running with potentially unnecessary privileges",
        "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
        "remediation": {
          "kubernetes": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
          "terraform": "Add `ALL` to `spec.container.security_context.capabilities.drop` list, and add only required capabilities to `spec.container.security_context.capabilities.add`, ensuring it also does not contain `ALL`"
        },
        "lineNumber": 17,
        "iacDescription": {
          "issue": "All default capabilities are not explicitly dropped",
          "impact": "Containers are running with potentially unnecessary privileges",
          "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`"
        },
        "publicId": "SNYK-CC-K8S-6",
        "msg": "input.spec.template.spec.containers[sleep-job].securityContext.capabilities.drop",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
          "https://linux-audit.com/linux-capabilities-hardening-linux-binaries-by-removing-setuid/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[sleep-job]",
          "securityContext",
          "capabilities",
          "drop"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-4",
        "title": "Container is running without memory limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-4",
        "isGeneratedByCustomRule": false,
        "issue": "Memory limit is not defined",
        "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
        "resolve": "Set `resources.limits.memory` value",
        "remediation": {
          "kubernetes": "Set `resources.limits.memory` value",
          "terraform": "Set `resources.limits.memory` value"
        },
        "lineNumber": 17,
        "iacDescription": {
          "issue": "Memory limit is not defined",
          "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
          "resolve": "Set `resources.limits.memory` value"
        },
        "publicId": "SNYK-CC-K8S-4",
        "msg": "input.spec.template.spec.containers[sleep-job].resources.limits.memory",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/memory-default-namespace/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[sleep-job]",
          "resources",
          "limits",
          "memory"
        ],
        "compliance": []
      }
    ]
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_plus/files/acs/sample-app/namespace.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_plus/files/acs/sample-app/namespace.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_plus/files/acs/sample-app/samba.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_plus/files/acs/sample-app/samba.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": false,
    "infrastructureAsCodeIssues": [
      {
        "id": "SNYK-CC-K8S-8",
        "title": "Container is running with writable root filesystem",
        "severity": "low",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-8",
        "isGeneratedByCustomRule": false,
        "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
        "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
          "terraform": "Set `security_context.read_only_root_filesystem` to `true`"
        },
        "lineNumber": 25,
        "iacDescription": {
          "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
          "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`"
        },
        "publicId": "SNYK-CC-K8S-8",
        "msg": "spec.template.spec.containers[samba].securityContext.readOnlyRootFilesystem",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "containers[samba]",
          "securityContext",
          "readOnlyRootFilesystem"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-4",
        "title": "Container is running without memory limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-4",
        "isGeneratedByCustomRule": false,
        "issue": "Memory limit is not defined",
        "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
        "resolve": "Set `resources.limits.memory` value",
        "remediation": {
          "kubernetes": "Set `resources.limits.memory` value",
          "terraform": "Set `resources.limits.memory` value"
        },
        "lineNumber": 30,
        "iacDescription": {
          "issue": "Memory limit is not defined",
          "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
          "resolve": "Set `resources.limits.memory` value"
        },
        "publicId": "SNYK-CC-K8S-4",
        "msg": "input.spec.template.spec.containers[samba].resources.limits.memory",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/memory-default-namespace/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[samba]",
          "resources",
          "limits",
          "memory"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-10",
        "title": "Container or Pod is running without root user control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-10",
        "isGeneratedByCustomRule": false,
        "issue": "Container or Pod is running without root user control",
        "impact": "Container or Pod could be running with full administrative privileges",
        "resolve": "Set `securityContext.runAsNonRoot` to `true`",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsNonRoot` to `true`",
          "terraform": "Set `security_context.run_as_non_root` to `true`"
        },
        "lineNumber": 25,
        "iacDescription": {
          "issue": "Container or Pod is running without root user control",
          "impact": "Container or Pod could be running with full administrative privileges",
          "resolve": "Set `securityContext.runAsNonRoot` to `true`"
        },
        "publicId": "SNYK-CC-K8S-10",
        "msg": "input.spec.template.spec.containers[samba].securityContext.runAsNonRoot",
        "description": "",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[samba]",
          "securityContext",
          "runAsNonRoot"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-42",
        "title": "Container could be running with outdated image",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-42",
        "isGeneratedByCustomRule": false,
        "issue": "The image policy does not prevent image reuse",
        "impact": "The container may run with outdated or unauthorized image",
        "resolve": "Set `imagePullPolicy` attribute to `Always`",
        "remediation": {
          "kubernetes": "Set `imagePullPolicy` attribute to `Always`",
          "terraform": "Set `image_pull_policy` attribute to `Always"
        },
        "lineNumber": 25,
        "iacDescription": {
          "issue": "The image policy does not prevent image reuse",
          "impact": "The container may run with outdated or unauthorized image",
          "resolve": "Set `imagePullPolicy` attribute to `Always`"
        },
        "publicId": "SNYK-CC-K8S-42",
        "msg": "spec.template.spec.containers[samba].imagePullPolicy",
        "references": [
          "https://kubernetes.io/docs/concepts/containers/images/",
          "https://kubernetes.io/docs/concepts/configuration/overview/#container-images"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "containers[samba]",
          "imagePullPolicy"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-5",
        "title": "Container has no CPU limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-5",
        "isGeneratedByCustomRule": false,
        "issue": "Container has no CPU limit",
        "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
        "resolve": "Add `resources.limits.cpu` field with required CPU limit value",
        "remediation": {
          "kubernetes": "Add `resources.limits.cpu` field with required CPU limit value",
          "terraform": "Add `spec.container.resources.limits.cpu` field with required CPU limit value"
        },
        "lineNumber": 30,
        "iacDescription": {
          "issue": "Container has no CPU limit",
          "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
          "resolve": "Add `resources.limits.cpu` field with required CPU limit value"
        },
        "publicId": "SNYK-CC-K8S-5",
        "msg": "input.spec.template.spec.containers[samba].resources.limits.cpu",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-cpu-resource/",
          "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/cpu-default-namespace/",
          "https://github.com/kubernetes/design-proposals-archive/blob/8da1442ea29adccea40693357d04727127e045ed/node/resource-qos.md#compressible-resource-guaranteess"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[samba]",
          "resources",
          "limits",
          "cpu"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-9",
        "title": "Container is running without privilege escalation control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-9",
        "isGeneratedByCustomRule": false,
        "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
        "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
          "terraform": "Set `spec.container.security_context.allow_privilege_escalation` to `false`"
        },
        "lineNumber": 25,
        "iacDescription": {
          "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
          "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`"
        },
        "publicId": "SNYK-CC-K8S-9",
        "msg": "spec.template.spec.containers[samba].securityContext.allowPrivilegeEscalation",
        "references": [
          "https://www.kernel.org/doc/html/latest/userspace-api/no_new_privs.html"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "containers[samba]",
          "securityContext",
          "allowPrivilegeEscalation"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-11",
        "title": "Container's or Pod's  UID could clash with host's UID",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-11",
        "isGeneratedByCustomRule": false,
        "issue": "`runAsUser` value is set to low UID",
        "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
        "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
          "terraform": "Set `security_context.run_as_user` value to greater or equal than 10'000"
        },
        "lineNumber": 25,
        "iacDescription": {
          "issue": "`runAsUser` value is set to low UID",
          "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
          "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence"
        },
        "publicId": "SNYK-CC-K8S-11",
        "msg": "input.spec.template.spec.containers[samba].securityContext.runAsUser",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container",
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod",
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[samba]",
          "securityContext",
          "runAsUser"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-41",
        "title": "Container is running without liveness probe",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-41",
        "isGeneratedByCustomRule": false,
        "issue": "Liveness probe is not defined",
        "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
        "resolve": "Add `livenessProbe` attribute",
        "remediation": {
          "kubernetes": "Add `livenessProbe` attribute",
          "terraform": "Add `liveness_probe` attribute"
        },
        "lineNumber": 25,
        "iacDescription": {
          "issue": "Liveness probe is not defined",
          "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
          "resolve": "Add `livenessProbe` attribute"
        },
        "publicId": "SNYK-CC-K8S-41",
        "msg": "spec.template.spec.containers[samba].livenessProbe",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/",
          "https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/",
          "https://cloud.google.com/blog/products/gcp/kubernetes-best-practices-setting-up-health-checks-with-readiness-and-liveness-probes"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "containers[samba]",
          "livenessProbe"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-6",
        "title": "Container does not drop all default capabilities",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-6",
        "isGeneratedByCustomRule": false,
        "issue": "All default capabilities are not explicitly dropped",
        "impact": "Containers are running with potentially unnecessary privileges",
        "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
        "remediation": {
          "kubernetes": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
          "terraform": "Add `ALL` to `spec.container.security_context.capabilities.drop` list, and add only required capabilities to `spec.container.security_context.capabilities.add`, ensuring it also does not contain `ALL`"
        },
        "lineNumber": 25,
        "iacDescription": {
          "issue": "All default capabilities are not explicitly dropped",
          "impact": "Containers are running with potentially unnecessary privileges",
          "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`"
        },
        "publicId": "SNYK-CC-K8S-6",
        "msg": "input.spec.template.spec.containers[samba].securityContext.capabilities.drop",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
          "https://linux-audit.com/linux-capabilities-hardening-linux-binaries-by-removing-setuid/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[samba]",
          "securityContext",
          "capabilities",
          "drop"
        ],
        "compliance": []
      }
    ]
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_plus/files/acs/sample-app/sample-app-rbac.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_plus/files/acs/sample-app/sample-app-rbac.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": false,
    "infrastructureAsCodeIssues": [
      {
        "id": "SNYK-CC-K8S-45",
        "title": "RoleBinding or ClusterRoleBinding to the default service account",
        "severity": "high",
        "isIgnored": false,
        "subType": "ClusterRoleBinding",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-45",
        "isGeneratedByCustomRule": false,
        "issue": "A binding was found between a role and the default service account",
        "impact": "The use of default service account is discouraged. For a ClusterRoleBinding this would be considered high severity.",
        "resolve": "Set `subject.name` to a service account other than `default`",
        "remediation": {
          "kubernetes": "Set `subject.name` to a service account other than `default`",
          "terraform": "Set `subject.name` to a service account other than `default`"
        },
        "lineNumber": 10,
        "iacDescription": {
          "issue": "A binding was found between a role and the default service account",
          "impact": "The use of default service account is discouraged. For a ClusterRoleBinding this would be considered high severity.",
          "resolve": "Set `subject.name` to a service account other than `default`"
        },
        "publicId": "SNYK-CC-K8S-45",
        "msg": "subjects[0].name",
        "references": [
          "https://kubernetes.io/docs/reference/access-authn-authz/rbac/"
        ],
        "path": [
          "[DocId: 0]",
          "subjects[0]",
          "name"
        ],
        "compliance": []
      }
    ]
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_plus/files/acs/sample-app/shell.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_plus/files/acs/sample-app/shell.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": false,
    "infrastructureAsCodeIssues": [
      {
        "id": "SNYK-CC-K8S-41",
        "title": "Container is running without liveness probe",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-41",
        "isGeneratedByCustomRule": false,
        "issue": "Liveness probe is not defined",
        "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
        "resolve": "Add `livenessProbe` attribute",
        "remediation": {
          "kubernetes": "Add `livenessProbe` attribute",
          "terraform": "Add `liveness_probe` attribute"
        },
        "lineNumber": 28,
        "iacDescription": {
          "issue": "Liveness probe is not defined",
          "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
          "resolve": "Add `livenessProbe` attribute"
        },
        "publicId": "SNYK-CC-K8S-41",
        "msg": "spec.template.spec.containers[shell].livenessProbe",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/",
          "https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/",
          "https://cloud.google.com/blog/products/gcp/kubernetes-best-practices-setting-up-health-checks-with-readiness-and-liveness-probes"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "containers[shell]",
          "livenessProbe"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-4",
        "title": "Container is running without memory limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-4",
        "isGeneratedByCustomRule": false,
        "issue": "Memory limit is not defined",
        "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
        "resolve": "Set `resources.limits.memory` value",
        "remediation": {
          "kubernetes": "Set `resources.limits.memory` value",
          "terraform": "Set `resources.limits.memory` value"
        },
        "lineNumber": 33,
        "iacDescription": {
          "issue": "Memory limit is not defined",
          "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
          "resolve": "Set `resources.limits.memory` value"
        },
        "publicId": "SNYK-CC-K8S-4",
        "msg": "input.spec.template.spec.containers[shell].resources.limits.memory",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/memory-default-namespace/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[shell]",
          "resources",
          "limits",
          "memory"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-42",
        "title": "Container could be running with outdated image",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-42",
        "isGeneratedByCustomRule": false,
        "issue": "The image policy does not prevent image reuse",
        "impact": "The container may run with outdated or unauthorized image",
        "resolve": "Set `imagePullPolicy` attribute to `Always`",
        "remediation": {
          "kubernetes": "Set `imagePullPolicy` attribute to `Always`",
          "terraform": "Set `image_pull_policy` attribute to `Always"
        },
        "lineNumber": 28,
        "iacDescription": {
          "issue": "The image policy does not prevent image reuse",
          "impact": "The container may run with outdated or unauthorized image",
          "resolve": "Set `imagePullPolicy` attribute to `Always`"
        },
        "publicId": "SNYK-CC-K8S-42",
        "msg": "spec.template.spec.containers[shell].imagePullPolicy",
        "references": [
          "https://kubernetes.io/docs/concepts/containers/images/",
          "https://kubernetes.io/docs/concepts/configuration/overview/#container-images"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "containers[shell]",
          "imagePullPolicy"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-10",
        "title": "Container or Pod is running without root user control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-10",
        "isGeneratedByCustomRule": false,
        "issue": "Container or Pod is running without root user control",
        "impact": "Container or Pod could be running with full administrative privileges",
        "resolve": "Set `securityContext.runAsNonRoot` to `true`",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsNonRoot` to `true`",
          "terraform": "Set `security_context.run_as_non_root` to `true`"
        },
        "lineNumber": 28,
        "iacDescription": {
          "issue": "Container or Pod is running without root user control",
          "impact": "Container or Pod could be running with full administrative privileges",
          "resolve": "Set `securityContext.runAsNonRoot` to `true`"
        },
        "publicId": "SNYK-CC-K8S-10",
        "msg": "input.spec.template.spec.containers[shell].securityContext.runAsNonRoot",
        "description": "",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[shell]",
          "securityContext",
          "runAsNonRoot"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-9",
        "title": "Container is running without privilege escalation control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-9",
        "isGeneratedByCustomRule": false,
        "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
        "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
          "terraform": "Set `spec.container.security_context.allow_privilege_escalation` to `false`"
        },
        "lineNumber": 28,
        "iacDescription": {
          "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
          "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`"
        },
        "publicId": "SNYK-CC-K8S-9",
        "msg": "spec.template.spec.containers[shell].securityContext.allowPrivilegeEscalation",
        "references": [
          "https://www.kernel.org/doc/html/latest/userspace-api/no_new_privs.html"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "containers[shell]",
          "securityContext",
          "allowPrivilegeEscalation"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-5",
        "title": "Container has no CPU limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-5",
        "isGeneratedByCustomRule": false,
        "issue": "Container has no CPU limit",
        "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
        "resolve": "Add `resources.limits.cpu` field with required CPU limit value",
        "remediation": {
          "kubernetes": "Add `resources.limits.cpu` field with required CPU limit value",
          "terraform": "Add `spec.container.resources.limits.cpu` field with required CPU limit value"
        },
        "lineNumber": 33,
        "iacDescription": {
          "issue": "Container has no CPU limit",
          "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
          "resolve": "Add `resources.limits.cpu` field with required CPU limit value"
        },
        "publicId": "SNYK-CC-K8S-5",
        "msg": "input.spec.template.spec.containers[shell].resources.limits.cpu",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-cpu-resource/",
          "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/cpu-default-namespace/",
          "https://github.com/kubernetes/design-proposals-archive/blob/8da1442ea29adccea40693357d04727127e045ed/node/resource-qos.md#compressible-resource-guaranteess"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[shell]",
          "resources",
          "limits",
          "cpu"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-11",
        "title": "Container's or Pod's  UID could clash with host's UID",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-11",
        "isGeneratedByCustomRule": false,
        "issue": "`runAsUser` value is set to low UID",
        "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
        "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
          "terraform": "Set `security_context.run_as_user` value to greater or equal than 10'000"
        },
        "lineNumber": 28,
        "iacDescription": {
          "issue": "`runAsUser` value is set to low UID",
          "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
          "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence"
        },
        "publicId": "SNYK-CC-K8S-11",
        "msg": "input.spec.template.spec.containers[shell].securityContext.runAsUser",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container",
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod",
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[shell]",
          "securityContext",
          "runAsUser"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-8",
        "title": "Container is running with writable root filesystem",
        "severity": "low",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-8",
        "isGeneratedByCustomRule": false,
        "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
        "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
          "terraform": "Set `security_context.read_only_root_filesystem` to `true`"
        },
        "lineNumber": 28,
        "iacDescription": {
          "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
          "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`"
        },
        "publicId": "SNYK-CC-K8S-8",
        "msg": "spec.template.spec.containers[shell].securityContext.readOnlyRootFilesystem",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "containers[shell]",
          "securityContext",
          "readOnlyRootFilesystem"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-6",
        "title": "Container does not drop all default capabilities",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-6",
        "isGeneratedByCustomRule": false,
        "issue": "All default capabilities are not explicitly dropped",
        "impact": "Containers are running with potentially unnecessary privileges",
        "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
        "remediation": {
          "kubernetes": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
          "terraform": "Add `ALL` to `spec.container.security_context.capabilities.drop` list, and add only required capabilities to `spec.container.security_context.capabilities.add`, ensuring it also does not contain `ALL`"
        },
        "lineNumber": 28,
        "iacDescription": {
          "issue": "All default capabilities are not explicitly dropped",
          "impact": "Containers are running with potentially unnecessary privileges",
          "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`"
        },
        "publicId": "SNYK-CC-K8S-6",
        "msg": "input.spec.template.spec.containers[shell].securityContext.capabilities.drop",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
          "https://linux-audit.com/linux-capabilities-hardening-linux-binaries-by-removing-setuid/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[shell]",
          "securityContext",
          "capabilities",
          "drop"
        ],
        "compliance": []
      }
    ]
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_plus/files/quay/deploy-quay.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_plus/files/quay/deploy-quay.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_plus/files/quay/deploy/argocd-rbac.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_plus/files/quay/deploy/argocd-rbac.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": false,
    "infrastructureAsCodeIssues": [
      {
        "id": "SNYK-CC-K8S-46",
        "title": "RoleBinding or ClusterRoleBinding is using a pre-defined role",
        "severity": "medium",
        "isIgnored": false,
        "subType": "RoleBinding",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-46",
        "isGeneratedByCustomRule": false,
        "issue": "A RoleBinding or ClusterRoleBinding was found using one of the default user facing roles, `cluster-admin`, `admin`, `edit` or `view`.",
        "impact": "Using a default user facing role may be overly permissive. For a ClusterRoleBinding this would be considered high severity.",
        "resolve": "Update roleRef.name to a specific role name with only the necessary permissions",
        "remediation": {
          "kubernetes": "Update roleRef.name to a specific role name with only the necessary permissions"
        },
        "lineNumber": 20,
        "iacDescription": {
          "issue": "A RoleBinding or ClusterRoleBinding was found using one of the default user facing roles, `cluster-admin`, `admin`, `edit` or `view`.",
          "impact": "Using a default user facing role may be overly permissive. For a ClusterRoleBinding this would be considered high severity.",
          "resolve": "Update roleRef.name to a specific role name with only the necessary permissions"
        },
        "publicId": "SNYK-CC-K8S-46",
        "msg": "roleRef.name",
        "references": [
          "https://kubernetes.io/docs/reference/access-authn-authz/rbac/"
        ],
        "path": [
          "[DocId: 1]",
          "roleRef",
          "name"
        ],
        "compliance": []
      }
    ]
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_plus/files/quay/deploy/quay-registry.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_plus/files/quay/deploy/quay-registry.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_plus/files/quay/deploy/quay-wait-finish-job.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_plus/files/quay/deploy/quay-wait-finish-job.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": false,
    "infrastructureAsCodeIssues": [
      {
        "id": "SNYK-CC-K8S-5",
        "title": "Container has no CPU limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-5",
        "isGeneratedByCustomRule": false,
        "issue": "Container has no CPU limit",
        "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
        "resolve": "Add `resources.limits.cpu` field with required CPU limit value",
        "remediation": {
          "kubernetes": "Add `resources.limits.cpu` field with required CPU limit value",
          "terraform": "Add `spec.container.resources.limits.cpu` field with required CPU limit value"
        },
        "lineNumber": 17,
        "iacDescription": {
          "issue": "Container has no CPU limit",
          "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
          "resolve": "Add `resources.limits.cpu` field with required CPU limit value"
        },
        "publicId": "SNYK-CC-K8S-5",
        "msg": "input.spec.template.spec.containers[quay-wait-job].resources.limits.cpu",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-cpu-resource/",
          "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/cpu-default-namespace/",
          "https://github.com/kubernetes/design-proposals-archive/blob/8da1442ea29adccea40693357d04727127e045ed/node/resource-qos.md#compressible-resource-guaranteess"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[quay-wait-job]",
          "resources",
          "limits",
          "cpu"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-9",
        "title": "Container is running without privilege escalation control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-9",
        "isGeneratedByCustomRule": false,
        "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
        "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
          "terraform": "Set `spec.container.security_context.allow_privilege_escalation` to `false`"
        },
        "lineNumber": 17,
        "iacDescription": {
          "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
          "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`"
        },
        "publicId": "SNYK-CC-K8S-9",
        "msg": "spec.template.spec.containers[quay-wait-job].securityContext.allowPrivilegeEscalation",
        "references": [
          "https://www.kernel.org/doc/html/latest/userspace-api/no_new_privs.html"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "containers[quay-wait-job]",
          "securityContext",
          "allowPrivilegeEscalation"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-8",
        "title": "Container is running with writable root filesystem",
        "severity": "low",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-8",
        "isGeneratedByCustomRule": false,
        "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
        "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
          "terraform": "Set `security_context.read_only_root_filesystem` to `true`"
        },
        "lineNumber": 17,
        "iacDescription": {
          "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
          "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`"
        },
        "publicId": "SNYK-CC-K8S-8",
        "msg": "spec.template.spec.containers[quay-wait-job].securityContext.readOnlyRootFilesystem",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "containers[quay-wait-job]",
          "securityContext",
          "readOnlyRootFilesystem"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-4",
        "title": "Container is running without memory limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-4",
        "isGeneratedByCustomRule": false,
        "issue": "Memory limit is not defined",
        "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
        "resolve": "Set `resources.limits.memory` value",
        "remediation": {
          "kubernetes": "Set `resources.limits.memory` value",
          "terraform": "Set `resources.limits.memory` value"
        },
        "lineNumber": 17,
        "iacDescription": {
          "issue": "Memory limit is not defined",
          "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
          "resolve": "Set `resources.limits.memory` value"
        },
        "publicId": "SNYK-CC-K8S-4",
        "msg": "input.spec.template.spec.containers[quay-wait-job].resources.limits.memory",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/memory-default-namespace/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[quay-wait-job]",
          "resources",
          "limits",
          "memory"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-10",
        "title": "Container or Pod is running without root user control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-10",
        "isGeneratedByCustomRule": false,
        "issue": "Container or Pod is running without root user control",
        "impact": "Container or Pod could be running with full administrative privileges",
        "resolve": "Set `securityContext.runAsNonRoot` to `true`",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsNonRoot` to `true`",
          "terraform": "Set `security_context.run_as_non_root` to `true`"
        },
        "lineNumber": 17,
        "iacDescription": {
          "issue": "Container or Pod is running without root user control",
          "impact": "Container or Pod could be running with full administrative privileges",
          "resolve": "Set `securityContext.runAsNonRoot` to `true`"
        },
        "publicId": "SNYK-CC-K8S-10",
        "msg": "input.spec.template.spec.containers[quay-wait-job].securityContext.runAsNonRoot",
        "description": "",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[quay-wait-job]",
          "securityContext",
          "runAsNonRoot"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-6",
        "title": "Container does not drop all default capabilities",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-6",
        "isGeneratedByCustomRule": false,
        "issue": "All default capabilities are not explicitly dropped",
        "impact": "Containers are running with potentially unnecessary privileges",
        "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
        "remediation": {
          "kubernetes": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
          "terraform": "Add `ALL` to `spec.container.security_context.capabilities.drop` list, and add only required capabilities to `spec.container.security_context.capabilities.add`, ensuring it also does not contain `ALL`"
        },
        "lineNumber": 17,
        "iacDescription": {
          "issue": "All default capabilities are not explicitly dropped",
          "impact": "Containers are running with potentially unnecessary privileges",
          "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`"
        },
        "publicId": "SNYK-CC-K8S-6",
        "msg": "input.spec.template.spec.containers[quay-wait-job].securityContext.capabilities.drop",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
          "https://linux-audit.com/linux-capabilities-hardening-linux-binaries-by-removing-setuid/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[quay-wait-job]",
          "securityContext",
          "capabilities",
          "drop"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-11",
        "title": "Container's or Pod's  UID could clash with host's UID",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-11",
        "isGeneratedByCustomRule": false,
        "issue": "`runAsUser` value is set to low UID",
        "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
        "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
          "terraform": "Set `security_context.run_as_user` value to greater or equal than 10'000"
        },
        "lineNumber": 17,
        "iacDescription": {
          "issue": "`runAsUser` value is set to low UID",
          "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
          "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence"
        },
        "publicId": "SNYK-CC-K8S-11",
        "msg": "input.spec.template.spec.containers[quay-wait-job].securityContext.runAsUser",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container",
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod",
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[quay-wait-job]",
          "securityContext",
          "runAsUser"
        ],
        "compliance": []
      }
    ]
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_plus/files/quay/noobaa/noobaa-default-bucket-class.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_plus/files/quay/noobaa/noobaa-default-bucket-class.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_plus/files/quay/noobaa/noobaa-pv-backing-store.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_plus/files/quay/noobaa/noobaa-pv-backing-store.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_plus/files/quay/noobaa/noobaa-wait-finish-job.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_plus/files/quay/noobaa/noobaa-wait-finish-job.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": false,
    "infrastructureAsCodeIssues": [
      {
        "id": "SNYK-CC-K8S-6",
        "title": "Container does not drop all default capabilities",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-6",
        "isGeneratedByCustomRule": false,
        "issue": "All default capabilities are not explicitly dropped",
        "impact": "Containers are running with potentially unnecessary privileges",
        "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
        "remediation": {
          "kubernetes": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
          "terraform": "Add `ALL` to `spec.container.security_context.capabilities.drop` list, and add only required capabilities to `spec.container.security_context.capabilities.add`, ensuring it also does not contain `ALL`"
        },
        "lineNumber": 17,
        "iacDescription": {
          "issue": "All default capabilities are not explicitly dropped",
          "impact": "Containers are running with potentially unnecessary privileges",
          "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`"
        },
        "publicId": "SNYK-CC-K8S-6",
        "msg": "input.spec.template.spec.containers[noobaa-wait-job].securityContext.capabilities.drop",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
          "https://linux-audit.com/linux-capabilities-hardening-linux-binaries-by-removing-setuid/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[noobaa-wait-job]",
          "securityContext",
          "capabilities",
          "drop"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-11",
        "title": "Container's or Pod's  UID could clash with host's UID",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-11",
        "isGeneratedByCustomRule": false,
        "issue": "`runAsUser` value is set to low UID",
        "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
        "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
          "terraform": "Set `security_context.run_as_user` value to greater or equal than 10'000"
        },
        "lineNumber": 17,
        "iacDescription": {
          "issue": "`runAsUser` value is set to low UID",
          "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
          "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence"
        },
        "publicId": "SNYK-CC-K8S-11",
        "msg": "input.spec.template.spec.containers[noobaa-wait-job].securityContext.runAsUser",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container",
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod",
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[noobaa-wait-job]",
          "securityContext",
          "runAsUser"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-8",
        "title": "Container is running with writable root filesystem",
        "severity": "low",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-8",
        "isGeneratedByCustomRule": false,
        "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
        "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
          "terraform": "Set `security_context.read_only_root_filesystem` to `true`"
        },
        "lineNumber": 17,
        "iacDescription": {
          "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
          "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`"
        },
        "publicId": "SNYK-CC-K8S-8",
        "msg": "spec.template.spec.containers[noobaa-wait-job].securityContext.readOnlyRootFilesystem",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "containers[noobaa-wait-job]",
          "securityContext",
          "readOnlyRootFilesystem"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-5",
        "title": "Container has no CPU limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-5",
        "isGeneratedByCustomRule": false,
        "issue": "Container has no CPU limit",
        "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
        "resolve": "Add `resources.limits.cpu` field with required CPU limit value",
        "remediation": {
          "kubernetes": "Add `resources.limits.cpu` field with required CPU limit value",
          "terraform": "Add `spec.container.resources.limits.cpu` field with required CPU limit value"
        },
        "lineNumber": 17,
        "iacDescription": {
          "issue": "Container has no CPU limit",
          "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
          "resolve": "Add `resources.limits.cpu` field with required CPU limit value"
        },
        "publicId": "SNYK-CC-K8S-5",
        "msg": "input.spec.template.spec.containers[noobaa-wait-job].resources.limits.cpu",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-cpu-resource/",
          "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/cpu-default-namespace/",
          "https://github.com/kubernetes/design-proposals-archive/blob/8da1442ea29adccea40693357d04727127e045ed/node/resource-qos.md#compressible-resource-guaranteess"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[noobaa-wait-job]",
          "resources",
          "limits",
          "cpu"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-10",
        "title": "Container or Pod is running without root user control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-10",
        "isGeneratedByCustomRule": false,
        "issue": "Container or Pod is running without root user control",
        "impact": "Container or Pod could be running with full administrative privileges",
        "resolve": "Set `securityContext.runAsNonRoot` to `true`",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsNonRoot` to `true`",
          "terraform": "Set `security_context.run_as_non_root` to `true`"
        },
        "lineNumber": 17,
        "iacDescription": {
          "issue": "Container or Pod is running without root user control",
          "impact": "Container or Pod could be running with full administrative privileges",
          "resolve": "Set `securityContext.runAsNonRoot` to `true`"
        },
        "publicId": "SNYK-CC-K8S-10",
        "msg": "input.spec.template.spec.containers[noobaa-wait-job].securityContext.runAsNonRoot",
        "description": "",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[noobaa-wait-job]",
          "securityContext",
          "runAsNonRoot"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-9",
        "title": "Container is running without privilege escalation control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-9",
        "isGeneratedByCustomRule": false,
        "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
        "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
          "terraform": "Set `spec.container.security_context.allow_privilege_escalation` to `false`"
        },
        "lineNumber": 17,
        "iacDescription": {
          "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
          "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`"
        },
        "publicId": "SNYK-CC-K8S-9",
        "msg": "spec.template.spec.containers[noobaa-wait-job].securityContext.allowPrivilegeEscalation",
        "references": [
          "https://www.kernel.org/doc/html/latest/userspace-api/no_new_privs.html"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "containers[noobaa-wait-job]",
          "securityContext",
          "allowPrivilegeEscalation"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-4",
        "title": "Container is running without memory limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-4",
        "isGeneratedByCustomRule": false,
        "issue": "Memory limit is not defined",
        "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
        "resolve": "Set `resources.limits.memory` value",
        "remediation": {
          "kubernetes": "Set `resources.limits.memory` value",
          "terraform": "Set `resources.limits.memory` value"
        },
        "lineNumber": 17,
        "iacDescription": {
          "issue": "Memory limit is not defined",
          "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
          "resolve": "Set `resources.limits.memory` value"
        },
        "publicId": "SNYK-CC-K8S-4",
        "msg": "input.spec.template.spec.containers[noobaa-wait-job].resources.limits.memory",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/memory-default-namespace/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[noobaa-wait-job]",
          "resources",
          "limits",
          "memory"
        ],
        "compliance": []
      }
    ]
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_plus/files/quay/noobaa/noobaa.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_plus/files/quay/noobaa/noobaa.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_plus/files/quay/operators/odf-namespace.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_plus/files/quay/operators/odf-namespace.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_plus/files/quay/operators/odf-og.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_plus/files/quay/operators/odf-og.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_plus/files/quay/operators/odf-sub.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_plus/files/quay/operators/odf-sub.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_plus/files/quay/operators/quay-sub.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_plus/files/quay/operators/quay-sub.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_plus/files/quay/operators/sleep-job.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_plus/files/quay/operators/sleep-job.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": false,
    "infrastructureAsCodeIssues": [
      {
        "id": "SNYK-CC-K8S-11",
        "title": "Container's or Pod's  UID could clash with host's UID",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-11",
        "isGeneratedByCustomRule": false,
        "issue": "`runAsUser` value is set to low UID",
        "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
        "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
          "terraform": "Set `security_context.run_as_user` value to greater or equal than 10'000"
        },
        "lineNumber": 17,
        "iacDescription": {
          "issue": "`runAsUser` value is set to low UID",
          "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
          "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence"
        },
        "publicId": "SNYK-CC-K8S-11",
        "msg": "input.spec.template.spec.containers[sleep-job].securityContext.runAsUser",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container",
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod",
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[sleep-job]",
          "securityContext",
          "runAsUser"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-8",
        "title": "Container is running with writable root filesystem",
        "severity": "low",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-8",
        "isGeneratedByCustomRule": false,
        "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
        "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
          "terraform": "Set `security_context.read_only_root_filesystem` to `true`"
        },
        "lineNumber": 17,
        "iacDescription": {
          "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
          "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`"
        },
        "publicId": "SNYK-CC-K8S-8",
        "msg": "spec.template.spec.containers[sleep-job].securityContext.readOnlyRootFilesystem",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "containers[sleep-job]",
          "securityContext",
          "readOnlyRootFilesystem"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-5",
        "title": "Container has no CPU limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-5",
        "isGeneratedByCustomRule": false,
        "issue": "Container has no CPU limit",
        "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
        "resolve": "Add `resources.limits.cpu` field with required CPU limit value",
        "remediation": {
          "kubernetes": "Add `resources.limits.cpu` field with required CPU limit value",
          "terraform": "Add `spec.container.resources.limits.cpu` field with required CPU limit value"
        },
        "lineNumber": 17,
        "iacDescription": {
          "issue": "Container has no CPU limit",
          "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
          "resolve": "Add `resources.limits.cpu` field with required CPU limit value"
        },
        "publicId": "SNYK-CC-K8S-5",
        "msg": "input.spec.template.spec.containers[sleep-job].resources.limits.cpu",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-cpu-resource/",
          "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/cpu-default-namespace/",
          "https://github.com/kubernetes/design-proposals-archive/blob/8da1442ea29adccea40693357d04727127e045ed/node/resource-qos.md#compressible-resource-guaranteess"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[sleep-job]",
          "resources",
          "limits",
          "cpu"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-9",
        "title": "Container is running without privilege escalation control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-9",
        "isGeneratedByCustomRule": false,
        "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
        "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
          "terraform": "Set `spec.container.security_context.allow_privilege_escalation` to `false`"
        },
        "lineNumber": 17,
        "iacDescription": {
          "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
          "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`"
        },
        "publicId": "SNYK-CC-K8S-9",
        "msg": "spec.template.spec.containers[sleep-job].securityContext.allowPrivilegeEscalation",
        "references": [
          "https://www.kernel.org/doc/html/latest/userspace-api/no_new_privs.html"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "containers[sleep-job]",
          "securityContext",
          "allowPrivilegeEscalation"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-10",
        "title": "Container or Pod is running without root user control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-10",
        "isGeneratedByCustomRule": false,
        "issue": "Container or Pod is running without root user control",
        "impact": "Container or Pod could be running with full administrative privileges",
        "resolve": "Set `securityContext.runAsNonRoot` to `true`",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsNonRoot` to `true`",
          "terraform": "Set `security_context.run_as_non_root` to `true`"
        },
        "lineNumber": 17,
        "iacDescription": {
          "issue": "Container or Pod is running without root user control",
          "impact": "Container or Pod could be running with full administrative privileges",
          "resolve": "Set `securityContext.runAsNonRoot` to `true`"
        },
        "publicId": "SNYK-CC-K8S-10",
        "msg": "input.spec.template.spec.containers[sleep-job].securityContext.runAsNonRoot",
        "description": "",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[sleep-job]",
          "securityContext",
          "runAsNonRoot"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-6",
        "title": "Container does not drop all default capabilities",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-6",
        "isGeneratedByCustomRule": false,
        "issue": "All default capabilities are not explicitly dropped",
        "impact": "Containers are running with potentially unnecessary privileges",
        "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
        "remediation": {
          "kubernetes": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
          "terraform": "Add `ALL` to `spec.container.security_context.capabilities.drop` list, and add only required capabilities to `spec.container.security_context.capabilities.add`, ensuring it also does not contain `ALL`"
        },
        "lineNumber": 17,
        "iacDescription": {
          "issue": "All default capabilities are not explicitly dropped",
          "impact": "Containers are running with potentially unnecessary privileges",
          "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`"
        },
        "publicId": "SNYK-CC-K8S-6",
        "msg": "input.spec.template.spec.containers[sleep-job].securityContext.capabilities.drop",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
          "https://linux-audit.com/linux-capabilities-hardening-linux-binaries-by-removing-setuid/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[sleep-job]",
          "securityContext",
          "capabilities",
          "drop"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-4",
        "title": "Container is running without memory limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-4",
        "isGeneratedByCustomRule": false,
        "issue": "Memory limit is not defined",
        "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
        "resolve": "Set `resources.limits.memory` value",
        "remediation": {
          "kubernetes": "Set `resources.limits.memory` value",
          "terraform": "Set `resources.limits.memory` value"
        },
        "lineNumber": 17,
        "iacDescription": {
          "issue": "Memory limit is not defined",
          "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
          "resolve": "Set `resources.limits.memory` value"
        },
        "publicId": "SNYK-CC-K8S-4",
        "msg": "input.spec.template.spec.containers[sleep-job].resources.limits.memory",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/memory-default-namespace/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[sleep-job]",
          "resources",
          "limits",
          "memory"
        ],
        "compliance": []
      }
    ]
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_project_request_template/files/openshift-ingress-namespace.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_project_request_template/files/openshift-ingress-namespace.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_quarkus_super_heroes_demo/files/amqstreams_instance.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_quarkus_super_heroes_demo/files/amqstreams_instance.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_quarkus_super_heroes_demo/files/amqstreams_subscription.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_quarkus_super_heroes_demo/files/amqstreams_subscription.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_quarkus_super_heroes_demo/files/cert_manager_subscription.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_quarkus_super_heroes_demo/files/cert_manager_subscription.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_quarkus_super_heroes_demo/files/container_security_subscription.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_quarkus_super_heroes_demo/files/container_security_subscription.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_quarkus_super_heroes_demo/files/grafana_dashboard_kafka.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_quarkus_super_heroes_demo/files/grafana_dashboard_kafka.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_quarkus_super_heroes_demo/files/grafana_dashboard_kafka_exporter.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_quarkus_super_heroes_demo/files/grafana_dashboard_kafka_exporter.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_quarkus_super_heroes_demo/files/grafana_dashboard_quarkus_jvm_app.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_quarkus_super_heroes_demo/files/grafana_dashboard_quarkus_jvm_app.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_quarkus_super_heroes_demo/files/grafana_dashboard_zookeeper.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_quarkus_super_heroes_demo/files/grafana_dashboard_zookeeper.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_quarkus_super_heroes_demo/files/grafana_datasource_prometheus.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_quarkus_super_heroes_demo/files/grafana_datasource_prometheus.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_quarkus_super_heroes_demo/files/grafana_instance.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_quarkus_super_heroes_demo/files/grafana_instance.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_quarkus_super_heroes_demo/files/jaeger_instance.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_quarkus_super_heroes_demo/files/jaeger_instance.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_quarkus_super_heroes_demo/files/jaeger_subscription.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_quarkus_super_heroes_demo/files/jaeger_subscription.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_quarkus_super_heroes_demo/files/opentelemetry_subscription.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_quarkus_super_heroes_demo/files/opentelemetry_subscription.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_quarkus_super_heroes_demo/files/prometheus_instance.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_quarkus_super_heroes_demo/files/prometheus_instance.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_quay_workshop/tasks/temp.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_quay_workshop/tasks/temp.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": false,
    "infrastructureAsCodeIssues": [
      {
        "id": "SNYK-CC-K8S-46",
        "title": "RoleBinding or ClusterRoleBinding is using a pre-defined role",
        "severity": "high",
        "isIgnored": false,
        "subType": "ClusterRoleBinding",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-46",
        "isGeneratedByCustomRule": false,
        "issue": "A RoleBinding or ClusterRoleBinding was found using one of the default user facing roles, `cluster-admin`, `admin`, `edit` or `view`.",
        "impact": "Using a default user facing role may be overly permissive. For a ClusterRoleBinding this would be considered high severity.",
        "resolve": "Update roleRef.name to a specific role name with only the necessary permissions",
        "remediation": {
          "kubernetes": "Update roleRef.name to a specific role name with only the necessary permissions"
        },
        "lineNumber": 13,
        "iacDescription": {
          "issue": "A RoleBinding or ClusterRoleBinding was found using one of the default user facing roles, `cluster-admin`, `admin`, `edit` or `view`.",
          "impact": "Using a default user facing role may be overly permissive. For a ClusterRoleBinding this would be considered high severity.",
          "resolve": "Update roleRef.name to a specific role name with only the necessary permissions"
        },
        "publicId": "SNYK-CC-K8S-46",
        "msg": "roleRef.name",
        "references": [
          "https://kubernetes.io/docs/reference/access-authn-authz/rbac/"
        ],
        "path": [
          "[DocId: 0]",
          "roleRef",
          "name"
        ],
        "compliance": []
      }
    ]
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_quay_workshop/templates/homeroom-ns.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_quay_workshop/templates/homeroom-ns.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_quay_workshop/templates/operatorgroup.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_quay_workshop/templates/operatorgroup.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_quay_workshop/templates/quay-ns.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_quay_workshop/templates/quay-ns.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_quay_workshop/templates/rolebinding.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_quay_workshop/templates/rolebinding.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": false,
    "infrastructureAsCodeIssues": [
      {
        "id": "SNYK-CC-K8S-46",
        "title": "RoleBinding or ClusterRoleBinding is using a pre-defined role",
        "severity": "medium",
        "isIgnored": false,
        "subType": "RoleBinding",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-46",
        "isGeneratedByCustomRule": false,
        "issue": "A RoleBinding or ClusterRoleBinding was found using one of the default user facing roles, `cluster-admin`, `admin`, `edit` or `view`.",
        "impact": "Using a default user facing role may be overly permissive. For a ClusterRoleBinding this would be considered high severity.",
        "resolve": "Update roleRef.name to a specific role name with only the necessary permissions",
        "remediation": {
          "kubernetes": "Update roleRef.name to a specific role name with only the necessary permissions"
        },
        "lineNumber": 12,
        "iacDescription": {
          "issue": "A RoleBinding or ClusterRoleBinding was found using one of the default user facing roles, `cluster-admin`, `admin`, `edit` or `view`.",
          "impact": "Using a default user facing role may be overly permissive. For a ClusterRoleBinding this would be considered high severity.",
          "resolve": "Update roleRef.name to a specific role name with only the necessary permissions"
        },
        "publicId": "SNYK-CC-K8S-46",
        "msg": "roleRef.name",
        "references": [
          "https://kubernetes.io/docs/reference/access-authn-authz/rbac/"
        ],
        "path": [
          "[DocId: 0]",
          "roleRef",
          "name"
        ],
        "compliance": []
      }
    ]
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_quay_workshop/templates/secret.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_quay_workshop/templates/secret.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_quay_workshop/templates/subscription.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_quay_workshop/templates/subscription.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_rhacm_hypershift/files/managedclusteraddon.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_rhacm_hypershift/files/managedclusteraddon.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_rhacs_demo_apps/files/demos/backend/everything.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_rhacs_demo_apps/files/demos/backend/everything.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": false,
    "infrastructureAsCodeIssues": [
      {
        "id": "SNYK-CC-K8S-8",
        "title": "Container is running with writable root filesystem",
        "severity": "low",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-8",
        "isGeneratedByCustomRule": false,
        "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
        "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
          "terraform": "Set `security_context.read_only_root_filesystem` to `true`"
        },
        "lineNumber": 44,
        "iacDescription": {
          "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
          "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`"
        },
        "publicId": "SNYK-CC-K8S-8",
        "msg": "spec.template.spec.containers[api-server].securityContext.readOnlyRootFilesystem",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 2]",
          "spec",
          "template",
          "spec",
          "containers[api-server]",
          "securityContext",
          "readOnlyRootFilesystem"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-6",
        "title": "Container does not drop all default capabilities",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-6",
        "isGeneratedByCustomRule": false,
        "issue": "All default capabilities are not explicitly dropped",
        "impact": "Containers are running with potentially unnecessary privileges",
        "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
        "remediation": {
          "kubernetes": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
          "terraform": "Add `ALL` to `spec.container.security_context.capabilities.drop` list, and add only required capabilities to `spec.container.security_context.capabilities.add`, ensuring it also does not contain `ALL`"
        },
        "lineNumber": 44,
        "iacDescription": {
          "issue": "All default capabilities are not explicitly dropped",
          "impact": "Containers are running with potentially unnecessary privileges",
          "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`"
        },
        "publicId": "SNYK-CC-K8S-6",
        "msg": "input.spec.template.spec.containers[api-server].securityContext.capabilities.drop",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
          "https://linux-audit.com/linux-capabilities-hardening-linux-binaries-by-removing-setuid/"
        ],
        "path": [
          "[DocId: 2]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[api-server]",
          "securityContext",
          "capabilities",
          "drop"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-11",
        "title": "Container's or Pod's  UID could clash with host's UID",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-11",
        "isGeneratedByCustomRule": false,
        "issue": "`runAsUser` value is set to low UID",
        "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
        "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
          "terraform": "Set `security_context.run_as_user` value to greater or equal than 10'000"
        },
        "lineNumber": 44,
        "iacDescription": {
          "issue": "`runAsUser` value is set to low UID",
          "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
          "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence"
        },
        "publicId": "SNYK-CC-K8S-11",
        "msg": "input.spec.template.spec.containers[api-server].securityContext.runAsUser",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container",
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod",
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 2]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[api-server]",
          "securityContext",
          "runAsUser"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-5",
        "title": "Container has no CPU limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-5",
        "isGeneratedByCustomRule": false,
        "issue": "Container has no CPU limit",
        "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
        "resolve": "Add `resources.limits.cpu` field with required CPU limit value",
        "remediation": {
          "kubernetes": "Add `resources.limits.cpu` field with required CPU limit value",
          "terraform": "Add `spec.container.resources.limits.cpu` field with required CPU limit value"
        },
        "lineNumber": 44,
        "iacDescription": {
          "issue": "Container has no CPU limit",
          "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
          "resolve": "Add `resources.limits.cpu` field with required CPU limit value"
        },
        "publicId": "SNYK-CC-K8S-5",
        "msg": "input.spec.template.spec.containers[api-server].resources.limits.cpu",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-cpu-resource/",
          "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/cpu-default-namespace/",
          "https://github.com/kubernetes/design-proposals-archive/blob/8da1442ea29adccea40693357d04727127e045ed/node/resource-qos.md#compressible-resource-guaranteess"
        ],
        "path": [
          "[DocId: 2]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[api-server]",
          "resources",
          "limits",
          "cpu"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-10",
        "title": "Container or Pod is running without root user control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-10",
        "isGeneratedByCustomRule": false,
        "issue": "Container or Pod is running without root user control",
        "impact": "Container or Pod could be running with full administrative privileges",
        "resolve": "Set `securityContext.runAsNonRoot` to `true`",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsNonRoot` to `true`",
          "terraform": "Set `security_context.run_as_non_root` to `true`"
        },
        "lineNumber": 44,
        "iacDescription": {
          "issue": "Container or Pod is running without root user control",
          "impact": "Container or Pod could be running with full administrative privileges",
          "resolve": "Set `securityContext.runAsNonRoot` to `true`"
        },
        "publicId": "SNYK-CC-K8S-10",
        "msg": "input.spec.template.spec.containers[api-server].securityContext.runAsNonRoot",
        "description": "",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 2]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[api-server]",
          "securityContext",
          "runAsNonRoot"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-9",
        "title": "Container is running without privilege escalation control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-9",
        "isGeneratedByCustomRule": false,
        "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
        "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
          "terraform": "Set `spec.container.security_context.allow_privilege_escalation` to `false`"
        },
        "lineNumber": 44,
        "iacDescription": {
          "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
          "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`"
        },
        "publicId": "SNYK-CC-K8S-9",
        "msg": "spec.template.spec.containers[api-server].securityContext.allowPrivilegeEscalation",
        "references": [
          "https://www.kernel.org/doc/html/latest/userspace-api/no_new_privs.html"
        ],
        "path": [
          "[DocId: 2]",
          "spec",
          "template",
          "spec",
          "containers[api-server]",
          "securityContext",
          "allowPrivilegeEscalation"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-41",
        "title": "Container is running without liveness probe",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-41",
        "isGeneratedByCustomRule": false,
        "issue": "Liveness probe is not defined",
        "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
        "resolve": "Add `livenessProbe` attribute",
        "remediation": {
          "kubernetes": "Add `livenessProbe` attribute",
          "terraform": "Add `liveness_probe` attribute"
        },
        "lineNumber": 44,
        "iacDescription": {
          "issue": "Liveness probe is not defined",
          "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
          "resolve": "Add `livenessProbe` attribute"
        },
        "publicId": "SNYK-CC-K8S-41",
        "msg": "spec.template.spec.containers[api-server].livenessProbe",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/",
          "https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/",
          "https://cloud.google.com/blog/products/gcp/kubernetes-best-practices-setting-up-health-checks-with-readiness-and-liveness-probes"
        ],
        "path": [
          "[DocId: 2]",
          "spec",
          "template",
          "spec",
          "containers[api-server]",
          "livenessProbe"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-4",
        "title": "Container is running without memory limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-4",
        "isGeneratedByCustomRule": false,
        "issue": "Memory limit is not defined",
        "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
        "resolve": "Set `resources.limits.memory` value",
        "remediation": {
          "kubernetes": "Set `resources.limits.memory` value",
          "terraform": "Set `resources.limits.memory` value"
        },
        "lineNumber": 44,
        "iacDescription": {
          "issue": "Memory limit is not defined",
          "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
          "resolve": "Set `resources.limits.memory` value"
        },
        "publicId": "SNYK-CC-K8S-4",
        "msg": "input.spec.template.spec.containers[api-server].resources.limits.memory",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/memory-default-namespace/"
        ],
        "path": [
          "[DocId: 2]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[api-server]",
          "resources",
          "limits",
          "memory"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-44",
        "title": "Role or ClusterRole with too wide permissions",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Role",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-44",
        "isGeneratedByCustomRule": false,
        "issue": "The role uses wildcards, which grant the role permissions to the whole cluster",
        "impact": "The use of wildcard rights grants is likely to provide excessive rights to the Kubernetes API. For a ClusterRole this would be considered high severity.",
        "resolve": "Set only the necessary permissions required",
        "remediation": {
          "kubernetes": "Set only the necessary permissions required",
          "terraform": "Remove any wildcards [*] from `rule.verbs` and `rule.resources`"
        },
        "lineNumber": 99,
        "iacDescription": {
          "issue": "The role uses wildcards, which grant the role permissions to the whole cluster",
          "impact": "The use of wildcard rights grants is likely to provide excessive rights to the Kubernetes API. For a ClusterRole this would be considered high severity.",
          "resolve": "Set only the necessary permissions required"
        },
        "publicId": "SNYK-CC-K8S-44",
        "msg": "rules[0].verbs",
        "references": [
          "https://kubernetes.io/docs/reference/access-authn-authz/rbac/"
        ],
        "path": [
          "[DocId: 5]",
          "rules[0]",
          "verbs"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-11",
        "title": "Container's or Pod's  UID could clash with host's UID",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-11",
        "isGeneratedByCustomRule": false,
        "issue": "`runAsUser` value is set to low UID",
        "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
        "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
          "terraform": "Set `security_context.run_as_user` value to greater or equal than 10'000"
        },
        "lineNumber": 147,
        "iacDescription": {
          "issue": "`runAsUser` value is set to low UID",
          "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
          "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence"
        },
        "publicId": "SNYK-CC-K8S-11",
        "msg": "input.spec.template.spec.containers[backend-atlas].securityContext.runAsUser",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container",
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod",
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 7]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[backend-atlas]",
          "securityContext",
          "runAsUser"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-5",
        "title": "Container has no CPU limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-5",
        "isGeneratedByCustomRule": false,
        "issue": "Container has no CPU limit",
        "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
        "resolve": "Add `resources.limits.cpu` field with required CPU limit value",
        "remediation": {
          "kubernetes": "Add `resources.limits.cpu` field with required CPU limit value",
          "terraform": "Add `spec.container.resources.limits.cpu` field with required CPU limit value"
        },
        "lineNumber": 152,
        "iacDescription": {
          "issue": "Container has no CPU limit",
          "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
          "resolve": "Add `resources.limits.cpu` field with required CPU limit value"
        },
        "publicId": "SNYK-CC-K8S-5",
        "msg": "input.spec.template.spec.containers[log-collector].resources.limits.cpu",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-cpu-resource/",
          "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/cpu-default-namespace/",
          "https://github.com/kubernetes/design-proposals-archive/blob/8da1442ea29adccea40693357d04727127e045ed/node/resource-qos.md#compressible-resource-guaranteess"
        ],
        "path": [
          "[DocId: 7]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[log-collector]",
          "resources",
          "limits",
          "cpu"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-10",
        "title": "Container or Pod is running without root user control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-10",
        "isGeneratedByCustomRule": false,
        "issue": "Container or Pod is running without root user control",
        "impact": "Container or Pod could be running with full administrative privileges",
        "resolve": "Set `securityContext.runAsNonRoot` to `true`",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsNonRoot` to `true`",
          "terraform": "Set `security_context.run_as_non_root` to `true`"
        },
        "lineNumber": 147,
        "iacDescription": {
          "issue": "Container or Pod is running without root user control",
          "impact": "Container or Pod could be running with full administrative privileges",
          "resolve": "Set `securityContext.runAsNonRoot` to `true`"
        },
        "publicId": "SNYK-CC-K8S-10",
        "msg": "input.spec.template.spec.containers[backend-atlas].securityContext.runAsNonRoot",
        "description": "",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 7]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[backend-atlas]",
          "securityContext",
          "runAsNonRoot"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-4",
        "title": "Container is running without memory limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-4",
        "isGeneratedByCustomRule": false,
        "issue": "Memory limit is not defined",
        "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
        "resolve": "Set `resources.limits.memory` value",
        "remediation": {
          "kubernetes": "Set `resources.limits.memory` value",
          "terraform": "Set `resources.limits.memory` value"
        },
        "lineNumber": 152,
        "iacDescription": {
          "issue": "Memory limit is not defined",
          "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
          "resolve": "Set `resources.limits.memory` value"
        },
        "publicId": "SNYK-CC-K8S-4",
        "msg": "input.spec.template.spec.containers[log-collector].resources.limits.memory",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/memory-default-namespace/"
        ],
        "path": [
          "[DocId: 7]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[log-collector]",
          "resources",
          "limits",
          "memory"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-9",
        "title": "Container is running without privilege escalation control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-9",
        "isGeneratedByCustomRule": false,
        "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
        "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
          "terraform": "Set `spec.container.security_context.allow_privilege_escalation` to `false`"
        },
        "lineNumber": 147,
        "iacDescription": {
          "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
          "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`"
        },
        "publicId": "SNYK-CC-K8S-9",
        "msg": "spec.template.spec.containers[backend-atlas].securityContext.allowPrivilegeEscalation",
        "references": [
          "https://www.kernel.org/doc/html/latest/userspace-api/no_new_privs.html"
        ],
        "path": [
          "[DocId: 7]",
          "spec",
          "template",
          "spec",
          "containers[backend-atlas]",
          "securityContext",
          "allowPrivilegeEscalation"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-41",
        "title": "Container is running without liveness probe",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-41",
        "isGeneratedByCustomRule": false,
        "issue": "Liveness probe is not defined",
        "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
        "resolve": "Add `livenessProbe` attribute",
        "remediation": {
          "kubernetes": "Add `livenessProbe` attribute",
          "terraform": "Add `liveness_probe` attribute"
        },
        "lineNumber": 152,
        "iacDescription": {
          "issue": "Liveness probe is not defined",
          "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
          "resolve": "Add `livenessProbe` attribute"
        },
        "publicId": "SNYK-CC-K8S-41",
        "msg": "spec.template.spec.containers[log-collector].livenessProbe",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/",
          "https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/",
          "https://cloud.google.com/blog/products/gcp/kubernetes-best-practices-setting-up-health-checks-with-readiness-and-liveness-probes"
        ],
        "path": [
          "[DocId: 7]",
          "spec",
          "template",
          "spec",
          "containers[log-collector]",
          "livenessProbe"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-8",
        "title": "Container is running with writable root filesystem",
        "severity": "low",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-8",
        "isGeneratedByCustomRule": false,
        "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
        "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
          "terraform": "Set `security_context.read_only_root_filesystem` to `true`"
        },
        "lineNumber": 147,
        "iacDescription": {
          "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
          "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`"
        },
        "publicId": "SNYK-CC-K8S-8",
        "msg": "spec.template.spec.containers[backend-atlas].securityContext.readOnlyRootFilesystem",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 7]",
          "spec",
          "template",
          "spec",
          "containers[backend-atlas]",
          "securityContext",
          "readOnlyRootFilesystem"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-6",
        "title": "Container does not drop all default capabilities",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-6",
        "isGeneratedByCustomRule": false,
        "issue": "All default capabilities are not explicitly dropped",
        "impact": "Containers are running with potentially unnecessary privileges",
        "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
        "remediation": {
          "kubernetes": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
          "terraform": "Add `ALL` to `spec.container.security_context.capabilities.drop` list, and add only required capabilities to `spec.container.security_context.capabilities.add`, ensuring it also does not contain `ALL`"
        },
        "lineNumber": 147,
        "iacDescription": {
          "issue": "All default capabilities are not explicitly dropped",
          "impact": "Containers are running with potentially unnecessary privileges",
          "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`"
        },
        "publicId": "SNYK-CC-K8S-6",
        "msg": "input.spec.template.spec.containers[backend-atlas].securityContext.capabilities.drop",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
          "https://linux-audit.com/linux-capabilities-hardening-linux-binaries-by-removing-setuid/"
        ],
        "path": [
          "[DocId: 7]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[backend-atlas]",
          "securityContext",
          "capabilities",
          "drop"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-42",
        "title": "Container could be running with outdated image",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-42",
        "isGeneratedByCustomRule": false,
        "issue": "The image policy does not prevent image reuse",
        "impact": "The container may run with outdated or unauthorized image",
        "resolve": "Set `imagePullPolicy` attribute to `Always`",
        "remediation": {
          "kubernetes": "Set `imagePullPolicy` attribute to `Always`",
          "terraform": "Set `image_pull_policy` attribute to `Always"
        },
        "lineNumber": 152,
        "iacDescription": {
          "issue": "The image policy does not prevent image reuse",
          "impact": "The container may run with outdated or unauthorized image",
          "resolve": "Set `imagePullPolicy` attribute to `Always`"
        },
        "publicId": "SNYK-CC-K8S-42",
        "msg": "spec.template.spec.containers[log-collector].imagePullPolicy",
        "references": [
          "https://kubernetes.io/docs/concepts/containers/images/",
          "https://kubernetes.io/docs/concepts/configuration/overview/#container-images"
        ],
        "path": [
          "[DocId: 7]",
          "spec",
          "template",
          "spec",
          "containers[log-collector]",
          "imagePullPolicy"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-9",
        "title": "Container is running without privilege escalation control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-9",
        "isGeneratedByCustomRule": false,
        "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
        "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
          "terraform": "Set `spec.container.security_context.allow_privilege_escalation` to `false`"
        },
        "lineNumber": 152,
        "iacDescription": {
          "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
          "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`"
        },
        "publicId": "SNYK-CC-K8S-9",
        "msg": "spec.template.spec.containers[log-collector].securityContext.allowPrivilegeEscalation",
        "references": [
          "https://www.kernel.org/doc/html/latest/userspace-api/no_new_privs.html"
        ],
        "path": [
          "[DocId: 7]",
          "spec",
          "template",
          "spec",
          "containers[log-collector]",
          "securityContext",
          "allowPrivilegeEscalation"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-4",
        "title": "Container is running without memory limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-4",
        "isGeneratedByCustomRule": false,
        "issue": "Memory limit is not defined",
        "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
        "resolve": "Set `resources.limits.memory` value",
        "remediation": {
          "kubernetes": "Set `resources.limits.memory` value",
          "terraform": "Set `resources.limits.memory` value"
        },
        "lineNumber": 147,
        "iacDescription": {
          "issue": "Memory limit is not defined",
          "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
          "resolve": "Set `resources.limits.memory` value"
        },
        "publicId": "SNYK-CC-K8S-4",
        "msg": "input.spec.template.spec.containers[backend-atlas].resources.limits.memory",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/memory-default-namespace/"
        ],
        "path": [
          "[DocId: 7]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[backend-atlas]",
          "resources",
          "limits",
          "memory"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-10",
        "title": "Container or Pod is running without root user control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-10",
        "isGeneratedByCustomRule": false,
        "issue": "Container or Pod is running without root user control",
        "impact": "Container or Pod could be running with full administrative privileges",
        "resolve": "Set `securityContext.runAsNonRoot` to `true`",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsNonRoot` to `true`",
          "terraform": "Set `security_context.run_as_non_root` to `true`"
        },
        "lineNumber": 152,
        "iacDescription": {
          "issue": "Container or Pod is running without root user control",
          "impact": "Container or Pod could be running with full administrative privileges",
          "resolve": "Set `securityContext.runAsNonRoot` to `true`"
        },
        "publicId": "SNYK-CC-K8S-10",
        "msg": "input.spec.template.spec.containers[log-collector].securityContext.runAsNonRoot",
        "description": "",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 7]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[log-collector]",
          "securityContext",
          "runAsNonRoot"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-8",
        "title": "Container is running with writable root filesystem",
        "severity": "low",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-8",
        "isGeneratedByCustomRule": false,
        "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
        "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
          "terraform": "Set `security_context.read_only_root_filesystem` to `true`"
        },
        "lineNumber": 152,
        "iacDescription": {
          "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
          "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`"
        },
        "publicId": "SNYK-CC-K8S-8",
        "msg": "spec.template.spec.containers[log-collector].securityContext.readOnlyRootFilesystem",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 7]",
          "spec",
          "template",
          "spec",
          "containers[log-collector]",
          "securityContext",
          "readOnlyRootFilesystem"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-6",
        "title": "Container does not drop all default capabilities",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-6",
        "isGeneratedByCustomRule": false,
        "issue": "All default capabilities are not explicitly dropped",
        "impact": "Containers are running with potentially unnecessary privileges",
        "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
        "remediation": {
          "kubernetes": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
          "terraform": "Add `ALL` to `spec.container.security_context.capabilities.drop` list, and add only required capabilities to `spec.container.security_context.capabilities.add`, ensuring it also does not contain `ALL`"
        },
        "lineNumber": 152,
        "iacDescription": {
          "issue": "All default capabilities are not explicitly dropped",
          "impact": "Containers are running with potentially unnecessary privileges",
          "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`"
        },
        "publicId": "SNYK-CC-K8S-6",
        "msg": "input.spec.template.spec.containers[log-collector].securityContext.capabilities.drop",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
          "https://linux-audit.com/linux-capabilities-hardening-linux-binaries-by-removing-setuid/"
        ],
        "path": [
          "[DocId: 7]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[log-collector]",
          "securityContext",
          "capabilities",
          "drop"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-41",
        "title": "Container is running without liveness probe",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-41",
        "isGeneratedByCustomRule": false,
        "issue": "Liveness probe is not defined",
        "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
        "resolve": "Add `livenessProbe` attribute",
        "remediation": {
          "kubernetes": "Add `livenessProbe` attribute",
          "terraform": "Add `liveness_probe` attribute"
        },
        "lineNumber": 147,
        "iacDescription": {
          "issue": "Liveness probe is not defined",
          "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
          "resolve": "Add `livenessProbe` attribute"
        },
        "publicId": "SNYK-CC-K8S-41",
        "msg": "spec.template.spec.containers[backend-atlas].livenessProbe",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/",
          "https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/",
          "https://cloud.google.com/blog/products/gcp/kubernetes-best-practices-setting-up-health-checks-with-readiness-and-liveness-probes"
        ],
        "path": [
          "[DocId: 7]",
          "spec",
          "template",
          "spec",
          "containers[backend-atlas]",
          "livenessProbe"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-11",
        "title": "Container's or Pod's  UID could clash with host's UID",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-11",
        "isGeneratedByCustomRule": false,
        "issue": "`runAsUser` value is set to low UID",
        "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
        "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
          "terraform": "Set `security_context.run_as_user` value to greater or equal than 10'000"
        },
        "lineNumber": 152,
        "iacDescription": {
          "issue": "`runAsUser` value is set to low UID",
          "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
          "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence"
        },
        "publicId": "SNYK-CC-K8S-11",
        "msg": "input.spec.template.spec.containers[log-collector].securityContext.runAsUser",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container",
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod",
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 7]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[log-collector]",
          "securityContext",
          "runAsUser"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-5",
        "title": "Container has no CPU limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-5",
        "isGeneratedByCustomRule": false,
        "issue": "Container has no CPU limit",
        "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
        "resolve": "Add `resources.limits.cpu` field with required CPU limit value",
        "remediation": {
          "kubernetes": "Add `resources.limits.cpu` field with required CPU limit value",
          "terraform": "Add `spec.container.resources.limits.cpu` field with required CPU limit value"
        },
        "lineNumber": 147,
        "iacDescription": {
          "issue": "Container has no CPU limit",
          "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
          "resolve": "Add `resources.limits.cpu` field with required CPU limit value"
        },
        "publicId": "SNYK-CC-K8S-5",
        "msg": "input.spec.template.spec.containers[backend-atlas].resources.limits.cpu",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-cpu-resource/",
          "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/cpu-default-namespace/",
          "https://github.com/kubernetes/design-proposals-archive/blob/8da1442ea29adccea40693357d04727127e045ed/node/resource-qos.md#compressible-resource-guaranteess"
        ],
        "path": [
          "[DocId: 7]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[backend-atlas]",
          "resources",
          "limits",
          "cpu"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-47",
        "title": "Role or ClusterRole with dangerous permissions",
        "severity": "high",
        "isIgnored": false,
        "subType": "ClusterRole",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-47",
        "isGeneratedByCustomRule": false,
        "issue": "A role was found using a dangerous permissions",
        "impact": "Using this role grants dangerous permissions. For a ClusterRole this would be considered high severity.",
        "resolve": "Consider removing these permissions",
        "remediation": {
          "kubernetes": "Consider removing these permissions",
          "terraform": "Consider removing these permissions"
        },
        "lineNumber": 225,
        "iacDescription": {
          "issue": "A role was found using a dangerous permissions",
          "impact": "Using this role grants dangerous permissions. For a ClusterRole this would be considered high severity.",
          "resolve": "Consider removing these permissions"
        },
        "publicId": "SNYK-CC-K8S-47",
        "msg": "rules[0].resources",
        "references": [
          "https://kubernetes.io/docs/reference/access-authn-authz/rbac/"
        ],
        "path": [
          "[DocId: 12]",
          "rules[0]",
          "resources"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-8",
        "title": "Container is running with writable root filesystem",
        "severity": "low",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-8",
        "isGeneratedByCustomRule": false,
        "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
        "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
          "terraform": "Set `security_context.read_only_root_filesystem` to `true`"
        },
        "lineNumber": 273,
        "iacDescription": {
          "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
          "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`"
        },
        "publicId": "SNYK-CC-K8S-8",
        "msg": "spec.template.spec.containers[postgres].securityContext.readOnlyRootFilesystem",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 14]",
          "spec",
          "template",
          "spec",
          "containers[postgres]",
          "securityContext",
          "readOnlyRootFilesystem"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-9",
        "title": "Container is running without privilege escalation control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-9",
        "isGeneratedByCustomRule": false,
        "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
        "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
          "terraform": "Set `spec.container.security_context.allow_privilege_escalation` to `false`"
        },
        "lineNumber": 273,
        "iacDescription": {
          "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
          "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`"
        },
        "publicId": "SNYK-CC-K8S-9",
        "msg": "spec.template.spec.containers[postgres].securityContext.allowPrivilegeEscalation",
        "references": [
          "https://www.kernel.org/doc/html/latest/userspace-api/no_new_privs.html"
        ],
        "path": [
          "[DocId: 14]",
          "spec",
          "template",
          "spec",
          "containers[postgres]",
          "securityContext",
          "allowPrivilegeEscalation"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-10",
        "title": "Container or Pod is running without root user control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-10",
        "isGeneratedByCustomRule": false,
        "issue": "Container or Pod is running without root user control",
        "impact": "Container or Pod could be running with full administrative privileges",
        "resolve": "Set `securityContext.runAsNonRoot` to `true`",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsNonRoot` to `true`",
          "terraform": "Set `security_context.run_as_non_root` to `true`"
        },
        "lineNumber": 273,
        "iacDescription": {
          "issue": "Container or Pod is running without root user control",
          "impact": "Container or Pod could be running with full administrative privileges",
          "resolve": "Set `securityContext.runAsNonRoot` to `true`"
        },
        "publicId": "SNYK-CC-K8S-10",
        "msg": "input.spec.template.spec.containers[postgres].securityContext.runAsNonRoot",
        "description": "",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 14]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[postgres]",
          "securityContext",
          "runAsNonRoot"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-4",
        "title": "Container is running without memory limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-4",
        "isGeneratedByCustomRule": false,
        "issue": "Memory limit is not defined",
        "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
        "resolve": "Set `resources.limits.memory` value",
        "remediation": {
          "kubernetes": "Set `resources.limits.memory` value",
          "terraform": "Set `resources.limits.memory` value"
        },
        "lineNumber": 273,
        "iacDescription": {
          "issue": "Memory limit is not defined",
          "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
          "resolve": "Set `resources.limits.memory` value"
        },
        "publicId": "SNYK-CC-K8S-4",
        "msg": "input.spec.template.spec.containers[postgres].resources.limits.memory",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/memory-default-namespace/"
        ],
        "path": [
          "[DocId: 14]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[postgres]",
          "resources",
          "limits",
          "memory"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-11",
        "title": "Container's or Pod's  UID could clash with host's UID",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-11",
        "isGeneratedByCustomRule": false,
        "issue": "`runAsUser` value is set to low UID",
        "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
        "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
          "terraform": "Set `security_context.run_as_user` value to greater or equal than 10'000"
        },
        "lineNumber": 273,
        "iacDescription": {
          "issue": "`runAsUser` value is set to low UID",
          "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
          "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence"
        },
        "publicId": "SNYK-CC-K8S-11",
        "msg": "input.spec.template.spec.containers[postgres].securityContext.runAsUser",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container",
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod",
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 14]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[postgres]",
          "securityContext",
          "runAsUser"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-5",
        "title": "Container has no CPU limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-5",
        "isGeneratedByCustomRule": false,
        "issue": "Container has no CPU limit",
        "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
        "resolve": "Add `resources.limits.cpu` field with required CPU limit value",
        "remediation": {
          "kubernetes": "Add `resources.limits.cpu` field with required CPU limit value",
          "terraform": "Add `spec.container.resources.limits.cpu` field with required CPU limit value"
        },
        "lineNumber": 273,
        "iacDescription": {
          "issue": "Container has no CPU limit",
          "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
          "resolve": "Add `resources.limits.cpu` field with required CPU limit value"
        },
        "publicId": "SNYK-CC-K8S-5",
        "msg": "input.spec.template.spec.containers[postgres].resources.limits.cpu",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-cpu-resource/",
          "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/cpu-default-namespace/",
          "https://github.com/kubernetes/design-proposals-archive/blob/8da1442ea29adccea40693357d04727127e045ed/node/resource-qos.md#compressible-resource-guaranteess"
        ],
        "path": [
          "[DocId: 14]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[postgres]",
          "resources",
          "limits",
          "cpu"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-41",
        "title": "Container is running without liveness probe",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-41",
        "isGeneratedByCustomRule": false,
        "issue": "Liveness probe is not defined",
        "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
        "resolve": "Add `livenessProbe` attribute",
        "remediation": {
          "kubernetes": "Add `livenessProbe` attribute",
          "terraform": "Add `liveness_probe` attribute"
        },
        "lineNumber": 273,
        "iacDescription": {
          "issue": "Liveness probe is not defined",
          "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
          "resolve": "Add `livenessProbe` attribute"
        },
        "publicId": "SNYK-CC-K8S-41",
        "msg": "spec.template.spec.containers[postgres].livenessProbe",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/",
          "https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/",
          "https://cloud.google.com/blog/products/gcp/kubernetes-best-practices-setting-up-health-checks-with-readiness-and-liveness-probes"
        ],
        "path": [
          "[DocId: 14]",
          "spec",
          "template",
          "spec",
          "containers[postgres]",
          "livenessProbe"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-6",
        "title": "Container does not drop all default capabilities",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-6",
        "isGeneratedByCustomRule": false,
        "issue": "All default capabilities are not explicitly dropped",
        "impact": "Containers are running with potentially unnecessary privileges",
        "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
        "remediation": {
          "kubernetes": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
          "terraform": "Add `ALL` to `spec.container.security_context.capabilities.drop` list, and add only required capabilities to `spec.container.security_context.capabilities.add`, ensuring it also does not contain `ALL`"
        },
        "lineNumber": 273,
        "iacDescription": {
          "issue": "All default capabilities are not explicitly dropped",
          "impact": "Containers are running with potentially unnecessary privileges",
          "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`"
        },
        "publicId": "SNYK-CC-K8S-6",
        "msg": "input.spec.template.spec.containers[postgres].securityContext.capabilities.drop",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
          "https://linux-audit.com/linux-capabilities-hardening-linux-binaries-by-removing-setuid/"
        ],
        "path": [
          "[DocId: 14]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[postgres]",
          "securityContext",
          "capabilities",
          "drop"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-4",
        "title": "Container is running without memory limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-4",
        "isGeneratedByCustomRule": false,
        "issue": "Memory limit is not defined",
        "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
        "resolve": "Set `resources.limits.memory` value",
        "remediation": {
          "kubernetes": "Set `resources.limits.memory` value",
          "terraform": "Set `resources.limits.memory` value"
        },
        "lineNumber": 328,
        "iacDescription": {
          "issue": "Memory limit is not defined",
          "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
          "resolve": "Set `resources.limits.memory` value"
        },
        "publicId": "SNYK-CC-K8S-4",
        "msg": "input.spec.template.spec.containers[varnish].resources.limits.memory",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/memory-default-namespace/"
        ],
        "path": [
          "[DocId: 16]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[varnish]",
          "resources",
          "limits",
          "memory"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-11",
        "title": "Container's or Pod's  UID could clash with host's UID",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-11",
        "isGeneratedByCustomRule": false,
        "issue": "`runAsUser` value is set to low UID",
        "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
        "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
          "terraform": "Set `security_context.run_as_user` value to greater or equal than 10'000"
        },
        "lineNumber": 328,
        "iacDescription": {
          "issue": "`runAsUser` value is set to low UID",
          "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
          "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence"
        },
        "publicId": "SNYK-CC-K8S-11",
        "msg": "input.spec.template.spec.containers[varnish].securityContext.runAsUser",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container",
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod",
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 16]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[varnish]",
          "securityContext",
          "runAsUser"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-5",
        "title": "Container has no CPU limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-5",
        "isGeneratedByCustomRule": false,
        "issue": "Container has no CPU limit",
        "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
        "resolve": "Add `resources.limits.cpu` field with required CPU limit value",
        "remediation": {
          "kubernetes": "Add `resources.limits.cpu` field with required CPU limit value",
          "terraform": "Add `spec.container.resources.limits.cpu` field with required CPU limit value"
        },
        "lineNumber": 328,
        "iacDescription": {
          "issue": "Container has no CPU limit",
          "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
          "resolve": "Add `resources.limits.cpu` field with required CPU limit value"
        },
        "publicId": "SNYK-CC-K8S-5",
        "msg": "input.spec.template.spec.containers[varnish].resources.limits.cpu",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-cpu-resource/",
          "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/cpu-default-namespace/",
          "https://github.com/kubernetes/design-proposals-archive/blob/8da1442ea29adccea40693357d04727127e045ed/node/resource-qos.md#compressible-resource-guaranteess"
        ],
        "path": [
          "[DocId: 16]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[varnish]",
          "resources",
          "limits",
          "cpu"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-41",
        "title": "Container is running without liveness probe",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-41",
        "isGeneratedByCustomRule": false,
        "issue": "Liveness probe is not defined",
        "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
        "resolve": "Add `livenessProbe` attribute",
        "remediation": {
          "kubernetes": "Add `livenessProbe` attribute",
          "terraform": "Add `liveness_probe` attribute"
        },
        "lineNumber": 328,
        "iacDescription": {
          "issue": "Liveness probe is not defined",
          "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
          "resolve": "Add `livenessProbe` attribute"
        },
        "publicId": "SNYK-CC-K8S-41",
        "msg": "spec.template.spec.containers[varnish].livenessProbe",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/",
          "https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/",
          "https://cloud.google.com/blog/products/gcp/kubernetes-best-practices-setting-up-health-checks-with-readiness-and-liveness-probes"
        ],
        "path": [
          "[DocId: 16]",
          "spec",
          "template",
          "spec",
          "containers[varnish]",
          "livenessProbe"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-6",
        "title": "Container does not drop all default capabilities",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-6",
        "isGeneratedByCustomRule": false,
        "issue": "All default capabilities are not explicitly dropped",
        "impact": "Containers are running with potentially unnecessary privileges",
        "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
        "remediation": {
          "kubernetes": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
          "terraform": "Add `ALL` to `spec.container.security_context.capabilities.drop` list, and add only required capabilities to `spec.container.security_context.capabilities.add`, ensuring it also does not contain `ALL`"
        },
        "lineNumber": 328,
        "iacDescription": {
          "issue": "All default capabilities are not explicitly dropped",
          "impact": "Containers are running with potentially unnecessary privileges",
          "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`"
        },
        "publicId": "SNYK-CC-K8S-6",
        "msg": "input.spec.template.spec.containers[varnish].securityContext.capabilities.drop",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
          "https://linux-audit.com/linux-capabilities-hardening-linux-binaries-by-removing-setuid/"
        ],
        "path": [
          "[DocId: 16]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[varnish]",
          "securityContext",
          "capabilities",
          "drop"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-8",
        "title": "Container is running with writable root filesystem",
        "severity": "low",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-8",
        "isGeneratedByCustomRule": false,
        "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
        "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
          "terraform": "Set `security_context.read_only_root_filesystem` to `true`"
        },
        "lineNumber": 328,
        "iacDescription": {
          "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
          "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`"
        },
        "publicId": "SNYK-CC-K8S-8",
        "msg": "spec.template.spec.containers[varnish].securityContext.readOnlyRootFilesystem",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 16]",
          "spec",
          "template",
          "spec",
          "containers[varnish]",
          "securityContext",
          "readOnlyRootFilesystem"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-9",
        "title": "Container is running without privilege escalation control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-9",
        "isGeneratedByCustomRule": false,
        "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
        "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
          "terraform": "Set `spec.container.security_context.allow_privilege_escalation` to `false`"
        },
        "lineNumber": 328,
        "iacDescription": {
          "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
          "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`"
        },
        "publicId": "SNYK-CC-K8S-9",
        "msg": "spec.template.spec.containers[varnish].securityContext.allowPrivilegeEscalation",
        "references": [
          "https://www.kernel.org/doc/html/latest/userspace-api/no_new_privs.html"
        ],
        "path": [
          "[DocId: 16]",
          "spec",
          "template",
          "spec",
          "containers[varnish]",
          "securityContext",
          "allowPrivilegeEscalation"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-10",
        "title": "Container or Pod is running without root user control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-10",
        "isGeneratedByCustomRule": false,
        "issue": "Container or Pod is running without root user control",
        "impact": "Container or Pod could be running with full administrative privileges",
        "resolve": "Set `securityContext.runAsNonRoot` to `true`",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsNonRoot` to `true`",
          "terraform": "Set `security_context.run_as_non_root` to `true`"
        },
        "lineNumber": 328,
        "iacDescription": {
          "issue": "Container or Pod is running without root user control",
          "impact": "Container or Pod could be running with full administrative privileges",
          "resolve": "Set `securityContext.runAsNonRoot` to `true`"
        },
        "publicId": "SNYK-CC-K8S-10",
        "msg": "input.spec.template.spec.containers[varnish].securityContext.runAsNonRoot",
        "description": "",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 16]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[varnish]",
          "securityContext",
          "runAsNonRoot"
        ],
        "compliance": []
      }
    ]
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_rhacs_demo_apps/files/demos/frontend/everything.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_rhacs_demo_apps/files/demos/frontend/everything.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": false,
    "infrastructureAsCodeIssues": [
      {
        "id": "SNYK-CC-K8S-44",
        "title": "Role or ClusterRole with too wide permissions",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Role",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-44",
        "isGeneratedByCustomRule": false,
        "issue": "The role uses wildcards, which grant the role permissions to the whole cluster",
        "impact": "The use of wildcard rights grants is likely to provide excessive rights to the Kubernetes API. For a ClusterRole this would be considered high severity.",
        "resolve": "Set only the necessary permissions required",
        "remediation": {
          "kubernetes": "Set only the necessary permissions required",
          "terraform": "Remove any wildcards [*] from `rule.verbs` and `rule.resources`"
        },
        "lineNumber": 38,
        "iacDescription": {
          "issue": "The role uses wildcards, which grant the role permissions to the whole cluster",
          "impact": "The use of wildcard rights grants is likely to provide excessive rights to the Kubernetes API. For a ClusterRole this would be considered high severity.",
          "resolve": "Set only the necessary permissions required"
        },
        "publicId": "SNYK-CC-K8S-44",
        "msg": "rules[0].verbs",
        "references": [
          "https://kubernetes.io/docs/reference/access-authn-authz/rbac/"
        ],
        "path": [
          "[DocId: 3]",
          "rules[0]",
          "verbs"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-41",
        "title": "Container is running without liveness probe",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-41",
        "isGeneratedByCustomRule": false,
        "issue": "Liveness probe is not defined",
        "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
        "resolve": "Add `livenessProbe` attribute",
        "remediation": {
          "kubernetes": "Add `livenessProbe` attribute",
          "terraform": "Add `liveness_probe` attribute"
        },
        "lineNumber": 84,
        "iacDescription": {
          "issue": "Liveness probe is not defined",
          "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
          "resolve": "Add `livenessProbe` attribute"
        },
        "publicId": "SNYK-CC-K8S-41",
        "msg": "spec.template.spec.containers[asset-cache].livenessProbe",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/",
          "https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/",
          "https://cloud.google.com/blog/products/gcp/kubernetes-best-practices-setting-up-health-checks-with-readiness-and-liveness-probes"
        ],
        "path": [
          "[DocId: 5]",
          "spec",
          "template",
          "spec",
          "containers[asset-cache]",
          "livenessProbe"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-10",
        "title": "Container or Pod is running without root user control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-10",
        "isGeneratedByCustomRule": false,
        "issue": "Container or Pod is running without root user control",
        "impact": "Container or Pod could be running with full administrative privileges",
        "resolve": "Set `securityContext.runAsNonRoot` to `true`",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsNonRoot` to `true`",
          "terraform": "Set `security_context.run_as_non_root` to `true`"
        },
        "lineNumber": 97,
        "iacDescription": {
          "issue": "Container or Pod is running without root user control",
          "impact": "Container or Pod could be running with full administrative privileges",
          "resolve": "Set `securityContext.runAsNonRoot` to `true`"
        },
        "publicId": "SNYK-CC-K8S-10",
        "msg": "input.spec.template.spec.containers[asset-cache-sidecar].securityContext.runAsNonRoot",
        "description": "",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 5]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[asset-cache-sidecar]",
          "securityContext",
          "runAsNonRoot"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-6",
        "title": "Container does not drop all default capabilities",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-6",
        "isGeneratedByCustomRule": false,
        "issue": "All default capabilities are not explicitly dropped",
        "impact": "Containers are running with potentially unnecessary privileges",
        "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
        "remediation": {
          "kubernetes": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
          "terraform": "Add `ALL` to `spec.container.security_context.capabilities.drop` list, and add only required capabilities to `spec.container.security_context.capabilities.add`, ensuring it also does not contain `ALL`"
        },
        "lineNumber": 97,
        "iacDescription": {
          "issue": "All default capabilities are not explicitly dropped",
          "impact": "Containers are running with potentially unnecessary privileges",
          "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`"
        },
        "publicId": "SNYK-CC-K8S-6",
        "msg": "input.spec.template.spec.containers[asset-cache-sidecar].securityContext.capabilities.drop",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
          "https://linux-audit.com/linux-capabilities-hardening-linux-binaries-by-removing-setuid/"
        ],
        "path": [
          "[DocId: 5]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[asset-cache-sidecar]",
          "securityContext",
          "capabilities",
          "drop"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-4",
        "title": "Container is running without memory limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-4",
        "isGeneratedByCustomRule": false,
        "issue": "Memory limit is not defined",
        "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
        "resolve": "Set `resources.limits.memory` value",
        "remediation": {
          "kubernetes": "Set `resources.limits.memory` value",
          "terraform": "Set `resources.limits.memory` value"
        },
        "lineNumber": 84,
        "iacDescription": {
          "issue": "Memory limit is not defined",
          "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
          "resolve": "Set `resources.limits.memory` value"
        },
        "publicId": "SNYK-CC-K8S-4",
        "msg": "input.spec.template.spec.containers[asset-cache].resources.limits.memory",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/memory-default-namespace/"
        ],
        "path": [
          "[DocId: 5]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[asset-cache]",
          "resources",
          "limits",
          "memory"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-41",
        "title": "Container is running without liveness probe",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-41",
        "isGeneratedByCustomRule": false,
        "issue": "Liveness probe is not defined",
        "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
        "resolve": "Add `livenessProbe` attribute",
        "remediation": {
          "kubernetes": "Add `livenessProbe` attribute",
          "terraform": "Add `liveness_probe` attribute"
        },
        "lineNumber": 93,
        "iacDescription": {
          "issue": "Liveness probe is not defined",
          "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
          "resolve": "Add `livenessProbe` attribute"
        },
        "publicId": "SNYK-CC-K8S-41",
        "msg": "spec.template.spec.containers[asset-cache-sidecar].livenessProbe",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/",
          "https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/",
          "https://cloud.google.com/blog/products/gcp/kubernetes-best-practices-setting-up-health-checks-with-readiness-and-liveness-probes"
        ],
        "path": [
          "[DocId: 5]",
          "spec",
          "template",
          "spec",
          "containers[asset-cache-sidecar]",
          "livenessProbe"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-11",
        "title": "Container's or Pod's  UID could clash with host's UID",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-11",
        "isGeneratedByCustomRule": false,
        "issue": "`runAsUser` value is set to low UID",
        "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
        "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
          "terraform": "Set `security_context.run_as_user` value to greater or equal than 10'000"
        },
        "lineNumber": 90,
        "iacDescription": {
          "issue": "`runAsUser` value is set to low UID",
          "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
          "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence"
        },
        "publicId": "SNYK-CC-K8S-11",
        "msg": "input.spec.template.spec.containers[asset-cache].securityContext.runAsUser",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container",
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod",
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 5]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[asset-cache]",
          "securityContext",
          "runAsUser"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-5",
        "title": "Container has no CPU limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-5",
        "isGeneratedByCustomRule": false,
        "issue": "Container has no CPU limit",
        "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
        "resolve": "Add `resources.limits.cpu` field with required CPU limit value",
        "remediation": {
          "kubernetes": "Add `resources.limits.cpu` field with required CPU limit value",
          "terraform": "Add `spec.container.resources.limits.cpu` field with required CPU limit value"
        },
        "lineNumber": 84,
        "iacDescription": {
          "issue": "Container has no CPU limit",
          "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
          "resolve": "Add `resources.limits.cpu` field with required CPU limit value"
        },
        "publicId": "SNYK-CC-K8S-5",
        "msg": "input.spec.template.spec.containers[asset-cache].resources.limits.cpu",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-cpu-resource/",
          "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/cpu-default-namespace/",
          "https://github.com/kubernetes/design-proposals-archive/blob/8da1442ea29adccea40693357d04727127e045ed/node/resource-qos.md#compressible-resource-guaranteess"
        ],
        "path": [
          "[DocId: 5]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[asset-cache]",
          "resources",
          "limits",
          "cpu"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-4",
        "title": "Container is running without memory limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-4",
        "isGeneratedByCustomRule": false,
        "issue": "Memory limit is not defined",
        "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
        "resolve": "Set `resources.limits.memory` value",
        "remediation": {
          "kubernetes": "Set `resources.limits.memory` value",
          "terraform": "Set `resources.limits.memory` value"
        },
        "lineNumber": 93,
        "iacDescription": {
          "issue": "Memory limit is not defined",
          "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
          "resolve": "Set `resources.limits.memory` value"
        },
        "publicId": "SNYK-CC-K8S-4",
        "msg": "input.spec.template.spec.containers[asset-cache-sidecar].resources.limits.memory",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/memory-default-namespace/"
        ],
        "path": [
          "[DocId: 5]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[asset-cache-sidecar]",
          "resources",
          "limits",
          "memory"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-9",
        "title": "Container is running without privilege escalation control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-9",
        "isGeneratedByCustomRule": false,
        "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
        "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
          "terraform": "Set `spec.container.security_context.allow_privilege_escalation` to `false`"
        },
        "lineNumber": 97,
        "iacDescription": {
          "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
          "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`"
        },
        "publicId": "SNYK-CC-K8S-9",
        "msg": "spec.template.spec.containers[asset-cache-sidecar].securityContext.allowPrivilegeEscalation",
        "references": [
          "https://www.kernel.org/doc/html/latest/userspace-api/no_new_privs.html"
        ],
        "path": [
          "[DocId: 5]",
          "spec",
          "template",
          "spec",
          "containers[asset-cache-sidecar]",
          "securityContext",
          "allowPrivilegeEscalation"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-11",
        "title": "Container's or Pod's  UID could clash with host's UID",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-11",
        "isGeneratedByCustomRule": false,
        "issue": "`runAsUser` value is set to low UID",
        "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
        "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
          "terraform": "Set `security_context.run_as_user` value to greater or equal than 10'000"
        },
        "lineNumber": 97,
        "iacDescription": {
          "issue": "`runAsUser` value is set to low UID",
          "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
          "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence"
        },
        "publicId": "SNYK-CC-K8S-11",
        "msg": "input.spec.template.spec.containers[asset-cache-sidecar].securityContext.runAsUser",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container",
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod",
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 5]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[asset-cache-sidecar]",
          "securityContext",
          "runAsUser"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-8",
        "title": "Container is running with writable root filesystem",
        "severity": "low",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-8",
        "isGeneratedByCustomRule": false,
        "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
        "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
          "terraform": "Set `security_context.read_only_root_filesystem` to `true`"
        },
        "lineNumber": 90,
        "iacDescription": {
          "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
          "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`"
        },
        "publicId": "SNYK-CC-K8S-8",
        "msg": "spec.template.spec.containers[asset-cache].securityContext.readOnlyRootFilesystem",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 5]",
          "spec",
          "template",
          "spec",
          "containers[asset-cache]",
          "securityContext",
          "readOnlyRootFilesystem"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-5",
        "title": "Container has no CPU limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-5",
        "isGeneratedByCustomRule": false,
        "issue": "Container has no CPU limit",
        "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
        "resolve": "Add `resources.limits.cpu` field with required CPU limit value",
        "remediation": {
          "kubernetes": "Add `resources.limits.cpu` field with required CPU limit value",
          "terraform": "Add `spec.container.resources.limits.cpu` field with required CPU limit value"
        },
        "lineNumber": 93,
        "iacDescription": {
          "issue": "Container has no CPU limit",
          "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
          "resolve": "Add `resources.limits.cpu` field with required CPU limit value"
        },
        "publicId": "SNYK-CC-K8S-5",
        "msg": "input.spec.template.spec.containers[asset-cache-sidecar].resources.limits.cpu",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-cpu-resource/",
          "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/cpu-default-namespace/",
          "https://github.com/kubernetes/design-proposals-archive/blob/8da1442ea29adccea40693357d04727127e045ed/node/resource-qos.md#compressible-resource-guaranteess"
        ],
        "path": [
          "[DocId: 5]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[asset-cache-sidecar]",
          "resources",
          "limits",
          "cpu"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-9",
        "title": "Container is running without privilege escalation control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-9",
        "isGeneratedByCustomRule": false,
        "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
        "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
          "terraform": "Set `spec.container.security_context.allow_privilege_escalation` to `false`"
        },
        "lineNumber": 90,
        "iacDescription": {
          "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
          "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`"
        },
        "publicId": "SNYK-CC-K8S-9",
        "msg": "spec.template.spec.containers[asset-cache].securityContext.allowPrivilegeEscalation",
        "references": [
          "https://www.kernel.org/doc/html/latest/userspace-api/no_new_privs.html"
        ],
        "path": [
          "[DocId: 5]",
          "spec",
          "template",
          "spec",
          "containers[asset-cache]",
          "securityContext",
          "allowPrivilegeEscalation"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-8",
        "title": "Container is running with writable root filesystem",
        "severity": "low",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-8",
        "isGeneratedByCustomRule": false,
        "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
        "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
          "terraform": "Set `security_context.read_only_root_filesystem` to `true`"
        },
        "lineNumber": 97,
        "iacDescription": {
          "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
          "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`"
        },
        "publicId": "SNYK-CC-K8S-8",
        "msg": "spec.template.spec.containers[asset-cache-sidecar].securityContext.readOnlyRootFilesystem",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 5]",
          "spec",
          "template",
          "spec",
          "containers[asset-cache-sidecar]",
          "securityContext",
          "readOnlyRootFilesystem"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-10",
        "title": "Container or Pod is running without root user control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-10",
        "isGeneratedByCustomRule": false,
        "issue": "Container or Pod is running without root user control",
        "impact": "Container or Pod could be running with full administrative privileges",
        "resolve": "Set `securityContext.runAsNonRoot` to `true`",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsNonRoot` to `true`",
          "terraform": "Set `security_context.run_as_non_root` to `true`"
        },
        "lineNumber": 90,
        "iacDescription": {
          "issue": "Container or Pod is running without root user control",
          "impact": "Container or Pod could be running with full administrative privileges",
          "resolve": "Set `securityContext.runAsNonRoot` to `true`"
        },
        "publicId": "SNYK-CC-K8S-10",
        "msg": "input.spec.template.spec.containers[asset-cache].securityContext.runAsNonRoot",
        "description": "",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 5]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[asset-cache]",
          "securityContext",
          "runAsNonRoot"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-6",
        "title": "Container does not drop all default capabilities",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-6",
        "isGeneratedByCustomRule": false,
        "issue": "All default capabilities are not explicitly dropped",
        "impact": "Containers are running with potentially unnecessary privileges",
        "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
        "remediation": {
          "kubernetes": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
          "terraform": "Add `ALL` to `spec.container.security_context.capabilities.drop` list, and add only required capabilities to `spec.container.security_context.capabilities.add`, ensuring it also does not contain `ALL`"
        },
        "lineNumber": 92,
        "iacDescription": {
          "issue": "All default capabilities are not explicitly dropped",
          "impact": "Containers are running with potentially unnecessary privileges",
          "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`"
        },
        "publicId": "SNYK-CC-K8S-6",
        "msg": "input.spec.template.spec.containers[asset-cache].securityContext.capabilities.drop",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
          "https://linux-audit.com/linux-capabilities-hardening-linux-binaries-by-removing-setuid/"
        ],
        "path": [
          "[DocId: 5]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[asset-cache]",
          "securityContext",
          "capabilities",
          "drop"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-8",
        "title": "Container is running with writable root filesystem",
        "severity": "low",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-8",
        "isGeneratedByCustomRule": false,
        "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
        "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
          "terraform": "Set `security_context.read_only_root_filesystem` to `true`"
        },
        "lineNumber": 148,
        "iacDescription": {
          "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
          "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`"
        },
        "publicId": "SNYK-CC-K8S-8",
        "msg": "spec.template.spec.containers[tls-proxy].securityContext.readOnlyRootFilesystem",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 7]",
          "spec",
          "template",
          "spec",
          "containers[tls-proxy]",
          "securityContext",
          "readOnlyRootFilesystem"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-6",
        "title": "Container does not drop all default capabilities",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-6",
        "isGeneratedByCustomRule": false,
        "issue": "All default capabilities are not explicitly dropped",
        "impact": "Containers are running with potentially unnecessary privileges",
        "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
        "remediation": {
          "kubernetes": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
          "terraform": "Add `ALL` to `spec.container.security_context.capabilities.drop` list, and add only required capabilities to `spec.container.security_context.capabilities.add`, ensuring it also does not contain `ALL`"
        },
        "lineNumber": 148,
        "iacDescription": {
          "issue": "All default capabilities are not explicitly dropped",
          "impact": "Containers are running with potentially unnecessary privileges",
          "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`"
        },
        "publicId": "SNYK-CC-K8S-6",
        "msg": "input.spec.template.spec.containers[tls-proxy].securityContext.capabilities.drop",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
          "https://linux-audit.com/linux-capabilities-hardening-linux-binaries-by-removing-setuid/"
        ],
        "path": [
          "[DocId: 7]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[tls-proxy]",
          "securityContext",
          "capabilities",
          "drop"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-11",
        "title": "Container's or Pod's  UID could clash with host's UID",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-11",
        "isGeneratedByCustomRule": false,
        "issue": "`runAsUser` value is set to low UID",
        "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
        "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
          "terraform": "Set `security_context.run_as_user` value to greater or equal than 10'000"
        },
        "lineNumber": 148,
        "iacDescription": {
          "issue": "`runAsUser` value is set to low UID",
          "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
          "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence"
        },
        "publicId": "SNYK-CC-K8S-11",
        "msg": "input.spec.template.spec.containers[tls-proxy].securityContext.runAsUser",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container",
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod",
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 7]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[tls-proxy]",
          "securityContext",
          "runAsUser"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-5",
        "title": "Container has no CPU limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-5",
        "isGeneratedByCustomRule": false,
        "issue": "Container has no CPU limit",
        "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
        "resolve": "Add `resources.limits.cpu` field with required CPU limit value",
        "remediation": {
          "kubernetes": "Add `resources.limits.cpu` field with required CPU limit value",
          "terraform": "Add `spec.container.resources.limits.cpu` field with required CPU limit value"
        },
        "lineNumber": 148,
        "iacDescription": {
          "issue": "Container has no CPU limit",
          "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
          "resolve": "Add `resources.limits.cpu` field with required CPU limit value"
        },
        "publicId": "SNYK-CC-K8S-5",
        "msg": "input.spec.template.spec.containers[tls-proxy].resources.limits.cpu",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-cpu-resource/",
          "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/cpu-default-namespace/",
          "https://github.com/kubernetes/design-proposals-archive/blob/8da1442ea29adccea40693357d04727127e045ed/node/resource-qos.md#compressible-resource-guaranteess"
        ],
        "path": [
          "[DocId: 7]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[tls-proxy]",
          "resources",
          "limits",
          "cpu"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-10",
        "title": "Container or Pod is running without root user control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-10",
        "isGeneratedByCustomRule": false,
        "issue": "Container or Pod is running without root user control",
        "impact": "Container or Pod could be running with full administrative privileges",
        "resolve": "Set `securityContext.runAsNonRoot` to `true`",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsNonRoot` to `true`",
          "terraform": "Set `security_context.run_as_non_root` to `true`"
        },
        "lineNumber": 148,
        "iacDescription": {
          "issue": "Container or Pod is running without root user control",
          "impact": "Container or Pod could be running with full administrative privileges",
          "resolve": "Set `securityContext.runAsNonRoot` to `true`"
        },
        "publicId": "SNYK-CC-K8S-10",
        "msg": "input.spec.template.spec.containers[tls-proxy].securityContext.runAsNonRoot",
        "description": "",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 7]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[tls-proxy]",
          "securityContext",
          "runAsNonRoot"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-9",
        "title": "Container is running without privilege escalation control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-9",
        "isGeneratedByCustomRule": false,
        "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
        "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
          "terraform": "Set `spec.container.security_context.allow_privilege_escalation` to `false`"
        },
        "lineNumber": 148,
        "iacDescription": {
          "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
          "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`"
        },
        "publicId": "SNYK-CC-K8S-9",
        "msg": "spec.template.spec.containers[tls-proxy].securityContext.allowPrivilegeEscalation",
        "references": [
          "https://www.kernel.org/doc/html/latest/userspace-api/no_new_privs.html"
        ],
        "path": [
          "[DocId: 7]",
          "spec",
          "template",
          "spec",
          "containers[tls-proxy]",
          "securityContext",
          "allowPrivilegeEscalation"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-41",
        "title": "Container is running without liveness probe",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-41",
        "isGeneratedByCustomRule": false,
        "issue": "Liveness probe is not defined",
        "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
        "resolve": "Add `livenessProbe` attribute",
        "remediation": {
          "kubernetes": "Add `livenessProbe` attribute",
          "terraform": "Add `liveness_probe` attribute"
        },
        "lineNumber": 148,
        "iacDescription": {
          "issue": "Liveness probe is not defined",
          "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
          "resolve": "Add `livenessProbe` attribute"
        },
        "publicId": "SNYK-CC-K8S-41",
        "msg": "spec.template.spec.containers[tls-proxy].livenessProbe",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/",
          "https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/",
          "https://cloud.google.com/blog/products/gcp/kubernetes-best-practices-setting-up-health-checks-with-readiness-and-liveness-probes"
        ],
        "path": [
          "[DocId: 7]",
          "spec",
          "template",
          "spec",
          "containers[tls-proxy]",
          "livenessProbe"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-4",
        "title": "Container is running without memory limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-4",
        "isGeneratedByCustomRule": false,
        "issue": "Memory limit is not defined",
        "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
        "resolve": "Set `resources.limits.memory` value",
        "remediation": {
          "kubernetes": "Set `resources.limits.memory` value",
          "terraform": "Set `resources.limits.memory` value"
        },
        "lineNumber": 148,
        "iacDescription": {
          "issue": "Memory limit is not defined",
          "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
          "resolve": "Set `resources.limits.memory` value"
        },
        "publicId": "SNYK-CC-K8S-4",
        "msg": "input.spec.template.spec.containers[tls-proxy].resources.limits.memory",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/memory-default-namespace/"
        ],
        "path": [
          "[DocId: 7]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[tls-proxy]",
          "resources",
          "limits",
          "memory"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-8",
        "title": "Container is running with writable root filesystem",
        "severity": "low",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-8",
        "isGeneratedByCustomRule": false,
        "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
        "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
          "terraform": "Set `security_context.read_only_root_filesystem` to `true`"
        },
        "lineNumber": 212,
        "iacDescription": {
          "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
          "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`"
        },
        "publicId": "SNYK-CC-K8S-8",
        "msg": "spec.template.spec.containers[wordpress].securityContext.readOnlyRootFilesystem",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 9]",
          "spec",
          "template",
          "spec",
          "containers[wordpress]",
          "securityContext",
          "readOnlyRootFilesystem"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-9",
        "title": "Container is running without privilege escalation control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-9",
        "isGeneratedByCustomRule": false,
        "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
        "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
          "terraform": "Set `spec.container.security_context.allow_privilege_escalation` to `false`"
        },
        "lineNumber": 212,
        "iacDescription": {
          "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
          "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`"
        },
        "publicId": "SNYK-CC-K8S-9",
        "msg": "spec.template.spec.containers[wordpress].securityContext.allowPrivilegeEscalation",
        "references": [
          "https://www.kernel.org/doc/html/latest/userspace-api/no_new_privs.html"
        ],
        "path": [
          "[DocId: 9]",
          "spec",
          "template",
          "spec",
          "containers[wordpress]",
          "securityContext",
          "allowPrivilegeEscalation"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-10",
        "title": "Container or Pod is running without root user control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-10",
        "isGeneratedByCustomRule": false,
        "issue": "Container or Pod is running without root user control",
        "impact": "Container or Pod could be running with full administrative privileges",
        "resolve": "Set `securityContext.runAsNonRoot` to `true`",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsNonRoot` to `true`",
          "terraform": "Set `security_context.run_as_non_root` to `true`"
        },
        "lineNumber": 212,
        "iacDescription": {
          "issue": "Container or Pod is running without root user control",
          "impact": "Container or Pod could be running with full administrative privileges",
          "resolve": "Set `securityContext.runAsNonRoot` to `true`"
        },
        "publicId": "SNYK-CC-K8S-10",
        "msg": "input.spec.template.spec.containers[wordpress].securityContext.runAsNonRoot",
        "description": "",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 9]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[wordpress]",
          "securityContext",
          "runAsNonRoot"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-4",
        "title": "Container is running without memory limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-4",
        "isGeneratedByCustomRule": false,
        "issue": "Memory limit is not defined",
        "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
        "resolve": "Set `resources.limits.memory` value",
        "remediation": {
          "kubernetes": "Set `resources.limits.memory` value",
          "terraform": "Set `resources.limits.memory` value"
        },
        "lineNumber": 212,
        "iacDescription": {
          "issue": "Memory limit is not defined",
          "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
          "resolve": "Set `resources.limits.memory` value"
        },
        "publicId": "SNYK-CC-K8S-4",
        "msg": "input.spec.template.spec.containers[wordpress].resources.limits.memory",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/memory-default-namespace/"
        ],
        "path": [
          "[DocId: 9]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[wordpress]",
          "resources",
          "limits",
          "memory"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-11",
        "title": "Container's or Pod's  UID could clash with host's UID",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-11",
        "isGeneratedByCustomRule": false,
        "issue": "`runAsUser` value is set to low UID",
        "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
        "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
          "terraform": "Set `security_context.run_as_user` value to greater or equal than 10'000"
        },
        "lineNumber": 212,
        "iacDescription": {
          "issue": "`runAsUser` value is set to low UID",
          "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
          "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence"
        },
        "publicId": "SNYK-CC-K8S-11",
        "msg": "input.spec.template.spec.containers[wordpress].securityContext.runAsUser",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container",
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod",
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 9]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[wordpress]",
          "securityContext",
          "runAsUser"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-5",
        "title": "Container has no CPU limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-5",
        "isGeneratedByCustomRule": false,
        "issue": "Container has no CPU limit",
        "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
        "resolve": "Add `resources.limits.cpu` field with required CPU limit value",
        "remediation": {
          "kubernetes": "Add `resources.limits.cpu` field with required CPU limit value",
          "terraform": "Add `spec.container.resources.limits.cpu` field with required CPU limit value"
        },
        "lineNumber": 212,
        "iacDescription": {
          "issue": "Container has no CPU limit",
          "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
          "resolve": "Add `resources.limits.cpu` field with required CPU limit value"
        },
        "publicId": "SNYK-CC-K8S-5",
        "msg": "input.spec.template.spec.containers[wordpress].resources.limits.cpu",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-cpu-resource/",
          "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/cpu-default-namespace/",
          "https://github.com/kubernetes/design-proposals-archive/blob/8da1442ea29adccea40693357d04727127e045ed/node/resource-qos.md#compressible-resource-guaranteess"
        ],
        "path": [
          "[DocId: 9]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[wordpress]",
          "resources",
          "limits",
          "cpu"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-41",
        "title": "Container is running without liveness probe",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-41",
        "isGeneratedByCustomRule": false,
        "issue": "Liveness probe is not defined",
        "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
        "resolve": "Add `livenessProbe` attribute",
        "remediation": {
          "kubernetes": "Add `livenessProbe` attribute",
          "terraform": "Add `liveness_probe` attribute"
        },
        "lineNumber": 212,
        "iacDescription": {
          "issue": "Liveness probe is not defined",
          "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
          "resolve": "Add `livenessProbe` attribute"
        },
        "publicId": "SNYK-CC-K8S-41",
        "msg": "spec.template.spec.containers[wordpress].livenessProbe",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/",
          "https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/",
          "https://cloud.google.com/blog/products/gcp/kubernetes-best-practices-setting-up-health-checks-with-readiness-and-liveness-probes"
        ],
        "path": [
          "[DocId: 9]",
          "spec",
          "template",
          "spec",
          "containers[wordpress]",
          "livenessProbe"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-6",
        "title": "Container does not drop all default capabilities",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-6",
        "isGeneratedByCustomRule": false,
        "issue": "All default capabilities are not explicitly dropped",
        "impact": "Containers are running with potentially unnecessary privileges",
        "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
        "remediation": {
          "kubernetes": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
          "terraform": "Add `ALL` to `spec.container.security_context.capabilities.drop` list, and add only required capabilities to `spec.container.security_context.capabilities.add`, ensuring it also does not contain `ALL`"
        },
        "lineNumber": 212,
        "iacDescription": {
          "issue": "All default capabilities are not explicitly dropped",
          "impact": "Containers are running with potentially unnecessary privileges",
          "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`"
        },
        "publicId": "SNYK-CC-K8S-6",
        "msg": "input.spec.template.spec.containers[wordpress].securityContext.capabilities.drop",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
          "https://linux-audit.com/linux-capabilities-hardening-linux-binaries-by-removing-setuid/"
        ],
        "path": [
          "[DocId: 9]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[wordpress]",
          "securityContext",
          "capabilities",
          "drop"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-4",
        "title": "Container is running without memory limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-4",
        "isGeneratedByCustomRule": false,
        "issue": "Memory limit is not defined",
        "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
        "resolve": "Set `resources.limits.memory` value",
        "remediation": {
          "kubernetes": "Set `resources.limits.memory` value",
          "terraform": "Set `resources.limits.memory` value"
        },
        "lineNumber": 260,
        "iacDescription": {
          "issue": "Memory limit is not defined",
          "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
          "resolve": "Set `resources.limits.memory` value"
        },
        "publicId": "SNYK-CC-K8S-4",
        "msg": "input.spec.template.spec.containers[monitor].resources.limits.memory",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/memory-default-namespace/"
        ],
        "path": [
          "[DocId: 11]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[monitor]",
          "resources",
          "limits",
          "memory"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-41",
        "title": "Container is running without liveness probe",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-41",
        "isGeneratedByCustomRule": false,
        "issue": "Liveness probe is not defined",
        "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
        "resolve": "Add `livenessProbe` attribute",
        "remediation": {
          "kubernetes": "Add `livenessProbe` attribute",
          "terraform": "Add `liveness_probe` attribute"
        },
        "lineNumber": 260,
        "iacDescription": {
          "issue": "Liveness probe is not defined",
          "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
          "resolve": "Add `livenessProbe` attribute"
        },
        "publicId": "SNYK-CC-K8S-41",
        "msg": "spec.template.spec.containers[monitor].livenessProbe",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/",
          "https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/",
          "https://cloud.google.com/blog/products/gcp/kubernetes-best-practices-setting-up-health-checks-with-readiness-and-liveness-probes"
        ],
        "path": [
          "[DocId: 11]",
          "spec",
          "template",
          "spec",
          "containers[monitor]",
          "livenessProbe"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-5",
        "title": "Container has no CPU limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-5",
        "isGeneratedByCustomRule": false,
        "issue": "Container has no CPU limit",
        "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
        "resolve": "Add `resources.limits.cpu` field with required CPU limit value",
        "remediation": {
          "kubernetes": "Add `resources.limits.cpu` field with required CPU limit value",
          "terraform": "Add `spec.container.resources.limits.cpu` field with required CPU limit value"
        },
        "lineNumber": 260,
        "iacDescription": {
          "issue": "Container has no CPU limit",
          "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
          "resolve": "Add `resources.limits.cpu` field with required CPU limit value"
        },
        "publicId": "SNYK-CC-K8S-5",
        "msg": "input.spec.template.spec.containers[monitor].resources.limits.cpu",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-cpu-resource/",
          "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/cpu-default-namespace/",
          "https://github.com/kubernetes/design-proposals-archive/blob/8da1442ea29adccea40693357d04727127e045ed/node/resource-qos.md#compressible-resource-guaranteess"
        ],
        "path": [
          "[DocId: 11]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[monitor]",
          "resources",
          "limits",
          "cpu"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-9",
        "title": "Container is running without privilege escalation control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-9",
        "isGeneratedByCustomRule": false,
        "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
        "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
          "terraform": "Set `spec.container.security_context.allow_privilege_escalation` to `false`"
        },
        "lineNumber": 260,
        "iacDescription": {
          "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
          "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`"
        },
        "publicId": "SNYK-CC-K8S-9",
        "msg": "spec.template.spec.containers[monitor].securityContext.allowPrivilegeEscalation",
        "references": [
          "https://www.kernel.org/doc/html/latest/userspace-api/no_new_privs.html"
        ],
        "path": [
          "[DocId: 11]",
          "spec",
          "template",
          "spec",
          "containers[monitor]",
          "securityContext",
          "allowPrivilegeEscalation"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-11",
        "title": "Container's or Pod's  UID could clash with host's UID",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-11",
        "isGeneratedByCustomRule": false,
        "issue": "`runAsUser` value is set to low UID",
        "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
        "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
          "terraform": "Set `security_context.run_as_user` value to greater or equal than 10'000"
        },
        "lineNumber": 260,
        "iacDescription": {
          "issue": "`runAsUser` value is set to low UID",
          "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
          "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence"
        },
        "publicId": "SNYK-CC-K8S-11",
        "msg": "input.spec.template.spec.containers[monitor].securityContext.runAsUser",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container",
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod",
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 11]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[monitor]",
          "securityContext",
          "runAsUser"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-10",
        "title": "Container or Pod is running without root user control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-10",
        "isGeneratedByCustomRule": false,
        "issue": "Container or Pod is running without root user control",
        "impact": "Container or Pod could be running with full administrative privileges",
        "resolve": "Set `securityContext.runAsNonRoot` to `true`",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsNonRoot` to `true`",
          "terraform": "Set `security_context.run_as_non_root` to `true`"
        },
        "lineNumber": 260,
        "iacDescription": {
          "issue": "Container or Pod is running without root user control",
          "impact": "Container or Pod could be running with full administrative privileges",
          "resolve": "Set `securityContext.runAsNonRoot` to `true`"
        },
        "publicId": "SNYK-CC-K8S-10",
        "msg": "input.spec.template.spec.containers[monitor].securityContext.runAsNonRoot",
        "description": "",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 11]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[monitor]",
          "securityContext",
          "runAsNonRoot"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-6",
        "title": "Container does not drop all default capabilities",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-6",
        "isGeneratedByCustomRule": false,
        "issue": "All default capabilities are not explicitly dropped",
        "impact": "Containers are running with potentially unnecessary privileges",
        "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
        "remediation": {
          "kubernetes": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
          "terraform": "Add `ALL` to `spec.container.security_context.capabilities.drop` list, and add only required capabilities to `spec.container.security_context.capabilities.add`, ensuring it also does not contain `ALL`"
        },
        "lineNumber": 260,
        "iacDescription": {
          "issue": "All default capabilities are not explicitly dropped",
          "impact": "Containers are running with potentially unnecessary privileges",
          "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`"
        },
        "publicId": "SNYK-CC-K8S-6",
        "msg": "input.spec.template.spec.containers[monitor].securityContext.capabilities.drop",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
          "https://linux-audit.com/linux-capabilities-hardening-linux-binaries-by-removing-setuid/"
        ],
        "path": [
          "[DocId: 11]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[monitor]",
          "securityContext",
          "capabilities",
          "drop"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-8",
        "title": "Container is running with writable root filesystem",
        "severity": "low",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-8",
        "isGeneratedByCustomRule": false,
        "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
        "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
          "terraform": "Set `security_context.read_only_root_filesystem` to `true`"
        },
        "lineNumber": 260,
        "iacDescription": {
          "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
          "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`"
        },
        "publicId": "SNYK-CC-K8S-8",
        "msg": "spec.template.spec.containers[monitor].securityContext.readOnlyRootFilesystem",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 11]",
          "spec",
          "template",
          "spec",
          "containers[monitor]",
          "securityContext",
          "readOnlyRootFilesystem"
        ],
        "compliance": []
      }
    ]
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_rhacs_demo_apps/files/demos/medical/everything.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_rhacs_demo_apps/files/demos/medical/everything.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": false,
    "infrastructureAsCodeIssues": [
      {
        "id": "SNYK-CC-K8S-4",
        "title": "Container is running without memory limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-4",
        "isGeneratedByCustomRule": false,
        "issue": "Memory limit is not defined",
        "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
        "resolve": "Set `resources.limits.memory` value",
        "remediation": {
          "kubernetes": "Set `resources.limits.memory` value",
          "terraform": "Set `resources.limits.memory` value"
        },
        "lineNumber": 32,
        "iacDescription": {
          "issue": "Memory limit is not defined",
          "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
          "resolve": "Set `resources.limits.memory` value"
        },
        "publicId": "SNYK-CC-K8S-4",
        "msg": "input.spec.template.spec.containers[reporting].resources.limits.memory",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/memory-default-namespace/"
        ],
        "path": [
          "[DocId: 1]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[reporting]",
          "resources",
          "limits",
          "memory"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-9",
        "title": "Container is running without privilege escalation control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-9",
        "isGeneratedByCustomRule": false,
        "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
        "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
          "terraform": "Set `spec.container.security_context.allow_privilege_escalation` to `false`"
        },
        "lineNumber": 32,
        "iacDescription": {
          "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
          "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`"
        },
        "publicId": "SNYK-CC-K8S-9",
        "msg": "spec.template.spec.containers[reporting].securityContext.allowPrivilegeEscalation",
        "references": [
          "https://www.kernel.org/doc/html/latest/userspace-api/no_new_privs.html"
        ],
        "path": [
          "[DocId: 1]",
          "spec",
          "template",
          "spec",
          "containers[reporting]",
          "securityContext",
          "allowPrivilegeEscalation"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-41",
        "title": "Container is running without liveness probe",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-41",
        "isGeneratedByCustomRule": false,
        "issue": "Liveness probe is not defined",
        "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
        "resolve": "Add `livenessProbe` attribute",
        "remediation": {
          "kubernetes": "Add `livenessProbe` attribute",
          "terraform": "Add `liveness_probe` attribute"
        },
        "lineNumber": 32,
        "iacDescription": {
          "issue": "Liveness probe is not defined",
          "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
          "resolve": "Add `livenessProbe` attribute"
        },
        "publicId": "SNYK-CC-K8S-41",
        "msg": "spec.template.spec.containers[reporting].livenessProbe",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/",
          "https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/",
          "https://cloud.google.com/blog/products/gcp/kubernetes-best-practices-setting-up-health-checks-with-readiness-and-liveness-probes"
        ],
        "path": [
          "[DocId: 1]",
          "spec",
          "template",
          "spec",
          "containers[reporting]",
          "livenessProbe"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-5",
        "title": "Container has no CPU limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-5",
        "isGeneratedByCustomRule": false,
        "issue": "Container has no CPU limit",
        "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
        "resolve": "Add `resources.limits.cpu` field with required CPU limit value",
        "remediation": {
          "kubernetes": "Add `resources.limits.cpu` field with required CPU limit value",
          "terraform": "Add `spec.container.resources.limits.cpu` field with required CPU limit value"
        },
        "lineNumber": 32,
        "iacDescription": {
          "issue": "Container has no CPU limit",
          "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
          "resolve": "Add `resources.limits.cpu` field with required CPU limit value"
        },
        "publicId": "SNYK-CC-K8S-5",
        "msg": "input.spec.template.spec.containers[reporting].resources.limits.cpu",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-cpu-resource/",
          "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/cpu-default-namespace/",
          "https://github.com/kubernetes/design-proposals-archive/blob/8da1442ea29adccea40693357d04727127e045ed/node/resource-qos.md#compressible-resource-guaranteess"
        ],
        "path": [
          "[DocId: 1]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[reporting]",
          "resources",
          "limits",
          "cpu"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-11",
        "title": "Container's or Pod's  UID could clash with host's UID",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-11",
        "isGeneratedByCustomRule": false,
        "issue": "`runAsUser` value is set to low UID",
        "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
        "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
          "terraform": "Set `security_context.run_as_user` value to greater or equal than 10'000"
        },
        "lineNumber": 32,
        "iacDescription": {
          "issue": "`runAsUser` value is set to low UID",
          "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
          "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence"
        },
        "publicId": "SNYK-CC-K8S-11",
        "msg": "input.spec.template.spec.containers[reporting].securityContext.runAsUser",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container",
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod",
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 1]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[reporting]",
          "securityContext",
          "runAsUser"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-10",
        "title": "Container or Pod is running without root user control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-10",
        "isGeneratedByCustomRule": false,
        "issue": "Container or Pod is running without root user control",
        "impact": "Container or Pod could be running with full administrative privileges",
        "resolve": "Set `securityContext.runAsNonRoot` to `true`",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsNonRoot` to `true`",
          "terraform": "Set `security_context.run_as_non_root` to `true`"
        },
        "lineNumber": 32,
        "iacDescription": {
          "issue": "Container or Pod is running without root user control",
          "impact": "Container or Pod could be running with full administrative privileges",
          "resolve": "Set `securityContext.runAsNonRoot` to `true`"
        },
        "publicId": "SNYK-CC-K8S-10",
        "msg": "input.spec.template.spec.containers[reporting].securityContext.runAsNonRoot",
        "description": "",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 1]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[reporting]",
          "securityContext",
          "runAsNonRoot"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-8",
        "title": "Container is running with writable root filesystem",
        "severity": "low",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-8",
        "isGeneratedByCustomRule": false,
        "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
        "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
          "terraform": "Set `security_context.read_only_root_filesystem` to `true`"
        },
        "lineNumber": 32,
        "iacDescription": {
          "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
          "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`"
        },
        "publicId": "SNYK-CC-K8S-8",
        "msg": "spec.template.spec.containers[reporting].securityContext.readOnlyRootFilesystem",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 1]",
          "spec",
          "template",
          "spec",
          "containers[reporting]",
          "securityContext",
          "readOnlyRootFilesystem"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-6",
        "title": "Container does not drop all default capabilities",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-6",
        "isGeneratedByCustomRule": false,
        "issue": "All default capabilities are not explicitly dropped",
        "impact": "Containers are running with potentially unnecessary privileges",
        "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
        "remediation": {
          "kubernetes": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
          "terraform": "Add `ALL` to `spec.container.security_context.capabilities.drop` list, and add only required capabilities to `spec.container.security_context.capabilities.add`, ensuring it also does not contain `ALL`"
        },
        "lineNumber": 32,
        "iacDescription": {
          "issue": "All default capabilities are not explicitly dropped",
          "impact": "Containers are running with potentially unnecessary privileges",
          "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`"
        },
        "publicId": "SNYK-CC-K8S-6",
        "msg": "input.spec.template.spec.containers[reporting].securityContext.capabilities.drop",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
          "https://linux-audit.com/linux-capabilities-hardening-linux-binaries-by-removing-setuid/"
        ],
        "path": [
          "[DocId: 1]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[reporting]",
          "securityContext",
          "capabilities",
          "drop"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-11",
        "title": "Container's or Pod's  UID could clash with host's UID",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-11",
        "isGeneratedByCustomRule": false,
        "issue": "`runAsUser` value is set to low UID",
        "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
        "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
          "terraform": "Set `security_context.run_as_user` value to greater or equal than 10'000"
        },
        "lineNumber": 90,
        "iacDescription": {
          "issue": "`runAsUser` value is set to low UID",
          "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
          "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence"
        },
        "publicId": "SNYK-CC-K8S-11",
        "msg": "input.spec.template.spec.containers[patient-db].securityContext.runAsUser",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container",
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod",
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 3]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[patient-db]",
          "securityContext",
          "runAsUser"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-10",
        "title": "Container or Pod is running without root user control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-10",
        "isGeneratedByCustomRule": false,
        "issue": "Container or Pod is running without root user control",
        "impact": "Container or Pod could be running with full administrative privileges",
        "resolve": "Set `securityContext.runAsNonRoot` to `true`",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsNonRoot` to `true`",
          "terraform": "Set `security_context.run_as_non_root` to `true`"
        },
        "lineNumber": 90,
        "iacDescription": {
          "issue": "Container or Pod is running without root user control",
          "impact": "Container or Pod could be running with full administrative privileges",
          "resolve": "Set `securityContext.runAsNonRoot` to `true`"
        },
        "publicId": "SNYK-CC-K8S-10",
        "msg": "input.spec.template.spec.containers[patient-db].securityContext.runAsNonRoot",
        "description": "",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 3]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[patient-db]",
          "securityContext",
          "runAsNonRoot"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-6",
        "title": "Container does not drop all default capabilities",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-6",
        "isGeneratedByCustomRule": false,
        "issue": "All default capabilities are not explicitly dropped",
        "impact": "Containers are running with potentially unnecessary privileges",
        "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
        "remediation": {
          "kubernetes": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
          "terraform": "Add `ALL` to `spec.container.security_context.capabilities.drop` list, and add only required capabilities to `spec.container.security_context.capabilities.add`, ensuring it also does not contain `ALL`"
        },
        "lineNumber": 90,
        "iacDescription": {
          "issue": "All default capabilities are not explicitly dropped",
          "impact": "Containers are running with potentially unnecessary privileges",
          "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`"
        },
        "publicId": "SNYK-CC-K8S-6",
        "msg": "input.spec.template.spec.containers[patient-db].securityContext.capabilities.drop",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
          "https://linux-audit.com/linux-capabilities-hardening-linux-binaries-by-removing-setuid/"
        ],
        "path": [
          "[DocId: 3]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[patient-db]",
          "securityContext",
          "capabilities",
          "drop"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-9",
        "title": "Container is running without privilege escalation control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-9",
        "isGeneratedByCustomRule": false,
        "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
        "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
          "terraform": "Set `spec.container.security_context.allow_privilege_escalation` to `false`"
        },
        "lineNumber": 90,
        "iacDescription": {
          "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
          "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`"
        },
        "publicId": "SNYK-CC-K8S-9",
        "msg": "spec.template.spec.containers[patient-db].securityContext.allowPrivilegeEscalation",
        "references": [
          "https://www.kernel.org/doc/html/latest/userspace-api/no_new_privs.html"
        ],
        "path": [
          "[DocId: 3]",
          "spec",
          "template",
          "spec",
          "containers[patient-db]",
          "securityContext",
          "allowPrivilegeEscalation"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-41",
        "title": "Container is running without liveness probe",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-41",
        "isGeneratedByCustomRule": false,
        "issue": "Liveness probe is not defined",
        "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
        "resolve": "Add `livenessProbe` attribute",
        "remediation": {
          "kubernetes": "Add `livenessProbe` attribute",
          "terraform": "Add `liveness_probe` attribute"
        },
        "lineNumber": 90,
        "iacDescription": {
          "issue": "Liveness probe is not defined",
          "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
          "resolve": "Add `livenessProbe` attribute"
        },
        "publicId": "SNYK-CC-K8S-41",
        "msg": "spec.template.spec.containers[patient-db].livenessProbe",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/",
          "https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/",
          "https://cloud.google.com/blog/products/gcp/kubernetes-best-practices-setting-up-health-checks-with-readiness-and-liveness-probes"
        ],
        "path": [
          "[DocId: 3]",
          "spec",
          "template",
          "spec",
          "containers[patient-db]",
          "livenessProbe"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-4",
        "title": "Container is running without memory limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-4",
        "isGeneratedByCustomRule": false,
        "issue": "Memory limit is not defined",
        "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
        "resolve": "Set `resources.limits.memory` value",
        "remediation": {
          "kubernetes": "Set `resources.limits.memory` value",
          "terraform": "Set `resources.limits.memory` value"
        },
        "lineNumber": 90,
        "iacDescription": {
          "issue": "Memory limit is not defined",
          "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
          "resolve": "Set `resources.limits.memory` value"
        },
        "publicId": "SNYK-CC-K8S-4",
        "msg": "input.spec.template.spec.containers[patient-db].resources.limits.memory",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/memory-default-namespace/"
        ],
        "path": [
          "[DocId: 3]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[patient-db]",
          "resources",
          "limits",
          "memory"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-8",
        "title": "Container is running with writable root filesystem",
        "severity": "low",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-8",
        "isGeneratedByCustomRule": false,
        "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
        "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
          "terraform": "Set `security_context.read_only_root_filesystem` to `true`"
        },
        "lineNumber": 90,
        "iacDescription": {
          "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
          "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`"
        },
        "publicId": "SNYK-CC-K8S-8",
        "msg": "spec.template.spec.containers[patient-db].securityContext.readOnlyRootFilesystem",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 3]",
          "spec",
          "template",
          "spec",
          "containers[patient-db]",
          "securityContext",
          "readOnlyRootFilesystem"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-5",
        "title": "Container has no CPU limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-5",
        "isGeneratedByCustomRule": false,
        "issue": "Container has no CPU limit",
        "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
        "resolve": "Add `resources.limits.cpu` field with required CPU limit value",
        "remediation": {
          "kubernetes": "Add `resources.limits.cpu` field with required CPU limit value",
          "terraform": "Add `spec.container.resources.limits.cpu` field with required CPU limit value"
        },
        "lineNumber": 90,
        "iacDescription": {
          "issue": "Container has no CPU limit",
          "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
          "resolve": "Add `resources.limits.cpu` field with required CPU limit value"
        },
        "publicId": "SNYK-CC-K8S-5",
        "msg": "input.spec.template.spec.containers[patient-db].resources.limits.cpu",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-cpu-resource/",
          "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/cpu-default-namespace/",
          "https://github.com/kubernetes/design-proposals-archive/blob/8da1442ea29adccea40693357d04727127e045ed/node/resource-qos.md#compressible-resource-guaranteess"
        ],
        "path": [
          "[DocId: 3]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[patient-db]",
          "resources",
          "limits",
          "cpu"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-46",
        "title": "RoleBinding or ClusterRoleBinding is using a pre-defined role",
        "severity": "high",
        "isIgnored": false,
        "subType": "ClusterRoleBinding",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-46",
        "isGeneratedByCustomRule": false,
        "issue": "A RoleBinding or ClusterRoleBinding was found using one of the default user facing roles, `cluster-admin`, `admin`, `edit` or `view`.",
        "impact": "Using a default user facing role may be overly permissive. For a ClusterRoleBinding this would be considered high severity.",
        "resolve": "Update roleRef.name to a specific role name with only the necessary permissions",
        "remediation": {
          "kubernetes": "Update roleRef.name to a specific role name with only the necessary permissions"
        },
        "lineNumber": 187,
        "iacDescription": {
          "issue": "A RoleBinding or ClusterRoleBinding was found using one of the default user facing roles, `cluster-admin`, `admin`, `edit` or `view`.",
          "impact": "Using a default user facing role may be overly permissive. For a ClusterRoleBinding this would be considered high severity.",
          "resolve": "Update roleRef.name to a specific role name with only the necessary permissions"
        },
        "publicId": "SNYK-CC-K8S-46",
        "msg": "roleRef.name",
        "references": [
          "https://kubernetes.io/docs/reference/access-authn-authz/rbac/"
        ],
        "path": [
          "[DocId: 7]",
          "roleRef",
          "name"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-5",
        "title": "Container has no CPU limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-5",
        "isGeneratedByCustomRule": false,
        "issue": "Container has no CPU limit",
        "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
        "resolve": "Add `resources.limits.cpu` field with required CPU limit value",
        "remediation": {
          "kubernetes": "Add `resources.limits.cpu` field with required CPU limit value",
          "terraform": "Add `spec.container.resources.limits.cpu` field with required CPU limit value"
        },
        "lineNumber": 214,
        "iacDescription": {
          "issue": "Container has no CPU limit",
          "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
          "resolve": "Add `resources.limits.cpu` field with required CPU limit value"
        },
        "publicId": "SNYK-CC-K8S-5",
        "msg": "input.spec.template.spec.containers[proxy].resources.limits.cpu",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-cpu-resource/",
          "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/cpu-default-namespace/",
          "https://github.com/kubernetes/design-proposals-archive/blob/8da1442ea29adccea40693357d04727127e045ed/node/resource-qos.md#compressible-resource-guaranteess"
        ],
        "path": [
          "[DocId: 8]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[proxy]",
          "resources",
          "limits",
          "cpu"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-9",
        "title": "Container is running without privilege escalation control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-9",
        "isGeneratedByCustomRule": false,
        "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
        "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
          "terraform": "Set `spec.container.security_context.allow_privilege_escalation` to `false`"
        },
        "lineNumber": 215,
        "iacDescription": {
          "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
          "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`"
        },
        "publicId": "SNYK-CC-K8S-9",
        "msg": "spec.template.spec.containers[proxy].securityContext.allowPrivilegeEscalation",
        "references": [
          "https://www.kernel.org/doc/html/latest/userspace-api/no_new_privs.html"
        ],
        "path": [
          "[DocId: 8]",
          "spec",
          "template",
          "spec",
          "containers[proxy]",
          "securityContext",
          "allowPrivilegeEscalation"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-41",
        "title": "Container is running without liveness probe",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-41",
        "isGeneratedByCustomRule": false,
        "issue": "Liveness probe is not defined",
        "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
        "resolve": "Add `livenessProbe` attribute",
        "remediation": {
          "kubernetes": "Add `livenessProbe` attribute",
          "terraform": "Add `liveness_probe` attribute"
        },
        "lineNumber": 214,
        "iacDescription": {
          "issue": "Liveness probe is not defined",
          "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
          "resolve": "Add `livenessProbe` attribute"
        },
        "publicId": "SNYK-CC-K8S-41",
        "msg": "spec.template.spec.containers[proxy].livenessProbe",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/",
          "https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/",
          "https://cloud.google.com/blog/products/gcp/kubernetes-best-practices-setting-up-health-checks-with-readiness-and-liveness-probes"
        ],
        "path": [
          "[DocId: 8]",
          "spec",
          "template",
          "spec",
          "containers[proxy]",
          "livenessProbe"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-8",
        "title": "Container is running with writable root filesystem",
        "severity": "low",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-8",
        "isGeneratedByCustomRule": false,
        "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
        "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
          "terraform": "Set `security_context.read_only_root_filesystem` to `true`"
        },
        "lineNumber": 215,
        "iacDescription": {
          "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
          "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`"
        },
        "publicId": "SNYK-CC-K8S-8",
        "msg": "spec.template.spec.containers[proxy].securityContext.readOnlyRootFilesystem",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 8]",
          "spec",
          "template",
          "spec",
          "containers[proxy]",
          "securityContext",
          "readOnlyRootFilesystem"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-1",
        "title": "Privileged container",
        "severity": "high",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-1",
        "isGeneratedByCustomRule": false,
        "issue": "Container is running in privileged mode",
        "impact": "Compromised container could potentially modify the underlying host\u2019s kernel by loading unauthorized modules (i.e. drivers).",
        "resolve": "Remove `securityContext.privileged` attribute, or set value to `false`",
        "remediation": {
          "kubernetes": "Remove `securityContext.privileged` attribute, or set value to `false`",
          "terraform": "Remove `security_context.privileged` attribute, or set value to `false`"
        },
        "lineNumber": 216,
        "iacDescription": {
          "issue": "Container is running in privileged mode",
          "impact": "Compromised container could potentially modify the underlying host\u2019s kernel by loading unauthorized modules (i.e. drivers).",
          "resolve": "Remove `securityContext.privileged` attribute, or set value to `false`"
        },
        "publicId": "SNYK-CC-K8S-1",
        "msg": "input.spec.template.spec.containers[proxy].securityContext.privileged",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 8]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[proxy]",
          "securityContext",
          "privileged"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-4",
        "title": "Container is running without memory limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-4",
        "isGeneratedByCustomRule": false,
        "issue": "Memory limit is not defined",
        "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
        "resolve": "Set `resources.limits.memory` value",
        "remediation": {
          "kubernetes": "Set `resources.limits.memory` value",
          "terraform": "Set `resources.limits.memory` value"
        },
        "lineNumber": 214,
        "iacDescription": {
          "issue": "Memory limit is not defined",
          "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
          "resolve": "Set `resources.limits.memory` value"
        },
        "publicId": "SNYK-CC-K8S-4",
        "msg": "input.spec.template.spec.containers[proxy].resources.limits.memory",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/memory-default-namespace/"
        ],
        "path": [
          "[DocId: 8]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[proxy]",
          "resources",
          "limits",
          "memory"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-10",
        "title": "Container or Pod is running without root user control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-10",
        "isGeneratedByCustomRule": false,
        "issue": "Container or Pod is running without root user control",
        "impact": "Container or Pod could be running with full administrative privileges",
        "resolve": "Set `securityContext.runAsNonRoot` to `true`",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsNonRoot` to `true`",
          "terraform": "Set `security_context.run_as_non_root` to `true`"
        },
        "lineNumber": 215,
        "iacDescription": {
          "issue": "Container or Pod is running without root user control",
          "impact": "Container or Pod could be running with full administrative privileges",
          "resolve": "Set `securityContext.runAsNonRoot` to `true`"
        },
        "publicId": "SNYK-CC-K8S-10",
        "msg": "input.spec.template.spec.containers[proxy].securityContext.runAsNonRoot",
        "description": "",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 8]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[proxy]",
          "securityContext",
          "runAsNonRoot"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-6",
        "title": "Container does not drop all default capabilities",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-6",
        "isGeneratedByCustomRule": false,
        "issue": "All default capabilities are not explicitly dropped",
        "impact": "Containers are running with potentially unnecessary privileges",
        "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
        "remediation": {
          "kubernetes": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
          "terraform": "Add `ALL` to `spec.container.security_context.capabilities.drop` list, and add only required capabilities to `spec.container.security_context.capabilities.add`, ensuring it also does not contain `ALL`"
        },
        "lineNumber": 215,
        "iacDescription": {
          "issue": "All default capabilities are not explicitly dropped",
          "impact": "Containers are running with potentially unnecessary privileges",
          "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`"
        },
        "publicId": "SNYK-CC-K8S-6",
        "msg": "input.spec.template.spec.containers[proxy].securityContext.capabilities.drop",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
          "https://linux-audit.com/linux-capabilities-hardening-linux-binaries-by-removing-setuid/"
        ],
        "path": [
          "[DocId: 8]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[proxy]",
          "securityContext",
          "capabilities",
          "drop"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-11",
        "title": "Container's or Pod's  UID could clash with host's UID",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-11",
        "isGeneratedByCustomRule": false,
        "issue": "`runAsUser` value is set to low UID",
        "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
        "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
          "terraform": "Set `security_context.run_as_user` value to greater or equal than 10'000"
        },
        "lineNumber": 215,
        "iacDescription": {
          "issue": "`runAsUser` value is set to low UID",
          "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
          "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence"
        },
        "publicId": "SNYK-CC-K8S-11",
        "msg": "input.spec.template.spec.containers[proxy].securityContext.runAsUser",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container",
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod",
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 8]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[proxy]",
          "securityContext",
          "runAsUser"
        ],
        "compliance": []
      }
    ]
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_rhacs_demo_apps/files/demos/misc/everything.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_rhacs_demo_apps/files/demos/misc/everything.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": false,
    "infrastructureAsCodeIssues": [
      {
        "id": "SNYK-CC-K8S-46",
        "title": "RoleBinding or ClusterRoleBinding is using a pre-defined role",
        "severity": "high",
        "isIgnored": false,
        "subType": "ClusterRoleBinding",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-46",
        "isGeneratedByCustomRule": false,
        "issue": "A RoleBinding or ClusterRoleBinding was found using one of the default user facing roles, `cluster-admin`, `admin`, `edit` or `view`.",
        "impact": "Using a default user facing role may be overly permissive. For a ClusterRoleBinding this would be considered high severity.",
        "resolve": "Update roleRef.name to a specific role name with only the necessary permissions",
        "remediation": {
          "kubernetes": "Update roleRef.name to a specific role name with only the necessary permissions"
        },
        "lineNumber": 9,
        "iacDescription": {
          "issue": "A RoleBinding or ClusterRoleBinding was found using one of the default user facing roles, `cluster-admin`, `admin`, `edit` or `view`.",
          "impact": "Using a default user facing role may be overly permissive. For a ClusterRoleBinding this would be considered high severity.",
          "resolve": "Update roleRef.name to a specific role name with only the necessary permissions"
        },
        "publicId": "SNYK-CC-K8S-46",
        "msg": "roleRef.name",
        "references": [
          "https://kubernetes.io/docs/reference/access-authn-authz/rbac/"
        ],
        "path": [
          "[DocId: 0]",
          "roleRef",
          "name"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-44",
        "title": "Role or ClusterRole with too wide permissions",
        "severity": "high",
        "isIgnored": false,
        "subType": "ClusterRole",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-44",
        "isGeneratedByCustomRule": false,
        "issue": "The role uses wildcards, which grant the role permissions to the whole cluster",
        "impact": "The use of wildcard rights grants is likely to provide excessive rights to the Kubernetes API. For a ClusterRole this would be considered high severity.",
        "resolve": "Set only the necessary permissions required",
        "remediation": {
          "kubernetes": "Set only the necessary permissions required",
          "terraform": "Remove any wildcards [*] from `rule.verbs` and `rule.resources`"
        },
        "lineNumber": 22,
        "iacDescription": {
          "issue": "The role uses wildcards, which grant the role permissions to the whole cluster",
          "impact": "The use of wildcard rights grants is likely to provide excessive rights to the Kubernetes API. For a ClusterRole this would be considered high severity.",
          "resolve": "Set only the necessary permissions required"
        },
        "publicId": "SNYK-CC-K8S-44",
        "msg": "rules[0].resources",
        "references": [
          "https://kubernetes.io/docs/reference/access-authn-authz/rbac/"
        ],
        "path": [
          "[DocId: 1]",
          "rules[0]",
          "resources"
        ],
        "compliance": []
      }
    ]
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_rhacs_demo_apps/files/demos/operations/everything.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_rhacs_demo_apps/files/demos/operations/everything.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": false,
    "infrastructureAsCodeIssues": [
      {
        "id": "SNYK-CC-K8S-34",
        "title": "Container is exposing SSH port",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-34",
        "isGeneratedByCustomRule": false,
        "issue": "SSH port is declared in `ports` attribute",
        "impact": "Increases the security management overhead",
        "resolve": "Remove ssh from `ports` array",
        "remediation": {
          "kubernetes": "Remove ssh from `ports` array",
          "terraform": "Remove ssh from `ports` array"
        },
        "lineNumber": 55,
        "iacDescription": {
          "issue": "SSH port is declared in `ports` attribute",
          "impact": "Increases the security management overhead",
          "resolve": "Remove ssh from `ports` array"
        },
        "publicId": "SNYK-CC-K8S-34",
        "msg": "spec.template.spec.containers[jump-host].ports.containerPort[22]",
        "references": [
          "https://kubernetes.io/docs/tasks/debug-application-cluster/get-shell-running-container/"
        ],
        "path": [
          "[DocId: 2]",
          "spec",
          "template",
          "spec",
          "containers[jump-host]",
          "ports",
          "containerPort[22]"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-11",
        "title": "Container's or Pod's  UID could clash with host's UID",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-11",
        "isGeneratedByCustomRule": false,
        "issue": "`runAsUser` value is set to low UID",
        "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
        "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
          "terraform": "Set `security_context.run_as_user` value to greater or equal than 10'000"
        },
        "lineNumber": 49,
        "iacDescription": {
          "issue": "`runAsUser` value is set to low UID",
          "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
          "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence"
        },
        "publicId": "SNYK-CC-K8S-11",
        "msg": "input.spec.template.spec.containers[jump-host].securityContext.runAsUser",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container",
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod",
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 2]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[jump-host]",
          "securityContext",
          "runAsUser"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-5",
        "title": "Container has no CPU limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-5",
        "isGeneratedByCustomRule": false,
        "issue": "Container has no CPU limit",
        "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
        "resolve": "Add `resources.limits.cpu` field with required CPU limit value",
        "remediation": {
          "kubernetes": "Add `resources.limits.cpu` field with required CPU limit value",
          "terraform": "Add `spec.container.resources.limits.cpu` field with required CPU limit value"
        },
        "lineNumber": 49,
        "iacDescription": {
          "issue": "Container has no CPU limit",
          "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
          "resolve": "Add `resources.limits.cpu` field with required CPU limit value"
        },
        "publicId": "SNYK-CC-K8S-5",
        "msg": "input.spec.template.spec.containers[jump-host].resources.limits.cpu",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-cpu-resource/",
          "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/cpu-default-namespace/",
          "https://github.com/kubernetes/design-proposals-archive/blob/8da1442ea29adccea40693357d04727127e045ed/node/resource-qos.md#compressible-resource-guaranteess"
        ],
        "path": [
          "[DocId: 2]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[jump-host]",
          "resources",
          "limits",
          "cpu"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-8",
        "title": "Container is running with writable root filesystem",
        "severity": "low",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-8",
        "isGeneratedByCustomRule": false,
        "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
        "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
          "terraform": "Set `security_context.read_only_root_filesystem` to `true`"
        },
        "lineNumber": 49,
        "iacDescription": {
          "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
          "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`"
        },
        "publicId": "SNYK-CC-K8S-8",
        "msg": "spec.template.spec.containers[jump-host].securityContext.readOnlyRootFilesystem",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 2]",
          "spec",
          "template",
          "spec",
          "containers[jump-host]",
          "securityContext",
          "readOnlyRootFilesystem"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-10",
        "title": "Container or Pod is running without root user control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-10",
        "isGeneratedByCustomRule": false,
        "issue": "Container or Pod is running without root user control",
        "impact": "Container or Pod could be running with full administrative privileges",
        "resolve": "Set `securityContext.runAsNonRoot` to `true`",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsNonRoot` to `true`",
          "terraform": "Set `security_context.run_as_non_root` to `true`"
        },
        "lineNumber": 49,
        "iacDescription": {
          "issue": "Container or Pod is running without root user control",
          "impact": "Container or Pod could be running with full administrative privileges",
          "resolve": "Set `securityContext.runAsNonRoot` to `true`"
        },
        "publicId": "SNYK-CC-K8S-10",
        "msg": "input.spec.template.spec.containers[jump-host].securityContext.runAsNonRoot",
        "description": "",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 2]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[jump-host]",
          "securityContext",
          "runAsNonRoot"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-6",
        "title": "Container does not drop all default capabilities",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-6",
        "isGeneratedByCustomRule": false,
        "issue": "All default capabilities are not explicitly dropped",
        "impact": "Containers are running with potentially unnecessary privileges",
        "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
        "remediation": {
          "kubernetes": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
          "terraform": "Add `ALL` to `spec.container.security_context.capabilities.drop` list, and add only required capabilities to `spec.container.security_context.capabilities.add`, ensuring it also does not contain `ALL`"
        },
        "lineNumber": 49,
        "iacDescription": {
          "issue": "All default capabilities are not explicitly dropped",
          "impact": "Containers are running with potentially unnecessary privileges",
          "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`"
        },
        "publicId": "SNYK-CC-K8S-6",
        "msg": "input.spec.template.spec.containers[jump-host].securityContext.capabilities.drop",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
          "https://linux-audit.com/linux-capabilities-hardening-linux-binaries-by-removing-setuid/"
        ],
        "path": [
          "[DocId: 2]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[jump-host]",
          "securityContext",
          "capabilities",
          "drop"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-41",
        "title": "Container is running without liveness probe",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-41",
        "isGeneratedByCustomRule": false,
        "issue": "Liveness probe is not defined",
        "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
        "resolve": "Add `livenessProbe` attribute",
        "remediation": {
          "kubernetes": "Add `livenessProbe` attribute",
          "terraform": "Add `liveness_probe` attribute"
        },
        "lineNumber": 49,
        "iacDescription": {
          "issue": "Liveness probe is not defined",
          "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
          "resolve": "Add `livenessProbe` attribute"
        },
        "publicId": "SNYK-CC-K8S-41",
        "msg": "spec.template.spec.containers[jump-host].livenessProbe",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/",
          "https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/",
          "https://cloud.google.com/blog/products/gcp/kubernetes-best-practices-setting-up-health-checks-with-readiness-and-liveness-probes"
        ],
        "path": [
          "[DocId: 2]",
          "spec",
          "template",
          "spec",
          "containers[jump-host]",
          "livenessProbe"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-4",
        "title": "Container is running without memory limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-4",
        "isGeneratedByCustomRule": false,
        "issue": "Memory limit is not defined",
        "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
        "resolve": "Set `resources.limits.memory` value",
        "remediation": {
          "kubernetes": "Set `resources.limits.memory` value",
          "terraform": "Set `resources.limits.memory` value"
        },
        "lineNumber": 49,
        "iacDescription": {
          "issue": "Memory limit is not defined",
          "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
          "resolve": "Set `resources.limits.memory` value"
        },
        "publicId": "SNYK-CC-K8S-4",
        "msg": "input.spec.template.spec.containers[jump-host].resources.limits.memory",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/memory-default-namespace/"
        ],
        "path": [
          "[DocId: 2]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[jump-host]",
          "resources",
          "limits",
          "memory"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-9",
        "title": "Container is running without privilege escalation control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-9",
        "isGeneratedByCustomRule": false,
        "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
        "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
          "terraform": "Set `spec.container.security_context.allow_privilege_escalation` to `false`"
        },
        "lineNumber": 49,
        "iacDescription": {
          "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
          "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`"
        },
        "publicId": "SNYK-CC-K8S-9",
        "msg": "spec.template.spec.containers[jump-host].securityContext.allowPrivilegeEscalation",
        "references": [
          "https://www.kernel.org/doc/html/latest/userspace-api/no_new_privs.html"
        ],
        "path": [
          "[DocId: 2]",
          "spec",
          "template",
          "spec",
          "containers[jump-host]",
          "securityContext",
          "allowPrivilegeEscalation"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-46",
        "title": "RoleBinding or ClusterRoleBinding is using a pre-defined role",
        "severity": "high",
        "isIgnored": false,
        "subType": "ClusterRoleBinding",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-46",
        "isGeneratedByCustomRule": false,
        "issue": "A RoleBinding or ClusterRoleBinding was found using one of the default user facing roles, `cluster-admin`, `admin`, `edit` or `view`.",
        "impact": "Using a default user facing role may be overly permissive. For a ClusterRoleBinding this would be considered high severity.",
        "resolve": "Update roleRef.name to a specific role name with only the necessary permissions",
        "remediation": {
          "kubernetes": "Update roleRef.name to a specific role name with only the necessary permissions"
        },
        "lineNumber": 101,
        "iacDescription": {
          "issue": "A RoleBinding or ClusterRoleBinding was found using one of the default user facing roles, `cluster-admin`, `admin`, `edit` or `view`.",
          "impact": "Using a default user facing role may be overly permissive. For a ClusterRoleBinding this would be considered high severity.",
          "resolve": "Update roleRef.name to a specific role name with only the necessary permissions"
        },
        "publicId": "SNYK-CC-K8S-46",
        "msg": "roleRef.name",
        "references": [
          "https://kubernetes.io/docs/reference/access-authn-authz/rbac/"
        ],
        "path": [
          "[DocId: 5]",
          "roleRef",
          "name"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-41",
        "title": "Container is running without liveness probe",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-41",
        "isGeneratedByCustomRule": false,
        "issue": "Liveness probe is not defined",
        "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
        "resolve": "Add `livenessProbe` attribute",
        "remediation": {
          "kubernetes": "Add `livenessProbe` attribute",
          "terraform": "Add `liveness_probe` attribute"
        },
        "lineNumber": 139,
        "iacDescription": {
          "issue": "Liveness probe is not defined",
          "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
          "resolve": "Add `livenessProbe` attribute"
        },
        "publicId": "SNYK-CC-K8S-41",
        "msg": "spec.template.spec.containers[puppet-master].livenessProbe",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/",
          "https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/",
          "https://cloud.google.com/blog/products/gcp/kubernetes-best-practices-setting-up-health-checks-with-readiness-and-liveness-probes"
        ],
        "path": [
          "[DocId: 6]",
          "spec",
          "template",
          "spec",
          "containers[puppet-master]",
          "livenessProbe"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-37",
        "title": "Container is running with host path mount",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-37",
        "isGeneratedByCustomRule": false,
        "issue": "Host path has been mounted inside the pod",
        "impact": "Increases the attack surface, and can lead to privilege escalation",
        "resolve": "Remove `hostPath` volume mount",
        "remediation": {
          "kubernetes": "Remove `hostPath` volume mount",
          "terraform": "Remove `host_path` from `spec.volume` property"
        },
        "lineNumber": 135,
        "iacDescription": {
          "issue": "Host path has been mounted inside the pod",
          "impact": "Increases the attack surface, and can lead to privilege escalation",
          "resolve": "Remove `hostPath` volume mount"
        },
        "publicId": "SNYK-CC-K8S-37",
        "msg": "spec.template.spec.volumes[var-run-docker-sock].hostPath",
        "references": [
          "https://kubernetes.io/docs/concepts/storage/volumes/#hostpath"
        ],
        "path": [
          "[DocId: 6]",
          "spec",
          "template",
          "spec",
          "volumes[var-run-docker-sock]",
          "hostPath"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-10",
        "title": "Container or Pod is running without root user control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-10",
        "isGeneratedByCustomRule": false,
        "issue": "Container or Pod is running without root user control",
        "impact": "Container or Pod could be running with full administrative privileges",
        "resolve": "Set `securityContext.runAsNonRoot` to `true`",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsNonRoot` to `true`",
          "terraform": "Set `security_context.run_as_non_root` to `true`"
        },
        "lineNumber": 148,
        "iacDescription": {
          "issue": "Container or Pod is running without root user control",
          "impact": "Container or Pod could be running with full administrative privileges",
          "resolve": "Set `securityContext.runAsNonRoot` to `true`"
        },
        "publicId": "SNYK-CC-K8S-10",
        "msg": "input.spec.template.spec.containers[puppet-master].securityContext.runAsNonRoot",
        "description": "",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 6]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[puppet-master]",
          "securityContext",
          "runAsNonRoot"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-1",
        "title": "Privileged container",
        "severity": "high",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-1",
        "isGeneratedByCustomRule": false,
        "issue": "Container is running in privileged mode",
        "impact": "Compromised container could potentially modify the underlying host\u2019s kernel by loading unauthorized modules (i.e. drivers).",
        "resolve": "Remove `securityContext.privileged` attribute, or set value to `false`",
        "remediation": {
          "kubernetes": "Remove `securityContext.privileged` attribute, or set value to `false`",
          "terraform": "Remove `security_context.privileged` attribute, or set value to `false`"
        },
        "lineNumber": 149,
        "iacDescription": {
          "issue": "Container is running in privileged mode",
          "impact": "Compromised container could potentially modify the underlying host\u2019s kernel by loading unauthorized modules (i.e. drivers).",
          "resolve": "Remove `securityContext.privileged` attribute, or set value to `false`"
        },
        "publicId": "SNYK-CC-K8S-1",
        "msg": "input.spec.template.spec.containers[puppet-master].securityContext.privileged",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 6]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[puppet-master]",
          "securityContext",
          "privileged"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-8",
        "title": "Container is running with writable root filesystem",
        "severity": "low",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-8",
        "isGeneratedByCustomRule": false,
        "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
        "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
          "terraform": "Set `security_context.read_only_root_filesystem` to `true`"
        },
        "lineNumber": 148,
        "iacDescription": {
          "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
          "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`"
        },
        "publicId": "SNYK-CC-K8S-8",
        "msg": "spec.template.spec.containers[puppet-master].securityContext.readOnlyRootFilesystem",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 6]",
          "spec",
          "template",
          "spec",
          "containers[puppet-master]",
          "securityContext",
          "readOnlyRootFilesystem"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-4",
        "title": "Container is running without memory limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-4",
        "isGeneratedByCustomRule": false,
        "issue": "Memory limit is not defined",
        "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
        "resolve": "Set `resources.limits.memory` value",
        "remediation": {
          "kubernetes": "Set `resources.limits.memory` value",
          "terraform": "Set `resources.limits.memory` value"
        },
        "lineNumber": 139,
        "iacDescription": {
          "issue": "Memory limit is not defined",
          "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
          "resolve": "Set `resources.limits.memory` value"
        },
        "publicId": "SNYK-CC-K8S-4",
        "msg": "input.spec.template.spec.containers[puppet-master].resources.limits.memory",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/memory-default-namespace/"
        ],
        "path": [
          "[DocId: 6]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[puppet-master]",
          "resources",
          "limits",
          "memory"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-11",
        "title": "Container's or Pod's  UID could clash with host's UID",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-11",
        "isGeneratedByCustomRule": false,
        "issue": "`runAsUser` value is set to low UID",
        "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
        "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
          "terraform": "Set `security_context.run_as_user` value to greater or equal than 10'000"
        },
        "lineNumber": 148,
        "iacDescription": {
          "issue": "`runAsUser` value is set to low UID",
          "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
          "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence"
        },
        "publicId": "SNYK-CC-K8S-11",
        "msg": "input.spec.template.spec.containers[puppet-master].securityContext.runAsUser",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container",
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod",
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 6]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[puppet-master]",
          "securityContext",
          "runAsUser"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-5",
        "title": "Container has no CPU limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-5",
        "isGeneratedByCustomRule": false,
        "issue": "Container has no CPU limit",
        "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
        "resolve": "Add `resources.limits.cpu` field with required CPU limit value",
        "remediation": {
          "kubernetes": "Add `resources.limits.cpu` field with required CPU limit value",
          "terraform": "Add `spec.container.resources.limits.cpu` field with required CPU limit value"
        },
        "lineNumber": 139,
        "iacDescription": {
          "issue": "Container has no CPU limit",
          "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
          "resolve": "Add `resources.limits.cpu` field with required CPU limit value"
        },
        "publicId": "SNYK-CC-K8S-5",
        "msg": "input.spec.template.spec.containers[puppet-master].resources.limits.cpu",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-cpu-resource/",
          "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/cpu-default-namespace/",
          "https://github.com/kubernetes/design-proposals-archive/blob/8da1442ea29adccea40693357d04727127e045ed/node/resource-qos.md#compressible-resource-guaranteess"
        ],
        "path": [
          "[DocId: 6]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[puppet-master]",
          "resources",
          "limits",
          "cpu"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-9",
        "title": "Container is running without privilege escalation control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-9",
        "isGeneratedByCustomRule": false,
        "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
        "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
          "terraform": "Set `spec.container.security_context.allow_privilege_escalation` to `false`"
        },
        "lineNumber": 148,
        "iacDescription": {
          "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
          "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`"
        },
        "publicId": "SNYK-CC-K8S-9",
        "msg": "spec.template.spec.containers[puppet-master].securityContext.allowPrivilegeEscalation",
        "references": [
          "https://www.kernel.org/doc/html/latest/userspace-api/no_new_privs.html"
        ],
        "path": [
          "[DocId: 6]",
          "spec",
          "template",
          "spec",
          "containers[puppet-master]",
          "securityContext",
          "allowPrivilegeEscalation"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-2",
        "title": "Container is running with docker socket mount",
        "severity": "high",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-2",
        "isGeneratedByCustomRule": false,
        "issue": "Docker socket has been mounted inside the pod",
        "impact": "Access to docker socket from container can lead to container escape attacks and privilege escalation on the host",
        "resolve": "Remove `/var/run/docker.sock` hostPath volume",
        "remediation": {
          "kubernetes": "Remove `/var/run/docker.sock` hostPath volume",
          "terraform": "Remove `/var/run/docker.sock` from `volume.host_path.path`"
        },
        "lineNumber": 136,
        "iacDescription": {
          "issue": "Docker socket has been mounted inside the pod",
          "impact": "Access to docker socket from container can lead to container escape attacks and privilege escalation on the host",
          "resolve": "Remove `/var/run/docker.sock` hostPath volume"
        },
        "publicId": "SNYK-CC-K8S-2",
        "msg": "input.spec.template.spec.volumes[var-run-docker-sock].hostPath.path",
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html",
          "https://aws.github.io/aws-eks-best-practices/pods/#never-run-docker-in-docker-or-mount-the-socket-in-the-container"
        ],
        "path": [
          "[DocId: 6]",
          "input",
          "spec",
          "template",
          "spec",
          "volumes[var-run-docker-sock]",
          "hostPath",
          "path"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-6",
        "title": "Container does not drop all default capabilities",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-6",
        "isGeneratedByCustomRule": false,
        "issue": "All default capabilities are not explicitly dropped",
        "impact": "Containers are running with potentially unnecessary privileges",
        "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
        "remediation": {
          "kubernetes": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
          "terraform": "Add `ALL` to `spec.container.security_context.capabilities.drop` list, and add only required capabilities to `spec.container.security_context.capabilities.add`, ensuring it also does not contain `ALL`"
        },
        "lineNumber": 148,
        "iacDescription": {
          "issue": "All default capabilities are not explicitly dropped",
          "impact": "Containers are running with potentially unnecessary privileges",
          "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`"
        },
        "publicId": "SNYK-CC-K8S-6",
        "msg": "input.spec.template.spec.containers[puppet-master].securityContext.capabilities.drop",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
          "https://linux-audit.com/linux-capabilities-hardening-linux-binaries-by-removing-setuid/"
        ],
        "path": [
          "[DocId: 6]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[puppet-master]",
          "securityContext",
          "capabilities",
          "drop"
        ],
        "compliance": []
      }
    ]
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_rhacs_demo_apps/files/demos/payments/everything.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_rhacs_demo_apps/files/demos/payments/everything.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": false,
    "infrastructureAsCodeIssues": [
      {
        "id": "SNYK-CC-K8S-46",
        "title": "RoleBinding or ClusterRoleBinding is using a pre-defined role",
        "severity": "high",
        "isIgnored": false,
        "subType": "ClusterRoleBinding",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-46",
        "isGeneratedByCustomRule": false,
        "issue": "A RoleBinding or ClusterRoleBinding was found using one of the default user facing roles, `cluster-admin`, `admin`, `edit` or `view`.",
        "impact": "Using a default user facing role may be overly permissive. For a ClusterRoleBinding this would be considered high severity.",
        "resolve": "Update roleRef.name to a specific role name with only the necessary permissions",
        "remediation": {
          "kubernetes": "Update roleRef.name to a specific role name with only the necessary permissions"
        },
        "lineNumber": 41,
        "iacDescription": {
          "issue": "A RoleBinding or ClusterRoleBinding was found using one of the default user facing roles, `cluster-admin`, `admin`, `edit` or `view`.",
          "impact": "Using a default user facing role may be overly permissive. For a ClusterRoleBinding this would be considered high severity.",
          "resolve": "Update roleRef.name to a specific role name with only the necessary permissions"
        },
        "publicId": "SNYK-CC-K8S-46",
        "msg": "roleRef.name",
        "references": [
          "https://kubernetes.io/docs/reference/access-authn-authz/rbac/"
        ],
        "path": [
          "[DocId: 3]",
          "roleRef",
          "name"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-10",
        "title": "Container or Pod is running without root user control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-10",
        "isGeneratedByCustomRule": false,
        "issue": "Container or Pod is running without root user control",
        "impact": "Container or Pod could be running with full administrative privileges",
        "resolve": "Set `securityContext.runAsNonRoot` to `true`",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsNonRoot` to `true`",
          "terraform": "Set `security_context.run_as_non_root` to `true`"
        },
        "lineNumber": 91,
        "iacDescription": {
          "issue": "Container or Pod is running without root user control",
          "impact": "Container or Pod could be running with full administrative privileges",
          "resolve": "Set `securityContext.runAsNonRoot` to `true`"
        },
        "publicId": "SNYK-CC-K8S-10",
        "msg": "input.spec.template.spec.containers[visa-processor].securityContext.runAsNonRoot",
        "description": "",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 4]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[visa-processor]",
          "securityContext",
          "runAsNonRoot"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-6",
        "title": "Container does not drop all default capabilities",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-6",
        "isGeneratedByCustomRule": false,
        "issue": "All default capabilities are not explicitly dropped",
        "impact": "Containers are running with potentially unnecessary privileges",
        "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
        "remediation": {
          "kubernetes": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
          "terraform": "Add `ALL` to `spec.container.security_context.capabilities.drop` list, and add only required capabilities to `spec.container.security_context.capabilities.add`, ensuring it also does not contain `ALL`"
        },
        "lineNumber": 101,
        "iacDescription": {
          "issue": "All default capabilities are not explicitly dropped",
          "impact": "Containers are running with potentially unnecessary privileges",
          "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`"
        },
        "publicId": "SNYK-CC-K8S-6",
        "msg": "input.spec.template.spec.containers[visa-processor-sidecar].securityContext.capabilities.drop",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
          "https://linux-audit.com/linux-capabilities-hardening-linux-binaries-by-removing-setuid/"
        ],
        "path": [
          "[DocId: 4]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[visa-processor-sidecar]",
          "securityContext",
          "capabilities",
          "drop"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-34",
        "title": "Container is exposing SSH port",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-34",
        "isGeneratedByCustomRule": false,
        "issue": "SSH port is declared in `ports` attribute",
        "impact": "Increases the security management overhead",
        "resolve": "Remove ssh from `ports` array",
        "remediation": {
          "kubernetes": "Remove ssh from `ports` array",
          "terraform": "Remove ssh from `ports` array"
        },
        "lineNumber": 83,
        "iacDescription": {
          "issue": "SSH port is declared in `ports` attribute",
          "impact": "Increases the security management overhead",
          "resolve": "Remove ssh from `ports` array"
        },
        "publicId": "SNYK-CC-K8S-34",
        "msg": "spec.template.spec.containers[visa-processor].ports.containerPort[22]",
        "references": [
          "https://kubernetes.io/docs/tasks/debug-application-cluster/get-shell-running-container/"
        ],
        "path": [
          "[DocId: 4]",
          "spec",
          "template",
          "spec",
          "containers[visa-processor]",
          "ports",
          "containerPort[22]"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-4",
        "title": "Container is running without memory limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-4",
        "isGeneratedByCustomRule": false,
        "issue": "Memory limit is not defined",
        "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
        "resolve": "Set `resources.limits.memory` value",
        "remediation": {
          "kubernetes": "Set `resources.limits.memory` value",
          "terraform": "Set `resources.limits.memory` value"
        },
        "lineNumber": 79,
        "iacDescription": {
          "issue": "Memory limit is not defined",
          "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
          "resolve": "Set `resources.limits.memory` value"
        },
        "publicId": "SNYK-CC-K8S-4",
        "msg": "input.spec.template.spec.containers[visa-processor].resources.limits.memory",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/memory-default-namespace/"
        ],
        "path": [
          "[DocId: 4]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[visa-processor]",
          "resources",
          "limits",
          "memory"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-7",
        "title": "Container or Pod is running with SYS_ADMIN capability",
        "severity": "high",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-7",
        "isGeneratedByCustomRule": false,
        "issue": "SYS_ADMIN privileges are assigned to the container",
        "impact": "SYS_ADMIN capability grants the container almost full administrative privileges",
        "resolve": "Remove `SYS_ADMIN` from `securityContext.capabilities.add` list",
        "remediation": {
          "kubernetes": "Remove `SYS_ADMIN` from `securityContext.capabilities.add` list",
          "terraform": "Remove `SYS_ADMIN` from `security_context.capabilities.add` list"
        },
        "lineNumber": 93,
        "iacDescription": {
          "issue": "SYS_ADMIN privileges are assigned to the container",
          "impact": "SYS_ADMIN capability grants the container almost full administrative privileges",
          "resolve": "Remove `SYS_ADMIN` from `securityContext.capabilities.add` list"
        },
        "publicId": "SNYK-CC-K8S-7",
        "msg": "input.spec.template.spec.containers[visa-processor].securityContext.capabilities.add.SYS_ADMIN",
        "description": "",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-capabilities-for-a-container",
          "https://man7.org/linux/man-pages/man7/capabilities.7.html",
          "https://docs.docker.com/engine/reference/run/#runtime-privilege-and-linux-capabilities"
        ],
        "path": [
          "[DocId: 4]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[visa-processor]",
          "securityContext",
          "capabilities",
          "add",
          "SYS_ADMIN"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-6",
        "title": "Container does not drop all default capabilities",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-6",
        "isGeneratedByCustomRule": false,
        "issue": "All default capabilities are not explicitly dropped",
        "impact": "Containers are running with potentially unnecessary privileges",
        "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
        "remediation": {
          "kubernetes": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
          "terraform": "Add `ALL` to `spec.container.security_context.capabilities.drop` list, and add only required capabilities to `spec.container.security_context.capabilities.add`, ensuring it also does not contain `ALL`"
        },
        "lineNumber": 92,
        "iacDescription": {
          "issue": "All default capabilities are not explicitly dropped",
          "impact": "Containers are running with potentially unnecessary privileges",
          "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`"
        },
        "publicId": "SNYK-CC-K8S-6",
        "msg": "input.spec.template.spec.containers[visa-processor].securityContext.capabilities.drop",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
          "https://linux-audit.com/linux-capabilities-hardening-linux-binaries-by-removing-setuid/"
        ],
        "path": [
          "[DocId: 4]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[visa-processor]",
          "securityContext",
          "capabilities",
          "drop"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-4",
        "title": "Container is running without memory limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-4",
        "isGeneratedByCustomRule": false,
        "issue": "Memory limit is not defined",
        "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
        "resolve": "Set `resources.limits.memory` value",
        "remediation": {
          "kubernetes": "Set `resources.limits.memory` value",
          "terraform": "Set `resources.limits.memory` value"
        },
        "lineNumber": 97,
        "iacDescription": {
          "issue": "Memory limit is not defined",
          "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
          "resolve": "Set `resources.limits.memory` value"
        },
        "publicId": "SNYK-CC-K8S-4",
        "msg": "input.spec.template.spec.containers[visa-processor-sidecar].resources.limits.memory",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/memory-default-namespace/"
        ],
        "path": [
          "[DocId: 4]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[visa-processor-sidecar]",
          "resources",
          "limits",
          "memory"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-5",
        "title": "Container has no CPU limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-5",
        "isGeneratedByCustomRule": false,
        "issue": "Container has no CPU limit",
        "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
        "resolve": "Add `resources.limits.cpu` field with required CPU limit value",
        "remediation": {
          "kubernetes": "Add `resources.limits.cpu` field with required CPU limit value",
          "terraform": "Add `spec.container.resources.limits.cpu` field with required CPU limit value"
        },
        "lineNumber": 97,
        "iacDescription": {
          "issue": "Container has no CPU limit",
          "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
          "resolve": "Add `resources.limits.cpu` field with required CPU limit value"
        },
        "publicId": "SNYK-CC-K8S-5",
        "msg": "input.spec.template.spec.containers[visa-processor-sidecar].resources.limits.cpu",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-cpu-resource/",
          "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/cpu-default-namespace/",
          "https://github.com/kubernetes/design-proposals-archive/blob/8da1442ea29adccea40693357d04727127e045ed/node/resource-qos.md#compressible-resource-guaranteess"
        ],
        "path": [
          "[DocId: 4]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[visa-processor-sidecar]",
          "resources",
          "limits",
          "cpu"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-41",
        "title": "Container is running without liveness probe",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-41",
        "isGeneratedByCustomRule": false,
        "issue": "Liveness probe is not defined",
        "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
        "resolve": "Add `livenessProbe` attribute",
        "remediation": {
          "kubernetes": "Add `livenessProbe` attribute",
          "terraform": "Add `liveness_probe` attribute"
        },
        "lineNumber": 79,
        "iacDescription": {
          "issue": "Liveness probe is not defined",
          "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
          "resolve": "Add `livenessProbe` attribute"
        },
        "publicId": "SNYK-CC-K8S-41",
        "msg": "spec.template.spec.containers[visa-processor].livenessProbe",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/",
          "https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/",
          "https://cloud.google.com/blog/products/gcp/kubernetes-best-practices-setting-up-health-checks-with-readiness-and-liveness-probes"
        ],
        "path": [
          "[DocId: 4]",
          "spec",
          "template",
          "spec",
          "containers[visa-processor]",
          "livenessProbe"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-11",
        "title": "Container's or Pod's  UID could clash with host's UID",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-11",
        "isGeneratedByCustomRule": false,
        "issue": "`runAsUser` value is set to low UID",
        "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
        "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
          "terraform": "Set `security_context.run_as_user` value to greater or equal than 10'000"
        },
        "lineNumber": 101,
        "iacDescription": {
          "issue": "`runAsUser` value is set to low UID",
          "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
          "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence"
        },
        "publicId": "SNYK-CC-K8S-11",
        "msg": "input.spec.template.spec.containers[visa-processor-sidecar].securityContext.runAsUser",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container",
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod",
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 4]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[visa-processor-sidecar]",
          "securityContext",
          "runAsUser"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-10",
        "title": "Container or Pod is running without root user control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-10",
        "isGeneratedByCustomRule": false,
        "issue": "Container or Pod is running without root user control",
        "impact": "Container or Pod could be running with full administrative privileges",
        "resolve": "Set `securityContext.runAsNonRoot` to `true`",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsNonRoot` to `true`",
          "terraform": "Set `security_context.run_as_non_root` to `true`"
        },
        "lineNumber": 101,
        "iacDescription": {
          "issue": "Container or Pod is running without root user control",
          "impact": "Container or Pod could be running with full administrative privileges",
          "resolve": "Set `securityContext.runAsNonRoot` to `true`"
        },
        "publicId": "SNYK-CC-K8S-10",
        "msg": "input.spec.template.spec.containers[visa-processor-sidecar].securityContext.runAsNonRoot",
        "description": "",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 4]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[visa-processor-sidecar]",
          "securityContext",
          "runAsNonRoot"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-9",
        "title": "Container is running without privilege escalation control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-9",
        "isGeneratedByCustomRule": false,
        "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
        "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
          "terraform": "Set `spec.container.security_context.allow_privilege_escalation` to `false`"
        },
        "lineNumber": 101,
        "iacDescription": {
          "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
          "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`"
        },
        "publicId": "SNYK-CC-K8S-9",
        "msg": "spec.template.spec.containers[visa-processor-sidecar].securityContext.allowPrivilegeEscalation",
        "references": [
          "https://www.kernel.org/doc/html/latest/userspace-api/no_new_privs.html"
        ],
        "path": [
          "[DocId: 4]",
          "spec",
          "template",
          "spec",
          "containers[visa-processor-sidecar]",
          "securityContext",
          "allowPrivilegeEscalation"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-9",
        "title": "Container is running without privilege escalation control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-9",
        "isGeneratedByCustomRule": false,
        "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
        "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
          "terraform": "Set `spec.container.security_context.allow_privilege_escalation` to `false`"
        },
        "lineNumber": 91,
        "iacDescription": {
          "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
          "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`"
        },
        "publicId": "SNYK-CC-K8S-9",
        "msg": "spec.template.spec.containers[visa-processor].securityContext.allowPrivilegeEscalation",
        "references": [
          "https://www.kernel.org/doc/html/latest/userspace-api/no_new_privs.html"
        ],
        "path": [
          "[DocId: 4]",
          "spec",
          "template",
          "spec",
          "containers[visa-processor]",
          "securityContext",
          "allowPrivilegeEscalation"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-41",
        "title": "Container is running without liveness probe",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-41",
        "isGeneratedByCustomRule": false,
        "issue": "Liveness probe is not defined",
        "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
        "resolve": "Add `livenessProbe` attribute",
        "remediation": {
          "kubernetes": "Add `livenessProbe` attribute",
          "terraform": "Add `liveness_probe` attribute"
        },
        "lineNumber": 97,
        "iacDescription": {
          "issue": "Liveness probe is not defined",
          "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
          "resolve": "Add `livenessProbe` attribute"
        },
        "publicId": "SNYK-CC-K8S-41",
        "msg": "spec.template.spec.containers[visa-processor-sidecar].livenessProbe",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/",
          "https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/",
          "https://cloud.google.com/blog/products/gcp/kubernetes-best-practices-setting-up-health-checks-with-readiness-and-liveness-probes"
        ],
        "path": [
          "[DocId: 4]",
          "spec",
          "template",
          "spec",
          "containers[visa-processor-sidecar]",
          "livenessProbe"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-1",
        "title": "Privileged container",
        "severity": "high",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-1",
        "isGeneratedByCustomRule": false,
        "issue": "Container is running in privileged mode",
        "impact": "Compromised container could potentially modify the underlying host\u2019s kernel by loading unauthorized modules (i.e. drivers).",
        "resolve": "Remove `securityContext.privileged` attribute, or set value to `false`",
        "remediation": {
          "kubernetes": "Remove `securityContext.privileged` attribute, or set value to `false`",
          "terraform": "Remove `security_context.privileged` attribute, or set value to `false`"
        },
        "lineNumber": 102,
        "iacDescription": {
          "issue": "Container is running in privileged mode",
          "impact": "Compromised container could potentially modify the underlying host\u2019s kernel by loading unauthorized modules (i.e. drivers).",
          "resolve": "Remove `securityContext.privileged` attribute, or set value to `false`"
        },
        "publicId": "SNYK-CC-K8S-1",
        "msg": "input.spec.template.spec.containers[visa-processor-sidecar].securityContext.privileged",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 4]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[visa-processor-sidecar]",
          "securityContext",
          "privileged"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-11",
        "title": "Container's or Pod's  UID could clash with host's UID",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-11",
        "isGeneratedByCustomRule": false,
        "issue": "`runAsUser` value is set to low UID",
        "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
        "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
          "terraform": "Set `security_context.run_as_user` value to greater or equal than 10'000"
        },
        "lineNumber": 91,
        "iacDescription": {
          "issue": "`runAsUser` value is set to low UID",
          "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
          "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence"
        },
        "publicId": "SNYK-CC-K8S-11",
        "msg": "input.spec.template.spec.containers[visa-processor].securityContext.runAsUser",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container",
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod",
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 4]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[visa-processor]",
          "securityContext",
          "runAsUser"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-8",
        "title": "Container is running with writable root filesystem",
        "severity": "low",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-8",
        "isGeneratedByCustomRule": false,
        "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
        "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
          "terraform": "Set `security_context.read_only_root_filesystem` to `true`"
        },
        "lineNumber": 101,
        "iacDescription": {
          "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
          "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`"
        },
        "publicId": "SNYK-CC-K8S-8",
        "msg": "spec.template.spec.containers[visa-processor-sidecar].securityContext.readOnlyRootFilesystem",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 4]",
          "spec",
          "template",
          "spec",
          "containers[visa-processor-sidecar]",
          "securityContext",
          "readOnlyRootFilesystem"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-8",
        "title": "Container is running with writable root filesystem",
        "severity": "low",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-8",
        "isGeneratedByCustomRule": false,
        "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
        "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
          "terraform": "Set `security_context.read_only_root_filesystem` to `true`"
        },
        "lineNumber": 91,
        "iacDescription": {
          "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
          "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`"
        },
        "publicId": "SNYK-CC-K8S-8",
        "msg": "spec.template.spec.containers[visa-processor].securityContext.readOnlyRootFilesystem",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 4]",
          "spec",
          "template",
          "spec",
          "containers[visa-processor]",
          "securityContext",
          "readOnlyRootFilesystem"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-5",
        "title": "Container has no CPU limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-5",
        "isGeneratedByCustomRule": false,
        "issue": "Container has no CPU limit",
        "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
        "resolve": "Add `resources.limits.cpu` field with required CPU limit value",
        "remediation": {
          "kubernetes": "Add `resources.limits.cpu` field with required CPU limit value",
          "terraform": "Add `spec.container.resources.limits.cpu` field with required CPU limit value"
        },
        "lineNumber": 79,
        "iacDescription": {
          "issue": "Container has no CPU limit",
          "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
          "resolve": "Add `resources.limits.cpu` field with required CPU limit value"
        },
        "publicId": "SNYK-CC-K8S-5",
        "msg": "input.spec.template.spec.containers[visa-processor].resources.limits.cpu",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-cpu-resource/",
          "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/cpu-default-namespace/",
          "https://github.com/kubernetes/design-proposals-archive/blob/8da1442ea29adccea40693357d04727127e045ed/node/resource-qos.md#compressible-resource-guaranteess"
        ],
        "path": [
          "[DocId: 4]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[visa-processor]",
          "resources",
          "limits",
          "cpu"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-11",
        "title": "Container's or Pod's  UID could clash with host's UID",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-11",
        "isGeneratedByCustomRule": false,
        "issue": "`runAsUser` value is set to low UID",
        "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
        "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
          "terraform": "Set `security_context.run_as_user` value to greater or equal than 10'000"
        },
        "lineNumber": 152,
        "iacDescription": {
          "issue": "`runAsUser` value is set to low UID",
          "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
          "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence"
        },
        "publicId": "SNYK-CC-K8S-11",
        "msg": "input.spec.template.spec.containers[gateway].securityContext.runAsUser",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container",
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod",
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 6]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[gateway]",
          "securityContext",
          "runAsUser"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-10",
        "title": "Container or Pod is running without root user control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-10",
        "isGeneratedByCustomRule": false,
        "issue": "Container or Pod is running without root user control",
        "impact": "Container or Pod could be running with full administrative privileges",
        "resolve": "Set `securityContext.runAsNonRoot` to `true`",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsNonRoot` to `true`",
          "terraform": "Set `security_context.run_as_non_root` to `true`"
        },
        "lineNumber": 152,
        "iacDescription": {
          "issue": "Container or Pod is running without root user control",
          "impact": "Container or Pod could be running with full administrative privileges",
          "resolve": "Set `securityContext.runAsNonRoot` to `true`"
        },
        "publicId": "SNYK-CC-K8S-10",
        "msg": "input.spec.template.spec.containers[gateway].securityContext.runAsNonRoot",
        "description": "",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 6]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[gateway]",
          "securityContext",
          "runAsNonRoot"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-41",
        "title": "Container is running without liveness probe",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-41",
        "isGeneratedByCustomRule": false,
        "issue": "Liveness probe is not defined",
        "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
        "resolve": "Add `livenessProbe` attribute",
        "remediation": {
          "kubernetes": "Add `livenessProbe` attribute",
          "terraform": "Add `liveness_probe` attribute"
        },
        "lineNumber": 152,
        "iacDescription": {
          "issue": "Liveness probe is not defined",
          "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
          "resolve": "Add `livenessProbe` attribute"
        },
        "publicId": "SNYK-CC-K8S-41",
        "msg": "spec.template.spec.containers[gateway].livenessProbe",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/",
          "https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/",
          "https://cloud.google.com/blog/products/gcp/kubernetes-best-practices-setting-up-health-checks-with-readiness-and-liveness-probes"
        ],
        "path": [
          "[DocId: 6]",
          "spec",
          "template",
          "spec",
          "containers[gateway]",
          "livenessProbe"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-6",
        "title": "Container does not drop all default capabilities",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-6",
        "isGeneratedByCustomRule": false,
        "issue": "All default capabilities are not explicitly dropped",
        "impact": "Containers are running with potentially unnecessary privileges",
        "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
        "remediation": {
          "kubernetes": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
          "terraform": "Add `ALL` to `spec.container.security_context.capabilities.drop` list, and add only required capabilities to `spec.container.security_context.capabilities.add`, ensuring it also does not contain `ALL`"
        },
        "lineNumber": 152,
        "iacDescription": {
          "issue": "All default capabilities are not explicitly dropped",
          "impact": "Containers are running with potentially unnecessary privileges",
          "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`"
        },
        "publicId": "SNYK-CC-K8S-6",
        "msg": "input.spec.template.spec.containers[gateway].securityContext.capabilities.drop",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
          "https://linux-audit.com/linux-capabilities-hardening-linux-binaries-by-removing-setuid/"
        ],
        "path": [
          "[DocId: 6]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[gateway]",
          "securityContext",
          "capabilities",
          "drop"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-9",
        "title": "Container is running without privilege escalation control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-9",
        "isGeneratedByCustomRule": false,
        "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
        "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
          "terraform": "Set `spec.container.security_context.allow_privilege_escalation` to `false`"
        },
        "lineNumber": 152,
        "iacDescription": {
          "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
          "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`"
        },
        "publicId": "SNYK-CC-K8S-9",
        "msg": "spec.template.spec.containers[gateway].securityContext.allowPrivilegeEscalation",
        "references": [
          "https://www.kernel.org/doc/html/latest/userspace-api/no_new_privs.html"
        ],
        "path": [
          "[DocId: 6]",
          "spec",
          "template",
          "spec",
          "containers[gateway]",
          "securityContext",
          "allowPrivilegeEscalation"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-4",
        "title": "Container is running without memory limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-4",
        "isGeneratedByCustomRule": false,
        "issue": "Memory limit is not defined",
        "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
        "resolve": "Set `resources.limits.memory` value",
        "remediation": {
          "kubernetes": "Set `resources.limits.memory` value",
          "terraform": "Set `resources.limits.memory` value"
        },
        "lineNumber": 152,
        "iacDescription": {
          "issue": "Memory limit is not defined",
          "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
          "resolve": "Set `resources.limits.memory` value"
        },
        "publicId": "SNYK-CC-K8S-4",
        "msg": "input.spec.template.spec.containers[gateway].resources.limits.memory",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/memory-default-namespace/"
        ],
        "path": [
          "[DocId: 6]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[gateway]",
          "resources",
          "limits",
          "memory"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-8",
        "title": "Container is running with writable root filesystem",
        "severity": "low",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-8",
        "isGeneratedByCustomRule": false,
        "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
        "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
          "terraform": "Set `security_context.read_only_root_filesystem` to `true`"
        },
        "lineNumber": 152,
        "iacDescription": {
          "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
          "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`"
        },
        "publicId": "SNYK-CC-K8S-8",
        "msg": "spec.template.spec.containers[gateway].securityContext.readOnlyRootFilesystem",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 6]",
          "spec",
          "template",
          "spec",
          "containers[gateway]",
          "securityContext",
          "readOnlyRootFilesystem"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-5",
        "title": "Container has no CPU limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-5",
        "isGeneratedByCustomRule": false,
        "issue": "Container has no CPU limit",
        "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
        "resolve": "Add `resources.limits.cpu` field with required CPU limit value",
        "remediation": {
          "kubernetes": "Add `resources.limits.cpu` field with required CPU limit value",
          "terraform": "Add `spec.container.resources.limits.cpu` field with required CPU limit value"
        },
        "lineNumber": 152,
        "iacDescription": {
          "issue": "Container has no CPU limit",
          "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
          "resolve": "Add `resources.limits.cpu` field with required CPU limit value"
        },
        "publicId": "SNYK-CC-K8S-5",
        "msg": "input.spec.template.spec.containers[gateway].resources.limits.cpu",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-cpu-resource/",
          "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/cpu-default-namespace/",
          "https://github.com/kubernetes/design-proposals-archive/blob/8da1442ea29adccea40693357d04727127e045ed/node/resource-qos.md#compressible-resource-guaranteess"
        ],
        "path": [
          "[DocId: 6]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[gateway]",
          "resources",
          "limits",
          "cpu"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-44",
        "title": "Role or ClusterRole with too wide permissions",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Role",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-44",
        "isGeneratedByCustomRule": false,
        "issue": "The role uses wildcards, which grant the role permissions to the whole cluster",
        "impact": "The use of wildcard rights grants is likely to provide excessive rights to the Kubernetes API. For a ClusterRole this would be considered high severity.",
        "resolve": "Set only the necessary permissions required",
        "remediation": {
          "kubernetes": "Set only the necessary permissions required",
          "terraform": "Remove any wildcards [*] from `rule.verbs` and `rule.resources`"
        },
        "lineNumber": 208,
        "iacDescription": {
          "issue": "The role uses wildcards, which grant the role permissions to the whole cluster",
          "impact": "The use of wildcard rights grants is likely to provide excessive rights to the Kubernetes API. For a ClusterRole this would be considered high severity.",
          "resolve": "Set only the necessary permissions required"
        },
        "publicId": "SNYK-CC-K8S-44",
        "msg": "rules[0].verbs",
        "references": [
          "https://kubernetes.io/docs/reference/access-authn-authz/rbac/"
        ],
        "path": [
          "[DocId: 9]",
          "rules[0]",
          "verbs"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-41",
        "title": "Container is running without liveness probe",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-41",
        "isGeneratedByCustomRule": false,
        "issue": "Liveness probe is not defined",
        "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
        "resolve": "Add `livenessProbe` attribute",
        "remediation": {
          "kubernetes": "Add `livenessProbe` attribute",
          "terraform": "Add `liveness_probe` attribute"
        },
        "lineNumber": 255,
        "iacDescription": {
          "issue": "Liveness probe is not defined",
          "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
          "resolve": "Add `livenessProbe` attribute"
        },
        "publicId": "SNYK-CC-K8S-41",
        "msg": "spec.template.spec.containers[mastercard-processor].livenessProbe",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/",
          "https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/",
          "https://cloud.google.com/blog/products/gcp/kubernetes-best-practices-setting-up-health-checks-with-readiness-and-liveness-probes"
        ],
        "path": [
          "[DocId: 11]",
          "spec",
          "template",
          "spec",
          "containers[mastercard-processor]",
          "livenessProbe"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-11",
        "title": "Container's or Pod's  UID could clash with host's UID",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-11",
        "isGeneratedByCustomRule": false,
        "issue": "`runAsUser` value is set to low UID",
        "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
        "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
          "terraform": "Set `security_context.run_as_user` value to greater or equal than 10'000"
        },
        "lineNumber": 255,
        "iacDescription": {
          "issue": "`runAsUser` value is set to low UID",
          "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
          "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence"
        },
        "publicId": "SNYK-CC-K8S-11",
        "msg": "input.spec.template.spec.containers[mastercard-processor].securityContext.runAsUser",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container",
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod",
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 11]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[mastercard-processor]",
          "securityContext",
          "runAsUser"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-8",
        "title": "Container is running with writable root filesystem",
        "severity": "low",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-8",
        "isGeneratedByCustomRule": false,
        "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
        "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
          "terraform": "Set `security_context.read_only_root_filesystem` to `true`"
        },
        "lineNumber": 255,
        "iacDescription": {
          "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
          "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`"
        },
        "publicId": "SNYK-CC-K8S-8",
        "msg": "spec.template.spec.containers[mastercard-processor].securityContext.readOnlyRootFilesystem",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 11]",
          "spec",
          "template",
          "spec",
          "containers[mastercard-processor]",
          "securityContext",
          "readOnlyRootFilesystem"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-5",
        "title": "Container has no CPU limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-5",
        "isGeneratedByCustomRule": false,
        "issue": "Container has no CPU limit",
        "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
        "resolve": "Add `resources.limits.cpu` field with required CPU limit value",
        "remediation": {
          "kubernetes": "Add `resources.limits.cpu` field with required CPU limit value",
          "terraform": "Add `spec.container.resources.limits.cpu` field with required CPU limit value"
        },
        "lineNumber": 255,
        "iacDescription": {
          "issue": "Container has no CPU limit",
          "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
          "resolve": "Add `resources.limits.cpu` field with required CPU limit value"
        },
        "publicId": "SNYK-CC-K8S-5",
        "msg": "input.spec.template.spec.containers[mastercard-processor].resources.limits.cpu",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-cpu-resource/",
          "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/cpu-default-namespace/",
          "https://github.com/kubernetes/design-proposals-archive/blob/8da1442ea29adccea40693357d04727127e045ed/node/resource-qos.md#compressible-resource-guaranteess"
        ],
        "path": [
          "[DocId: 11]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[mastercard-processor]",
          "resources",
          "limits",
          "cpu"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-9",
        "title": "Container is running without privilege escalation control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-9",
        "isGeneratedByCustomRule": false,
        "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
        "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
          "terraform": "Set `spec.container.security_context.allow_privilege_escalation` to `false`"
        },
        "lineNumber": 255,
        "iacDescription": {
          "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
          "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`"
        },
        "publicId": "SNYK-CC-K8S-9",
        "msg": "spec.template.spec.containers[mastercard-processor].securityContext.allowPrivilegeEscalation",
        "references": [
          "https://www.kernel.org/doc/html/latest/userspace-api/no_new_privs.html"
        ],
        "path": [
          "[DocId: 11]",
          "spec",
          "template",
          "spec",
          "containers[mastercard-processor]",
          "securityContext",
          "allowPrivilegeEscalation"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-10",
        "title": "Container or Pod is running without root user control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-10",
        "isGeneratedByCustomRule": false,
        "issue": "Container or Pod is running without root user control",
        "impact": "Container or Pod could be running with full administrative privileges",
        "resolve": "Set `securityContext.runAsNonRoot` to `true`",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsNonRoot` to `true`",
          "terraform": "Set `security_context.run_as_non_root` to `true`"
        },
        "lineNumber": 255,
        "iacDescription": {
          "issue": "Container or Pod is running without root user control",
          "impact": "Container or Pod could be running with full administrative privileges",
          "resolve": "Set `securityContext.runAsNonRoot` to `true`"
        },
        "publicId": "SNYK-CC-K8S-10",
        "msg": "input.spec.template.spec.containers[mastercard-processor].securityContext.runAsNonRoot",
        "description": "",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 11]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[mastercard-processor]",
          "securityContext",
          "runAsNonRoot"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-6",
        "title": "Container does not drop all default capabilities",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-6",
        "isGeneratedByCustomRule": false,
        "issue": "All default capabilities are not explicitly dropped",
        "impact": "Containers are running with potentially unnecessary privileges",
        "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
        "remediation": {
          "kubernetes": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
          "terraform": "Add `ALL` to `spec.container.security_context.capabilities.drop` list, and add only required capabilities to `spec.container.security_context.capabilities.add`, ensuring it also does not contain `ALL`"
        },
        "lineNumber": 255,
        "iacDescription": {
          "issue": "All default capabilities are not explicitly dropped",
          "impact": "Containers are running with potentially unnecessary privileges",
          "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`"
        },
        "publicId": "SNYK-CC-K8S-6",
        "msg": "input.spec.template.spec.containers[mastercard-processor].securityContext.capabilities.drop",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
          "https://linux-audit.com/linux-capabilities-hardening-linux-binaries-by-removing-setuid/"
        ],
        "path": [
          "[DocId: 11]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[mastercard-processor]",
          "securityContext",
          "capabilities",
          "drop"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-4",
        "title": "Container is running without memory limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-4",
        "isGeneratedByCustomRule": false,
        "issue": "Memory limit is not defined",
        "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
        "resolve": "Set `resources.limits.memory` value",
        "remediation": {
          "kubernetes": "Set `resources.limits.memory` value",
          "terraform": "Set `resources.limits.memory` value"
        },
        "lineNumber": 255,
        "iacDescription": {
          "issue": "Memory limit is not defined",
          "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
          "resolve": "Set `resources.limits.memory` value"
        },
        "publicId": "SNYK-CC-K8S-4",
        "msg": "input.spec.template.spec.containers[mastercard-processor].resources.limits.memory",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/memory-default-namespace/"
        ],
        "path": [
          "[DocId: 11]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[mastercard-processor]",
          "resources",
          "limits",
          "memory"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-44",
        "title": "Role or ClusterRole with too wide permissions",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Role",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-44",
        "isGeneratedByCustomRule": false,
        "issue": "The role uses wildcards, which grant the role permissions to the whole cluster",
        "impact": "The use of wildcard rights grants is likely to provide excessive rights to the Kubernetes API. For a ClusterRole this would be considered high severity.",
        "resolve": "Set only the necessary permissions required",
        "remediation": {
          "kubernetes": "Set only the necessary permissions required",
          "terraform": "Remove any wildcards [*] from `rule.verbs` and `rule.resources`"
        },
        "lineNumber": 459,
        "iacDescription": {
          "issue": "The role uses wildcards, which grant the role permissions to the whole cluster",
          "impact": "The use of wildcard rights grants is likely to provide excessive rights to the Kubernetes API. For a ClusterRole this would be considered high severity.",
          "resolve": "Set only the necessary permissions required"
        },
        "publicId": "SNYK-CC-K8S-44",
        "msg": "rules[0].verbs",
        "references": [
          "https://kubernetes.io/docs/reference/access-authn-authz/rbac/"
        ],
        "path": [
          "[DocId: 13]",
          "rules[0]",
          "verbs"
        ],
        "compliance": []
      }
    ]
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_rhacs_demo_apps/files/demos/spring4shell/everything.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_rhacs_demo_apps/files/demos/spring4shell/everything.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": false,
    "infrastructureAsCodeIssues": [
      {
        "id": "SNYK-CC-K8S-9",
        "title": "Container is running without privilege escalation control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-9",
        "isGeneratedByCustomRule": false,
        "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
        "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
          "terraform": "Set `spec.container.security_context.allow_privilege_escalation` to `false`"
        },
        "lineNumber": 29,
        "iacDescription": {
          "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
          "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`"
        },
        "publicId": "SNYK-CC-K8S-9",
        "msg": "spec.template.spec.containers[spring4shell-app].securityContext.allowPrivilegeEscalation",
        "references": [
          "https://www.kernel.org/doc/html/latest/userspace-api/no_new_privs.html"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "containers[spring4shell-app]",
          "securityContext",
          "allowPrivilegeEscalation"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-11",
        "title": "Container's or Pod's  UID could clash with host's UID",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-11",
        "isGeneratedByCustomRule": false,
        "issue": "`runAsUser` value is set to low UID",
        "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
        "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
          "terraform": "Set `security_context.run_as_user` value to greater or equal than 10'000"
        },
        "lineNumber": 29,
        "iacDescription": {
          "issue": "`runAsUser` value is set to low UID",
          "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
          "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence"
        },
        "publicId": "SNYK-CC-K8S-11",
        "msg": "input.spec.template.spec.containers[spring4shell-app].securityContext.runAsUser",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container",
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod",
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[spring4shell-app]",
          "securityContext",
          "runAsUser"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-5",
        "title": "Container has no CPU limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-5",
        "isGeneratedByCustomRule": false,
        "issue": "Container has no CPU limit",
        "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
        "resolve": "Add `resources.limits.cpu` field with required CPU limit value",
        "remediation": {
          "kubernetes": "Add `resources.limits.cpu` field with required CPU limit value",
          "terraform": "Add `spec.container.resources.limits.cpu` field with required CPU limit value"
        },
        "lineNumber": 23,
        "iacDescription": {
          "issue": "Container has no CPU limit",
          "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
          "resolve": "Add `resources.limits.cpu` field with required CPU limit value"
        },
        "publicId": "SNYK-CC-K8S-5",
        "msg": "input.spec.template.spec.containers[spring4shell-app].resources.limits.cpu",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-cpu-resource/",
          "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/cpu-default-namespace/",
          "https://github.com/kubernetes/design-proposals-archive/blob/8da1442ea29adccea40693357d04727127e045ed/node/resource-qos.md#compressible-resource-guaranteess"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[spring4shell-app]",
          "resources",
          "limits",
          "cpu"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-41",
        "title": "Container is running without liveness probe",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-41",
        "isGeneratedByCustomRule": false,
        "issue": "Liveness probe is not defined",
        "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
        "resolve": "Add `livenessProbe` attribute",
        "remediation": {
          "kubernetes": "Add `livenessProbe` attribute",
          "terraform": "Add `liveness_probe` attribute"
        },
        "lineNumber": 23,
        "iacDescription": {
          "issue": "Liveness probe is not defined",
          "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
          "resolve": "Add `livenessProbe` attribute"
        },
        "publicId": "SNYK-CC-K8S-41",
        "msg": "spec.template.spec.containers[spring4shell-app].livenessProbe",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/",
          "https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/",
          "https://cloud.google.com/blog/products/gcp/kubernetes-best-practices-setting-up-health-checks-with-readiness-and-liveness-probes"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "containers[spring4shell-app]",
          "livenessProbe"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-10",
        "title": "Container or Pod is running without root user control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-10",
        "isGeneratedByCustomRule": false,
        "issue": "Container or Pod is running without root user control",
        "impact": "Container or Pod could be running with full administrative privileges",
        "resolve": "Set `securityContext.runAsNonRoot` to `true`",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsNonRoot` to `true`",
          "terraform": "Set `security_context.run_as_non_root` to `true`"
        },
        "lineNumber": 29,
        "iacDescription": {
          "issue": "Container or Pod is running without root user control",
          "impact": "Container or Pod could be running with full administrative privileges",
          "resolve": "Set `securityContext.runAsNonRoot` to `true`"
        },
        "publicId": "SNYK-CC-K8S-10",
        "msg": "input.spec.template.spec.containers[spring4shell-app].securityContext.runAsNonRoot",
        "description": "",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[spring4shell-app]",
          "securityContext",
          "runAsNonRoot"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-6",
        "title": "Container does not drop all default capabilities",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-6",
        "isGeneratedByCustomRule": false,
        "issue": "All default capabilities are not explicitly dropped",
        "impact": "Containers are running with potentially unnecessary privileges",
        "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
        "remediation": {
          "kubernetes": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
          "terraform": "Add `ALL` to `spec.container.security_context.capabilities.drop` list, and add only required capabilities to `spec.container.security_context.capabilities.add`, ensuring it also does not contain `ALL`"
        },
        "lineNumber": 29,
        "iacDescription": {
          "issue": "All default capabilities are not explicitly dropped",
          "impact": "Containers are running with potentially unnecessary privileges",
          "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`"
        },
        "publicId": "SNYK-CC-K8S-6",
        "msg": "input.spec.template.spec.containers[spring4shell-app].securityContext.capabilities.drop",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
          "https://linux-audit.com/linux-capabilities-hardening-linux-binaries-by-removing-setuid/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[spring4shell-app]",
          "securityContext",
          "capabilities",
          "drop"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-8",
        "title": "Container is running with writable root filesystem",
        "severity": "low",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-8",
        "isGeneratedByCustomRule": false,
        "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
        "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
          "terraform": "Set `security_context.read_only_root_filesystem` to `true`"
        },
        "lineNumber": 29,
        "iacDescription": {
          "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
          "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`"
        },
        "publicId": "SNYK-CC-K8S-8",
        "msg": "spec.template.spec.containers[spring4shell-app].securityContext.readOnlyRootFilesystem",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "containers[spring4shell-app]",
          "securityContext",
          "readOnlyRootFilesystem"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-4",
        "title": "Container is running without memory limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-4",
        "isGeneratedByCustomRule": false,
        "issue": "Memory limit is not defined",
        "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
        "resolve": "Set `resources.limits.memory` value",
        "remediation": {
          "kubernetes": "Set `resources.limits.memory` value",
          "terraform": "Set `resources.limits.memory` value"
        },
        "lineNumber": 23,
        "iacDescription": {
          "issue": "Memory limit is not defined",
          "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
          "resolve": "Set `resources.limits.memory` value"
        },
        "publicId": "SNYK-CC-K8S-4",
        "msg": "input.spec.template.spec.containers[spring4shell-app].resources.limits.memory",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/memory-default-namespace/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[spring4shell-app]",
          "resources",
          "limits",
          "memory"
        ],
        "compliance": []
      }
    ]
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_rhods_handson/files/delconfigmap.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_rhods_handson/files/delconfigmap.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_rhods_handson/files/nogroups.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_rhods_handson/files/nogroups.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_rhods_handson/files/oauthldaplocal.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_rhods_handson/files/oauthldaplocal.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_rhtr_xraylab/files/kafkasource.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_rhtr_xraylab/files/kafkasource.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": false,
    "infrastructureAsCodeIssues": [
      {
        "id": "SNYK-CC-K8S-47",
        "title": "Role or ClusterRole with dangerous permissions",
        "severity": "high",
        "isIgnored": false,
        "subType": "ClusterRole",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-47",
        "isGeneratedByCustomRule": false,
        "issue": "A role was found using a dangerous permissions",
        "impact": "Using this role grants dangerous permissions. For a ClusterRole this would be considered high severity.",
        "resolve": "Consider removing these permissions",
        "remediation": {
          "kubernetes": "Consider removing these permissions",
          "terraform": "Consider removing these permissions"
        },
        "lineNumber": 111,
        "iacDescription": {
          "issue": "A role was found using a dangerous permissions",
          "impact": "Using this role grants dangerous permissions. For a ClusterRole this would be considered high severity.",
          "resolve": "Consider removing these permissions"
        },
        "publicId": "SNYK-CC-K8S-47",
        "msg": "rules[5].resources",
        "references": [
          "https://kubernetes.io/docs/reference/access-authn-authz/rbac/"
        ],
        "path": [
          "[DocId: 2]",
          "rules[5]",
          "resources"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-4",
        "title": "Container is running without memory limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-4",
        "isGeneratedByCustomRule": false,
        "issue": "Memory limit is not defined",
        "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
        "resolve": "Set `resources.limits.memory` value",
        "remediation": {
          "kubernetes": "Set `resources.limits.memory` value",
          "terraform": "Set `resources.limits.memory` value"
        },
        "lineNumber": 464,
        "iacDescription": {
          "issue": "Memory limit is not defined",
          "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
          "resolve": "Set `resources.limits.memory` value"
        },
        "publicId": "SNYK-CC-K8S-4",
        "msg": "input.spec.template.spec.containers[manager].resources.limits.memory",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/memory-default-namespace/"
        ],
        "path": [
          "[DocId: 10]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[manager]",
          "resources",
          "limits",
          "memory"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-11",
        "title": "Container's or Pod's  UID could clash with host's UID",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-11",
        "isGeneratedByCustomRule": false,
        "issue": "`runAsUser` value is set to low UID",
        "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
        "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
          "terraform": "Set `security_context.run_as_user` value to greater or equal than 10'000"
        },
        "lineNumber": 446,
        "iacDescription": {
          "issue": "`runAsUser` value is set to low UID",
          "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
          "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence"
        },
        "publicId": "SNYK-CC-K8S-11",
        "msg": "input.spec.template.spec.containers[manager].securityContext.runAsUser",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container",
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod",
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 10]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[manager]",
          "securityContext",
          "runAsUser"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-5",
        "title": "Container has no CPU limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-5",
        "isGeneratedByCustomRule": false,
        "issue": "Container has no CPU limit",
        "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
        "resolve": "Add `resources.limits.cpu` field with required CPU limit value",
        "remediation": {
          "kubernetes": "Add `resources.limits.cpu` field with required CPU limit value",
          "terraform": "Add `spec.container.resources.limits.cpu` field with required CPU limit value"
        },
        "lineNumber": 464,
        "iacDescription": {
          "issue": "Container has no CPU limit",
          "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
          "resolve": "Add `resources.limits.cpu` field with required CPU limit value"
        },
        "publicId": "SNYK-CC-K8S-5",
        "msg": "input.spec.template.spec.containers[manager].resources.limits.cpu",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-cpu-resource/",
          "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/cpu-default-namespace/",
          "https://github.com/kubernetes/design-proposals-archive/blob/8da1442ea29adccea40693357d04727127e045ed/node/resource-qos.md#compressible-resource-guaranteess"
        ],
        "path": [
          "[DocId: 10]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[manager]",
          "resources",
          "limits",
          "cpu"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-8",
        "title": "Container is running with writable root filesystem",
        "severity": "low",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-8",
        "isGeneratedByCustomRule": false,
        "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
        "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
          "terraform": "Set `security_context.read_only_root_filesystem` to `true`"
        },
        "lineNumber": 446,
        "iacDescription": {
          "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
          "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`"
        },
        "publicId": "SNYK-CC-K8S-8",
        "msg": "spec.template.spec.containers[manager].securityContext.readOnlyRootFilesystem",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 10]",
          "spec",
          "template",
          "spec",
          "containers[manager]",
          "securityContext",
          "readOnlyRootFilesystem"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-6",
        "title": "Container does not drop all default capabilities",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-6",
        "isGeneratedByCustomRule": false,
        "issue": "All default capabilities are not explicitly dropped",
        "impact": "Containers are running with potentially unnecessary privileges",
        "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
        "remediation": {
          "kubernetes": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
          "terraform": "Add `ALL` to `spec.container.security_context.capabilities.drop` list, and add only required capabilities to `spec.container.security_context.capabilities.add`, ensuring it also does not contain `ALL`"
        },
        "lineNumber": 446,
        "iacDescription": {
          "issue": "All default capabilities are not explicitly dropped",
          "impact": "Containers are running with potentially unnecessary privileges",
          "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`"
        },
        "publicId": "SNYK-CC-K8S-6",
        "msg": "input.spec.template.spec.containers[manager].securityContext.capabilities.drop",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
          "https://linux-audit.com/linux-capabilities-hardening-linux-binaries-by-removing-setuid/"
        ],
        "path": [
          "[DocId: 10]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[manager]",
          "securityContext",
          "capabilities",
          "drop"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-42",
        "title": "Container could be running with outdated image",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-42",
        "isGeneratedByCustomRule": false,
        "issue": "The image policy does not prevent image reuse",
        "impact": "The container may run with outdated or unauthorized image",
        "resolve": "Set `imagePullPolicy` attribute to `Always`",
        "remediation": {
          "kubernetes": "Set `imagePullPolicy` attribute to `Always`",
          "terraform": "Set `image_pull_policy` attribute to `Always"
        },
        "lineNumber": 446,
        "iacDescription": {
          "issue": "The image policy does not prevent image reuse",
          "impact": "The container may run with outdated or unauthorized image",
          "resolve": "Set `imagePullPolicy` attribute to `Always`"
        },
        "publicId": "SNYK-CC-K8S-42",
        "msg": "spec.template.spec.containers[manager].imagePullPolicy",
        "references": [
          "https://kubernetes.io/docs/concepts/containers/images/",
          "https://kubernetes.io/docs/concepts/configuration/overview/#container-images"
        ],
        "path": [
          "[DocId: 10]",
          "spec",
          "template",
          "spec",
          "containers[manager]",
          "imagePullPolicy"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-9",
        "title": "Container is running without privilege escalation control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-9",
        "isGeneratedByCustomRule": false,
        "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
        "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
          "terraform": "Set `spec.container.security_context.allow_privilege_escalation` to `false`"
        },
        "lineNumber": 446,
        "iacDescription": {
          "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
          "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`"
        },
        "publicId": "SNYK-CC-K8S-9",
        "msg": "spec.template.spec.containers[manager].securityContext.allowPrivilegeEscalation",
        "references": [
          "https://www.kernel.org/doc/html/latest/userspace-api/no_new_privs.html"
        ],
        "path": [
          "[DocId: 10]",
          "spec",
          "template",
          "spec",
          "containers[manager]",
          "securityContext",
          "allowPrivilegeEscalation"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-10",
        "title": "Container or Pod is running without root user control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-10",
        "isGeneratedByCustomRule": false,
        "issue": "Container or Pod is running without root user control",
        "impact": "Container or Pod could be running with full administrative privileges",
        "resolve": "Set `securityContext.runAsNonRoot` to `true`",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsNonRoot` to `true`",
          "terraform": "Set `security_context.run_as_non_root` to `true`"
        },
        "lineNumber": 446,
        "iacDescription": {
          "issue": "Container or Pod is running without root user control",
          "impact": "Container or Pod could be running with full administrative privileges",
          "resolve": "Set `securityContext.runAsNonRoot` to `true`"
        },
        "publicId": "SNYK-CC-K8S-10",
        "msg": "input.spec.template.spec.containers[manager].securityContext.runAsNonRoot",
        "description": "",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 10]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[manager]",
          "securityContext",
          "runAsNonRoot"
        ],
        "compliance": []
      }
    ]
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_sealed_secrets/files/clusterrole-sealed-secrets-user.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_sealed_secrets/files/clusterrole-sealed-secrets-user.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_sepsis_detection/templates/cache_v1alpha1_himss2021.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_sepsis_detection/templates/cache_v1alpha1_himss2021.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_sepsis_detection/templates/sepsisdetection-operator-all-configs.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_sepsis_detection/templates/sepsisdetection-operator-all-configs.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": false,
    "infrastructureAsCodeIssues": [
      {
        "id": "SNYK-CC-K8S-44",
        "title": "Role or ClusterRole with too wide permissions",
        "severity": "high",
        "isIgnored": false,
        "subType": "ClusterRole",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-44",
        "isGeneratedByCustomRule": false,
        "issue": "The role uses wildcards, which grant the role permissions to the whole cluster",
        "impact": "The use of wildcard rights grants is likely to provide excessive rights to the Kubernetes API. For a ClusterRole this would be considered high severity.",
        "resolve": "Set only the necessary permissions required",
        "remediation": {
          "kubernetes": "Set only the necessary permissions required",
          "terraform": "Remove any wildcards [*] from `rule.verbs` and `rule.resources`"
        },
        "lineNumber": 102,
        "iacDescription": {
          "issue": "The role uses wildcards, which grant the role permissions to the whole cluster",
          "impact": "The use of wildcard rights grants is likely to provide excessive rights to the Kubernetes API. For a ClusterRole this would be considered high severity.",
          "resolve": "Set only the necessary permissions required"
        },
        "publicId": "SNYK-CC-K8S-44",
        "msg": "rules[0].verbs",
        "references": [
          "https://kubernetes.io/docs/reference/access-authn-authz/rbac/"
        ],
        "path": [
          "[DocId: 4]",
          "rules[0]",
          "verbs"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-44",
        "title": "Role or ClusterRole with too wide permissions",
        "severity": "high",
        "isIgnored": false,
        "subType": "ClusterRole",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-44",
        "isGeneratedByCustomRule": false,
        "issue": "The role uses wildcards, which grant the role permissions to the whole cluster",
        "impact": "The use of wildcard rights grants is likely to provide excessive rights to the Kubernetes API. For a ClusterRole this would be considered high severity.",
        "resolve": "Set only the necessary permissions required",
        "remediation": {
          "kubernetes": "Set only the necessary permissions required",
          "terraform": "Remove any wildcards [*] from `rule.verbs` and `rule.resources`"
        },
        "lineNumber": 100,
        "iacDescription": {
          "issue": "The role uses wildcards, which grant the role permissions to the whole cluster",
          "impact": "The use of wildcard rights grants is likely to provide excessive rights to the Kubernetes API. For a ClusterRole this would be considered high severity.",
          "resolve": "Set only the necessary permissions required"
        },
        "publicId": "SNYK-CC-K8S-44",
        "msg": "rules[0].resources",
        "references": [
          "https://kubernetes.io/docs/reference/access-authn-authz/rbac/"
        ],
        "path": [
          "[DocId: 4]",
          "rules[0]",
          "resources"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-4",
        "title": "Container is running without memory limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-4",
        "isGeneratedByCustomRule": false,
        "issue": "Memory limit is not defined",
        "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
        "resolve": "Set `resources.limits.memory` value",
        "remediation": {
          "kubernetes": "Set `resources.limits.memory` value",
          "terraform": "Set `resources.limits.memory` value"
        },
        "lineNumber": 235,
        "iacDescription": {
          "issue": "Memory limit is not defined",
          "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
          "resolve": "Set `resources.limits.memory` value"
        },
        "publicId": "SNYK-CC-K8S-4",
        "msg": "input.spec.template.spec.containers[manager].resources.limits.memory",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/memory-default-namespace/"
        ],
        "path": [
          "[DocId: 12]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[manager]",
          "resources",
          "limits",
          "memory"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-11",
        "title": "Container's or Pod's  UID could clash with host's UID",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-11",
        "isGeneratedByCustomRule": false,
        "issue": "`runAsUser` value is set to low UID",
        "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
        "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
          "terraform": "Set `security_context.run_as_user` value to greater or equal than 10'000"
        },
        "lineNumber": 257,
        "iacDescription": {
          "issue": "`runAsUser` value is set to low UID",
          "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
          "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence"
        },
        "publicId": "SNYK-CC-K8S-11",
        "msg": "input.spec.template.spec.containers[manager].securityContext.runAsUser",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container",
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod",
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 12]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[manager]",
          "securityContext",
          "runAsUser"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-5",
        "title": "Container has no CPU limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-5",
        "isGeneratedByCustomRule": false,
        "issue": "Container has no CPU limit",
        "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
        "resolve": "Add `resources.limits.cpu` field with required CPU limit value",
        "remediation": {
          "kubernetes": "Add `resources.limits.cpu` field with required CPU limit value",
          "terraform": "Add `spec.container.resources.limits.cpu` field with required CPU limit value"
        },
        "lineNumber": 235,
        "iacDescription": {
          "issue": "Container has no CPU limit",
          "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
          "resolve": "Add `resources.limits.cpu` field with required CPU limit value"
        },
        "publicId": "SNYK-CC-K8S-5",
        "msg": "input.spec.template.spec.containers[manager].resources.limits.cpu",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-cpu-resource/",
          "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/cpu-default-namespace/",
          "https://github.com/kubernetes/design-proposals-archive/blob/8da1442ea29adccea40693357d04727127e045ed/node/resource-qos.md#compressible-resource-guaranteess"
        ],
        "path": [
          "[DocId: 12]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[manager]",
          "resources",
          "limits",
          "cpu"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-5",
        "title": "Container has no CPU limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-5",
        "isGeneratedByCustomRule": false,
        "issue": "Container has no CPU limit",
        "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
        "resolve": "Add `resources.limits.cpu` field with required CPU limit value",
        "remediation": {
          "kubernetes": "Add `resources.limits.cpu` field with required CPU limit value",
          "terraform": "Add `spec.container.resources.limits.cpu` field with required CPU limit value"
        },
        "lineNumber": 224,
        "iacDescription": {
          "issue": "Container has no CPU limit",
          "impact": "CPU limits can prevent containers from consuming valuable compute time for no benefit (e.g. inefficient code) that might lead to unnecessary costs. It is advisable to also configure CPU requests to ensure application stability.",
          "resolve": "Add `resources.limits.cpu` field with required CPU limit value"
        },
        "publicId": "SNYK-CC-K8S-5",
        "msg": "input.spec.template.spec.containers[kube-rbac-proxy].resources.limits.cpu",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-cpu-resource/",
          "https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/cpu-default-namespace/",
          "https://github.com/kubernetes/design-proposals-archive/blob/8da1442ea29adccea40693357d04727127e045ed/node/resource-qos.md#compressible-resource-guaranteess"
        ],
        "path": [
          "[DocId: 12]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[kube-rbac-proxy]",
          "resources",
          "limits",
          "cpu"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-10",
        "title": "Container or Pod is running without root user control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-10",
        "isGeneratedByCustomRule": false,
        "issue": "Container or Pod is running without root user control",
        "impact": "Container or Pod could be running with full administrative privileges",
        "resolve": "Set `securityContext.runAsNonRoot` to `true`",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsNonRoot` to `true`",
          "terraform": "Set `security_context.run_as_non_root` to `true`"
        },
        "lineNumber": 224,
        "iacDescription": {
          "issue": "Container or Pod is running without root user control",
          "impact": "Container or Pod could be running with full administrative privileges",
          "resolve": "Set `securityContext.runAsNonRoot` to `true`"
        },
        "publicId": "SNYK-CC-K8S-10",
        "msg": "input.spec.template.spec.containers[kube-rbac-proxy].securityContext.runAsNonRoot",
        "description": "",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 12]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[kube-rbac-proxy]",
          "securityContext",
          "runAsNonRoot"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-10",
        "title": "Container or Pod is running without root user control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-10",
        "isGeneratedByCustomRule": false,
        "issue": "Container or Pod is running without root user control",
        "impact": "Container or Pod could be running with full administrative privileges",
        "resolve": "Set `securityContext.runAsNonRoot` to `true`",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsNonRoot` to `true`",
          "terraform": "Set `security_context.run_as_non_root` to `true`"
        },
        "lineNumber": 257,
        "iacDescription": {
          "issue": "Container or Pod is running without root user control",
          "impact": "Container or Pod could be running with full administrative privileges",
          "resolve": "Set `securityContext.runAsNonRoot` to `true`"
        },
        "publicId": "SNYK-CC-K8S-10",
        "msg": "input.spec.template.spec.containers[manager].securityContext.runAsNonRoot",
        "description": "",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 12]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[manager]",
          "securityContext",
          "runAsNonRoot"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-4",
        "title": "Container is running without memory limit",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-4",
        "isGeneratedByCustomRule": false,
        "issue": "Memory limit is not defined",
        "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
        "resolve": "Set `resources.limits.memory` value",
        "remediation": {
          "kubernetes": "Set `resources.limits.memory` value",
          "terraform": "Set `resources.limits.memory` value"
        },
        "lineNumber": 224,
        "iacDescription": {
          "issue": "Memory limit is not defined",
          "impact": "Containers without memory limits are more likely to be terminated when the node runs out of memory",
          "resolve": "Set `resources.limits.memory` value"
        },
        "publicId": "SNYK-CC-K8S-4",
        "msg": "input.spec.template.spec.containers[kube-rbac-proxy].resources.limits.memory",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource/",
          "https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/memory-default-namespace/"
        ],
        "path": [
          "[DocId: 12]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[kube-rbac-proxy]",
          "resources",
          "limits",
          "memory"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-9",
        "title": "Container is running without privilege escalation control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-9",
        "isGeneratedByCustomRule": false,
        "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
        "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
          "terraform": "Set `spec.container.security_context.allow_privilege_escalation` to `false`"
        },
        "lineNumber": 224,
        "iacDescription": {
          "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
          "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`"
        },
        "publicId": "SNYK-CC-K8S-9",
        "msg": "spec.template.spec.containers[kube-rbac-proxy].securityContext.allowPrivilegeEscalation",
        "references": [
          "https://www.kernel.org/doc/html/latest/userspace-api/no_new_privs.html"
        ],
        "path": [
          "[DocId: 12]",
          "spec",
          "template",
          "spec",
          "containers[kube-rbac-proxy]",
          "securityContext",
          "allowPrivilegeEscalation"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-11",
        "title": "Container's or Pod's  UID could clash with host's UID",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-11",
        "isGeneratedByCustomRule": false,
        "issue": "`runAsUser` value is set to low UID",
        "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
        "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
          "terraform": "Set `security_context.run_as_user` value to greater or equal than 10'000"
        },
        "lineNumber": 224,
        "iacDescription": {
          "issue": "`runAsUser` value is set to low UID",
          "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
          "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence"
        },
        "publicId": "SNYK-CC-K8S-11",
        "msg": "input.spec.template.spec.containers[kube-rbac-proxy].securityContext.runAsUser",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container",
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod",
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 12]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[kube-rbac-proxy]",
          "securityContext",
          "runAsUser"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-8",
        "title": "Container is running with writable root filesystem",
        "severity": "low",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-8",
        "isGeneratedByCustomRule": false,
        "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
        "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
          "terraform": "Set `security_context.read_only_root_filesystem` to `true`"
        },
        "lineNumber": 257,
        "iacDescription": {
          "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
          "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`"
        },
        "publicId": "SNYK-CC-K8S-8",
        "msg": "spec.template.spec.containers[manager].securityContext.readOnlyRootFilesystem",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 12]",
          "spec",
          "template",
          "spec",
          "containers[manager]",
          "securityContext",
          "readOnlyRootFilesystem"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-6",
        "title": "Container does not drop all default capabilities",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-6",
        "isGeneratedByCustomRule": false,
        "issue": "All default capabilities are not explicitly dropped",
        "impact": "Containers are running with potentially unnecessary privileges",
        "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
        "remediation": {
          "kubernetes": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
          "terraform": "Add `ALL` to `spec.container.security_context.capabilities.drop` list, and add only required capabilities to `spec.container.security_context.capabilities.add`, ensuring it also does not contain `ALL`"
        },
        "lineNumber": 257,
        "iacDescription": {
          "issue": "All default capabilities are not explicitly dropped",
          "impact": "Containers are running with potentially unnecessary privileges",
          "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`"
        },
        "publicId": "SNYK-CC-K8S-6",
        "msg": "input.spec.template.spec.containers[manager].securityContext.capabilities.drop",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
          "https://linux-audit.com/linux-capabilities-hardening-linux-binaries-by-removing-setuid/"
        ],
        "path": [
          "[DocId: 12]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[manager]",
          "securityContext",
          "capabilities",
          "drop"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-42",
        "title": "Container could be running with outdated image",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-42",
        "isGeneratedByCustomRule": false,
        "issue": "The image policy does not prevent image reuse",
        "impact": "The container may run with outdated or unauthorized image",
        "resolve": "Set `imagePullPolicy` attribute to `Always`",
        "remediation": {
          "kubernetes": "Set `imagePullPolicy` attribute to `Always`",
          "terraform": "Set `image_pull_policy` attribute to `Always"
        },
        "lineNumber": 224,
        "iacDescription": {
          "issue": "The image policy does not prevent image reuse",
          "impact": "The container may run with outdated or unauthorized image",
          "resolve": "Set `imagePullPolicy` attribute to `Always`"
        },
        "publicId": "SNYK-CC-K8S-42",
        "msg": "spec.template.spec.containers[kube-rbac-proxy].imagePullPolicy",
        "references": [
          "https://kubernetes.io/docs/concepts/containers/images/",
          "https://kubernetes.io/docs/concepts/configuration/overview/#container-images"
        ],
        "path": [
          "[DocId: 12]",
          "spec",
          "template",
          "spec",
          "containers[kube-rbac-proxy]",
          "imagePullPolicy"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-42",
        "title": "Container could be running with outdated image",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-42",
        "isGeneratedByCustomRule": false,
        "issue": "The image policy does not prevent image reuse",
        "impact": "The container may run with outdated or unauthorized image",
        "resolve": "Set `imagePullPolicy` attribute to `Always`",
        "remediation": {
          "kubernetes": "Set `imagePullPolicy` attribute to `Always`",
          "terraform": "Set `image_pull_policy` attribute to `Always"
        },
        "lineNumber": 235,
        "iacDescription": {
          "issue": "The image policy does not prevent image reuse",
          "impact": "The container may run with outdated or unauthorized image",
          "resolve": "Set `imagePullPolicy` attribute to `Always`"
        },
        "publicId": "SNYK-CC-K8S-42",
        "msg": "spec.template.spec.containers[manager].imagePullPolicy",
        "references": [
          "https://kubernetes.io/docs/concepts/containers/images/",
          "https://kubernetes.io/docs/concepts/configuration/overview/#container-images"
        ],
        "path": [
          "[DocId: 12]",
          "spec",
          "template",
          "spec",
          "containers[manager]",
          "imagePullPolicy"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-8",
        "title": "Container is running with writable root filesystem",
        "severity": "low",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-8",
        "isGeneratedByCustomRule": false,
        "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
        "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
          "terraform": "Set `security_context.read_only_root_filesystem` to `true`"
        },
        "lineNumber": 224,
        "iacDescription": {
          "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
          "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`"
        },
        "publicId": "SNYK-CC-K8S-8",
        "msg": "spec.template.spec.containers[kube-rbac-proxy].securityContext.readOnlyRootFilesystem",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 12]",
          "spec",
          "template",
          "spec",
          "containers[kube-rbac-proxy]",
          "securityContext",
          "readOnlyRootFilesystem"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-6",
        "title": "Container does not drop all default capabilities",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-6",
        "isGeneratedByCustomRule": false,
        "issue": "All default capabilities are not explicitly dropped",
        "impact": "Containers are running with potentially unnecessary privileges",
        "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
        "remediation": {
          "kubernetes": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
          "terraform": "Add `ALL` to `spec.container.security_context.capabilities.drop` list, and add only required capabilities to `spec.container.security_context.capabilities.add`, ensuring it also does not contain `ALL`"
        },
        "lineNumber": 224,
        "iacDescription": {
          "issue": "All default capabilities are not explicitly dropped",
          "impact": "Containers are running with potentially unnecessary privileges",
          "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`"
        },
        "publicId": "SNYK-CC-K8S-6",
        "msg": "input.spec.template.spec.containers[kube-rbac-proxy].securityContext.capabilities.drop",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
          "https://linux-audit.com/linux-capabilities-hardening-linux-binaries-by-removing-setuid/"
        ],
        "path": [
          "[DocId: 12]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[kube-rbac-proxy]",
          "securityContext",
          "capabilities",
          "drop"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-41",
        "title": "Container is running without liveness probe",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-41",
        "isGeneratedByCustomRule": false,
        "issue": "Liveness probe is not defined",
        "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
        "resolve": "Add `livenessProbe` attribute",
        "remediation": {
          "kubernetes": "Add `livenessProbe` attribute",
          "terraform": "Add `liveness_probe` attribute"
        },
        "lineNumber": 224,
        "iacDescription": {
          "issue": "Liveness probe is not defined",
          "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
          "resolve": "Add `livenessProbe` attribute"
        },
        "publicId": "SNYK-CC-K8S-41",
        "msg": "spec.template.spec.containers[kube-rbac-proxy].livenessProbe",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/",
          "https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/",
          "https://cloud.google.com/blog/products/gcp/kubernetes-best-practices-setting-up-health-checks-with-readiness-and-liveness-probes"
        ],
        "path": [
          "[DocId: 12]",
          "spec",
          "template",
          "spec",
          "containers[kube-rbac-proxy]",
          "livenessProbe"
        ],
        "compliance": []
      }
    ]
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_serverless/files/knative_eventing.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_serverless/files/knative_eventing.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_serverless/files/knative_serving.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_serverless/files/knative_serving.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_serverless/files/ns-knative-eventing.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_serverless/files/ns-knative-eventing.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_serverless/files/ns-knative-serving.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_serverless/files/ns-knative-serving.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_serverless_ml_workshop/files/checluster.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_serverless_ml_workshop/files/checluster.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_serverless_ml_workshop/files/kafka-channel-configmap.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_serverless_ml_workshop/files/kafka-channel-configmap.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_serverless_ml_workshop/files/kafka-cluster.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_serverless_ml_workshop/files/kafka-cluster.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_serverless_ml_workshop/files/kafka-knative.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_serverless_ml_workshop/files/kafka-knative.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_serverless_ml_workshop/files/knative-eventing.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_serverless_ml_workshop/files/knative-eventing.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_serverless_ml_workshop/files/knative-serving.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_serverless_ml_workshop/files/knative-serving.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_serverless_ml_workshop/files/storage-cluster.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_serverless_ml_workshop/files/storage-cluster.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_servicemesh/files/istio_namespace.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_servicemesh/files/istio_namespace.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_servicemesh/files/service_mesh_control_plane.yaml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_servicemesh/files/service_mesh_control_plane.yaml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_synopsys_blackduck/files/insecure-bank-deployment.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_synopsys_blackduck/files/insecure-bank-deployment.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": false,
    "infrastructureAsCodeIssues": [
      {
        "id": "SNYK-CC-K8S-41",
        "title": "Container is running without liveness probe",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-41",
        "isGeneratedByCustomRule": false,
        "issue": "Liveness probe is not defined",
        "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
        "resolve": "Add `livenessProbe` attribute",
        "remediation": {
          "kubernetes": "Add `livenessProbe` attribute",
          "terraform": "Add `liveness_probe` attribute"
        },
        "lineNumber": 19,
        "iacDescription": {
          "issue": "Liveness probe is not defined",
          "impact": "Kubernetes will not be able to detect if application is able to service requests, and will not restart unhealthy pods",
          "resolve": "Add `livenessProbe` attribute"
        },
        "publicId": "SNYK-CC-K8S-41",
        "msg": "spec.template.spec.containers[insecure-bank].livenessProbe",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/",
          "https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/",
          "https://cloud.google.com/blog/products/gcp/kubernetes-best-practices-setting-up-health-checks-with-readiness-and-liveness-probes"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "containers[insecure-bank]",
          "livenessProbe"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-11",
        "title": "Container's or Pod's  UID could clash with host's UID",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-11",
        "isGeneratedByCustomRule": false,
        "issue": "`runAsUser` value is set to low UID",
        "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
        "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence",
          "terraform": "Set `security_context.run_as_user` value to greater or equal than 10'000"
        },
        "lineNumber": 19,
        "iacDescription": {
          "issue": "`runAsUser` value is set to low UID",
          "impact": "UID of the container processes could clash with host's UIDs and lead to unintentional authorization bypass",
          "resolve": "Set `securityContext.runAsUser` value to greater or equal than 10'000. SecurityContext can be set on both `pod` and `container` level. If both are set, then the container level takes precedence"
        },
        "publicId": "SNYK-CC-K8S-11",
        "msg": "input.spec.template.spec.containers[insecure-bank].securityContext.runAsUser",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container",
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod",
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[insecure-bank]",
          "securityContext",
          "runAsUser"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-8",
        "title": "Container is running with writable root filesystem",
        "severity": "low",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-8",
        "isGeneratedByCustomRule": false,
        "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
        "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`",
          "terraform": "Set `security_context.read_only_root_filesystem` to `true`"
        },
        "lineNumber": 19,
        "iacDescription": {
          "issue": "`readOnlyRootFilesystem` attribute is not set to `true`",
          "impact": "Compromised process could abuse writable root filesystem to elevate privileges",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.readOnlyRootFilesystem` to `true`"
        },
        "publicId": "SNYK-CC-K8S-8",
        "msg": "spec.template.spec.containers[insecure-bank].securityContext.readOnlyRootFilesystem",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "containers[insecure-bank]",
          "securityContext",
          "readOnlyRootFilesystem"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-10",
        "title": "Container or Pod is running without root user control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-10",
        "isGeneratedByCustomRule": false,
        "issue": "Container or Pod is running without root user control",
        "impact": "Container or Pod could be running with full administrative privileges",
        "resolve": "Set `securityContext.runAsNonRoot` to `true`",
        "remediation": {
          "kubernetes": "Set `securityContext.runAsNonRoot` to `true`",
          "terraform": "Set `security_context.run_as_non_root` to `true`"
        },
        "lineNumber": 19,
        "iacDescription": {
          "issue": "Container or Pod is running without root user control",
          "impact": "Container or Pod could be running with full administrative privileges",
          "resolve": "Set `securityContext.runAsNonRoot` to `true`"
        },
        "publicId": "SNYK-CC-K8S-10",
        "msg": "input.spec.template.spec.containers[insecure-bank].securityContext.runAsNonRoot",
        "description": "",
        "references": [
          "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[insecure-bank]",
          "securityContext",
          "runAsNonRoot"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-6",
        "title": "Container does not drop all default capabilities",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-6",
        "isGeneratedByCustomRule": false,
        "issue": "All default capabilities are not explicitly dropped",
        "impact": "Containers are running with potentially unnecessary privileges",
        "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
        "remediation": {
          "kubernetes": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`",
          "terraform": "Add `ALL` to `spec.container.security_context.capabilities.drop` list, and add only required capabilities to `spec.container.security_context.capabilities.add`, ensuring it also does not contain `ALL`"
        },
        "lineNumber": 19,
        "iacDescription": {
          "issue": "All default capabilities are not explicitly dropped",
          "impact": "Containers are running with potentially unnecessary privileges",
          "resolve": "Add `ALL` to `securityContext.capabilities.drop` list, and add only required capabilities in `securityContext.capabilities.add`"
        },
        "publicId": "SNYK-CC-K8S-6",
        "msg": "input.spec.template.spec.containers[insecure-bank].securityContext.capabilities.drop",
        "references": [
          "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
          "https://linux-audit.com/linux-capabilities-hardening-linux-binaries-by-removing-setuid/"
        ],
        "path": [
          "[DocId: 0]",
          "input",
          "spec",
          "template",
          "spec",
          "containers[insecure-bank]",
          "securityContext",
          "capabilities",
          "drop"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-42",
        "title": "Container could be running with outdated image",
        "severity": "low",
        "isIgnored": false,
        "subType": "Deployment",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-42",
        "isGeneratedByCustomRule": false,
        "issue": "The image policy does not prevent image reuse",
        "impact": "The container may run with outdated or unauthorized image",
        "resolve": "Set `imagePullPolicy` attribute to `Always`",
        "remediation": {
          "kubernetes": "Set `imagePullPolicy` attribute to `Always`",
          "terraform": "Set `image_pull_policy` attribute to `Always"
        },
        "lineNumber": 19,
        "iacDescription": {
          "issue": "The image policy does not prevent image reuse",
          "impact": "The container may run with outdated or unauthorized image",
          "resolve": "Set `imagePullPolicy` attribute to `Always`"
        },
        "publicId": "SNYK-CC-K8S-42",
        "msg": "spec.template.spec.containers[insecure-bank].imagePullPolicy",
        "references": [
          "https://kubernetes.io/docs/concepts/containers/images/",
          "https://kubernetes.io/docs/concepts/configuration/overview/#container-images"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "containers[insecure-bank]",
          "imagePullPolicy"
        ],
        "compliance": []
      },
      {
        "id": "SNYK-CC-K8S-9",
        "title": "Container is running without privilege escalation control",
        "severity": "medium",
        "isIgnored": false,
        "subType": "Pod",
        "documentation": "https://security.snyk.io/rules/cloud/SNYK-CC-K8S-9",
        "isGeneratedByCustomRule": false,
        "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
        "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
        "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
        "remediation": {
          "kubernetes": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`",
          "terraform": "Set `spec.container.security_context.allow_privilege_escalation` to `false`"
        },
        "lineNumber": 19,
        "iacDescription": {
          "issue": "`allowPrivilegeEscalation` attribute is not set to `false`",
          "impact": "Processes could elevate current privileges via known vectors, for example SUID binaries",
          "resolve": "Set `spec.{containers, initContainers}.securityContext.allowPrivilegeEscalation` to `false`"
        },
        "publicId": "SNYK-CC-K8S-9",
        "msg": "spec.template.spec.containers[insecure-bank].securityContext.allowPrivilegeEscalation",
        "references": [
          "https://www.kernel.org/doc/html/latest/userspace-api/no_new_privs.html"
        ],
        "path": [
          "[DocId: 0]",
          "spec",
          "template",
          "spec",
          "containers[insecure-bank]",
          "securityContext",
          "allowPrivilegeEscalation"
        ],
        "compliance": []
      }
    ]
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_synopsys_blackduck/files/insecure-bank-route.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_synopsys_blackduck/files/insecure-bank-route.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  },
  {
    "meta": {
      "isPrivate": true,
      "isLicensesEnabled": false,
      "ignoreSettings": {
        "adminOnly": false,
        "reasonRequired": false,
        "disregardFilesystemIgnores": false
      },
      "org": "mbissine2022",
      "orgPublicId": "a4e8e0af-6ef6-42f7-ba8c-edc4687b1910",
      "policy": ""
    },
    "filesystemPolicy": false,
    "vulnerabilities": [],
    "dependencyCount": 0,
    "licensesPolicy": null,
    "ignoreSettings": null,
    "targetFile": "ansible/roles_ocp_workloads/ocp4_workload_synopsys_blackduck/files/insecure-bank-service.yml",
    "projectName": "agnosticd",
    "org": "mbissine2022",
    "policy": "",
    "isPrivate": true,
    "targetFilePath": "/home/mbissine/snyk_ansible/agnosticd/ansible/roles_ocp_workloads/ocp4_workload_synopsys_blackduck/files/insecure-bank-service.yml",
    "packageManager": "k8sconfig",
    "path": "/home/mbissine/snyk_ansible/agnosticd",
    "projectType": "k8sconfig",
    "ok": true,
    "infrastructureAsCodeIssues": []
  }
]